{import: io_contabil.Database};
{import: io_contabil.Regras};
{import: io_contabil.Util};
{import: io_contabil.Belvo};
{import: io_contabil.DatabasePostgreSQL};

public JSONArray run(InoutLogger logger) throws Exception {


    ////////////////////////////////////////////
    // *** testa usando cnpj ottimizza
    boolean testeD			= false;
    boolean possuiMCTeste	= false;



    // gera seguranca nas conexoes com Heroku
    // Create a trust manager that does not validate certificate chains
    javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[] {
        new javax.net.ssl.X509TrustManager(){
            public java.security.cert.X509Certificate[] getAcceptedIssuers(){ return null; }
            public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) { }
            public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) { }
        }
    };

    // Install the all-trusting trust manager
    try {
        javax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext.getInstance("TLS");
        sc.init(null, trustAllCerts, new java.security.SecureRandom());
        javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
    } catch (Exception e) {
        // 
    }


    DatabasePostgreSQL sqlDatabase	= new DatabasePostgreSQL();
    DBPostgreSQL dbPartner			= null;
    DBPostgreSQL dbIntegrador		= null;
    DBPostgreSQL dbBelvo			= null;
    DBPostgreSQL dbOauth			= null;

    JSONArray cnpjs		   = new JSONArray();
    LancamentosApi belvo   = new LancamentosApi();
    StringBuilder uri	   = new StringBuilder();
    JSONObject objCora	   = new JSONObject();
    JSONObject objbelvo	   = new JSONObject();
    JSONArray objEmpresas  = new JSONArray();
	JSONArray lancamentosBelvo = new JSONArray();
    JSONObject objEmpresa  = new JSONObject();
	JSONObject objBelvo	   = new JSONObject();
	
	StringBuilder podemLer = new StringBuilder();
	StringBuilder txtFinalPAG = new StringBuilder();
    StringBuilder txtFinalREC = new StringBuilder();
	StringBuilder lancamentos = new StringBuilder();

    String url			 = belvo.SERVER_BELVO;
    String urn			 = belvo.IMPORTAR_BELVO;

    String cnpjContabilidade = "";
    String cnpj		 = "";
    String start		= "";	// yyyy-MM-dd
    String end			= "";	// yyyy-MM-dd
    String empresa		= "";	 
    String codEmpresa   = "";

    SysProperties propsCont	= SysProperties.getInstance(); 
    SysProperties props		= SysProperties.getInstance(); 
    String contabilidade	= "";
    boolean possuiMeuCaixa	= false;
    String hoje				= DateUtil.dateToString(new Date(),"dd/MM/yyyy");
    String dia				= cutString(hoje, 0, "/");
    double saldo			= 0;
	
    try { 
        end			= getCampoDate(getPreviousDay(hoje, -1, false),"dd/MM/yyyy","yyyy-MM-dd");
		start       = DateUtil.dateToString(subDaysToDate(new Date(), 90), "yyyy-MM-dd");
        
        start		= cutString(start, 0, 8)+"-01";
    } catch (Exception e) {
        start		= "";
        end			= "";
    }
 
    // PARA TRAZER TODO O RETROATIVO DO CLIENTE
	logger.logInfo("DateRange -> "+start+"-"+end);
    try {
        propsCont.load("/contabil/Ottimizza/routes.properties");
        dbBelvo	= DatabasePostgreSQL.connectDatabase("api-parceiros-belvo", logger);
        dbOauth = DatabasePostgreSQL.connectDatabase("api-oauth-follower", logger);
 
        objEmpresas = sqlDatabase.buscaLinkBelvoHoje(dbBelvo, logger);
		//objEmpresas = sqlDatabase.buscaLinkBelvo(dbBelvo, logger);
		
        for(int i = 0; i<objEmpresas.length(); i++) {
            String link = objEmpresas.optJSONObject(i).optString("link");
            String institution  = objEmpresas.optJSONObject(i).optString("institution");
            String externalId = objEmpresas.optJSONObject(i).optString("externalId");
            
            objEmpresa = sqlDatabase.buscaEmpresaOauth(dbOauth, externalId, logger);
			logger.logInfo("Lendo empresa -> "+objEmpresa.toString());
            try {
                cnpj		  = objEmpresa.optString("cnpjEmpresa");
                cnpjContabilidade = objEmpresa.optString("cnpjContabilidade");
            }
            catch (Exception xx) {
                cnpj			= "";
                cnpjContabilidade	= "";
            }
 
            // ignora sujeiras
            if (cnpj == null) continue;
            if (cnpjContabilidade == null) continue;
            if (cnpj.equals("")) continue;
            if (cnpjContabilidade.equals("")) continue;

			String fileBelvoString = String.format("/inout/contabil/Ottimizza/Belvo/"+cnpjContabilidade+"_"+cnpj+"_"+institution+".txt");
			File fileBelvo = new File(fileBelvoString);
			if (!fileBelvo.exists()) {
				FileWriter 	arquioBelvo = new FileWriter(fileBelvoString);
				arquioBelvo.writeNewFile(cnpjContabilidade+"_"+cnpj+"_"+institution+".txt");
				podemLer.append(cnpj).append(";");
			}
			else {
				if (!podemLer.toString().contains(cnpj)) continue;
			}
            podemLer.append(cnpj).append(";");
            
            txtFinalPAG = new StringBuilder();
            txtFinalREC = new StringBuilder();
			lancamentos = new StringBuilder();
			lancamentos.append("[");

            txtFinalPAG.append("ARQUIVO GERADO PELA PARCERIA COM A BELVO");
            txtFinalPAG.append("\n\r");
            txtFinalREC.append("ARQUIVO GERADO PELA PARCERIA COM A BELVO");
            txtFinalREC.append("\n\r");

            uri	= new StringBuilder();
			uri.append(url).append(urn).append("?link=").append(link);
            if (!start.equals("") && !end.equals("")) {
                String dateRange = start+","+end;
                uri.append("&value_date__range=").append(dateRange);
            }	
  		
			for (int offset=1;offset<100;offset++) {
                String urlExtrato = uri.toString()+"&page="+offset;
                
				try { 
					String buscabelvo = "";
					try{
						buscabelvo = belvo.genericGet(urlExtrato, "application/json");
					}catch(Exception exceptionGet){
						logger.logInfo("Problema buscar belvo "+exceptionGet.getMessage());
                        break;
					}
                    objBelvo	= new JSONObject(buscabelvo);
					if (objBelvo.has("results") && !objBelvo.optString("results").equals("")) {
						JSONArray jArr		= new JSONArray(objBelvo.optString("results"));   
						JSONObject obj 		= new JSONObject();
		
						if(offset == 0) 
							lancamentos.append(jArr.toString());
						else {
							String lancamentoAsaas = jArr.toString();
							lancamentos.append(lancamentoAsaas.substring(1));
						}
					}
                    else {
			            logger.logInfo("nao achou results");
                        break;
                    }
                    
 				} catch (Exception e) {
                    logger.logInfo("ERROR 75 "+e.getMessage());
                    break;
                }
				// quando nao tiver mais paginas para ler do extrato, break para ir para o proximo CNPJ             
				if (objBelvo.has("next") && (objBelvo.optString("next").toUpperCase().contains("NULL") || objBelvo.optString("next") == null)) break;
                if (objBelvo.has("next") && objBelvo.optString("next").toUpperCase().equals("")) break;
                if (!objBelvo.has("next")) break;
			}
			try {
				String recordsBelvo = lancamentos.toString().replaceAll("]",",");
				recordsBelvo = recordsBelvo.substring(0, recordsBelvo.length()-1)+"]";
				lancamentosBelvo = new JSONArray(recordsBelvo);
			}
			catch(Exception ex) {
				logger.logInfo("ERROR CAST TRANSACTIONS -> "+ex.getMessage());
			}
			for (int y = 0; y <lancamentosBelvo.length(); y++) {
				JSONObject objArr		= lancamentosBelvo.getJSONObject(y);
                JSONObject objAccount	= new JSONObject(objArr.optString("account"));   
	
                objArr.put("PARTNER_OTTIMIZZA", "BELVO");
	
				String tipoMov = objArr.optString("type");
				if(tipoMov.contains("INFLOW")) {
					txtFinalREC.append(objArr.toString());
					txtFinalREC.append("\n\r");
				}
				else {
					txtFinalPAG.append(objArr.toString());
					txtFinalPAG.append("\n\r");
				}
			}
			
			try {
				contabilidade	= toDisplayCase(propsCont.get(cnpjContabilidade));
				props.load("/contabil/" + contabilidade + "/contabil.properties");
				empresa	= props.get(cnpj);             
				codEmpresa = props.get(empresa.toUpperCase() + "_COD_EMPRESA");			
			} catch (Exception xx) {
				logger.logError("ERROR 171 "+cnpjContabilidade);
				continue;
			}
            
			String compDirName = empresa + "_#" + codEmpresa; 
			String dirNamePAG = RouteEngine.INOUT_HOME+"/contabil/"+contabilidade+"/"+compDirName+"/APagar/BELVO_"+cnpj+"_"+institution+"_"+DateUtil.dateToString(new Date(),"yyyyMM") + ".omc";
			FileWriter 	arquivoTpPAG = new FileWriter(dirNamePAG);
            arquivoTpPAG.writeNewFile(txtFinalPAG.toString()); 
			
			String dirNameREC = RouteEngine.INOUT_HOME+"/contabil/"+contabilidade+"/"+compDirName+"/AReceber/BELVO_"+cnpj+"_"+institution+"_"+DateUtil.dateToString(new Date(),"yyyyMM") + ".omc";
			FileWriter 	arquivoTpREC = new FileWriter(dirNameREC);
            arquivoTpREC.writeNewFile(txtFinalREC.toString()); 
            
            //VITOR 25/02/2022 TXT GENERATOR TEST
            try {
                String conteudoTXT = TXTcontentGenerator( "BELVO-" + institution, 
                                                         props.get("CONTABILIDADE_NOME"), 
                                                         props.get("CONTABILIDADE_ID"), 
                                                         empresa);
                // logger.logInfo(conteudoTXT);
                String result = TXTfileGenerator(conteudoTXT);
                // logger.logInfo(result);
            } catch(Exception e) {
                logger.logError("ERROR TRYING TO GET PROPERTIES" +e.toString());
            }
        }



    } catch (Exception xx) {
		logger.logInfo("ERROR PRINCIPAL -> "+xx.getMessage());
	}
    if (dbPartner	 != null) dbPartner.closeConnection();
    if (dbIntegrador != null) dbIntegrador.closeConnection();
    if (dbBelvo != null) 	  dbBelvo.closeConnection();    

    return new JSONArray();
}
