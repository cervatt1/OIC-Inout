/**
 * Esse metodo eh chamado pelo servico e sua assinatura NAO DEVE SER ALTERADA.
 * Ele deve retornar uma string com o conteudo que serah acrescentado no 
 * script da ROTA.
 */
public String prepareScript(String idRoteiro, String empresa, String empresaDir,
                            String contabilidade, String tipoIntegracao, 
                            PartnerConnection sfCon,  InoutLogger logger) 
                            throws Exception {
    //
 
	boolean roteiroNovo = false;
	boolean roteiroPadrao = false;
	
	// Quando um roteiro  eh exportado pelow oworkflow, temos o OTTPADRAO preesnte, para sabe se vamos ou nao exportar o roteiro secundario padrao para o template.	
	if (empresa.contains("OTTPADRAO")) {
		roteiroPadrao = true;
		empresa = cutString(empresa, "OTTPADRAO");	
	}
	 
	DBPostgreSQL dbNuvem = null;
	try {
		dbNuvem = connectNuvemDb(logger);
	}
	catch (Exception ex) {logger.logInfo("Erro ao estabelecer conexao com o DB da nuvem: " + ex.getMessage());}
 
	//String compGetConta = empresa +tipoIntegracao.replaceAll(" ","");						//---------------------------
	String INOUT_URL = "http://localhost:8055";
    try {
        HashMap<String, Boolean> routesMap = new HashMap<String, Boolean>();
        routesMap.put(String.format("%s.Workflow_Rotas_Contabeis", contabilidade), Boolean.valueOf(false));
        routesMap.put(String.format("%s.%s_ContasPagas", contabilidade, contabilidade), Boolean.valueOf(false));
        routesMap.put(String.format("%s.%s_ContasRecebidas", contabilidade, contabilidade), Boolean.valueOf(false));
        
        String token = this.getToken(INOUT_URL);

        // URL para listagem de Rotas.
        java.net.URL url = new java.net.URL(String.format("%s/inout/rest/inoutservice/getRouteIdsList/%s", INOUT_URL, token));
        java.net.URLConnection conLogin = url.openConnection();

        String result = convertStreamToString(conLogin.getInputStream());
		

        JSONObject jsResult = new JSONObject(result);
        JSONObject jsRecord = jsResult.optJSONObject("record");
        JSONArray jsArrayRoutes = jsRecord.optJSONArray("routeIds");

        String[] arrRouteIds = new String[jsArrayRoutes.length()];
        for (int i = 0; i < jsArrayRoutes.length(); i++) {
            arrRouteIds[i] = jsArrayRoutes.optString(i);
        }
        for (String route : arrRouteIds) {
            if (route.contains(contabilidade)) {

                Iterator routeIterator01 = routesMap.keySet().iterator();
                while (routeIterator01.hasNext()) {
                    String key = (String) routeIterator01.next();
                    if (key.equals(route)) {
                        routesMap.put(key, Boolean.valueOf(true));
                    }
                }
            }
        }

        Iterator routeIterator02 = routesMap.keySet().iterator();
        while (routeIterator02.hasNext()) {
            String key = (String) routeIterator02.next();
            
            //if (routesMap.get(key) == Boolean.FALSE) {
            //    this.createRoute(INOUT_URL, key.replace(contabilidade, "Ottimizza"), contabilidade, key.substring(key.indexOf(".") + 1), token);
                
            //    if (key.contains("Workflow")) switchRoute(INOUT_URL, token, key);
                
            //}
        }

    } catch (Exception ex) {
        
    }


	
 // Obtem o Roteiro /////////////////////////////////////////////////
    StringBuilder sql = new StringBuilder();
    sql.append("SELECT Name, Instrucoes_Fechamento__c, Roteiros_Especificos_PG__c, Roteiros_Especificos_REC__c, Roteiros_Especificos_REC_II__c, Roteiros_Especificos_REC_III__c, Ler_planilhas_padroes__c, Clonar_Script_da_Empresa__c, Confirmo_desejo_apagar_integracao__c, Bussola_Contabil__c, Arredonda__c, Desejo_apagar_integracao__c, OIC_30__c, ID_Roteiro_Adicional__c, ID_Roteiro_Cartoes__c, ID_Roteiro_Grupo__c, ERP_Contabilidade__c, Codigo_ERP__c ")
       .append("FROM Roteiros__c WHERE Id='").append(idRoteiro).append("'");
    
	String apagarRota = "";
	String confirmaApagarRota = "";
	String codigo_roteiro = "";

	String Roteiro_Cartoes = "";
	String Roteiro_Grupo   = "";
	String Roteiro_Adicional = "";
	String Bussola_Contabil = "";
	String OIC_30 = "";
	String Clonar_Script_da_Empresa = "";
	String Ler_planilhas_padroes = "";
	String roteirosContabilidadePG = "";
	String roteirosContabilidadeREC = "";
	
	String ERPContabilidade = "";
	String codEmpresa = "";
	
	
    QueryResult qres1 = sfCon.query(sql.toString());
    if (qres1.getSize() > 0) {
	
		SObject rot = qres1.getRecords()[0];

		StringBuilder Instrucoes_Fechamento =  new StringBuilder();
		String inicio = "";
		
		
		Object campoOb = rot.getField("Instrucoes_Fechamento__c");
		if (campoOb != null) inicio = campoOb.toString();
		if (inicio.length() < 5) inicio = "Não há instruções especiais para fechamento desta empresa/processo. Basta carregar os arquivos/planilhas através do botão abaixo.";
		Instrucoes_Fechamento.append(inicio);
		
		campoOb = rot.getField("ERP_Contabilidade__c");
		if (campoOb != null) ERPContabilidade = campoOb.toString();
		
		campoOb = rot.getField("Codigo_ERP__c");
		if (campoOb != null) codEmpresa = campoOb.toString();
		
		campoOb = rot.getField("Desejo_apagar_integracao__c");
		if (campoOb != null) apagarRota = campoOb.toString();
		campoOb = rot.getField("Confirmo_desejo_apagar_integracao__c");
		if (campoOb != null) confirmaApagarRota = campoOb.toString();
		
		
		campoOb = rot.getField("Roteiros_Especificos_PG__c");
		if (campoOb != null) roteirosContabilidadePG = campoOb.toString(); 

		campoOb = rot.getField("Roteiros_Especificos_REC__c");
		if (campoOb != null) roteirosContabilidadeREC = campoOb.toString(); 

		campoOb = rot.getField("Roteiros_Especificos_REC_II__c");
		if (campoOb != null && !campoOb.toString().equals("")) roteirosContabilidadeREC = roteirosContabilidadeREC = roteirosContabilidadeREC + ";" + campoOb.toString(); 
		
		campoOb = rot.getField("Roteiros_Especificos_REC_III__c");
		if (campoOb != null && !campoOb.toString().equals("")) roteirosContabilidadeREC = roteirosContabilidadeREC = roteirosContabilidadeREC + ";" + campoOb.toString(); 
		
		roteirosContabilidadeREC = roteirosContabilidadeREC.replaceAll(",",";");
		roteirosContabilidadePG = roteirosContabilidadePG.replaceAll(",",";");
				
		campoOb = rot.getField("Ler_planilhas_padroes__c");
		if (campoOb != null) Ler_planilhas_padroes = campoOb.toString(); 
		
		campoOb = rot.getField("Bussola_Contabil__c");
		if (campoOb != null) Bussola_Contabil = campoOb.toString();
		
		campoOb = rot.getField("OIC_30__c");
		if (campoOb != null) OIC_30 = campoOb.toString();
		 
		
		campoOb = rot.getField("ID_Roteiro_Cartoes__c");
		if (campoOb != null) Roteiro_Cartoes = campoOb.toString();
		campoOb = rot.getField("ID_Roteiro_Grupo__c");
		if (campoOb != null) Roteiro_Grupo = campoOb.toString();
		
		campoOb = rot.getField("ID_Roteiro_Adicional__c");
		if (campoOb != null) Roteiro_Adicional = campoOb.toString();
		
		campoOb = rot.getField("Clonar_Script_da_Empresa__c");
		if (campoOb != null) Clonar_Script_da_Empresa = campoOb.toString();
		
		campoOb = rot.getField("Name");
		if (campoOb != null) codigo_roteiro = campoOb.toString(); 
		
		
		String arquivoInstrucoes  = "c:/inout/contabil/ottimizza/Instrucoes/" + contabilidade + "_" + empresa + "_" + tipoIntegracao + "_" + idRoteiro + ".txt";
		
		File delAntigo  = new File("c:/inout/contabil/ottimizza/Instrucoes/" + contabilidade + "_" + empresa + "_" + tipoIntegracao + ".txt");
		if(delAntigo.exists()) delAntigo.delete();
		
		FileWriter writer = new FileWriter(arquivoInstrucoes);
		writer.writeNewFile(Instrucoes_Fechamento.toString());
	}
	
	File arquivoDestino  = new File("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + "_ContasPagasEndpointA.script");
	if (tipoIntegracao.toUpperCase().contains("RECEB")) {
		arquivoDestino  = new File("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + empresa + "_ContasRecebidasEndpointA.script");
	}
	if(!arquivoDestino.exists() || Bussola_Contabil.toUpperCase().equals("TRUE") || (apagarRota.toUpperCase().equals("TRUE") && confirmaApagarRota.toUpperCase().equals("TRUE"))) {
	
		File arquivoOrigem = new File("c:/ottimizza/dropbox/deploy/routes/ottimizza/TemplateOficialAtualEndpointA.script");
		if (Roteiro_Cartoes.startsWith("a0A1C00000iWJg3")) arquivoOrigem = new File("C:/ottimizza/Dropbox/Deploy/routes/Tecolmg/Acessonorte_ContasRecebidasEndpointA.script");
		if (Bussola_Contabil.toUpperCase().equals("TRUE")) arquivoOrigem = new File("C:/ottimizza/Dropbox/Deploy/routes/Bussolafinanceira/LeituraBalanceteEndpointA.script");

		// quando for empresa nova ou estiver marcada como oic 3.0 usar novo template e exportar regras de cartoes no final 
		if (!Bussola_Contabil.toUpperCase().equals("TRUE")) {
			arquivoOrigem = new File("c:/ottimizza/dropbox/deploy/routes/ottimizza/TemplateOficialAtualEndpointA.script");
			roteiroNovo = true;
		}
		
		if (!Clonar_Script_da_Empresa.equals(""))  {
			if (!Clonar_Script_da_Empresa.contains("/")) {
				if (tipoIntegracao.toUpperCase().contains("PAGA")) arquivoOrigem =  new File("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + Clonar_Script_da_Empresa + "_ContasPagasEndpointA.script");
				if (tipoIntegracao.toUpperCase().contains("RECEB")) arquivoOrigem =  new File("c:/ottimizza/dropbox/deploy/routes/" + contabilidade + "/" + Clonar_Script_da_Empresa + "_ContasRecebidasEndpointA.script");
			}
			if (Clonar_Script_da_Empresa.contains("/")) {
				if (tipoIntegracao.toUpperCase().contains("PAGA"))   arquivoOrigem =  new File("c:/ottimizza/dropbox/deploy/routes/" + Clonar_Script_da_Empresa + "_ContasPagasEndpointA.script");
				if (tipoIntegracao.toUpperCase().contains("RECEB"))  arquivoOrigem =  new File("c:/ottimizza/dropbox/deploy/routes/" + Clonar_Script_da_Empresa + "_ContasRecebidasEndpointA.script");
			}
		}
		
		
		

		FileUtil.copyFolder(arquivoOrigem, arquivoDestino);
		
	}
	
	// logger.logInfo("OIC 30 == "+OIC_30.toUpperCase()+" | RT == "+roteiroPadrao+" | BUSS == "+Bussola_Contabil.toUpperCase()+" | CL == "+Clonar_Script_da_Empresa);
	
	if ((OIC_30.toUpperCase().contains("TRUE") || roteiroPadrao) && 
	    !Bussola_Contabil.toUpperCase().equals("TRUE") && Clonar_Script_da_Empresa.equals("")) roteiroNovo = true;
 	 	
	
	/* --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
     * Realiza Queries para 'Roteiros_vs_Contas__c' e 'Roteiro_vs_Historio__c' e salva QueryResults para evitar alto 
     * número de usos de API.
     --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--*/
    StringBuilder sb_Contas__c = new StringBuilder ();
    StringBuilder sb_Historico__Conta_c = new StringBuilder ();
	StringBuilder sb_Historico__c = new StringBuilder ();
	
	logger.logInfo(" ID ROTEIRO == "+idRoteiro+" | ROT C == "+Roteiro_Cartoes+" | RG == "+Roteiro_Grupo+" RA == "+Roteiro_Adicional);

    /* WHERE (Roteiro__c = 'idRoteiro' or Roteiro__c = 'idRoteiroCartoes' or Roteiro__c = 'idRoteiroGrupo') */
    sb_Contas__c.append("SELECT ")
				.append("name, Seq_Roteiro__c, Centro_Custo_Sera__c, Contabilidade__c, Conta_Desconto__c, Conta_Juros__c, Conta_Movimento__c, ")
				.append("Conta_Multa__c, Conta_Pai_quando_Participante__c, Conta_Portador__c, Contas_DFC__c, ")
				.append("Conta_Ser__c, Continua__c, E_01__c, E_02__c, E_03__c, E_04__c, Filial__c, ID_Externo_OLD__c, ")
				.append("ID_Externo__c,  Inout_processed__c,  Inverte_Contas__c, Item_DFC__c, Mes_Ano_Base__c, ")
				.append("O_texto_01__c, O_texto_02__c, O_texto_03__c, O_texto_04__c, O_texto_05__c, Coluna_Alternativa__c, Campo_Coluna_Alternativa__c, ")
				.append("Parcela_Inicial__c, Resumo_Regra__c, Roteiro__c, Roteiro_Destino__c, Se_Campo__c, Codigo_Fiscal__c, ")
				.append("Segue_Para__c, Tabela_Contabil__c,  Taxa_Tarifa__c, Total_de_Parcelas__c, Tratar_como__c, Modificar_Data__c, ")
				.append("Valores_Parcela_pre_fixada__c, Valor_Multa__c, Valor_Principal__c, RecordTypeId, Debito_Credito__c, Filial_DIV__c, Classificacao__c, Tipo_DIV__c, Tipo_Grafico__c, Rotulos__c, Titulo_Grafico__c, Simbolo_Valor__c, Codigo_Roteiro__c ")
				.append("FROM Roteiros_vs_Contas__c ")
				// 20102023 comentado o de producao substituido pelo de s5 .append("WHERE (Roteiro__c='").append(idRoteiro).append("' or Roteiro__c='").append(Roteiro_Cartoes).append("' or Roteiro__c='").append(Roteiro_Grupo).append("' or Roteiro__c='").append(Roteiro_Adicional).append("') ");
				.append("WHERE O_texto_01__c <> 'INATIVA' and (Roteiro__c='").append(idRoteiro).append("' or Roteiro__c='").append(Roteiro_Cartoes).append("' or Roteiro__c='").append(Roteiro_Grupo).append("' or Roteiro__c='").append(Roteiro_Adicional).append("'");
				
 
//  O_texto_01__c != 'INATIVA' and 
  
				if (Ler_planilhas_padroes.toUpperCase().equals("TRUE")) sb_Contas__c.append(" OR  recordTypeRoteiro__c = '0121C000001lBuD'");

				if (!roteirosContabilidadePG.equals("") /*&& Ler_planilhas_padroes.toUpperCase().equals("TRUE")*/ && tipoIntegracao.toUpperCase().contains("PAG")) {
					sb_Contas__c.append(" or Codigo_Roteiro__c = '").append(roteirosContabilidadePG.replaceAll(";","' or Codigo_Roteiro__c = '")).append("' ");
				}
				if (!roteirosContabilidadeREC.equals("") /*&& Ler_planilhas_padroes.toUpperCase().equals("TRUE")*/ && tipoIntegracao.toUpperCase().contains("RECEB")) {
					sb_Contas__c.append(" or Codigo_Roteiro__c = '").append(roteirosContabilidadeREC.replaceAll(";","' or Codigo_Roteiro__c = '")).append("' ");
				}
				
 				
 				sb_Contas__c.append(") ORDER BY Seq_Roteiro__c");
				
     	// logger.logInfo("SQL CONTA = " + sb_Contas__c.toString());

	
    sb_Historico__Conta_c.append("SELECT ")
		.append("Campo_01__c, Campo_02__c, Campo_03__c, Campo_04__c, Campo_05__c, Texto_02__c, Texto_03__c, Texto_04__c, ")
		.append("Texto_05__c, Codigo_Historico__c, Conta_Juros__c, Conta_Movimento__c, Conta_Multa__c, Continua__c, ")
		.append("Cortar_Ate_Indice__c, Cortar_Ate_Texto__c, Cortar_a_Partir_do_indice__c, Cortar_a_Partir_do_Texto__c, ")
		.append("E_02__c, E_03__c, E_04__c, E_05__c, ID_Externo__c, Inverte_Conta__c, O_Texto_01__c, O_Texto_02__c, ")
		.append("O_Texto_03__c, O_Texto_04__c, O_Texto_05__c, Parcela_Referencia__c, Quando_Conta_Igual__c, ")
		.append("Exemplo_Historico__c, Roteiro__c, Se_campo__c, Termo_Destino__c, Termo_Origem__c, ")
		.append("Texto_01__c, Tipo_Historico__c, Total_de_Parcelas__c, Valores_Principais_Variaveis__c,  Campo_a_ser_Limpo__c, ")
		.append("Valor_Fixo_Juros__c, Valor_Fixo_Multa__c, Valor_Principal__c, RecordTypeId ")
		.append("FROM Roteiro_vs_Historio__c ")
		.append("WHERE (Roteiro__c='").append(idRoteiro).append("' or Roteiro__c='").append(Roteiro_Cartoes).append("' or Roteiro__c='").append(Roteiro_Grupo).append("' or Roteiro__c='").append(Roteiro_Adicional).append("') ");
		
		if (!roteirosContabilidadePG.equals("") /*&& Ler_planilhas_padroes.toUpperCase().equals("TRUE")*/ && tipoIntegracao.toUpperCase().contains("PAG")) {
			sb_Historico__Conta_c.append(" or Codigo_Roteiro__c = '").append(roteirosContabilidadePG.replaceAll(";","' or Codigo_Roteiro__c = '")).append("' ");
		}
		if (!roteirosContabilidadeREC.equals("") /*&& Ler_planilhas_padroes.toUpperCase().equals("TRUE")*/ && tipoIntegracao.toUpperCase().contains("RECEB")) {
			sb_Historico__Conta_c.append(" or Codigo_Roteiro__c = '").append(roteirosContabilidadeREC.replaceAll(";","' or Codigo_Roteiro__c = '")).append("' ");
		} 

		sb_Historico__Conta_c.append(" ORDER BY Quando_Conta_Igual__c");
		
		logger.logInfo("Roteiros " + idRoteiro + " | " + Roteiro_Cartoes + " | " + Roteiro_Adicional + " | " + Roteiro_Grupo + " | " + roteirosContabilidadePG);

	sb_Historico__c.append("SELECT ")
		.append("Campo_01__c, Campo_02__c, Campo_03__c, Campo_04__c, Campo_05__c, Texto_02__c, Texto_03__c, Texto_04__c, ")
		.append("Texto_05__c, Codigo_Historico__c, Conta_Juros__c, Conta_Movimento__c, Conta_Multa__c, Continua__c, ")
		.append("Cortar_Ate_Indice__c, Cortar_Ate_Texto__c, Cortar_a_Partir_do_indice__c, Cortar_a_Partir_do_Texto__c, ")
		.append("E_02__c, E_03__c, E_04__c, E_05__c, ID_Externo__c, Inverte_Conta__c, O_Texto_01__c, O_Texto_02__c, ")
		.append("O_Texto_03__c, O_Texto_04__c, O_Texto_05__c, Parcela_Referencia__c, Quando_Conta_Igual__c, ")
		.append("Exemplo_Historico__c, Roteiro__c, Se_campo__c, Termo_Destino__c, Termo_Origem__c, Codigo_Roteiro__c, ")
		.append("Texto_01__c, Tipo_Historico__c, Total_de_Parcelas__c, Valores_Principais_Variaveis__c,  Campo_a_ser_Limpo__c, Seq_Roteiro__c, ")
		.append("Valor_Fixo_Juros__c, Valor_Fixo_Multa__c, Valor_Principal__c, RecordTypeId ")
	    .append("FROM Roteiro_vs_Historio__c ")
        .append("WHERE (Roteiro__c='").append(idRoteiro).append("' or Roteiro__c='").append(Roteiro_Cartoes).append("' or Roteiro__c='").append(Roteiro_Grupo).append("' or Roteiro__c='").append(Roteiro_Adicional).append("' ");

		if (!roteirosContabilidadePG.equals("") /*&& Ler_planilhas_padroes.toUpperCase().equals("TRUE")*/ && tipoIntegracao.toUpperCase().contains("PAG")) {
			sb_Historico__c.append(" or Codigo_Roteiro__c = '").append(roteirosContabilidadePG.replaceAll(";","' or Codigo_Roteiro__c = '")).append("' ");
		}
		if (!roteirosContabilidadeREC.equals("") /*&& Ler_planilhas_padroes.toUpperCase().equals("TRUE")*/ && tipoIntegracao.toUpperCase().contains("RECEB")) {
			sb_Historico__c.append(" or Codigo_Roteiro__c = '").append(roteirosContabilidadeREC.replaceAll(";","' or Codigo_Roteiro__c = '")).append("' ");
		} 
		
		sb_Historico__c.append(") ORDER BY Seq_Roteiro__c");
		
		 

   // Realiza queries no crm.
    QueryResult qr_Contas__c    = sfCon.query(sb_Contas__c.toString());
    QueryResult qr_Contas__c2    = null;
    QueryResult qr_Historico__Conta_c = sfCon.query(sb_Historico__Conta_c.toString());
	QueryResult qr_Historico__c = sfCon.query(sb_Historico__c.toString());
	QueryResult qr_Historico__c2 = null;
	
	StringBuilder sb_Contas__c2 = new StringBuilder();
	StringBuilder sb_Historico__c2 = new StringBuilder();
	
	// logger.logInfo("QR CONTAS SIZE == "+qr_Contas__c.getSize());
	if (qr_Contas__c.getSize() > 998) {
		SObject rot = qr_Contas__c.getRecords()[998];
		String seqRoteiro = "";
		Object campoOb = rot.getField("Seq_Roteiro__c");
		if (campoOb != null) seqRoteiro = campoOb.toString();
		
		// logger.logInfo("SEQROTEIRO " + seqRoteiro);
	
		sb_Contas__c2.append("SELECT ")
				.append("name, Seq_Roteiro__c, Centro_Custo_Sera__c, Contabilidade__c, Conta_Desconto__c, Conta_Juros__c, Conta_Movimento__c, ")
				.append("Conta_Multa__c, Conta_Pai_quando_Participante__c, Conta_Portador__c, Contas_DFC__c, ")
				.append("Conta_Ser__c, Continua__c, E_01__c, E_02__c, E_03__c, E_04__c, Filial__c, Codigo_SCP__c, ID_Externo_OLD__c, ")
				.append("ID_Externo__c,  Inout_processed__c,  Inverte_Contas__c, Item_DFC__c, Mes_Ano_Base__c, ")
				.append("O_texto_01__c, O_texto_02__c, O_texto_03__c, O_texto_04__c, O_texto_05__c, Coluna_Alternativa__c, Campo_Coluna_Alternativa__c, ")
				.append("Parcela_Inicial__c, Resumo_Regra__c, Roteiro__c, Roteiro_Destino__c, Se_Campo__c, Codigo_Fiscal__c, ")
				.append("Segue_Para__c, Tabela_Contabil__c,  Taxa_Tarifa__c, Total_de_Parcelas__c, Tratar_como__c, Modificar_Data__c, ")
				.append("Valores_Parcela_pre_fixada__c, Valor_Multa__c, Valor_Principal__c, RecordTypeId, Debito_Credito__c, Filial_DIV__c, Classificacao__c, Tipo_DIV__c, Tipo_Grafico__c, Rotulos__c, Titulo_Grafico__c, Simbolo_Valor__c, Codigo_Roteiro__c ")
				.append("FROM Roteiros_vs_Contas__c ")
				.append("WHERE Seq_Roteiro__c > '").append(seqRoteiro)
				.append("' and O_texto_01__c <> 'INATIVA' and (Roteiro__c='").append(idRoteiro).append("' or Roteiro__c='").append(Roteiro_Cartoes).append("' or Roteiro__c='").append(Roteiro_Grupo).append("' or Roteiro__c='").append(Roteiro_Adicional).append("'");
				if (Ler_planilhas_padroes.toUpperCase().equals("TRUE")) sb_Contas__c2.append(" OR  recordTypeRoteiro__c = '0121C000001lBuD' OR  recordTypeRoteiro__c = '0121C0000014G79' ");

				if (!roteirosContabilidadePG.equals("") && tipoIntegracao.toUpperCase().contains("PAG")) {
					sb_Contas__c2.append(" or Codigo_Roteiro__c = '").append(roteirosContabilidadePG.replaceAll(";","' or Codigo_Roteiro__c = '")).append("' ");
				}
				if (!roteirosContabilidadeREC.equals("") && tipoIntegracao.toUpperCase().contains("REC")) {
					sb_Contas__c2.append(" or Codigo_Roteiro__c = '").append(roteirosContabilidadeREC.replaceAll(";","' or Codigo_Roteiro__c = '")).append("' ");
				}				
 				sb_Contas__c2.append(") ORDER BY Seq_Roteiro__c");
				
				qr_Contas__c2    = sfCon.query(sb_Contas__c2.toString());

		// logger.logInfo("QRCONTSIZE " + qr_Contas__c2.getSize());
	}
	
	if (qr_Historico__c.getSize() > 998) {
		SObject rot = qr_Historico__c.getRecords()[998];
		String seqRoteiro = "";
		Object campoOb = rot.getField("Seq_Roteiro__c");
		if (campoOb != null) seqRoteiro = campoOb.toString();
		
		sb_Historico__c2.append("SELECT ")
			.append("Campo_01__c, Campo_02__c, Campo_03__c, Campo_04__c, Campo_05__c, Texto_02__c, Texto_03__c, Texto_04__c, ")
			.append("Texto_05__c, Codigo_Historico__c, Conta_Juros__c, Conta_Movimento__c, Conta_Multa__c, Continua__c, ")
			.append("Cortar_Ate_Indice__c, Cortar_Ate_Texto__c, Cortar_a_Partir_do_indice__c, Cortar_a_Partir_do_Texto__c, ")
			.append("E_02__c, E_03__c, E_04__c, E_05__c, ID_Externo__c, Inverte_Conta__c, O_Texto_01__c, O_Texto_02__c, ")
			.append("O_Texto_03__c, O_Texto_04__c, O_Texto_05__c, Parcela_Referencia__c, Quando_Conta_Igual__c, ")
			.append("Exemplo_Historico__c, Roteiro__c, Se_campo__c, Termo_Destino__c, Termo_Origem__c, Codigo_Roteiro__c, ")
			.append("Texto_01__c, Tipo_Historico__c, Total_de_Parcelas__c, Valores_Principais_Variaveis__c,  Campo_a_ser_Limpo__c, Seq_Roteiro__c, ")
			.append("Valor_Fixo_Juros__c, Valor_Fixo_Multa__c, Valor_Principal__c, RecordTypeId ")
			.append("FROM Roteiro_vs_Historio__c ")
			.append("WHERE Seq_Roteiro__c > '").append(seqRoteiro)
			.append("' and (Roteiro__c='").append(idRoteiro).append("' or Roteiro__c='").append(Roteiro_Cartoes).append("' or Roteiro__c='").append(Roteiro_Grupo).append("' or Roteiro__c='").append(Roteiro_Adicional).append("' ");

			if (!roteirosContabilidadePG.equals("") && tipoIntegracao.toUpperCase().contains("PAG")) {
				sb_Historico__c2.append(" or Codigo_Roteiro__c = '").append(roteirosContabilidadePG.replaceAll(";","' or Codigo_Roteiro__c = '")).append("' ");
			}
			if (!roteirosContabilidadeREC.equals("")  && tipoIntegracao.toUpperCase().contains("REC")) {
				sb_Historico__c2.append(" or Codigo_Roteiro__c = '").append(roteirosContabilidadeREC.replaceAll(";","' or Codigo_Roteiro__c = '")).append("' ");
			} 
			
			sb_Historico__c2.append(") ORDER BY Seq_Roteiro__c");
			
			qr_Historico__c2    = sfCon.query(sb_Historico__c2.toString());
	}
	 
	
    
    /* --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
     * Construcao do codigo ao final do script por regras do CRM.
     --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--*/
	StringBuilder sqlEmpresa = new StringBuilder();
	String erpEmpresa = "";
	
	try {
		sqlEmpresa.append("SELECT ERP_Contabilidade_Empresa__c ")
		.append("FROM Empresa__c  WHERE Nome_Resumido__c ='").append(empresa).append("'");

		QueryResult qres2 = sfCon.query(sqlEmpresa.toString());
		
		if (qres2.getSize() > 0) {
			SObject rot = qres2.getRecords()[0];
			Object campoOb = rot.getField("ERP_Contabilidade_Empresa__c");
			if (campoOb != null) erpEmpresa = campoOb.toString();
		}
	} catch (Exception e) {
		logger.logInfo("Problema erp empresa " + e.getMessage());
	}
	
	
    StringBuilder sb = new StringBuilder();
	
    HashMap<String, String> propertiesMap = new HashMap();
	File propertiesFile = new File(String.format(
		"c:/inout/contabil/%s/contabil.properties",
		contabilidade
	));
	
	String idRoteiroKey = String.format(
		"%s_ID_ROTEIRO_%s",
		empresa.toUpperCase(),
		tipoIntegracao.toUpperCase().contains("PAG") ? "PAGAR" : "RECEBER"
	);
	propertiesMap.put(idRoteiroKey, idRoteiro);
	// recria arquivo .properties
	updateProperties(propertiesMap, propertiesFile);
	
	
 	String roteiroKey = String.format(
		"%s_ROTEIRO_%s",
		empresa.toUpperCase(),
		tipoIntegracao.toUpperCase().contains("PAG") ? "PAGAR" : "RECEBER"
	);
	try {
		propertiesMap.put(roteiroKey, codigo_roteiro);
		// recria arquivo .properties
		updateProperties(propertiesMap, propertiesFile);
	} catch (Exception xx) {}
		
	
	
	
	String planilhaPadrao = String.format(
		"%s_PLANILHA_PADRAO_%s",
		empresa.toUpperCase(),
		tipoIntegracao.toUpperCase().contains("PAG") ? "PAGAR" : "RECEBER"
	);
	
	try {
		propertiesMap.put(planilhaPadrao, Ler_planilhas_padroes.toUpperCase());
		updateProperties(propertiesMap, propertiesFile);
	} catch (Exception xx) {}
	
	String erpEmpresaKey = String.format(
		"%s_ERP_EMPRESA",
		empresa.toUpperCase()
	);
	try {
		propertiesMap.put(erpEmpresaKey, erpEmpresa);
		// recria arquivo .properties
		updateProperties(propertiesMap, propertiesFile);
	} catch (Exception xx) {}
	
	if (ERPContabilidade.toUpperCase().equals("ALTERDATA")) verificaRegraCentroCusto(qr_Contas__c, codEmpresa, contabilidade, logger);

	//F1
	// Quando o roteiro for exportado pelo CRM (nao vamos expotar os roteiros secundarios padroes para nao conflitar com o legado ou rota especifica.
	// somente quando roteiroPadrao = true, ou seja, roteiro foi exportado pelo workflow, eh que vamos gerar os secundarios para as rotas.
	if (!roteiroPadrao) Ler_planilhas_padroes = "FALSE";

	//Busca as regras do 4.0
    List<JSONArray> regras40 = null;
	
	try {regras40 = findRegrasConta40(dbNuvem, idRoteiro.substring(0, 15), logger);}
	catch (Exception ex) {
		logger.logInfo("Erro ao buscar as regras da nuvem -> " + ex.getMessage());
		regras40 = null;
	}

	List<T> regrasConta40Sf = unirRegrasSF40(qr_Contas__c, qr_Contas__c2, regras40, logger);
	Regras40Sf regrasConta = new Regras40Sf();

	try{
		regrasConta.build(regrasConta40Sf);	
	} catch (Exception ex) {logger.logInfo("Erro ao organizar regras -> " + ex.getMessage());}


	makeCodigoRoteiro(idRoteiro, empresa, empresaDir, contabilidade, roteiroPadrao, sb, sfCon, logger);						 
    makeCodigoRoteiroSecundario(idRoteiro, empresa, empresaDir, contabilidade, Ler_planilhas_padroes, roteirosContabilidadePG, roteirosContabilidadeREC, tipoIntegracao, sb, sfCon, logger);				 
    maketipoPlanilhaRoteiroSecundario(idRoteiro, empresa, empresaDir, contabilidade, Ler_planilhas_padroes, roteirosContabilidadePG, roteirosContabilidadeREC, tipoIntegracao, sb, sfCon, logger);		 

    makeCodigoContasFixas(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);			 
    makeCodigoContasFixas09(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);		 
	
	makeCodigoContasMovimento(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, sb, sfCon, regrasConta.getContasMovimento(), logger);			 
    makeRegraContasMovimento(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);		

 	
    
	makeCodigoContasPortador(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, sb, sfCon, regrasConta.getContasPortador(), logger);
 	
    makeCodigoContasJuros(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, sb, sfCon, regrasConta.getContasJuros(), logger);			 
    makeCodigoContasDesconto(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, sb, sfCon, regrasConta.getContasDesconto(), logger);		 
    makeCodigoContasMulta(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, sb, sfCon, regrasConta.getContasMulta(), logger);			 
	
	makeTratarComoExtrato(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);			 
	makeTratarComoDesconto(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);			 
	makeTratarComoJuros(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);			 
	makeTratarLinhaIgnorar(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);			 
	makeCodigoValorAlternativo(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);		 
	makeCodigoTratarComoDiv(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);		 
	makeCodigoClassificacao(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);		 
	makeCodigoModificaData(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);		 
	makeEspecieDuplicata(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);		 
	makeDefineCabecalho(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);		 

	
    makeValorPrincipalFinanciamento(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);  
    makeHistoricos(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Historico__Conta_c, sb, sfCon, logger);        
    makeRegraHistoricosRegras(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Historico__c, sb, sfCon, logger);    
	makeParcelaBase(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);                
	makeTotalParcelas(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);              
	makeMesAnoBase(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);                
    makeTaxaTarifa(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);                 
	
    // if (contabilidade.equals("Micalicontabil") || contabilidade.toUpperCase().equals("LUZOLIVEIRA") 
		// || contabilidade.toUpperCase().equals("MARLIAN") || contabilidade.toUpperCase().equals("SZXCONSULTORIA") 
		// || contabilidade.toUpperCase().equals("GAFFA") || contabilidade.toUpperCase().equals("DCCONT") 
		// || contabilidade.toUpperCase().equals("CONTTROLARE") || contabilidade.toUpperCase().equals("GPS") 
		// || contabilidade.toUpperCase().equals("PROPAR") || contabilidade.toUpperCase().equals("TWBPO") 
		// || contabilidade.toUpperCase().equals("JBQUALITYCONTABILIDADE") || contabilidade.toUpperCase().equals("ASSECONTRI")
		// || contabilidade.toUpperCase().equals("ORGANO")) { //regras do 40 e do salesForce (NOVO)
        List<T> regrasHistorico = null;
        List<Regra> regrasHistorico40 = null;
        try {
            regrasHistorico40 = buscarRegrasHistorico40(dbNuvem, idRoteiro.substring(0,15), tipoIntegracao, logger);
            regrasHistorico = unirHistoricoSF40(qr_Historico__c, qr_Historico__c2, regrasHistorico40, logger);
        } catch(Exception ex) {
            logger.logInfo("ERRO AO BUSCAR REGRAS DE HISTORICO -> " + ex.getMessage());
        }
		logger.logInfo("Antes de criar historico regra");

        makeHistoricosRegras(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, regrasHistorico, sb, sfCon, logger);
        makeHistoricosPortador(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, regrasHistorico, sb, sfCon, logger);       
        makeHistoricosJuros(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, regrasHistorico, sb, sfCon, logger);         
        makeHistoricosDesconto(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, regrasHistorico, sb, sfCon, logger);       
        makeHistoricosMulta(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, regrasHistorico, sb, sfCon, logger);       
		logger.logInfo("Depois de criar historico regra");
    // }
    // else { // Historicos Apenas do salesForce (ANTIGO)
        // makeHistoricosRegras(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Historico__c, qr_Historico__c2, sb, sfCon, logger);        
        // makeHistoricosPortador(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Historico__c, sb, sfCon, logger);       
        // makeHistoricosJuros(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Historico__c, sb, sfCon, logger);         
        // makeHistoricosDesconto(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Historico__c, sb, sfCon, logger);       
        // makeHistoricosMulta(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Historico__c, sb, sfCon, logger);
    // }
    
    
    makeCodigoCentroCusto(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);           
    makeCodigoTabelaContabil(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);        
    makeCodigoParticipante(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);         
    makeCodigoFilial(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);                
    makeRegrasParaAcumular(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Historico__c, sb, sfCon, logger);      
    makeRegrasParaAcumularPortador(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Historico__c, sb, sfCon, logger);      
	makeReplaceTermos(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Historico__c, sb, sfCon, logger);           
    makeReplaceTermosAvancado(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Historico__c, sb, sfCon, logger);   
	makeLimpaCampos(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Historico__c, sb, sfCon, logger);              
    makeLimpaCamposAvancado(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Historico__c, sb, sfCon, logger);     
     
	//validar so pra bussola
    makeCodigoTipoGrafico(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);        	 
    makeCodigoSimboloValor(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);			 
    makeCodigoSeries(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);             
    makeTituloGrafico(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);            	 
	
	makeCodigoColunaAlternativa(idRoteiro, Roteiro_Grupo, Roteiro_Cartoes, qr_Contas__c, sb, sfCon, logger);	 	
	// if (roteiroNovo /*&& !contabilidade.toUpperCase().contains("MICALICONTABIL")*/) 		makePadroesCartoes(idRoteiro, sb, sfCon, logger);	


	try {
		if (dbNuvem != null) {
			dbNuvem.closeConnection();
		}
		 
	} catch (Exception ee) {
		logger.logInfo("Erro ao fechar conexao com nuvem (Roteiro) " + ee.getMessage());
	}	
	
	logger.logInfo("Chegou no final do prepareScript " + empresa);

	return sb.toString();
}


private void makeCodigoRoteiro(String idRoteiro, String empresa, String empresaDir,
                                     String contabilidade, boolean roteiroPadrao, StringBuilder sb, 
                                     PartnerConnection sfCon, 
                                     InoutLogger logger) throws Exception {

    String rn = "\r\n";
    
    // Obtem o Roteiro /////////////////////////////////////////////////
    StringBuilder sql = new StringBuilder();
    sql.append("SELECT Name, Centro_de_Custo__c, Complemento_01__c, Complemento_02__c, Abas_Especificas__c, Ler_Planilha_Pelo_Cabecalho__c, ")
       .append("Complemento_03__c, Complemento_04__c, Complemento_05__c, Complemento_06__c, Conta_Fixa_CREDITO__c, Conta_Fixa_DEBITO__c, ")
       .append("Conta_Fixa_Desconto__c, Conta_Fixa_Juros__c, Conta_Fixa_Multa__c, Valor_Pagamento_Liquido__c, Usa_Filial_Questor__c, ")
       .append("Data_Movimento__c, Documento_NF__c, Empresa_a_Ser_Integrada__c, Contabildiade_ID__c, CNPJ_Contabilidade_c__c, CNPJ_Empresa__c, Forcar_Partida_Dobrada__c,Forcar_Partida_Simples__c,Realizar_Busca_Plano__c, Contabilizacao_Atraves_Fornecedor__c, ")
       .append("Fornecedor__c, Nome_do_Relat_rio_Refer_ncia__c, cruzaExtrato__c, Cruza_Extrato_com_Extrato__c, Classificacao_Conta_Fornecedor_Cliente__c, ")
       .append("Portador__c, Gera_Gerencial__c, Status_Roteiro__c, Tipo_de_Arquivo__c, Classificacao_descricao__c, Shrink_Coluna__c, Agrupar_Colunas_Excel__c, ")
       .append("Tipo_Integracao__c, Valor_Desconto__c, Valor_Documento__c, Valor_Juros__c, Planilhas_Padroes__c, CNPJ_CPF__c, CNPJ_Movimento__c, Tratar_CNPJ_apenas_os_numeros__c, ")
       .append("Valor_Multa__c, Movimento_Portador__c, ERP_Contabilidade__c, Conta_Fixa_Cruzamento_Extrato__c, Integracao_fiscal__c, Valida_Fornecedor_Fiscal__c, dupliNaoEncontContabil__c, Conta_Dupl_Contabil__c, Aloca_Checknum__c, ")
       .append("Valida_Data_na_Coluna__c, Manter_Valores_da_Linha_Anterior__c, Valor_Alternativo_Coluna__c, Valor_Alternativo_Extrato__c, Campos_Linhas_Abaixo__c, Campo_Principal__c, ")	   
       .append("X001__c, X002__c, X003__c, X004__c, X005__c, X006__c, X007__c, X008__c, Fazer_Baixa_de_Contratos__c, ")
	   .append("X009__c, X010__c, X011__c, X012__c, X013__c, X014__c, Agrupar_arquivo__c, ")
	   .append("X015__c, X016__c, X017__c, X018__c, X019__c, X020__c, Coluna_Valor_Duplicata_Dominio__c, Delimitador_do_arquivo__c, ")
	   .append("X021__c, X015_1__c, X016_1__c, X017_1__c, X018_1__c, X019_1__c, X020_1__c, Email_Logo__c, BuscaCnpjCRM__c, Idioma__c,  Colunas_de_Valores_Extras__c	, Colunas_de_Portadores_Extras__c, Rotulos_Para_Valores_Extras__c, ")
	   .append("Rotulo_Complemento_01__c, Rotulo_Complemento_02__c, Rotulo_Complemento_03__c, Rotulo_Complemento_04__c, Rotulo_Complemento_05__c, ")
	   .append("Ordem_dos_Indicadores__c, Gera_Log_Bussola__c, Vencimento_Usando_Complemento__c, Especial_Fabrica__c, Parcela_Usando_Complemento__c, Arredonda__c ")
	   .append(" FROM Roteiros__c WHERE Id='").append(idRoteiro).append("'");

 	QueryResult qres1 = sfCon.query(sql.toString());
 	
    // Prepara o metodo a ser escrito no script da rota que retorna um 
    // JSONObject com os dados do roteiro.
    sb.append("public JSONObject getRoteiro() {").append(rn)
      .append("    JSONObject js = new JSONObject();\r\n");

    if (qres1.getSize() > 0) {
        SObject rot = qres1.getRecords()[0];

		String CentroCusto = "";
		String idEmpresa = "";
		String idContabilidade = "";
		String CnpjContabilidade = "";
		String CnpjEmpresa = "";
		String Complemento01 = "";
		String Complemento02 = "";
		String Complemento03 = "";
		String Complemento04 = "";
		String Complemento05 = "";
		String Complemento06 = "";
		String ContaFixaDEBITO = "";
		String ContaFixaCREDITO = "";
		String ContaFixaDesconto = "";
		String ContaFixaJuros = "";
		String ContaFixaMulta = "";
		String DataMovimento = "";
		String DocumentoNF = "";
		String NomeRelatorioReferencia = "";
		String Fornecedor = "";
		String Portador = "";
		String GeraGerencial = "";
		String StatusRoteiro = "";
		String MovimentoPortador = "";
		String TipoArquivo = "";
		String TipoIntegracao = "";
		String ValorDesconto = "";
		String ValorDocumento = "";
		String ValorPagamento = "";
		String ValorAlternativo = "";
		String ValorJuros = "";
		String ValorMulta = "";
		String ERPContabilidade = "";
		String tipoRegistro = "";
		String cruzaExtrato  = "";
		String Cruza_Extrato_com_Extrato = "";
		String classificaFornec = "";
		String classificaPlano = "";
		String Conta_Fixa_Cruzamento_Extrato = "";
		String Integracao_fiscal = "";
		String Valida_Fornecedor_Fiscal = "";
		String Integracao_contratos = "";
		String Planilhas_Padroes = "";
		String Abas_Especificas = "";
		String Ler_Planilha_Pelo_Cabecalho = "";
		String Contabilizacao_Atraves_Fornecedor = "";
		String Forcar_Partida_Dobrada = "";
		String Forcar_Partida_Simples = "";
		String Realizar_Busca_Plano = "";
		String dataFake = "";
		String naoZerarValores = "";
		String lerAposPrincipal = "";
		String campoLinhaPrincipal = "";
		String cpfCnpj = "";
		String gravaCnpjMovimento = "";
		String cnpjSomenteNumeros = "";
		String fazerShrink = "";
		String colunaShrink = "";	
		String dupliNaoEncontContabil = "";
		String Conta_Dupl_Contabil = "";
		String Aloca_Checknum = "";
		String Usa_Filial_Questor			= "";
		String Ordem_dos_Indicadores		= "";
		String Gera_Log_Bussola				= "";
		String Arredonda    				= "";
		String UsarComplementoVencimento 	= "";
		String UsarComplementoParcela    	= "";
		String ValidacoesFiscalFabrica	 	= "";
		String Colunas_de_Valores_Extras    = "";
		String Colunas_de_Portadores_Extras = "";
		String Rotulos_Para_Valores_Extras  = "";
		String Delimitador_do_arquivo       = "";
		String Coluna_Valor_Duplicata_Dominio = "9";
		String Agrupar_arquivo = "NAO";
		
 		
		
		String Rotulo_Complemento_01	= "";
		String Rotulo_Complemento_02	= "";
		String Rotulo_Complemento_03	= "";
		String Rotulo_Complemento_04	= "";
		String Rotulo_Complemento_05	= "";

		String X001_ROB						= "";
		String X002_Despesas				= "";
		String X003_Despesas_Detalhe		= "";
		String X004_Geracao_Caixa_Mes		= "";
		String X005_Geracao_Caixa_Acumulado	= "";
		String X006_Despesas_sobre_Faturamento	= "";
		String X007_Lucro					= "";
		
		String X008_Deducoes_Receitas		= "";
		String X009_CMV						= "";
		String X010_CPV						= "";
		String X011_CSP						= "";


		String X012_Indicador				= "";
		String X013_Indicador				= "";
		String X014_Indicador				= "";
		String X015_Indicador				= "";
		String X016_Indicador				= "";
		String X017_Indicador				= "";
		String X018_Indicador				= "";
		String X019_Indicador				= "";
		String X020_Indicador				= "";
		String X021_Indicador				= "";

		String X015_Label					= "";
		String X016_Label					= "";
		String X017_Label					= "";
		String X018_Label					= "";
		String X019_Label					= "";
        String X020_Label					= "";
        
		String Email_Logo                   = "";
		String BuscaCnpjCRM					= "";
		String Idioma						= "";

		
		
		Object campoOb = rot.getField("Centro_de_Custo__c");
		if (campoOb != null) CentroCusto = campoOb.toString();
		
		CentroCusto = StringUtil.removeSpecialChars(CentroCusto).replaceAll("\"","").trim();
		if (CentroCusto.toUpperCase().contains("APLICA")) CentroCusto = "";
		
		campoOb = rot.getField("Classificacao_Conta_Fornecedor_Cliente__c");
		if (campoOb != null) classificaFornec = campoOb.toString();
		classificaFornec = StringUtil.removeSpecialChars(classificaFornec).replaceAll("\"","").trim();
		classificaFornec = StringUtil.removeSpecialChars(classificaFornec).replaceAll("\\.","").trim();
		if (classificaFornec.toUpperCase().contains("APLICA")) classificaFornec = "";
		
		
		campoOb = rot.getField("Abas_Especificas__c");
		if (campoOb != null) Abas_Especificas = campoOb.toString();
		Abas_Especificas = StringUtil.removeSpecialChars(Abas_Especificas).replaceAll("\"","").trim();	
		if (Abas_Especificas.toUpperCase().contains("APLICA")) Abas_Especificas = "";
		if (Abas_Especificas.endsWith(";")) Abas_Especificas = Abas_Especificas.substring(0,Abas_Especificas.lastIndexOf(";")).trim();
		

		campoOb = rot.getField("Complemento_01__c");
		if (campoOb != null) Complemento01 = campoOb.toString().toUpperCase();
		Complemento01 = StringUtil.removeSpecialChars(Complemento01).replaceAll("\"","").trim();	
		if (Complemento01.toUpperCase().contains("APLICA")) Complemento01 = "";

		campoOb = rot.getField("Complemento_02__c");
		if (campoOb != null) Complemento02 = campoOb.toString().toUpperCase();
		Complemento02 = StringUtil.removeSpecialChars(Complemento02).replaceAll("\"","").trim();	
		if (Complemento02.toUpperCase().contains("APLICA")) Complemento02 = "";

		campoOb = rot.getField("Complemento_03__c");
		if (campoOb != null) Complemento03 = campoOb.toString().toUpperCase();
		Complemento03 = StringUtil.removeSpecialChars(Complemento03).replaceAll("\"","").trim();	
		if (Complemento03.toUpperCase().contains("APLICA")) Complemento03 = "";

		campoOb = rot.getField("Complemento_04__c");
		if (campoOb != null) Complemento04 = campoOb.toString().toUpperCase();
		Complemento04 = StringUtil.removeSpecialChars(Complemento04).replaceAll("\"","").trim();	
		if (Complemento04.toUpperCase().contains("APLICA")) Complemento04 = "";

		campoOb = rot.getField("Complemento_05__c");
		if (campoOb != null) Complemento05 = campoOb.toString().toUpperCase();
		Complemento05 = StringUtil.removeSpecialChars(Complemento05).replaceAll("\"","").trim();	
		if (Complemento05.toUpperCase().contains("APLICA")) Complemento05 = "";

		campoOb = rot.getField("Complemento_06__c");
		if (campoOb != null) Complemento06 = campoOb.toString().toUpperCase();
		Complemento06 = StringUtil.removeSpecialChars(Complemento06).replaceAll("\"","").trim();	
		if (Complemento06.toUpperCase().contains("APLICA")) Complemento06 = "";

		campoOb = rot.getField("Conta_Fixa_CREDITO__c");
		if (campoOb != null) ContaFixaCREDITO = campoOb.toString().toUpperCase();
		ContaFixaCREDITO = StringUtil.removeSpecialChars(ContaFixaCREDITO).replaceAll("\"","").trim();	
		if (ContaFixaCREDITO.toUpperCase().contains("APLICA")) ContaFixaCREDITO = "";

		campoOb = rot.getField("Conta_Fixa_DEBITO__c");
		if (campoOb != null) ContaFixaDEBITO = campoOb.toString().toUpperCase();
		ContaFixaDEBITO = StringUtil.removeSpecialChars(ContaFixaDEBITO).replaceAll("\"","").trim();	
		if (ContaFixaDEBITO.toUpperCase().contains("APLICA")) ContaFixaDEBITO = "";
		
		campoOb = rot.getField("Conta_Fixa_Desconto__c");
		if (campoOb != null) ContaFixaDesconto = campoOb.toString().toUpperCase();
		ContaFixaDesconto = StringUtil.removeSpecialChars(ContaFixaDesconto).replaceAll("\"","").trim();	
		if (ContaFixaDesconto.toUpperCase().contains("APLICA")) ContaFixaDesconto = "";

		campoOb = rot.getField("Conta_Fixa_Juros__c");
		if (campoOb != null) ContaFixaJuros = campoOb.toString().toUpperCase();
		ContaFixaJuros = StringUtil.removeSpecialChars(ContaFixaJuros).replaceAll("\"","").trim();	
		if (ContaFixaJuros.toUpperCase().contains("APLICA")) ContaFixaJuros = "";
		
		campoOb = rot.getField("Conta_Fixa_Multa__c");
		if (campoOb != null) ContaFixaMulta = campoOb.toString().toUpperCase();
		ContaFixaMulta = StringUtil.removeSpecialChars(ContaFixaMulta).replaceAll("\"","").trim();	
		if (ContaFixaMulta.toUpperCase().contains("APLICA")) ContaFixaMulta = "";
		
		campoOb = rot.getField("Data_Movimento__c");
		if (campoOb != null) DataMovimento = campoOb.toString().toUpperCase();
		DataMovimento = StringUtil.removeSpecialChars(DataMovimento).replaceAll("\"","").trim();	
		if (DataMovimento.toUpperCase().contains("APLICA")) DataMovimento = "";

		campoOb = rot.getField("Valida_Data_na_Coluna__c");
		if (campoOb != null) dataFake = campoOb.toString().toUpperCase();
		dataFake = StringUtil.removeSpecialChars(dataFake).replaceAll("\"","").trim();	
		if (dataFake.toUpperCase().contains("APLICA")) dataFake = "";
		
		campoOb = rot.getField("Documento_NF__c");
		if (campoOb != null) DocumentoNF = campoOb.toString().toUpperCase();
		DocumentoNF = StringUtil.removeSpecialChars(DocumentoNF).replaceAll("\"","").trim();	
		if (DocumentoNF.toUpperCase().contains("APLICA")) DocumentoNF = "";
		
		campoOb = rot.getField("Fornecedor__c");
		if (campoOb != null) Fornecedor = campoOb.toString().toUpperCase();
		Fornecedor = StringUtil.removeSpecialChars(Fornecedor).replaceAll("\"","").trim();	
		if (Fornecedor.toUpperCase().contains("APLICA")) Fornecedor = "";

		campoOb = rot.getField("Nome_do_Relat_rio_Refer_ncia__c");
		if (campoOb != null) NomeRelatorioReferencia = campoOb.toString().toUpperCase();
		NomeRelatorioReferencia = StringUtil.removeSpecialChars(NomeRelatorioReferencia).replaceAll("\"","").trim();	
		if (NomeRelatorioReferencia.toUpperCase().contains("APLICA")) NomeRelatorioReferencia = "";
		
		campoOb = rot.getField("Portador__c");
		if (campoOb != null) Portador = campoOb.toString().toUpperCase();
		Portador = StringUtil.removeSpecialChars(Portador).replaceAll("\"","").trim();	
		if (Portador.toUpperCase().contains("APLICA")) Portador = "";
		
		campoOb = rot.getField("Gera_Gerencial__c");
		if (campoOb != null) GeraGerencial = campoOb.toString().toUpperCase();
		GeraGerencial = StringUtil.removeSpecialChars(GeraGerencial).replaceAll("\"","").trim();	
		if (GeraGerencial.toUpperCase().contains("APLICA")) GeraGerencial = "";
		
		
		campoOb = rot.getField("Delimitador_do_arquivo__c");
		if (campoOb != null) Delimitador_do_arquivo = campoOb.toString().toUpperCase(); 
		
		campoOb = rot.getField("Agrupar_arquivo__c");
		if (campoOb != null) Agrupar_arquivo = campoOb.toString().toUpperCase(); 
		
		if (contabilidade.toUpperCase().equals("TACTUS")) Agrupar_arquivo = "TRUE";
		
		
		
		campoOb = rot.getField("Status_Roteiro__c");
		if (campoOb != null) StatusRoteiro = campoOb.toString().toUpperCase();
		StatusRoteiro = StringUtil.removeSpecialChars(StatusRoteiro).replaceAll("\"","").trim();	
		if (StatusRoteiro.toUpperCase().contains("APLICA")) StatusRoteiro = "";
		
		campoOb = rot.getField("Tipo_de_Arquivo__c");
		if (campoOb != null) TipoArquivo = campoOb.toString().toUpperCase();
		TipoArquivo = StringUtil.removeSpecialChars(TipoArquivo).replaceAll("\"","").trim();	
		if (TipoArquivo.toUpperCase().contains("APLICA")) TipoArquivo = "";
		
		campoOb = rot.getField("Tipo_Integracao__c");
		if (campoOb != null) TipoIntegracao = campoOb.toString().toUpperCase();
		TipoIntegracao = StringUtil.removeSpecialChars(TipoIntegracao).replaceAll("\"","").trim();	
		if (TipoIntegracao.toUpperCase().contains("APLICA")) TipoIntegracao = "";
		
		campoOb = rot.getField("Valor_Desconto__c");
		if (campoOb != null) ValorDesconto = campoOb.toString().toUpperCase();
		ValorDesconto = StringUtil.removeSpecialChars(ValorDesconto).replaceAll("\"","").trim();	
		if (ValorDesconto.toUpperCase().contains("APLICA")) ValorDesconto = "";
		
		campoOb = rot.getField("Valor_Documento__c");
		if (campoOb != null) ValorDocumento = campoOb.toString().toUpperCase();
		ValorDocumento = StringUtil.removeSpecialChars(ValorDocumento).replaceAll("\"","").trim();	
		if (ValorDocumento.toUpperCase().contains("APLICA")) ValorDocumento = "";
		
		campoOb = rot.getField("Valor_Alternativo_Extrato__c");
		if (campoOb != null) ValorAlternativo = campoOb.toString().toUpperCase();
		ValorAlternativo = StringUtil.removeSpecialChars(ValorAlternativo).replaceAll("\"","").trim();	
		if (ValorAlternativo.toUpperCase().contains("APLICA")) ValorAlternativo = "";
		
		campoOb = rot.getField("Valor_Juros__c");
		if (campoOb != null) ValorJuros = campoOb.toString().toUpperCase();
		ValorJuros = StringUtil.removeSpecialChars(ValorJuros).replaceAll("\"","").trim();	
		if (ValorJuros.toUpperCase().contains("APLICA")) ValorJuros = "";
		
		campoOb = rot.getField("Valor_Pagamento_Liquido__c");
		if (campoOb != null) ValorPagamento = campoOb.toString().toUpperCase();
		ValorPagamento = StringUtil.removeSpecialChars(ValorPagamento).replaceAll("\"","").trim();	
		if (ValorPagamento.toUpperCase().contains("APLICA")) ValorPagamento = "";
		
		campoOb = rot.getField("Valor_Multa__c");
		if (campoOb != null) ValorMulta = campoOb.toString().toUpperCase();
		ValorMulta = StringUtil.removeSpecialChars(ValorMulta).replaceAll("\"","").trim();	
		if (ValorMulta.toUpperCase().contains("APLICA")) ValorMulta = "";
		
		campoOb = rot.getField("Movimento_Portador__c");
		if (campoOb != null) MovimentoPortador = campoOb.toString().toUpperCase();
		MovimentoPortador = StringUtil.removeSpecialChars(MovimentoPortador).replaceAll("\"","").trim();	
		if (MovimentoPortador.toUpperCase().contains("APLICA")) MovimentoPortador = "";

        campoOb = rot.getField("ERP_Contabilidade__c");
		if (campoOb != null) ERPContabilidade = campoOb.toString().toUpperCase();
		ERPContabilidade = StringUtil.removeSpecialChars(ERPContabilidade).replaceAll("\"","").trim();	

		campoOb = rot.getField("Ler_Planilha_Pelo_Cabecalho__c");
		if (campoOb != null) Ler_Planilha_Pelo_Cabecalho = campoOb.toString().toUpperCase();
		Ler_Planilha_Pelo_Cabecalho = StringUtil.removeSpecialChars(Ler_Planilha_Pelo_Cabecalho).replaceAll("\"","").trim();	

		campoOb = rot.getField("Contabilizacao_Atraves_Fornecedor__c");
		if (campoOb != null) Contabilizacao_Atraves_Fornecedor = campoOb.toString().toUpperCase();
		Contabilizacao_Atraves_Fornecedor = StringUtil.removeSpecialChars(Contabilizacao_Atraves_Fornecedor).replaceAll("\"","").trim();	

		campoOb = rot.getField("Forcar_Partida_Dobrada__c");
		if (campoOb != null) Forcar_Partida_Dobrada = campoOb.toString().toUpperCase();
		Forcar_Partida_Dobrada = StringUtil.removeSpecialChars(Forcar_Partida_Dobrada).replaceAll("\"","").trim();	
		
		campoOb = rot.getField("Forcar_Partida_Simples__c");
		if (campoOb != null) Forcar_Partida_Simples = campoOb.toString().toUpperCase();
		Forcar_Partida_Simples = StringUtil.removeSpecialChars(Forcar_Partida_Simples).replaceAll("\"","").trim();	
		
		campoOb = rot.getField("Realizar_Busca_Plano__c");
		if (campoOb != null) Realizar_Busca_Plano = campoOb.toString().toUpperCase();
		Realizar_Busca_Plano = StringUtil.removeSpecialChars(Realizar_Busca_Plano).replaceAll("\"","").trim();	

		campoOb = rot.getField("CNPJ_CPF__c");
		if (campoOb != null) cpfCnpj = campoOb.toString().toUpperCase();
		cpfCnpj = StringUtil.removeSpecialChars(cpfCnpj).replaceAll("\"","").trim();	

		campoOb = rot.getField("CNPJ_Movimento__c");
		if (campoOb != null) gravaCnpjMovimento = campoOb.toString().toUpperCase();
		gravaCnpjMovimento = StringUtil.removeSpecialChars(gravaCnpjMovimento).replaceAll("\"","").trim();	
		
		campoOb = rot.getField("Tratar_CNPJ_apenas_os_numeros__c");
		if (campoOb != null) cnpjSomenteNumeros = campoOb.toString().toUpperCase();
		cnpjSomenteNumeros = StringUtil.removeSpecialChars(cnpjSomenteNumeros).replaceAll("\"","").trim();

		campoOb = rot.getField("Shrink_Coluna__c");
		if (campoOb != null) colunaShrink = campoOb.toString().toUpperCase();
		colunaShrink = StringUtil.removeSpecialChars(colunaShrink).replaceAll("\"","").trim();
		if (colunaShrink.equals("")) colunaShrink = "0";

		campoOb = rot.getField("Agrupar_Colunas_Excel__c");
		if (campoOb != null) fazerShrink = campoOb.toString().toUpperCase();
		fazerShrink = StringUtil.removeSpecialChars(fazerShrink).replaceAll("\"","").trim();
	 
		campoOb = rot.getField("dupliNaoEncontContabil__c");
		if (campoOb != null) dupliNaoEncontContabil = campoOb.toString().toUpperCase();
		dupliNaoEncontContabil = StringUtil.removeSpecialChars(dupliNaoEncontContabil).replaceAll("\"","").trim();
	 
		campoOb = rot.getField("Conta_Dupl_Contabil__c");
		if (campoOb != null) Conta_Dupl_Contabil = campoOb.toString().toUpperCase();
		Conta_Dupl_Contabil = StringUtil.removeSpecialChars(Conta_Dupl_Contabil).replaceAll("\"","").trim();
	 
		campoOb = rot.getField("Aloca_Checknum__c");
		if (campoOb != null) Aloca_Checknum = campoOb.toString().toUpperCase();
		Aloca_Checknum = StringUtil.removeSpecialChars(Aloca_Checknum).replaceAll("\"","").trim();
	
		campoOb = rot.getField("Colunas_de_Valores_Extras__c");
		if (campoOb != null) Colunas_de_Valores_Extras = campoOb.toString().toUpperCase();
		Colunas_de_Valores_Extras = StringUtil.removeSpecialChars(Colunas_de_Valores_Extras).replaceAll("\"","").trim();
	 
		campoOb = rot.getField("Colunas_de_Portadores_Extras__c");
		if (campoOb != null) Colunas_de_Portadores_Extras = campoOb.toString().toUpperCase();
		Colunas_de_Portadores_Extras = StringUtil.removeSpecialChars(Colunas_de_Portadores_Extras).replaceAll("\"","").trim();
	 
		campoOb = rot.getField("Rotulos_Para_Valores_Extras__c");
		if (campoOb != null) Rotulos_Para_Valores_Extras = campoOb.toString().toUpperCase();
		Rotulos_Para_Valores_Extras = StringUtil.removeSpecialChars(Rotulos_Para_Valores_Extras).replaceAll("\"","").trim();
	  
		campoOb = rot.getField("Coluna_Valor_Duplicata_Dominio__c");
		if (campoOb != null) Coluna_Valor_Duplicata_Dominio = campoOb.toString().toUpperCase();
		Coluna_Valor_Duplicata_Dominio = StringUtil.removeSpecialChars(Coluna_Valor_Duplicata_Dominio).replaceAll("\"","").trim(); 
	 	if (Coluna_Valor_Duplicata_Dominio.equals("")) Rotulos_Para_Valores_Extras = "9";

	 
	 
		campoOb = rot.getField("X001__c");
		if (campoOb != null) X001_ROB = campoOb.toString().toUpperCase();
		X001_ROB = StringUtil.removeSpecialChars(X001_ROB).replaceAll("\"","").trim();
		
		campoOb = rot.getField("X002__c");
		if (campoOb != null) X002_Despesas = campoOb.toString().toUpperCase();
		X002_Despesas = StringUtil.removeSpecialChars(X002_Despesas).replaceAll("\"","").trim();
		
		campoOb = rot.getField("X003__c");
		if (campoOb != null) X003_Despesas_Detalhe = campoOb.toString().toUpperCase();
		X003_Despesas_Detalhe = StringUtil.removeSpecialChars(X003_Despesas_Detalhe).replaceAll("\"","").trim();
		
		campoOb = rot.getField("X004__c");
		if (campoOb != null) X004_Geracao_Caixa_Mes = campoOb.toString().toUpperCase();
		X004_Geracao_Caixa_Mes = StringUtil.removeSpecialChars(X004_Geracao_Caixa_Mes).replaceAll("\"","").trim();
		
		campoOb = rot.getField("X005__c");
		if (campoOb != null) X005_Geracao_Caixa_Acumulado = campoOb.toString().toUpperCase();
		X005_Geracao_Caixa_Acumulado = StringUtil.removeSpecialChars(X005_Geracao_Caixa_Acumulado).replaceAll("\"","").trim();
		
		campoOb = rot.getField("X006__c");
		if (campoOb != null) X006_Despesas_sobre_Faturamento = campoOb.toString().toUpperCase();
		X006_Despesas_sobre_Faturamento = StringUtil.removeSpecialChars(X006_Despesas_sobre_Faturamento).replaceAll("\"","").trim();
		
		campoOb = rot.getField("X007__c");
		if (campoOb != null) X007_Lucro = campoOb.toString().toUpperCase();
		X007_Lucro = StringUtil.removeSpecialChars(X007_Lucro).replaceAll("\"","").trim(); 
		
		campoOb = rot.getField("X008__c");
		if (campoOb != null) X008_Deducoes_Receitas = campoOb.toString().toUpperCase();
		X008_Deducoes_Receitas = StringUtil.removeSpecialChars(X008_Deducoes_Receitas).replaceAll("\"","").trim(); 
		
		campoOb = rot.getField("X009__c");
		if (campoOb != null) X009_CMV = campoOb.toString().toUpperCase();
		X009_CMV = StringUtil.removeSpecialChars(X009_CMV).replaceAll("\"","").trim(); 
		
		campoOb = rot.getField("X010__c");
		if (campoOb != null) X010_CPV = campoOb.toString().toUpperCase();
		X010_CPV = StringUtil.removeSpecialChars(X010_CPV).replaceAll("\"","").trim(); 
		
		campoOb = rot.getField("X011__c");
		if (campoOb != null) X011_CSP = campoOb.toString().toUpperCase();
		X011_CSP = StringUtil.removeSpecialChars(X011_CSP).replaceAll("\"","").trim(); 

		campoOb = rot.getField("X012__c");
		if (campoOb != null) X012_Indicador = campoOb.toString().toUpperCase();
		X012_Indicador = StringUtil.removeSpecialChars(X012_Indicador).replaceAll("\"","").trim(); 
		
		campoOb = rot.getField("X013__c");
		if (campoOb != null) X013_Indicador = campoOb.toString().toUpperCase();
		X013_Indicador = StringUtil.removeSpecialChars(X013_Indicador).replaceAll("\"","").trim(); 
 
		campoOb = rot.getField("X014__c");
		if (campoOb != null) X014_Indicador = campoOb.toString().toUpperCase();
		X014_Indicador = StringUtil.removeSpecialChars(X014_Indicador).replaceAll("\"","").trim(); 
 
		campoOb = rot.getField("X015__c");
		if (campoOb != null) X015_Indicador = campoOb.toString().toUpperCase();
		X015_Indicador = StringUtil.removeSpecialChars(X015_Indicador).replaceAll("\"","").trim(); 
 
		campoOb = rot.getField("X016__c");
		if (campoOb != null) X016_Indicador = campoOb.toString().toUpperCase();
		X016_Indicador = StringUtil.removeSpecialChars(X016_Indicador).replaceAll("\"","").trim(); 
 
		campoOb = rot.getField("X017__c");
		if (campoOb != null) X017_Indicador = campoOb.toString().toUpperCase();
		X017_Indicador = StringUtil.removeSpecialChars(X017_Indicador).replaceAll("\"","").trim(); 
 
		campoOb = rot.getField("X018__c");
		if (campoOb != null) X018_Indicador = campoOb.toString().toUpperCase();
		X018_Indicador = StringUtil.removeSpecialChars(X018_Indicador).replaceAll("\"","").trim(); 

 		campoOb = rot.getField("X019__c");
		if (campoOb != null) X019_Indicador = campoOb.toString().toUpperCase();
		X019_Indicador = StringUtil.removeSpecialChars(X019_Indicador).replaceAll("\"","").trim(); 
 
		campoOb = rot.getField("X020__c");
		if (campoOb != null) X020_Indicador = campoOb.toString().toUpperCase();
		X020_Indicador = StringUtil.removeSpecialChars(X020_Indicador).replaceAll("\"","").trim(); 
 
		campoOb = rot.getField("X021__c");
		if (campoOb != null) X021_Indicador = campoOb.toString().toUpperCase();
		X021_Indicador = StringUtil.removeSpecialChars(X021_Indicador).replaceAll("\"","").trim(); 
 
		campoOb = rot.getField("X015_1__c");
		if (campoOb != null) X015_Label = campoOb.toString().toUpperCase();
		X015_Label = StringUtil.removeSpecialChars(X015_Label).replaceAll("\"","").trim(); 
 
		campoOb = rot.getField("X016_1__c");
		if (campoOb != null) X016_Label = campoOb.toString().toUpperCase();
		X016_Label = StringUtil.removeSpecialChars(X016_Label).replaceAll("\"","").trim(); 
 
		campoOb = rot.getField("X017_1__c");
		if (campoOb != null) X017_Label = campoOb.toString().toUpperCase();
		X017_Label = StringUtil.removeSpecialChars(X017_Label).replaceAll("\"","").trim(); 
 
		campoOb = rot.getField("X018_1__c");
		if (campoOb != null) X018_Label = campoOb.toString().toUpperCase();
		X018_Label = StringUtil.removeSpecialChars(X018_Label).replaceAll("\"","").trim(); 
 
		campoOb = rot.getField("X019_1__c");
		if (campoOb != null) X019_Label = campoOb.toString().toUpperCase();
		X019_Label = StringUtil.removeSpecialChars(X019_Label).replaceAll("\"","").trim(); 
 
		campoOb = rot.getField("X020_1__c");
		if (campoOb != null) X020_Label = campoOb.toString().toUpperCase();
        X020_Label = StringUtil.removeSpecialChars(X020_Label).replaceAll("\"","").trim();
        
        campoOb = rot.getField("Email_Logo__c");
		if (campoOb != null) Email_Logo = campoOb.toString().toUpperCase();
		Email_Logo = StringUtil.removeSpecialChars(Email_Logo).replaceAll("\"","").trim();
 
		campoOb = rot.getField("BuscaCnpjCRM__c");
		if (campoOb != null) BuscaCnpjCRM = campoOb.toString().toUpperCase();
		BuscaCnpjCRM = StringUtil.removeSpecialChars(BuscaCnpjCRM).replaceAll("\"","").trim();

        campoOb = rot.getField("Idioma__c");
		if (campoOb != null) Idioma = campoOb.toString().toUpperCase();
		Idioma = StringUtil.removeSpecialChars(Idioma).replaceAll("\"","").trim();
		
		campoOb = rot.getField("Rotulo_Complemento_01__c");
		if (campoOb != null) Rotulo_Complemento_01 = campoOb.toString().toUpperCase();
        Rotulo_Complemento_01 = StringUtil.removeSpecialChars(Rotulo_Complemento_01).replaceAll("\"","").trim();        
		
		campoOb = rot.getField("Rotulo_Complemento_02__c");
		if (campoOb != null) Rotulo_Complemento_02 = campoOb.toString().toUpperCase();
        Rotulo_Complemento_02 = StringUtil.removeSpecialChars(Rotulo_Complemento_02).replaceAll("\"","").trim();
        
		campoOb = rot.getField("Rotulo_Complemento_03__c");
		if (campoOb != null) Rotulo_Complemento_03 = campoOb.toString().toUpperCase();
        Rotulo_Complemento_03 = StringUtil.removeSpecialChars(Rotulo_Complemento_03).replaceAll("\"","").trim();
        
		campoOb = rot.getField("Rotulo_Complemento_04__c");
		if (campoOb != null) Rotulo_Complemento_04 = campoOb.toString().toUpperCase();
        Rotulo_Complemento_04 = StringUtil.removeSpecialChars(Rotulo_Complemento_04).replaceAll("\"","").trim();
        
		campoOb = rot.getField("Rotulo_Complemento_05__c");
		if (campoOb != null) Rotulo_Complemento_05 = campoOb.toString().toUpperCase();
        Rotulo_Complemento_05 = StringUtil.removeSpecialChars(Rotulo_Complemento_05).replaceAll("\"","").trim();		
		
 
		campoOb = rot.getField("Classificacao_descricao__c");
		if (campoOb != null) classificaPlano = campoOb.toString().toUpperCase();
		classificaPlano = StringUtil.removeSpecialChars(classificaPlano).replaceAll("\"","").trim();	
		classificaPlano = StringUtil.removeSpecialChars(classificaPlano).replaceAll("\\.","").trim();	

		campoOb = rot.getField("Classificacao_descricao__c");
		if (campoOb != null) classificaPlano = campoOb.toString().toUpperCase();
		classificaPlano = StringUtil.removeSpecialChars(classificaPlano).replaceAll("\"","").trim();	
		classificaPlano = StringUtil.removeSpecialChars(classificaPlano).replaceAll("\\.","").trim();	


		campoOb = rot.getField("cruzaExtrato__c");
		if (campoOb != null) cruzaExtrato = campoOb.toString().toUpperCase();

		campoOb = rot.getField("Cruza_Extrato_com_Extrato__c");
		if (campoOb != null) Cruza_Extrato_com_Extrato = campoOb.toString().toUpperCase();

		campoOb = rot.getField("Manter_Valores_da_Linha_Anterior__c");
		if (campoOb != null) naoZerarValores = campoOb.toString().toUpperCase();
		
		campoOb = rot.getField("Campos_Linhas_Abaixo__c");
		if (campoOb != null) lerAposPrincipal = campoOb.toString().toUpperCase();
		
		campoOb = rot.getField("Campo_Principal__c");
		if (campoOb != null) campoLinhaPrincipal = campoOb.toString().toUpperCase();		
		
		campoOb = rot.getField("Conta_Fixa_Cruzamento_Extrato__c");
		if (campoOb != null) Conta_Fixa_Cruzamento_Extrato = campoOb.toString().toUpperCase();
		if (Conta_Fixa_Cruzamento_Extrato.toUpperCase().contains("APLICA")) Conta_Fixa_Cruzamento_Extrato = "";

		campoOb = rot.getField("Integracao_fiscal__c");
		if (campoOb != null) Integracao_fiscal = campoOb.toString().toUpperCase();
		
		campoOb = rot.getField("Valida_Fornecedor_Fiscal__c");
		if (campoOb != null) Valida_Fornecedor_Fiscal = campoOb.toString().toUpperCase();
		Valida_Fornecedor_Fiscal = cutString(Valida_Fornecedor_Fiscal, 0, ".");
		if (Valida_Fornecedor_Fiscal.equals("")) Valida_Fornecedor_Fiscal = "0";
		
		campoOb = rot.getField("Fazer_Baixa_de_Contratos__c");
		if (campoOb != null) Integracao_contratos = campoOb.toString();
		
		campoOb = rot.getField("Planilhas_Padroes__c");
		if (campoOb != null) Planilhas_Padroes = campoOb.toString();
		
		campoOb = rot.getField("Usa_Filial_Questor__c");
		if (campoOb != null) Usa_Filial_Questor = campoOb.toString();
		
		campoOb = rot.getField("Ordem_dos_Indicadores__c");
		if (campoOb != null) Ordem_dos_Indicadores = campoOb.toString();
		
		campoOb = rot.getField("Gera_Log_Bussola__c");
		if (campoOb != null) Gera_Log_Bussola = campoOb.toString();
		
		campoOb = rot.getField("Arredonda__c");
		if (campoOb != null) Arredonda = campoOb.toString();
		
		campoOb = rot.getField("Vencimento_Usando_Complemento__c");
		if (campoOb != null) UsarComplementoVencimento = campoOb.toString().toUpperCase();
        UsarComplementoVencimento = StringUtil.removeSpecialChars(UsarComplementoVencimento).replaceAll("\"","").trim();

		campoOb = rot.getField("Parcela_Usando_Complemento__c");
		if (campoOb != null) UsarComplementoParcela = campoOb.toString().toUpperCase();
        UsarComplementoParcela = StringUtil.removeSpecialChars(UsarComplementoParcela).replaceAll("\"","").trim();

		campoOb = rot.getField("Especial_Fabrica__c");
		if (campoOb != null) ValidacoesFiscalFabrica = campoOb.toString().toUpperCase();
        ValidacoesFiscalFabrica = StringUtil.removeSpecialChars(ValidacoesFiscalFabrica).replaceAll("\"","").trim();
 		
		
		
		sb.append("    js.put(\"codigo\", \"").append(rot.getField("Name")).append("\");\r\n")
			  .append("    js.put(\"idRoteiro\", \"").append(idRoteiro).append("\");\r\n")
			  .append("    js.put(\"idEmpresa\", \"").append(rot.getField("Empresa_a_Ser_Integrada__c")).append("\");\r\n")
			  .append("    js.put(\"idContabilidade\", \"").append(rot.getField("Contabildiade_ID__c")).append("\");\r\n")
			  .append("    js.put(\"CnpjContabilidade\", \"").append(rot.getField("CNPJ_Contabilidade_c__c")).append("\");\r\n")
			  .append("    js.put(\"CnpjEmpresa\", \"").append(rot.getField("CNPJ_Empresa__c")).append("\");\r\n")
 			  
 
			  
			  .append("    js.put(\"fornecedor\", \"").append(Fornecedor).append("\");\r\n")
			  .append("    js.put(\"dataMovimento\", \"").append(DataMovimento).append("\");\r\n")
			  .append("    js.put(\"portador\", \"").append(Portador).append("\");\r\n")
			  .append("    js.put(\"documentoNF\", \"").append(DocumentoNF).append("\");\r\n")
			  .append("    js.put(\"valorDocumento\", \"").append(ValorDocumento).append("\");\r\n")
			  .append("    js.put(\"valorJuros\", \"").append(ValorJuros).append("\");\r\n")
			  .append("    js.put(\"valorDesconto\", \"").append(ValorDesconto).append("\");\r\n")
			  .append("    js.put(\"valorMulta\", \"").append(ValorMulta).append("\");\r\n")
			  .append("    js.put(\"valorPagamento\", \"").append(ValorPagamento).append("\");\r\n")
			  .append("    js.put(\"complemento01\", \"").append(Complemento01).append("\");\r\n")
			  .append("    js.put(\"complemento02\", \"").append(Complemento02).append("\");\r\n")
			  .append("    js.put(\"complemento03\", \"").append(Complemento03).append("\");\r\n")
			  .append("    js.put(\"complemento04\", \"").append(Complemento04).append("\");\r\n")
			  .append("    js.put(\"complemento05\", \"").append(Complemento05).append("\");\r\n")
			  .append("    js.put(\"complemento06\", \"").append(Complemento06).append("\");\r\n")
			  .append("    js.put(\"centroCusto\", \"").append(CentroCusto).append("\");\r\n")
			  .append("    js.put(\"valorAlternativo\", \"").append(ValorAlternativo).append("\");\r\n")
			  .append("    js.put(\"cpfCnpj\", \"").append(cpfCnpj).append("\");\r\n")
			  .append("    js.put(\"gravaCnpjMovimento\", \"").append(gravaCnpjMovimento).append("\");\r\n")
			  .append("    js.put(\"cnpjSomenteNumeros\", \"").append(cnpjSomenteNumeros).append("\");\r\n")
			  .append("    js.put(\"dataFake\", \"").append(dataFake).append("\");\r\n")
			  .append(rn)
			  .append("    js.put(\"Abas_Especificas\", \"").append(Abas_Especificas).append("\");\r\n")	  
			  .append("    js.put(\"classificaFornec\", \"").append(classificaFornec).append("\");\r\n")
			  .append("    js.put(\"classificaPlano\", \"").append(classificaPlano).append("\");\r\n")
			  .append("    js.put(\"contaFixaCredito\", \"").append(ContaFixaCREDITO).append("\");\r\n")
			  .append("    js.put(\"contaFixaDebito\", \"").append(ContaFixaDEBITO).append("\");\r\n")
			  .append("    js.put(\"contaFixaDesconto\", \"").append(ContaFixaDesconto).append("\");\r\n")
			  .append("    js.put(\"contaFixaJuros\", \"").append(ContaFixaJuros).append("\");\r\n")
			  .append("    js.put(\"contaFixaMulta\", \"").append(ContaFixaMulta).append("\");\r\n")
			  .append("    js.put(\"contabilidade\", \"").append(contabilidade).append("\");\r\n")
			  .append("    js.put(\"Contabilizacao_Atraves_Fornecedor\", \"").append(Contabilizacao_Atraves_Fornecedor).append("\");\r\n")	  
			  .append("    js.put(\"Conta_Fixa_Cruzamento_Extrato\", \"").append(Conta_Fixa_Cruzamento_Extrato).append("\");\r\n")
			  .append("    js.put(\"Cruza_Extrato_com_Extrato\", \"").append(Cruza_Extrato_com_Extrato).append("\");\r\n")
			  .append("    js.put(\"cruzaExtrato\", \"").append(cruzaExtrato).append("\");\r\n")
			  .append("    js.put(\"empresa\", \"").append(empresa).append("\");\r\n")
			  .append("    js.put(\"empresaDir\", \"").append(empresaDir).append("\");\r\n")
			  .append("    js.put(\"erpContabilidade\", \"").append(ERPContabilidade).append("\");\r\n")
			  .append("    js.put(\"Forcar_Partida_Dobrada\", \"").append(Forcar_Partida_Dobrada).append("\");\r\n")
			  .append("    js.put(\"Forcar_Partida_Simples\", \"").append(Forcar_Partida_Simples).append("\");\r\n")	  
			  .append("    js.put(\"Realizar_Busca_Plano\", \"").append(Realizar_Busca_Plano).append("\");\r\n")
			  .append("    js.put(\"geraGerencial\", \"").append(GeraGerencial).append("\");\r\n")
			  
			  .append("    js.put(\"Integracao_fiscal\", \"").append(Integracao_fiscal).append("\");\r\n")
			  .append("    js.put(\"ValidaFornecedorFiscal\", \"").append(Valida_Fornecedor_Fiscal).append("\");\r\n")
			  .append("    js.put(\"Integracao_contratos\", \"").append(Integracao_contratos).append("\");\r\n")		  

			  .append("    js.put(\"Usa_Filial_Questor\", \"").append(Usa_Filial_Questor).append("\");\r\n")
			  .append("    js.put(\"Ler_Planilha_Pelo_Cabecalho\", \"").append(Ler_Planilha_Pelo_Cabecalho).append("\");\r\n")
			  .append("    js.put(\"movimentoPortador\", \"").append(MovimentoPortador).append("\");\r\n")
			  .append("    js.put(\"naoZerarValores\", \"").append(naoZerarValores).append("\");\r\n")
			  .append("    js.put(\"lerAposPrincipal\", \"").append(lerAposPrincipal).append("\");\r\n")
			  .append("    js.put(\"campoLinhaPrincipal\", \"").append(campoLinhaPrincipal).append("\");\r\n")			  
			  .append("    js.put(\"nomeRelatorioRef\", \"").append(NomeRelatorioReferencia).append("\");\r\n")
			  .append("    js.put(\"Planilhas_Padroes\", \"").append(Planilhas_Padroes).append("\");\r\n")	  
			  .append("    js.put(\"statusRoteiro\", \"").append(StatusRoteiro).append("\");\r\n")
			  .append("    js.put(\"tipoArquivo\", \"").append(TipoArquivo).append("\");\r\n")
			  .append("    js.put(\"tipoIntegracao\", \"").append(TipoIntegracao).append("\");\r\n")
			  .append("    js.put(\"fazerShrink\", \"").append(fazerShrink).append("\");\r\n")
			  .append("    js.put(\"colunaShrink\", \"").append(colunaShrink).append("\");\r\n")
			  .append("    js.put(\"dupliNaoEncontContabil\", \"").append(dupliNaoEncontContabil).append("\");\r\n")
			  .append("    js.put(\"Conta_Dupl_Contabil\", \"").append(Conta_Dupl_Contabil).append("\");\r\n")
			  .append("    js.put(\"Aloca_Checknum\", \"").append(Aloca_Checknum).append("\");\r\n")
			  .append(rn)
			  .append("    js.put(\"usarComplementoVencimento\", \"").append(UsarComplementoVencimento).append("\");\r\n")
			  .append("    js.put(\"usarComplementoParcela\", \"").append(UsarComplementoParcela).append("\");\r\n")
			  .append("    js.put(\"especiaisBaixaFiscal\", \"").append(ValidacoesFiscalFabrica).append("\");\r\n")
			  .append("    js.put(\"Arredonda\", \"").append(Arredonda).append("\");\r\n")
			  .append("    js.put(\"Colunas_de_Valores_Extras\", \"").append(Colunas_de_Valores_Extras).append("\");\r\n")
			  .append("    js.put(\"Rotulos_Para_Valores_Extras\", \"").append(Rotulos_Para_Valores_Extras).append("\");\r\n") 
			  .append("    js.put(\"Colunas_de_Portadores_Extras\", \"").append(Colunas_de_Portadores_Extras).append("\");\r\n")
			  .append("    js.put(\"Coluna_Valor_Duplicata_Dominio\", \"").append(Coluna_Valor_Duplicata_Dominio).append("\");\r\n")
			  .append("    js.put(\"delimitadorDoArquivo\", \"").append(Delimitador_do_arquivo).append("\");\r\n")
			  .append("    js.put(\"agrupaArquivos\", \"").append(Agrupar_arquivo).append("\");\r\n")
			  
			  
			  
			  
			  
			  
			  .append(rn)
			  .append("    js.put(\"X001_ROB\", \"").append(X001_ROB).append("\");\r\n")
			  .append("    js.put(\"X002_Despesas\", \"").append(X002_Despesas).append("\");\r\n")
			  .append("    js.put(\"X003_Despesas_Detalhe\", \"").append(X003_Despesas_Detalhe).append("\");\r\n")
			  .append("    js.put(\"X004_Geracao_Caixa_Mes\", \"").append(X004_Geracao_Caixa_Mes).append("\");\r\n")
			  .append("    js.put(\"X005_Geracao_Caixa_Acumulado\", \"").append(X005_Geracao_Caixa_Acumulado).append("\");\r\n")
			  .append("    js.put(\"X006_Despesas_sobre_Faturamento\", \"").append(X006_Despesas_sobre_Faturamento).append("\");\r\n")
			  .append("    js.put(\"X007_Lucro\", \"").append(X007_Lucro).append("\");\r\n")
			  .append("    js.put(\"X008_Deducoes_Receitas\", \"").append(X008_Deducoes_Receitas).append("\");\r\n")
			  .append("    js.put(\"X009_CMV\", \"").append(X009_CMV).append("\");\r\n")
			  .append("    js.put(\"X010_CPV\", \"").append(X010_CPV).append("\");\r\n")
			  .append("    js.put(\"X011_CSP\", \"").append(X011_CSP).append("\");\r\n")
			  .append("    js.put(\"X012_Indicador\", \"").append(X012_Indicador).append("\");\r\n")
			  .append("    js.put(\"X013_Indicador\", \"").append(X013_Indicador).append("\");\r\n")
			  .append("    js.put(\"X014_Indicador\", \"").append(X014_Indicador).append("\");\r\n")
			  .append("    js.put(\"X015_Indicador\", \"").append(X015_Indicador).append("\");\r\n")
			  .append("    js.put(\"X016_Indicador\", \"").append(X016_Indicador).append("\");\r\n")
			  .append("    js.put(\"X017_Indicador\", \"").append(X017_Indicador).append("\");\r\n")
			  .append("    js.put(\"X018_Indicador\", \"").append(X018_Indicador).append("\");\r\n")
			  .append("    js.put(\"X019_Indicador\", \"").append(X019_Indicador).append("\");\r\n")
			  .append("    js.put(\"X020_Indicador\", \"").append(X020_Indicador).append("\");\r\n")
			  .append("    js.put(\"X021_Indicador\", \"").append(X021_Indicador).append("\");\r\n")
			  .append(rn)
			  .append("    js.put(\"X015_Label\", \"").append(X015_Label).append("\");\r\n")
			  .append("    js.put(\"X016_Label\", \"").append(X016_Label).append("\");\r\n")
			  .append("    js.put(\"X017_Label\", \"").append(X017_Label).append("\");\r\n")
			  .append("    js.put(\"X018_Label\", \"").append(X018_Label).append("\");\r\n")
			  .append("    js.put(\"X019_Label\", \"").append(X019_Label).append("\");\r\n")
              .append("    js.put(\"X020_Label\", \"").append(X020_Label).append("\");\r\n")
              .append("    js.put(\"Email_Logo\", \"").append(Email_Logo).append("\");\r\n")
              .append("    js.put(\"BuscaCnpjCRM\", \"").append(BuscaCnpjCRM).append("\");\r\n")
              .append("    js.put(\"Idioma\", \"").append(Idioma).append("\");\r\n")
			  .append("    js.put(\"Ordem_dos_Indicadores\", \"").append(Ordem_dos_Indicadores).append("\");\r\n")
			  .append("    js.put(\"Rotulo_Complemento_01\", \"").append(Rotulo_Complemento_01).append("\");\r\n")
 			  .append("    js.put(\"Rotulo_Complemento_02\", \"").append(Rotulo_Complemento_02).append("\");\r\n")
 			  .append("    js.put(\"Rotulo_Complemento_03\", \"").append(Rotulo_Complemento_03).append("\");\r\n")
 			  .append("    js.put(\"Rotulo_Complemento_04\", \"").append(Rotulo_Complemento_04).append("\");\r\n")
 			  .append("    js.put(\"Rotulo_Complemento_05\", \"").append(Rotulo_Complemento_05).append("\");\r\n")
			 
			  .append("    js.put(\"Gera_LOG\", \"").append(Gera_Log_Bussola).append("\");\r\n")
			  .append("    js.put(\"Gera_LOG_PARAMETROS\", \"").append("\");\r\n")
			  
			  
			  
              .append(rn);
			  

    } else {
        //logger.logError(">> NAO CONSEGUIU OBTER DADOS DO ROTEIRO!" + idRoteiro);
    }
	
    sb.append("    return js;\r\n")
      .append("}").append(rn).append(rn);

}

private void makeCodigoRoteiroSecundario(String idRoteiro, String empresa, String empresaDir,
                                     String contabilidade, String Ler_planilhas_padroes, 
									 String roteirosContabilidadePG, String roteirosContabilidadeREC, String tipoIntegracao,
									 StringBuilder sb,     PartnerConnection sfCon, 
                                     InoutLogger logger) throws Exception {

    String rn = "\r\n";
    
    // Obtem o Roteiro /////////////////////////////////////////////////
    StringBuilder sql = new StringBuilder();
    sql.append("SELECT Name, Centro_de_Custo__c, Complemento_01__c, Complemento_02__c, Abas_Especificas__c, Ler_Planilha_Pelo_Cabecalho__c, ")
       .append("Complemento_03__c, Complemento_04__c, Complemento_05__c, Complemento_06__c, Conta_Fixa_CREDITO__c, Conta_Fixa_DEBITO__c, Vencimento_Usando_Complemento__c, Parcela_Usando_Complemento__c, ")
       .append("Conta_Fixa_Desconto__c, Conta_Fixa_Juros__c, Conta_Fixa_Multa__c, Valor_Pagamento_Liquido__c, RecordTypeId, Palavras_Chave_Para_Identificar_Planilha__c, ")
       .append("Data_Movimento__c, Documento_NF__c, Empresa_a_Ser_Integrada__c, Contabildiade_ID__c, CNPJ_Contabilidade_c__c, CNPJ_Empresa__c, Forcar_Partida_Dobrada__c,Forcar_Partida_Simples__c,Realizar_Busca_Plano__c, Contabilizacao_Atraves_Fornecedor__c, nome_Arquivo__c, ")
       .append("Fornecedor__c, Nome_do_Relat_rio_Refer_ncia__c, cruzaExtrato__c, Cruza_Extrato_com_Extrato__c, Classificacao_Conta_Fornecedor_Cliente__c, ")
       .append("Portador__c, Gera_Gerencial__c, Status_Roteiro__c, Tipo_de_Arquivo__c, Classificacao_descricao__c, Shrink_Coluna__c, Agrupar_Colunas_Excel__c, ")
       .append("Tipo_Integracao__c, Valor_Desconto__c, Valor_Documento__c, Valor_Juros__c, Planilhas_Padroes__c,  CNPJ_CPF__c, CNPJ_Movimento__c, Tratar_CNPJ_apenas_os_numeros__c,  ")
       .append("Valor_Multa__c, Movimento_Portador__c, ERP_Contabilidade__c, Conta_Fixa_Cruzamento_Extrato__c, Integracao_fiscal__c, dupliNaoEncontContabil__c, Conta_Dupl_Contabil__c, Aloca_Checknum__c, ")
       .append("Rotulo_Complemento_01__c, Rotulo_Complemento_02__c, Rotulo_Complemento_03__c, Rotulo_Complemento_04__c, Rotulo_Complemento_05__c, Colunas_de_Valores_Extras__c	, Colunas_de_Portadores_Extras__c, Rotulos_Para_Valores_Extras__c, ")
	   .append("Fazer_Baixa_de_Contratos__c, Tipo_Planilha__c, Valida_Data_na_Coluna__c, Manter_Valores_da_Linha_Anterior__c, Valor_Alternativo_Extrato__c, Valor_Alternativo_Coluna__c, Campos_Linhas_Abaixo__c, Campo_Principal__c ")
       .append("FROM Roteiros__c WHERE Exportar_Junto_com_Roteiro_Principal__c='").append(idRoteiro).append("'");

	if (Ler_planilhas_padroes.toUpperCase().equals("TRUE")) {
		if (tipoIntegracao.toUpperCase().contains("RECEB")) sql.append(" OR RecordTypeId = '0121C000001lBuD' ");
	   
		if (tipoIntegracao.toUpperCase().contains("PAG")) {
			sql.append(" or name = 'ROT-2021-1016997' ");
		}
		if (tipoIntegracao.toUpperCase().contains("RECEB")) {
			sql.append(" OR name = 'ROT-2021-1016996' ");
		}
 
	}
	
	if (!roteirosContabilidadePG.equals("") && tipoIntegracao.toUpperCase().contains("PAG")) {
		sql.append("or name = '").append(roteirosContabilidadePG.replaceAll(";","' or name = '")).append("' ");
	}
	if (!roteirosContabilidadeREC.equals("") && tipoIntegracao.toUpperCase().contains("RECEB")) {
		sql.append("or name = '").append(roteirosContabilidadeREC.replaceAll(";","' or name = '")).append("' ");
	}	
		 

    sql.append(" order by Tipo_Planilha__c ");

    QueryResult qres1 = sfCon.query(sql.toString());

	int numeroRoteiro = 0;
  		
    if (qres1.getSize() > 0) {
        for (SObject rot : qres1.getRecords()) {	
  
			numeroRoteiro++;	
			String CentroCusto	 = "";
			String idEmpresa	 = "";
			String idContabilidade	 = "";
			String CnpjContabilidade	 = "";
			String CnpjEmpresa = "";
			String Complemento01 = "";
			String Complemento02 = "";
			String Complemento03 = "";
			String Complemento04 = "";
			String Complemento05 = "";
			String Complemento06 = "";
			String UsarComplementoVencimento 	= "";
			String UsarComplementoParcela    	= "";
			String ContaFixaDEBITO = "";
			String ContaFixaCREDITO = "";
			String ContaFixaDesconto = "";
			String ContaFixaJuros = "";
			String ContaFixaMulta = "";
			String DataMovimento = "";
			String DocumentoNF = "";
			String NomeRelatorioReferencia = "";
			String Fornecedor = "";
			String Portador = "";
			String GeraGerencial = "";
			String StatusRoteiro = "";
			String MovimentoPortador = "";
			String TipoArquivo = "";
			String TipoIntegracao = "";
			String ValorDesconto = "";
			String ValorDocumento = "";
			String ValorAlternativo = "";
			String ValorPagamento = "";
			String ValorJuros = "";
			String ValorMulta = "";
			String ERPContabilidade = "";
			String tipoRegistro = "";
			String cruzaExtrato  = "";
			String Cruza_Extrato_com_Extrato = "";
			String classificaFornec = "";
			String classificaPlano = "";
			String Conta_Fixa_Cruzamento_Extrato = "";
			String Integracao_fiscal = "";
			String Integracao_contratos = "";
			
			String Planilhas_Padroes = "";
			String Abas_Especificas = "";
			String Ler_Planilha_Pelo_Cabecalho = "";
			String Contabilizacao_Atraves_Fornecedor = "";
			String Forcar_Partida_Dobrada = "";
			String Forcar_Partida_Simples = "";
			String Realizar_Busca_Plano = "";
			String tipoPlanilha = "";
			String dataFake = "";
			String naoZerarValores = "";
			String lerAposPrincipal = "";
			String campoLinhaPrincipal = ""; 
			String cpfCnpj = "";
			String gravaCnpjMovimento = "";
			String cnpjSomenteNumeros = "";		
			String fazerShrink = "";
			String colunaShrink = "";
			String dupliNaoEncontContabil = "";
			String Conta_Dupl_Contabil = "";
			String Aloca_Checknum = "";
			
			String Rotulo_Complemento_01	= "";
			String Rotulo_Complemento_02	= "";
			String Rotulo_Complemento_03	= "";
			String Rotulo_Complemento_04	= "";
			String Rotulo_Complemento_05	= "";
			
			String Colunas_de_Valores_Extras    = "";
			String Colunas_de_Portadores_Extras = "";
			String Rotulos_Para_Valores_Extras  = "";
			String Palavras_Chave = "";
			String Arquivo_Secundario  = "";
			
		 	Object campoOb = rot.getField("Centro_de_Custo__c");
			if (campoOb != null) CentroCusto = campoOb.toString().toUpperCase();
			CentroCusto = StringUtil.removeSpecialChars(CentroCusto).replaceAll("\"","").trim();
			if (CentroCusto.toUpperCase().contains("APLICA")) CentroCusto = "";
			
			campoOb = rot.getField("Palavras_Chave_Para_Identificar_Planilha__c");
			if (campoOb != null) Palavras_Chave = campoOb.toString().toUpperCase();
			Palavras_Chave = StringUtil.removeSpecialChars(Palavras_Chave).trim();
  
			campoOb = rot.getField("nome_Arquivo__c");
			if (campoOb != null) Arquivo_Secundario = campoOb.toString().toUpperCase();
			Arquivo_Secundario = StringUtil.removeSpecialChars(Arquivo_Secundario).trim();
 			
			if (Arquivo_Secundario.equals("") && Palavras_Chave.equals("")) continue;
						
			campoOb = rot.getField("Classificacao_Conta_Fornecedor_Cliente__c");
			if (campoOb != null) classificaFornec = campoOb.toString().toUpperCase();
			classificaFornec = StringUtil.removeSpecialChars(classificaFornec).replaceAll("\"","").trim();
			classificaFornec = StringUtil.removeSpecialChars(classificaFornec).replaceAll("\\.","").trim();
			if (classificaFornec.toUpperCase().contains("APLICA")) classificaFornec = "";
			
			
			campoOb = rot.getField("Abas_Especificas__c");
			if (campoOb != null) Abas_Especificas = campoOb.toString();
			Abas_Especificas = StringUtil.removeSpecialChars(Abas_Especificas).replaceAll("\"","").trim();	
			if (Abas_Especificas.toUpperCase().contains("APLICA")) Abas_Especificas = "";
			if (Abas_Especificas.toUpperCase().contains("APLICA")) Abas_Especificas = "";
			if (Abas_Especificas.endsWith(";")) Abas_Especificas = Abas_Especificas.substring(0,Abas_Especificas.lastIndexOf(";")).trim();
		


			campoOb = rot.getField("Complemento_01__c");
			if (campoOb != null) Complemento01 = campoOb.toString().toUpperCase();
			Complemento01 = StringUtil.removeSpecialChars(Complemento01).replaceAll("\"","").trim();	
			if (Complemento01.toUpperCase().contains("APLICA")) Complemento01 = "";

			campoOb = rot.getField("Complemento_02__c");
			if (campoOb != null) Complemento02 = campoOb.toString().toUpperCase();
			Complemento02 = StringUtil.removeSpecialChars(Complemento02).replaceAll("\"","").trim();	
			if (Complemento02.toUpperCase().contains("APLICA")) Complemento02 = "";

			campoOb = rot.getField("Complemento_03__c");
			if (campoOb != null) Complemento03 = campoOb.toString().toUpperCase();
			Complemento03 = StringUtil.removeSpecialChars(Complemento03).replaceAll("\"","").trim();	
			if (Complemento03.toUpperCase().contains("APLICA")) Complemento03 = "";

			campoOb = rot.getField("Complemento_04__c");
			if (campoOb != null) Complemento04 = campoOb.toString().toUpperCase();
			Complemento04 = StringUtil.removeSpecialChars(Complemento04).replaceAll("\"","").trim();	
			if (Complemento04.toUpperCase().contains("APLICA")) Complemento04 = "";

			campoOb = rot.getField("Complemento_05__c");
			if (campoOb != null) Complemento05 = campoOb.toString().toUpperCase();
			Complemento05 = StringUtil.removeSpecialChars(Complemento05).replaceAll("\"","").trim();	
			if (Complemento05.toUpperCase().contains("APLICA")) Complemento05 = "";

			campoOb = rot.getField("Complemento_06__c");
			if (campoOb != null) Complemento06 = campoOb.toString().toUpperCase();
			Complemento06 = StringUtil.removeSpecialChars(Complemento06).replaceAll("\"","").trim();	
			if (Complemento06.toUpperCase().contains("APLICA")) Complemento06 = "";

			campoOb = rot.getField("Conta_Fixa_CREDITO__c");
			if (campoOb != null) ContaFixaCREDITO = campoOb.toString().toUpperCase();
			ContaFixaCREDITO = StringUtil.removeSpecialChars(ContaFixaCREDITO).replaceAll("\"","").trim();	
			if (ContaFixaCREDITO.toUpperCase().contains("APLICA")) ContaFixaCREDITO = "";

			campoOb = rot.getField("Conta_Fixa_DEBITO__c");
			if (campoOb != null) ContaFixaDEBITO = campoOb.toString().toUpperCase();
			ContaFixaDEBITO = StringUtil.removeSpecialChars(ContaFixaDEBITO).replaceAll("\"","").trim();	
			if (ContaFixaDEBITO.toUpperCase().contains("APLICA")) ContaFixaDEBITO = "";
			
			campoOb = rot.getField("Conta_Fixa_Desconto__c");
			if (campoOb != null) ContaFixaDesconto = campoOb.toString().toUpperCase();
			ContaFixaDesconto = StringUtil.removeSpecialChars(ContaFixaDesconto).replaceAll("\"","").trim();	
			if (ContaFixaDesconto.toUpperCase().contains("APLICA")) ContaFixaDesconto = "";

			campoOb = rot.getField("Conta_Fixa_Juros__c");
			if (campoOb != null) ContaFixaJuros = campoOb.toString().toUpperCase();
			ContaFixaJuros = StringUtil.removeSpecialChars(ContaFixaJuros).replaceAll("\"","").trim();	
			if (ContaFixaJuros.toUpperCase().contains("APLICA")) ContaFixaJuros = "";
			
			campoOb = rot.getField("Conta_Fixa_Multa__c");
			if (campoOb != null) ContaFixaMulta = campoOb.toString().toUpperCase();
			ContaFixaMulta = StringUtil.removeSpecialChars(ContaFixaMulta).replaceAll("\"","").trim();	
			if (ContaFixaMulta.toUpperCase().contains("APLICA")) ContaFixaMulta = "";
			
			campoOb = rot.getField("Data_Movimento__c");
			if (campoOb != null) DataMovimento = campoOb.toString().toUpperCase();
			DataMovimento = StringUtil.removeSpecialChars(DataMovimento).replaceAll("\"","").trim();	
			if (DataMovimento.toUpperCase().contains("APLICA")) DataMovimento = "";
			
			campoOb = rot.getField("Valida_Data_na_Coluna__c");
			if (campoOb != null) dataFake = campoOb.toString().toUpperCase();
			dataFake = StringUtil.removeSpecialChars(dataFake).replaceAll("\"","").trim();	
			if (dataFake.toUpperCase().contains("APLICA")) dataFake = "";
			
		
			campoOb = rot.getField("Tipo_Planilha__c");
			if (campoOb != null) tipoPlanilha = campoOb.toString().toUpperCase();
			
			String tipoOttCartao = "";
			
			campoOb = rot.getField("RecordTypeId");
			if (campoOb != null && campoOb.toString().contains("0121C000001lBuD")) tipoOttCartao = "OTTCARTAO";	

 			
 
			tipoPlanilha = StringUtil.removeSpecialChars(tipoPlanilha).replaceAll("\"","").trim()+tipoOttCartao+numeroRoteiro;	
			// if (tipoPlanilha.toUpperCase().contains("APLICA")) tipoPlanilha = "MOVIMENTO"; comentado pois ocorria problema com alguns roteiros
			
			
			campoOb = rot.getField("Documento_NF__c");
			if (campoOb != null) DocumentoNF = campoOb.toString().toUpperCase();
			DocumentoNF = StringUtil.removeSpecialChars(DocumentoNF).replaceAll("\"","").trim();	
			if (DocumentoNF.toUpperCase().contains("APLICA")) DocumentoNF = "";
			
			campoOb = rot.getField("Fornecedor__c");
			if (campoOb != null) Fornecedor = campoOb.toString().toUpperCase();
			Fornecedor = StringUtil.removeSpecialChars(Fornecedor).replaceAll("\"","").trim();	
			if (Fornecedor.toUpperCase().contains("APLICA")) Fornecedor = "";

			campoOb = rot.getField("Nome_do_Relat_rio_Refer_ncia__c");
			if (campoOb != null) NomeRelatorioReferencia = campoOb.toString().toUpperCase();
			NomeRelatorioReferencia = StringUtil.removeSpecialChars(NomeRelatorioReferencia).replaceAll("\"","").trim();	
			if (NomeRelatorioReferencia.toUpperCase().contains("APLICA")) NomeRelatorioReferencia = "";
			
			campoOb = rot.getField("Portador__c");
			if (campoOb != null) Portador = campoOb.toString().toUpperCase();
			Portador = StringUtil.removeSpecialChars(Portador).replaceAll("\"","").trim();	
			if (Portador.toUpperCase().contains("APLICA")) Portador = "";
			
			campoOb = rot.getField("Gera_Gerencial__c");
			if (campoOb != null) GeraGerencial = campoOb.toString().toUpperCase();
			GeraGerencial = StringUtil.removeSpecialChars(GeraGerencial).replaceAll("\"","").trim();	
			if (GeraGerencial.toUpperCase().contains("APLICA")) GeraGerencial = "";
			
			campoOb = rot.getField("Status_Roteiro__c");
			if (campoOb != null) StatusRoteiro = campoOb.toString().toUpperCase();
			StatusRoteiro = StringUtil.removeSpecialChars(StatusRoteiro).replaceAll("\"","").trim();	
			if (StatusRoteiro.toUpperCase().contains("APLICA")) StatusRoteiro = "";
			
			campoOb = rot.getField("Tipo_de_Arquivo__c");
			if (campoOb != null) TipoArquivo = campoOb.toString().toUpperCase();
			TipoArquivo = StringUtil.removeSpecialChars(TipoArquivo).replaceAll("\"","").trim();	
			if (TipoArquivo.toUpperCase().contains("APLICA")) TipoArquivo = "";
			
			campoOb = rot.getField("Tipo_Integracao__c");
			if (campoOb != null) TipoIntegracao = campoOb.toString().toUpperCase();
			TipoIntegracao = StringUtil.removeSpecialChars(TipoIntegracao).replaceAll("\"","").trim();	
			if (TipoIntegracao.toUpperCase().contains("APLICA")) TipoIntegracao = "";
			
			campoOb = rot.getField("Valor_Desconto__c");
			if (campoOb != null) ValorDesconto = campoOb.toString().toUpperCase();
			ValorDesconto = StringUtil.removeSpecialChars(ValorDesconto).replaceAll("\"","").trim();	
			if (ValorDesconto.toUpperCase().contains("APLICA")) ValorDesconto = "";
			
			campoOb = rot.getField("Valor_Documento__c");
			if (campoOb != null) ValorDocumento = campoOb.toString().toUpperCase();
			ValorDocumento = StringUtil.removeSpecialChars(ValorDocumento).replaceAll("\"","").trim();	
			if (ValorDocumento.toUpperCase().contains("APLICA")) ValorDocumento = "";
			
			campoOb = rot.getField("Valor_Alternativo_Extrato__c");
			if (campoOb != null) ValorAlternativo = campoOb.toString().toUpperCase();
			ValorAlternativo = StringUtil.removeSpecialChars(ValorAlternativo).replaceAll("\"","").trim();	
			if (ValorAlternativo.toUpperCase().contains("APLICA")) ValorAlternativo = "";
			
			campoOb = rot.getField("CNPJ_CPF__c");
			if (campoOb != null) cpfCnpj = campoOb.toString().toUpperCase();
			cpfCnpj = StringUtil.removeSpecialChars(cpfCnpj).replaceAll("\"","").trim();	

			campoOb = rot.getField("CNPJ_Movimento__c");
			if (campoOb != null) gravaCnpjMovimento = campoOb.toString().toUpperCase();
			gravaCnpjMovimento = StringUtil.removeSpecialChars(gravaCnpjMovimento).replaceAll("\"","").trim();	
			
			campoOb = rot.getField("Tratar_CNPJ_apenas_os_numeros__c");
			if (campoOb != null) cnpjSomenteNumeros = campoOb.toString().toUpperCase();
			cnpjSomenteNumeros = StringUtil.removeSpecialChars(cnpjSomenteNumeros).replaceAll("\"","").trim();	 		 
			
			campoOb = rot.getField("Valor_Juros__c");
			if (campoOb != null) ValorJuros = campoOb.toString().toUpperCase();
			ValorJuros = StringUtil.removeSpecialChars(ValorJuros).replaceAll("\"","").trim();	
			if (ValorJuros.toUpperCase().contains("APLICA")) ValorJuros = "";
			
			campoOb = rot.getField("Valor_Pagamento_Liquido__c");
			if (campoOb != null) ValorPagamento = campoOb.toString().toUpperCase();
			ValorPagamento = StringUtil.removeSpecialChars(ValorPagamento).replaceAll("\"","").trim();	
			if (ValorPagamento.toUpperCase().contains("APLICA")) ValorPagamento = "";
			
			campoOb = rot.getField("Valor_Multa__c");
			if (campoOb != null) ValorMulta = campoOb.toString().toUpperCase();
			ValorMulta = StringUtil.removeSpecialChars(ValorMulta).replaceAll("\"","").trim();	
			if (ValorMulta.toUpperCase().contains("APLICA")) ValorMulta = "";
			
			campoOb = rot.getField("Movimento_Portador__c");
			if (campoOb != null) MovimentoPortador = campoOb.toString().toUpperCase();
			MovimentoPortador = StringUtil.removeSpecialChars(MovimentoPortador).replaceAll("\"","").trim();	
			if (MovimentoPortador.toUpperCase().contains("APLICA")) MovimentoPortador = "";

			campoOb = rot.getField("ERP_Contabilidade__c");
			if (campoOb != null) ERPContabilidade = campoOb.toString().toUpperCase();
			ERPContabilidade = StringUtil.removeSpecialChars(ERPContabilidade).replaceAll("\"","").trim();	

			campoOb = rot.getField("Ler_Planilha_Pelo_Cabecalho__c");
			if (campoOb != null) Ler_Planilha_Pelo_Cabecalho = campoOb.toString().toUpperCase();
			Ler_Planilha_Pelo_Cabecalho = StringUtil.removeSpecialChars(Ler_Planilha_Pelo_Cabecalho).replaceAll("\"","").trim();	

			campoOb = rot.getField("Contabilizacao_Atraves_Fornecedor__c");
			if (campoOb != null) Contabilizacao_Atraves_Fornecedor = campoOb.toString().toUpperCase();
			Contabilizacao_Atraves_Fornecedor = StringUtil.removeSpecialChars(Contabilizacao_Atraves_Fornecedor).replaceAll("\"","").trim();	

			campoOb = rot.getField("Forcar_Partida_Dobrada__c");
			if (campoOb != null) Forcar_Partida_Dobrada = campoOb.toString().toUpperCase();
			Forcar_Partida_Dobrada = StringUtil.removeSpecialChars(Forcar_Partida_Dobrada).replaceAll("\"","").trim();	
			
			campoOb = rot.getField("Forcar_Partida_Simples__c");
			if (campoOb != null) Forcar_Partida_Simples = campoOb.toString().toUpperCase();
			Forcar_Partida_Simples = StringUtil.removeSpecialChars(Forcar_Partida_Simples).replaceAll("\"","").trim();	
			
			campoOb = rot.getField("Realizar_Busca_Plano__c");
			if (campoOb != null) Realizar_Busca_Plano = campoOb.toString().toUpperCase();
			Realizar_Busca_Plano = StringUtil.removeSpecialChars(Realizar_Busca_Plano).replaceAll("\"","").trim();	
			
			campoOb = rot.getField("Campos_Linhas_Abaixo__c");
			if (campoOb != null) lerAposPrincipal = campoOb.toString().toUpperCase();
			
			campoOb = rot.getField("Campo_Principal__c");
			if (campoOb != null) campoLinhaPrincipal = campoOb.toString().toUpperCase();	

			campoOb = rot.getField("Shrink_Coluna__c");
			if (campoOb != null) colunaShrink = campoOb.toString().toUpperCase();
			colunaShrink = StringUtil.removeSpecialChars(colunaShrink).replaceAll("\"","").trim();
			if (colunaShrink.equals("")) colunaShrink = "0";

			campoOb = rot.getField("Agrupar_Colunas_Excel__c");
			if (campoOb != null) fazerShrink = campoOb.toString().toUpperCase();
			fazerShrink = StringUtil.removeSpecialChars(fazerShrink).replaceAll("\"","").trim();
			
			
			campoOb = rot.getField("Rotulo_Complemento_01__c");
			if (campoOb != null) Rotulo_Complemento_01 = campoOb.toString().toUpperCase();
			Rotulo_Complemento_01 = StringUtil.removeSpecialChars(Rotulo_Complemento_01).replaceAll("\"","").trim();        
			
			campoOb = rot.getField("Rotulo_Complemento_02__c");
			if (campoOb != null) Rotulo_Complemento_02 = campoOb.toString().toUpperCase();
			Rotulo_Complemento_02 = StringUtil.removeSpecialChars(Rotulo_Complemento_02).replaceAll("\"","").trim();
			
			campoOb = rot.getField("Rotulo_Complemento_03__c");
			if (campoOb != null) Rotulo_Complemento_03 = campoOb.toString().toUpperCase();
			Rotulo_Complemento_03 = StringUtil.removeSpecialChars(Rotulo_Complemento_03).replaceAll("\"","").trim();
			
			campoOb = rot.getField("Rotulo_Complemento_04__c");
			if (campoOb != null) Rotulo_Complemento_04 = campoOb.toString().toUpperCase();
			Rotulo_Complemento_04 = StringUtil.removeSpecialChars(Rotulo_Complemento_04).replaceAll("\"","").trim();
			
			campoOb = rot.getField("Rotulo_Complemento_05__c");
			if (campoOb != null) Rotulo_Complemento_05 = campoOb.toString().toUpperCase();
			Rotulo_Complemento_05 = StringUtil.removeSpecialChars(Rotulo_Complemento_05).replaceAll("\"","").trim();	
	 
				
			campoOb = rot.getField("dupliNaoEncontContabil__c");
			if (campoOb != null) dupliNaoEncontContabil = campoOb.toString().toUpperCase();
			dupliNaoEncontContabil = StringUtil.removeSpecialChars(dupliNaoEncontContabil).replaceAll("\"","").trim();
		 
			campoOb = rot.getField("Conta_Dupl_Contabil__c");
			if (campoOb != null) Conta_Dupl_Contabil = campoOb.toString().toUpperCase();
			Conta_Dupl_Contabil = StringUtil.removeSpecialChars(Conta_Dupl_Contabil).replaceAll("\"","").trim();
		 
			campoOb = rot.getField("Aloca_Checknum__c");
			if (campoOb != null) Aloca_Checknum = campoOb.toString().toUpperCase();
			Aloca_Checknum = StringUtil.removeSpecialChars(Aloca_Checknum).replaceAll("\"","").trim();
		 
		
			campoOb = rot.getField("Classificacao_descricao__c");
			if (campoOb != null) classificaPlano = campoOb.toString();
			classificaPlano = StringUtil.removeSpecialChars(classificaPlano).replaceAll("\"","").trim();	
			classificaPlano = StringUtil.removeSpecialChars(classificaPlano).replaceAll("\\.","").trim();	

			campoOb = rot.getField("Classificacao_descricao__c");
			if (campoOb != null) classificaPlano = campoOb.toString();
			classificaPlano = StringUtil.removeSpecialChars(classificaPlano).replaceAll("\"","").trim();	
			classificaPlano = StringUtil.removeSpecialChars(classificaPlano).replaceAll("\\.","").trim();	

		
			campoOb = rot.getField("cruzaExtrato__c");
			if (campoOb != null) cruzaExtrato = campoOb.toString();

			campoOb = rot.getField("Cruza_Extrato_com_Extrato__c");
			if (campoOb != null) Cruza_Extrato_com_Extrato = campoOb.toString();

			campoOb = rot.getField("Manter_Valores_da_Linha_Anterior__c");
			if (campoOb != null) naoZerarValores = campoOb.toString().toUpperCase();

			
			campoOb = rot.getField("Conta_Fixa_Cruzamento_Extrato__c");
			if (campoOb != null) Conta_Fixa_Cruzamento_Extrato = campoOb.toString();

			campoOb = rot.getField("Integracao_fiscal__c");
			if (campoOb != null) Integracao_fiscal = campoOb.toString();
			
			campoOb = rot.getField("Fazer_Baixa_de_Contratos__c");
			if (campoOb != null) Integracao_contratos = campoOb.toString();
			
			campoOb = rot.getField("Vencimento_Usando_Complemento__c");
			if (campoOb != null) UsarComplementoVencimento = campoOb.toString().toUpperCase();
			UsarComplementoVencimento = StringUtil.removeSpecialChars(UsarComplementoVencimento).replaceAll("\"","").trim();

			campoOb = rot.getField("Parcela_Usando_Complemento__c");
			if (campoOb != null) UsarComplementoParcela = campoOb.toString().toUpperCase();
			UsarComplementoParcela = StringUtil.removeSpecialChars(UsarComplementoParcela).replaceAll("\"","").trim();
			
			
			
			campoOb = rot.getField("Planilhas_Padroes__c");
			if (campoOb != null) Planilhas_Padroes = campoOb.toString();
			
			campoOb = rot.getField("Colunas_de_Valores_Extras__c");
			if (campoOb != null) Colunas_de_Valores_Extras = campoOb.toString().toUpperCase();
			Colunas_de_Valores_Extras = StringUtil.removeSpecialChars(Colunas_de_Valores_Extras).replaceAll("\"","").trim();
		 
			campoOb = rot.getField("Colunas_de_Portadores_Extras__c");
			if (campoOb != null) Colunas_de_Portadores_Extras = campoOb.toString().toUpperCase();
			Colunas_de_Portadores_Extras = StringUtil.removeSpecialChars(Colunas_de_Portadores_Extras).replaceAll("\"","").trim();
		 
			campoOb = rot.getField("Rotulos_Para_Valores_Extras__c");
			if (campoOb != null) Rotulos_Para_Valores_Extras = campoOb.toString().toUpperCase();
			Rotulos_Para_Valores_Extras = StringUtil.removeSpecialChars(Rotulos_Para_Valores_Extras).replaceAll("\"","").trim();
		
			// Prepara o metodo a ser escrito no script da rota que retorna um 
			// JSONObject com os dados do roteiro.
			sb.append("public JSONObject getRoteiro").append(tipoPlanilha).append("() {").append(rn)
			  .append("    JSONObject js = new JSONObject()").append(";\r\n");

			  sb.append("    js.put(\"codigo\", \"").append(rot.getField("Name")).append("\");\r\n")
			  .append("    js.put(\"idRoteiro\", \"").append(idRoteiro).append("\");\r\n")
			  .append("    js.put(\"idEmpresa\", \"").append(rot.getField("Empresa_a_Ser_Integrada__c")).append("\");\r\n")
			  .append("    js.put(\"idContabilidade\", \"").append(rot.getField("Contabildiade_ID__c")).append("\");\r\n")
			  .append("    js.put(\"CnpjContabilidade\", \"").append(rot.getField("CNPJ_Contabilidade_c__c")).append("\");\r\n")
			  .append("    js.put(\"CnpjEmpresa\", \"").append(rot.getField("CNPJ_Empresa__c")).append("\");\r\n")
			  
			  .append("    js.put(\"usarComplementoVencimento\", \"").append(UsarComplementoVencimento).append("\");\r\n")
			  .append("    js.put(\"usarComplementoParcela\", \"").append(UsarComplementoParcela).append("\");\r\n")
		
 
			  
			  .append("    js.put(\"fornecedor\", \"").append(Fornecedor).append("\");\r\n")
			  .append("    js.put(\"dataMovimento\", \"").append(DataMovimento).append("\");\r\n")
			  .append("    js.put(\"portador\", \"").append(Portador).append("\");\r\n")
			  .append("    js.put(\"documentoNF\", \"").append(DocumentoNF).append("\");\r\n")
			  .append("    js.put(\"valorDocumento\", \"").append(ValorDocumento).append("\");\r\n")
			  .append("    js.put(\"valorJuros\", \"").append(ValorJuros).append("\");\r\n")
			  .append("    js.put(\"valorDesconto\", \"").append(ValorDesconto).append("\");\r\n")
			  .append("    js.put(\"valorMulta\", \"").append(ValorMulta).append("\");\r\n")
			  .append("    js.put(\"valorPagamento\", \"").append(ValorPagamento).append("\");\r\n")
			  .append("    js.put(\"complemento01\", \"").append(Complemento01).append("\");\r\n")
			  .append("    js.put(\"complemento02\", \"").append(Complemento02).append("\");\r\n")
			  .append("    js.put(\"complemento03\", \"").append(Complemento03).append("\");\r\n")
			  .append("    js.put(\"complemento04\", \"").append(Complemento04).append("\");\r\n")
			  .append("    js.put(\"complemento05\", \"").append(Complemento05).append("\");\r\n")
			  .append("    js.put(\"complemento06\", \"").append(Complemento06).append("\");\r\n")
			  .append("    js.put(\"centroCusto\", \"").append(CentroCusto).append("\");\r\n")
			  .append("    js.put(\"dataFake\", \"").append(dataFake).append("\");\r\n")
			  .append(rn)
			  .append("    js.put(\"cpfCnpj\", \"").append(cpfCnpj).append("\");\r\n")
			  .append("    js.put(\"gravaCnpjMovimento\", \"").append(gravaCnpjMovimento).append("\");\r\n")
			  .append("    js.put(\"cnpjSomenteNumeros\", \"").append(cnpjSomenteNumeros).append("\");\r\n")
			  .append("    js.put(\"valorAlternativo\", \"").append(ValorAlternativo).append("\");\r\n")
			  .append("    js.put(\"Abas_Especificas\", \"").append(Abas_Especificas).append("\");\r\n")	  
			  .append("    js.put(\"classificaFornec\", \"").append(classificaFornec).append("\");\r\n")
			  .append("    js.put(\"classificaPlano\", \"").append(classificaPlano).append("\");\r\n")
			  .append("    js.put(\"contaFixaCredito\", \"").append(ContaFixaCREDITO).append("\");\r\n")
			  .append("    js.put(\"contaFixaDebito\", \"").append(ContaFixaDEBITO).append("\");\r\n")
			  .append("    js.put(\"contaFixaDesconto\", \"").append(ContaFixaDesconto).append("\");\r\n")
			  .append("    js.put(\"contaFixaJuros\", \"").append(ContaFixaJuros).append("\");\r\n")
			  .append("    js.put(\"contaFixaMulta\", \"").append(ContaFixaMulta).append("\");\r\n")
			  .append("    js.put(\"contabilidade\", \"").append(contabilidade).append("\");\r\n")
			  .append("    js.put(\"Contabilizacao_Atraves_Fornecedor\", \"").append(Contabilizacao_Atraves_Fornecedor).append("\");\r\n")	  
			  .append("    js.put(\"Conta_Fixa_Cruzamento_Extrato\", \"").append(Conta_Fixa_Cruzamento_Extrato).append("\");\r\n")
			  .append("    js.put(\"Cruza_Extrato_com_Extrato\", \"").append(Cruza_Extrato_com_Extrato).append("\");\r\n")
			  .append("    js.put(\"cruzaExtrato\", \"").append(cruzaExtrato).append("\");\r\n")
			  .append("    js.put(\"empresa\", \"").append(empresa).append("\");\r\n")
			  .append("    js.put(\"empresaDir\", \"").append(empresaDir).append("\");\r\n")
			  .append("    js.put(\"erpContabilidade\", \"").append(ERPContabilidade).append("\");\r\n")
			  .append("    js.put(\"Forcar_Partida_Dobrada\", \"").append(Forcar_Partida_Dobrada).append("\");\r\n")	 
			  .append("    js.put(\"Forcar_Partida_Simples\", \"").append(Forcar_Partida_Simples).append("\");\r\n")	  
			  .append("    js.put(\"Realizar_Busca_Plano\", \"").append(Realizar_Busca_Plano).append("\");\r\n")
			  .append("    js.put(\"geraGerencial\", \"").append(GeraGerencial).append("\");\r\n")
			  .append("    js.put(\"Integracao_fiscal\", \"").append(Integracao_fiscal).append("\");\r\n")
			  .append("    js.put(\"Integracao_contratos\", \"").append(Integracao_contratos).append("\");\r\n")		  
			  
			  .append("    js.put(\"Ler_Planilha_Pelo_Cabecalho\", \"").append(Ler_Planilha_Pelo_Cabecalho).append("\");\r\n")
			  .append("    js.put(\"movimentoPortador\", \"").append(MovimentoPortador).append("\");\r\n")
			  .append("    js.put(\"naoZerarValores\", \"").append(naoZerarValores).append("\");\r\n")
			  .append("    js.put(\"lerAposPrincipal\", \"").append(lerAposPrincipal).append("\");\r\n")
			  .append("    js.put(\"campoLinhaPrincipal\", \"").append(campoLinhaPrincipal).append("\");\r\n")
			  .append("    js.put(\"nomeRelatorioRef\", \"").append(NomeRelatorioReferencia).append("\");\r\n")
			  .append("    js.put(\"Planilhas_Padroes\", \"").append(Planilhas_Padroes).append("\");\r\n")	  
			  .append("    js.put(\"statusRoteiro\", \"").append(StatusRoteiro).append("\");\r\n")
			  .append("    js.put(\"tipoArquivo\", \"").append(TipoArquivo).append("\");\r\n")
			  .append("    js.put(\"tipoIntegracao\", \"").append(TipoIntegracao).append("\");\r\n")
			  .append("    js.put(\"fazerShrink\", \"").append(fazerShrink).append("\");\r\n")
			  .append("    js.put(\"colunaShrink\", \"").append(colunaShrink).append("\");\r\n")			 
			  .append("    js.put(\"dupliNaoEncontContabil\", \"").append(dupliNaoEncontContabil).append("\");\r\n")
			  .append("    js.put(\"Conta_Dupl_Contabil\", \"").append(Conta_Dupl_Contabil).append("\");\r\n")
			  .append("    js.put(\"Aloca_Checknum\", \"").append(Aloca_Checknum).append("\");\r\n")
			  .append("    js.put(\"Rotulo_Complemento_01\", \"").append(Rotulo_Complemento_01).append("\");\r\n")
 			  .append("    js.put(\"Rotulo_Complemento_02\", \"").append(Rotulo_Complemento_02).append("\");\r\n")
 			  .append("    js.put(\"Rotulo_Complemento_03\", \"").append(Rotulo_Complemento_03).append("\");\r\n")
 			  .append("    js.put(\"Rotulo_Complemento_04\", \"").append(Rotulo_Complemento_04).append("\");\r\n")
 			  .append("    js.put(\"Rotulo_Complemento_05\", \"").append(Rotulo_Complemento_05).append("\");\r\n")
			  .append("    js.put(\"Colunas_de_Valores_Extras\", \"").append(Colunas_de_Valores_Extras).append("\");\r\n")
			  .append("    js.put(\"Rotulos_Para_Valores_Extras\", \"").append(Rotulos_Para_Valores_Extras).append("\");\r\n") 
			  .append("    js.put(\"Colunas_de_Portadores_Extras\", \"").append(Colunas_de_Portadores_Extras).append("\");\r\n")
			 
			 .append(rn);
			
			sb.append("    return js;\r\n").append("}").append(rn).append(rn);
			
		}
  
	} else {
		//logger.logError(">> NAO CONSEGUIU OBTER DADOS DO ROTEIRO!");
	}
}

private void maketipoPlanilhaRoteiroSecundario(String idRoteiro, String empresa, String empresaDir,
                                     String contabilidade, String Ler_planilhas_padroes, 
									 String roteirosContabilidadePG, String roteirosContabilidadeREC, String tipoIntegracao, 
									 StringBuilder sb, 
                                     PartnerConnection sfCon, 
                                     InoutLogger logger) throws Exception {

    String rn = "\r\n";
    
	

    // Obtem o Roteiro /////////////////////////////////////////////////
    StringBuilder sql = new StringBuilder();
	
	   // Prepara o metodo a ser escrito no script da rota que retorna um 
			// JSONObject com os dados do roteiro.
	sb.append("public String getTipoPlanilha(String line, String tipoPlanilha, String nomeArquivo, JSONObject jDadosObj) {").append(rn);
	
	sb.append("    boolean achouTipo = true;\r\n");
	
	
	
	int numeroRoteiro = 0;
	
	 
	sql = new StringBuilder();
    sql.append("SELECT Tipo_Planilha__c, nome_Arquivo__c, Palavras_Chave_Para_Identificar_Planilha__c, RecordTypeId ")
       .append("FROM Roteiros__c WHERE Exportar_Junto_com_Roteiro_Principal__c='").append(idRoteiro).append("'");
	   
	   
	if (Ler_planilhas_padroes.toUpperCase().equals("TRUE")) {
		if (tipoIntegracao.toUpperCase().contains("RECEB")) sql.append(" OR RecordTypeId = '0121C000001lBuD' ");
	   
  		if (tipoIntegracao.toUpperCase().contains("PAG")) {
			sql.append(" or name = 'ROT-2021-1016997' ");
		}
		if (tipoIntegracao.toUpperCase().contains("RECEB")) {
			sql.append(" OR name = 'ROT-2021-1016996' ");
		}
 
  	}
	
	if (!roteirosContabilidadePG.equals("") && tipoIntegracao.toUpperCase().contains("PAG")) {
		sql.append("or name = '").append(roteirosContabilidadePG.replaceAll(";","' or name = '")).append("' ");
	}
	if (!roteirosContabilidadeREC.equals("") && tipoIntegracao.toUpperCase().contains("RECEB")) {
		sql.append("or name = '").append(roteirosContabilidadeREC.replaceAll(";","' or name = '")).append("' ");
	}
	
	sql.append(" order by Tipo_Planilha__c ");

    QueryResult qres1 = sfCon.query(sql.toString());

 
    if (qres1.getSize() > 0) {
        for (SObject rot : qres1.getRecords()) {	
  
			
			String tipoPlanilha = "";
			String nomeArquivo  = "";
			String campos = "";		
			numeroRoteiro++;			
			
			Object campoOb = rot.getField("Tipo_Planilha__c");
			if (campoOb != null) tipoPlanilha = StringUtil.removeSpecialChars(campoOb.toString().toUpperCase())+"OTTCARTAO"+numeroRoteiro;


			campoOb = rot.getField("RecordTypeId");
			if (campoOb != null && !campoOb.toString().contains("0121C000001lBuD"))  tipoPlanilha = tipoPlanilha.replaceAll("OTTCARTAO","");


 			
			campoOb = rot.getField("nome_Arquivo__c");
			if (campoOb != null) nomeArquivo = StringUtil.removeSpecialChars(campoOb.toString().toUpperCase());
			
			campoOb = rot.getField("Palavras_Chave_Para_Identificar_Planilha__c");
			if (campoOb != null) campos = StringUtil.removeSpecialChars(campoOb.toString().toUpperCase());
			if (!campos.equals("")) {
		
				sb.append("    String [] campos").append(String.valueOf(numeroRoteiro)).append(" = \"").append(campos).append("\"").append(".split(\";\");\r\n");
				sb.append("    for (int x=0;x<campos").append(String.valueOf(numeroRoteiro)).append(".length;x++) {").append(rn);
				sb.append("        if (!line.contains(campos").append(String.valueOf(numeroRoteiro)).append("[x])) { ").append(rn).append("            achouTipo = false; break; }").append(rn);
				sb.append("    }").append(rn);
			} else sb.append("    achouTipo = false;\r\n");
			
			if (!nomeArquivo.equals("")) sb.append("    if (nomeArquivo.toUpperCase().contains(\"").append(nomeArquivo).append("\")) achouTipo = true;\r\n");

			sb.append("    if (achouTipo) return \"").append(tipoPlanilha).append("\";\r\n");
			sb.append("    achouTipo = true;\r\n");		  
		}	
		
		
	  
	} else {
			
			//logger.logError(">> NAO CONSEGUIU OBTER DADOS DO ROTEIRO!");
	}
	

	/*
	if (Ler_planilhas_padroes.toUpperCase().equals("TRUE")) {
		sql = new StringBuilder();

 		 sql.append("SELECT Tipo_Planilha__c, nome_Arquivo__c, Palavras_Chave_Para_Identificar_Planilha__c, RecordTypeId  ")
			.append("FROM Roteiros__c WHERE  RecordTypeId = '0121C000001lBuD' ");
	   
  		if (tipoIntegracao.toUpperCase().contains("PAG")) {
			sql.append(" or name = 'ROT-2021-1016997' ");
		}
		if (tipoIntegracao.toUpperCase().contains("RECEB")) {
			sql.append(" OR name = 'ROT-2021-1016996' ");
		}
 
  		if (!roteirosContabilidadePG.equals("") && tipoIntegracao.toUpperCase().contains("PAG")) {
			sql.append("or name = '").append(roteirosContabilidadePG.replaceAll(";","' or name = '")).append("' ");
		}
		if (!roteirosContabilidadeREC.equals("") && tipoIntegracao.toUpperCase().contains("RECEB")) {
			sql.append("or name = '").append(roteirosContabilidadeREC.replaceAll(";","' or name = '")).append("' ");
		}
 
		
		// alterado para exportar em ordem de tipo planilha apenas
		// o original estava order by RecordTypeId asc, Tipo_Planilha__c
	   sql.append(" order by Tipo_Planilha__c ");
	
 
		QueryResult qres2 = sfCon.query(sql.toString());
		
		if (qres2.getSize() > 0) {
			for (SObject rot : qres2.getRecords()) {	
	  
				
				String tipoPlanilha = "";
				String nomeArquivo  = "";
				String campos = "";		
				numeroRoteiro++;			
				
				Object campoOb = rot.getField("Tipo_Planilha__c");
				if (campoOb != null) tipoPlanilha = StringUtil.removeSpecialChars(campoOb.toString().toUpperCase())+"OTTCARTAO"+numeroRoteiro;
				campoOb = rot.getField("nome_Arquivo__c");
				if (campoOb != null) nomeArquivo = StringUtil.removeSpecialChars(campoOb.toString().toUpperCase());
				
				
				// quando for planilha record type abaixo, nao gerar com o ottcartao no tipo planilha
				campoOb = rot.getField("RecordTypeId");
				if (campoOb != null && !campoOb.toString().contains("0121C000001lBuD"))  tipoPlanilha = tipoPlanilha.replaceAll("OTTCARTAO","");
 				  

				campoOb = rot.getField("Palavras_Chave_Para_Identificar_Planilha__c");
				if (campoOb != null) {
					campos = StringUtil.removeSpecialChars(campoOb.toString().toUpperCase());
				}
				if (!campos.equals("")) {
			
					sb.append("    String [] campos").append(String.valueOf(numeroRoteiro)).append(" = \"").append(campos).append("\"").append(".split(\";\");\r\n");
					sb.append("    for (int x=0;x<campos").append(String.valueOf(numeroRoteiro)).append(".length;x++) {").append(rn);
					sb.append("        if (!line.contains(campos").append(String.valueOf(numeroRoteiro)).append("[x])) { ").append(rn).append("            achouTipo = false; break; }").append(rn);
					sb.append("    }").append(rn);
				} else {
					if (nomeArquivo.equals("")) continue;    //  ignora roteiros secundadios sem nome do arquivo ou palavras chave
					sb.append("    achouTipo = false;\r\n");
				}
				
				if (!nomeArquivo.equals("")) sb.append("    if (nomeArquivo.toUpperCase().contains(\"").append(nomeArquivo).append("\")) achouTipo = true;\r\n");
				

				sb.append("    if (achouTipo) return \"").append(tipoPlanilha).append("\";\r\n");
				sb.append("    achouTipo = true;\r\n");		  
			}	
			
			
		  
		} else {
				
				//logger.logError(">> NAO POSSUI ROTEIRO PADRAO !");
		}
	} 
	
	*/
	
 
		  
	sb.append("    return tipoPlanilha;\r\n");
	sb.append("}").append(rn);
}

private void makeCodigoContasFixas(String idRoteiro,
                                   String idRoteiroGrupo,
                                   String idRoteiroCartoes,
                                   QueryResult qr_Contas__c,
                                   StringBuilder sb, 
                                   PartnerConnection sfCon, 
								   InoutLogger logger) throws Exception {

    String rn = "\r\n";
    
	//sb.append("public String getConta").append(compGetConta).append("(String nomeOrigem, String documento, String nomePortador,").append(rn)
	sb.append("public String getConta(String nomeOrigem, String documento, String nomePortador,").append(rn)
      .append("                       String complemento01, String complemento02, String complemento03, ").append(rn)
      .append("                       String nomeArquivo, String codCentroCusto) {").append(rn)
      .append("    String conta = \"\";\r\n");

   	String aspas = "\"";
    sb.append("    String complemento04 = ").append(aspas).append(aspas).append(";\r\n") ;
	sb.append("    String complemento05 = ").append(aspas).append(aspas).append(";\r\n") ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
		
            String sConta_Ser__c = "";
            Object oConta_Ser__c = reg.getField("Conta_Ser__c");
            if (oConta_Ser__c != null) sConta_Ser__c = oConta_Ser__c.toString();
            if (sConta_Ser__c.equals("")) continue;
        
            String stmt1 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt2 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt3 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt4 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt5 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			
            if (!stmt1.isEmpty()) {
                sb.append("    if (").append(stmt1);
                if (!stmt2.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt2);
                }
                if (!stmt3.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt3);
                }
                if (!stmt4.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt4);
                }
                if (!stmt5.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt5);
                }
                sb.append(") {").append(rn)
                  .append("        conta = \"")
                  .append(reg.getField("Conta_Ser__c").toString())
                  .append("\";\r\n")
                  .append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return conta;\r\n")
            .append("}").append(rn);
}

private void makeCodigoCentroCusto(String idRoteiro,
                                   String idRoteiroGrupo,
                                   String idRoteiroCartoes,
                                   QueryResult qr_Contas__c,
                                   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";
    
    sb.append("public String getCentroCusto(String CentroCusto, String nomeOrigem, String documento, String nomePortador,").append(rn)
      .append("                             String complemento01, String complemento02, String complemento03, ").append(rn)
      .append("                             String nomeArquivo, String codCentroCusto) {").append(rn)
      .append("          String retornaCentroCusto = CentroCusto;\r\n");
	sb.append("    String complemento04 = ").append("\"").append("\"").append(";\r\n") ;
	sb.append("    String complemento05 = ").append("\"").append("\"").append(";\r\n") ;
	sb.append("    String complemento06 = ").append("\"").append("\"").append(";\r\n") ;
	sb.append("    if (complemento03.contains(").append("\"").append("C6#").append("\"").append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append("\"").append("C6#").append("\"").append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append("\"").append("C6#").append("\"").append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append("\"").append("C5#").append("\"").append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append("\"").append("C5#").append("\"").append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append("\"").append("C5#").append("\"").append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append("\"").append("C4#").append("\"").append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append("\"").append("C4#").append("\"").append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append("\"").append("C4#").append("\"").append(")).trim(); }").append(rn) ;
    
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
            String sCentro_Custo_Sera__c = "";
            Object oCentro_Custo_Sera__c = reg.getField("Centro_Custo_Sera__c");
            if (oCentro_Custo_Sera__c != null) sCentro_Custo_Sera__c = oCentro_Custo_Sera__c.toString();
            if (sCentro_Custo_Sera__c.equals("")) continue;
			
			//fazer aqui
			//if(idRoteiro){
				
			//}
		
            String stmt1 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt2 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt3 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt4 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt5 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
            if (!stmt1.isEmpty()) {
                sb.append("    if (").append(stmt1);
                if (!stmt2.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt2);
                }
                if (!stmt3.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt3);
                }
                if (!stmt4.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt4);
                }
                if (!stmt5.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt5);
                }
				sCentro_Custo_Sera__c = sCentro_Custo_Sera__c.replaceAll("EM BRANCO","").trim();	
	
                String temAspas = "\"";
			   
				if (sCentro_Custo_Sera__c.contains("complemento")) temAspas = "";
	
                sb.append(") {").append(rn)
                  .append("        retornaCentroCusto = ")
				  .append(temAspas)
                  .append( StringUtil.removeSpecialChars(sCentro_Custo_Sera__c))
                  .append(temAspas)
				  .append(";\r\n")
                  .append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return retornaCentroCusto;\r\n")
            .append("}").append(rn);
}

private void makeCodigoTabelaContabil(String idRoteiro,
                                   String idRoteiroGrupo,
                                   String idRoteiroCartoes, 
                                   QueryResult qr_Contas__c,
                                   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";
    
    sb.append("public String getTabelaContabil(String TabelaContabil, String nomeOrigem, String documento, String nomePortador,").append(rn)
      .append("                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, ").append(rn)
      .append("                             String nomeArquivo) {").append(rn)
      .append("          String retornaTabelaContabil = TabelaContabil;\r\n");
	//sb.append("    complemento04 = ").append("\"").append("\"").append(";\r\n") ;  // retirado pois usamos o complemento 04 e 05 nos parametros e nao faz sentido zerar aqui
	//sb.append("    complemento05 = ").append("\"").append("\"").append(";\r\n") ;
	sb.append("    String complemento06 = ").append("\"").append("\"").append(";\r\n") ;
	sb.append("    if (complemento03.contains(").append("\"").append("C6#").append("\"").append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append("\"").append("C6#").append("\"").append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append("\"").append("C6#").append("\"").append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append("\"").append("C5#").append("\"").append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append("\"").append("C5#").append("\"").append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append("\"").append("C5#").append("\"").append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append("\"").append("C4#").append("\"").append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append("\"").append("C4#").append("\"").append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append("\"").append("C4#").append("\"").append(")).trim(); }").append(rn) ;
    
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
		
            String sTabela_Contabil__c = "";
            Object oTabela_Contabil__c = reg.getField("Tabela_Contabil__c");
            if (oTabela_Contabil__c != null) sTabela_Contabil__c = oTabela_Contabil__c.toString();
            if (sTabela_Contabil__c.equals("")) continue;
        
            String stmt1 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt2 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt3 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt4 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt5 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
            if (!stmt1.isEmpty()) {
                sb.append("    if (").append(stmt1);
                if (!stmt2.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt2);
                }
                if (!stmt3.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt3);
                }
                if (!stmt4.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt4);
                }
                if (!stmt5.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt5);
                }
				
                String temAspas = "\"";
				if (reg.getField("Tabela_Contabil__c").toString().contains("complemento")) temAspas = "";
                
				sb.append(") {").append(rn)
                  .append("        retornaTabelaContabil = ")
				  .append(temAspas)
                  .append(reg.getField("Tabela_Contabil__c").toString())
				  .append(temAspas)
                  .append(";")
				  .append(rn)
                  .append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return retornaTabelaContabil;\r\n")
            .append("}").append(rn);
}

private void makeCodigoFilial(String idRoteiro,
                                   String idRoteiroGrupo,
                                   String idRoteiroCartoes, 
                                   QueryResult qr_Contas__c,
                                   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";

    sb.append("public String getFilial(String codFilial, String nomeOrigem, String documento, String nomePortador,").append(rn)
      .append("                             String complemento01, String complemento02, String complemento03, ").append(rn)
      .append("                             String nomeArquivo, String codCentroCusto, String filial) {").append(rn)
      .append("          String retornaFilial = codFilial;\r\n");

    sb.append("    String complemento04 = ").append("\"").append("\"").append(";\r\n") ;
	sb.append("    String complemento05 = ").append("\"").append("\"").append(";\r\n") ;
	sb.append("    String complemento06 = ").append("\"").append("\"").append(";\r\n") ;
	sb.append("    if (complemento03.contains(").append("\"").append("C6#").append("\"").append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append("\"").append("C6#").append("\"").append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append("\"").append("C6#").append("\"").append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append("\"").append("C5#").append("\"").append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append("\"").append("C5#").append("\"").append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append("\"").append("C5#").append("\"").append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append("\"").append("C4#").append("\"").append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append("\"").append("C4#").append("\"").append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append("\"").append("C4#").append("\"").append(")).trim(); }").append(rn) ;

    
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
		
            String sFilial__c = "";
            Object oFilial__c = reg.getField("Filial__c");
            if (oFilial__c != null) sFilial__c = oFilial__c.toString();
            if (sFilial__c.equals("")) continue;
        
            String stmt1 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt2 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt3 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt4 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt5 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
            if (!stmt1.isEmpty()) {
                sb.append("    if (").append(stmt1);
                if (!stmt2.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt2);
                }
                if (!stmt3.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt3);
                }
                if (!stmt4.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt4);
                }
                if (!stmt5.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt5);
                }
                sb.append(") {").append(rn)
                  .append("        retornaFilial = \"")
                  .append(reg.getField("Filial__c").toString())
                  .append("\";\r\n")
                  .append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return retornaFilial;\r\n")
            .append("}").append(rn);
}

private String preparaComparacao(Object campoOp, Object texto) {
    
    String stmt = "";
    
    String campo = "";
    if (campoOp != null) {
        campo = campoOp.toString();
    }
    campo = StringUtil.removeSpecialChars(campo);
    
    String txt = "";
    if (texto != null) {
        txt = texto.toString();
    }
    txt = StringUtil.removeSpecialCharsToUC(txt);
	txt = txt.replaceAll("\"","").trim();	

	if (!campo.contains("Portador")) txt = txt.replaceAll("EM BRANCO","").trim();	
	txt = txt.replaceAll("EMBRANCO","").trim();	
	
	if(txt.startsWith("_") && txt.length() > 1) txt = " "+ txt.substring(1);
	if(txt.endsWith("_") && txt.length() > 1) txt = txt.substring(0,txt.length()-1)+ " ";
	
    if (!campo.isEmpty()) {
		if (campo.startsWith("Dia") && txt.startsWith("0") && txt.length() > 1) txt = txt.substring(1);
		if (campo.startsWith("Mes") && txt.startsWith("0") && txt.length() > 1) txt = txt.substring(1);
		if (campo.startsWith("Ano") && txt.startsWith("0") && txt.length() > 1) txt = txt.substring(1);
	}
	  
    
    if (!campo.isEmpty()) {
        if (campo.contains("Bussola")) {
           stmt = "StringUtil.removeSpecialCharsToUC(complemento01).startsWith(\"" + txt + "\")";
        } else if (campo.equals("Fornecedor/Cliente contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(\"" + txt + "\")";
        } else if (campo.equals("Fornecedor/Cliente nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(\"" + txt + "\")";
        } else if (campo.equals("Fornecedor/Cliente igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(nomeOrigem).equals(\"" + txt + "\")";
		} else if (campo.equals("Documento/NF contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(documento).contains(\"" + txt + "\")";
        } else if (campo.equals("Documento/NF comeca com")) {
            stmt = "StringUtil.removeSpecialCharsToUC(documento).startsWith(\"" + txt + "\")";
        } else if (campo.equals("Documento/NF nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(documento).contains(\"" + txt + "\")";
		} else if (campo.equals("Documento/NF igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(documento).equals(\"" + txt + "\")";
        } else if (campo.equals("Portador contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(nomePortador).contains(\"" + txt + "\")";
        } else if (campo.equals("Portador nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(nomePortador).contains(\"" + txt + "\")";
        } else if (campo.equals("Portador igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(nomePortador).equals(\"" + txt + "\")";
        } else if (campo.equals("Complemento (01) comeca com")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento01).startsWith(\"" + txt + "\")";
        } else if (campo.equals("Complemento (02) comeca com")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento02).startsWith(\"" + txt + "\")";
        } else if (campo.equals("Complemento (03) comeca com")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento03).startsWith(\"" + txt + "\")";
        } else if (campo.equals("Complemento (04) comeca com")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento04).startsWith(\"" + txt + "\")";
        } else if (campo.equals("Complemento (05) comeca com")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento05).startsWith(\"" + txt + "\")";
        } else if (campo.equals("Complemento (06) comeca com")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento06).startsWith(\"" + txt + "\")";
        } else if (campo.equals("Complemento (07) comeca com")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento07).startsWith(\"" + txt + "\")";
        } else if (campo.equals("Complemento (08) comeca com")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento08).startsWith(\"" + txt + "\")";
        } else if (campo.equals("Complemento (09) comeca com")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento09).startsWith(\"" + txt + "\")";
        } else if (campo.equals("Complemento (10) comeca com")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento10).startsWith(\"" + txt + "\")";
        } else if (campo.equals("Fornecedor/Cliente comeca com")) {
            stmt = "StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith(\"" + txt + "\")";
        } else if (campo.equals("Portador comeca com")) {
            stmt = "StringUtil.removeSpecialCharsToUC(nomePortador).startsWith(\"" + txt + "\")";
        } else if (campo.equals("Complemento (01) contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento01).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (01) nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(complemento01).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (01) igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento01).equals(\"" + txt + "\")";
        } else if (campo.equals("Complemento (02) contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento02).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (02) nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(complemento02).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (02) igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento02).equals(\"" + txt + "\")";
        } else if (campo.equals("Complemento (03) contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento03).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (03) nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(complemento03).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (03) igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento03).equals(\"" + txt + "\")";
        } else if (campo.equals("Complemento (04) contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento04).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (04) nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(complemento04).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (04) igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento04).equals(\"" + txt + "\")";
        } else if (campo.equals("Complemento (05) contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento05).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (05) nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(complemento05).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (05) igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento05).equals(\"" + txt + "\")";
        } else if (campo.equals("Complemento (06) contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento06).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (06) igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento06).equals(\"" + txt + "\")";
        } else if (campo.equals("Complemento (06) nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(complemento06).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (07) igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento07).equals(\"" + txt + "\")";
        } else if (campo.equals("Complemento (07) contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento07).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (07) nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(complemento07).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (08) igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento08).equals(\"" + txt + "\")";
        } else if (campo.equals("Complemento (08) contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento08).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (08) nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(complemento08).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (09) igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento09).equals(\"" + txt + "\")";
        } else if (campo.equals("Complemento (09) contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento09).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (09) nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(complemento09).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (10) igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento10).equals(\"" + txt + "\")";
        } else if (campo.equals("Complemento (10) contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(complemento10).contains(\"" + txt + "\")";
        } else if (campo.equals("Complemento (10) nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(complemento10).contains(\"" + txt + "\")";
        } else if (campo.equals("Tipo Planilha contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains(\"" + txt + "\")";
        } else if (campo.equals("Tipo Planilha nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains(\"" + txt + "\")";
        } else if (campo.equals("Conta Contrapartida - Portador igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(contaPortador).equals(\"" + txt + "\")";
		} else if (campo.equals("Conta Desconto igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(contaDesconto).equals(\"" + txt + "\")";
		} else if (campo.equals("Conta Juros igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(contaJuros).equals(\"" + txt + "\")";
		} else if (campo.equals("Conta Multa igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(contaMulta).equals(\"" + txt + "\")";
		} else if (campo.equals("Conta Normal - Movimento - igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(contaMovimento).equals(\"" + txt + "\")";
		} else if (campo.equals("Dia Movimento maior ou igual a")) {
            stmt = "Integer.parseInt(dataMovimento.substring(0,2)) >= " + txt;
        } else if (campo.equals("Dia Movimento menor ou igual a")) {
            stmt = "Integer.parseInt(dataMovimento.substring(0,2)) <= " + txt;
		} else if (campo.equals("Mes Movimento maior ou igual a")) {
            stmt = "Integer.parseInt(dataMovimento.substring(3,5)) >= " + txt;
        } else if (campo.equals("Mes Movimento menor ou igual a")) {
            stmt = "Integer.parseInt(dataMovimento.substring(3,5)) <= " + txt;
		} else if (campo.equals("Ano Movimento maior ou igual a")) {
            stmt = "Integer.parseInt(dataMovimento.substring(6)) >= " + txt;
        } else if (campo.equals("Ano Movimento menor ou igual a")) {
            stmt = "Integer.parseInt(dataMovimento.substring(6)) <= " + txt;
        } else if (campo.equals("Valor Documento maior ou igual a")) {
            stmt = "valorDocumento >= " + txt.replaceAll("\\.","").replaceAll(",","\\.");
        } else if (campo.equals("Valor Documento menor ou igual a")) {
            stmt = "valorDocumento <= " + txt.replaceAll("\\.","").replaceAll(",","\\.");
        } else if (campo.equals("Valor Juros maior ou igual a")) {
            stmt = "valorJuros >= " + txt.replaceAll("\\.","").replaceAll(",","\\.");
        } else if (campo.equals("Valor Juros menor ou igual a")) {
            stmt = "valorJuros <= " + txt.replaceAll("\\.","").replaceAll(",","\\.");
        } else if (campo.equals("Valor Desconto maior ou igual a")) {
            stmt = "valorDesconto >= " + txt.replaceAll("\\.","").replaceAll(",","\\.");
        } else if (campo.equals("Valor Desconto menor ou igual a")) {
            stmt = "valorDesconto <= " + txt.replaceAll("\\.","").replaceAll(",","\\.");
		} else if (campo.equals("Numero da Aba Planilha igual a")) {
			stmt = "numeroAba == " + txt;
		} else if (campo.equals("Filial igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(codFilial).equals(\"" + txt + "\")";
        } else if (campo.equals("Filial nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(codFilial).contains(\"" + txt + "\")";
		} else if (campo.equals("Nome do Arquivo contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(nomeArquivo).contains(\"" + txt + "\")";
        } else if (campo.equals("Centro de Custo contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(codCentroCusto).contains(\"" + txt + "\")";
        } else if (campo.equals("Centro de Custo nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(codCentroCusto).contains(\"" + txt + "\")";
        } else if (campo.equals("Linha contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(line).contains(\"" + txt + "\")";
        } else if (campo.equals("Classificacao comeca com")) { // aqui
            stmt = "StringUtil.removeSpecialCharsToUC(classificacao).startsWith(\"" + txt + "\")";
	 	} else if (campo.equals("Classificacao contem")) {
            stmt = "StringUtil.removeSpecialCharsToUC(classificacao).contains(\"" + txt + "\")";
        } else if (campo.equals("Classificacao nao contem")) {
            stmt = "!StringUtil.removeSpecialCharsToUC(classificacao).contains(\"" + txt + "\")";
        } else if (campo.equals("Classificacao igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(classificacao).equals(\"" + txt + "\")";
        } else if (campo.equals("Especie Duplicata igual a")) {
            stmt = "StringUtil.removeSpecialCharsToUC(especie).equals(\"" + txt + "\")";
        }
		if(stmt.contains("contains") && txt.equals("")) stmt = stmt.replace("contains","equals");
    }
    return stmt;
}

private void makeValorPrincipalFinanciamento(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Contas__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";
    
    sb.append("public double getValorPrincipal(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
    .append("    double valorPrincipal = 0;\r\n");


	String aspas = "\"";
    
	sb.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
            double dValor_Principal__c = 0;
            Object oValor_Principal__c = reg.getField("Valor_Principal__c");
            if (oValor_Principal__c != null) dValor_Principal__c = Double.parseDouble(oValor_Principal__c.toString());
            if (dValor_Principal__c <= 0) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
	
				sb.append(") {").append(rn)
                  .append("        valorPrincipal = ")
                  .append(reg.getField("Valor_Principal__c").toString());
				sb.append(";\r\n");
				  
				if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					sb.append("        return valorPrincipal;\r\n");
				}
				sb.append("    }").append(rn);

            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return valorPrincipal;\r\n")
            .append("}").append(rn);
}

private void makeTaxaTarifa(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Contas__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";

    sb.append("public double getTaxaTarifa(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
    .append("    double valorTaxaTarifa = 0;\r\n");


	String aspas = "\"";
    
	sb.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
            double dTaxa_Tarifa__c = 0;
            Object oTaxa_Tarifa__c = reg.getField("Taxa_Tarifa__c");
            if (oTaxa_Tarifa__c != null) dTaxa_Tarifa__c = Double.parseDouble(oTaxa_Tarifa__c.toString());
            if (dTaxa_Tarifa__c <= 0) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
	
				sb.append(") {").append(rn)
                  .append("        valorTaxaTarifa = ")
                  .append(reg.getField("Taxa_Tarifa__c").toString());
				sb.append(";\r\n");
				  
				if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					sb.append("        return valorTaxaTarifa;\r\n");
				}
				sb.append("    }").append(rn);

            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return valorTaxaTarifa;\r\n")
            .append("}").append(rn);
}

private void makeParcelaBase(String idRoteiro,
                                   String idRoteiroGrupo,
                                   String idRoteiroCartoes, 
                                   QueryResult qr_Contas__c,
                                   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";

     sb.append("public int getParcelaBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
    .append("    int parcelaBase = 0;\r\n");


	String aspas = "\"";
    
	sb.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
            int iParcela_Inicial__c = 0;
            
            Object oParcela_Inicial__c = reg.getField("Parcela_Inicial__c");
            if (oParcela_Inicial__c != null) iParcela_Inicial__c = Integer.parseInt(oParcela_Inicial__c.toString().substring(0, oParcela_Inicial__c.toString().indexOf(".")));
            if (iParcela_Inicial__c <= 0) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
	
				sb.append(") {").append(rn)
                  .append("        parcelaBase = ")
                  .append(reg.getField("Parcela_Inicial__c").toString().substring(0, reg.getField("Parcela_Inicial__c").toString().indexOf(".")));
				sb.append(";\r\n");
				  
				if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					sb.append("        return parcelaBase;\r\n");
				}
				sb.append("    }").append(rn);

            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return parcelaBase;\r\n")
            .append("}").append(rn);
}

private void makeTotalParcelas(String idRoteiro,
                                   String idRoteiroGrupo,
                                   String idRoteiroCartoes, 
                                   QueryResult qr_Contas__c,
                                   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";
    
     sb.append("public int getTotalParcelas(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
    .append("    int parcelaBase = 0;\r\n");


	String aspas = "\"";
    
	sb.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
            int iTotal_de_Parcelas__c = 0;
            Object oTotal_de_Parcelas__c = reg.getField("Total_de_Parcelas__c");
            if (oTotal_de_Parcelas__c != null) iTotal_de_Parcelas__c = Integer.parseInt(oTotal_de_Parcelas__c.toString().substring(0, oTotal_de_Parcelas__c.toString().indexOf(".")));
            if (iTotal_de_Parcelas__c <= 0) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
	
				sb.append(") {").append(rn)
                  .append("        parcelaBase = ")
                  .append(reg.getField("Total_de_Parcelas__c").toString().substring(0, reg.getField("Total_de_Parcelas__c").toString().indexOf(".")));
				sb.append(";\r\n");
				  
				if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					sb.append("        return parcelaBase;\r\n");
				}
				sb.append("    }").append(rn);

            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return parcelaBase;\r\n")
            .append("}").append(rn);

}

private void makeMesAnoBase(String idRoteiro,
                                   String idRoteiroGrupo,
                                   String idRoteiroCartoes, 
                                   QueryResult qr_Contas__c,
                                   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";

     sb.append("public String getMesAnoBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
    .append("    String mesAnoBase = \"\";\r\n");


	String aspas = "\"";
    
	sb.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
            String sMes_Ano_Base__c = "";
            Object oMes_Ano_Base__c = reg.getField("Mes_Ano_Base__c");
            if (oMes_Ano_Base__c != null) sMes_Ano_Base__c = oMes_Ano_Base__c.toString();
            if (sMes_Ano_Base__c.equals("")) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
	
				sb.append(") {").append(rn)
                  .append("        mesAnoBase = \"")
                  .append(reg.getField("Mes_Ano_Base__c").toString());
				sb.append("\";\r\n");
				  
				if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					sb.append("        return mesAnoBase;\r\n");
				}
				sb.append("    }").append(rn);

            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return mesAnoBase;\r\n")
            .append("}").append(rn);

}

private void makeCodigoContasFixas09(String idRoteiro,
                                     String idRoteiroGrupo,
                                     String idRoteiroCartoes,
                                     QueryResult qr_Contas__c,
                                     StringBuilder sb, 
                                     PartnerConnection sfCon, 
                                     InoutLogger logger) throws Exception {

    String rn = "\r\n";

    sb.append("public String getConta09(String contaMovimento, String nomeOrigem, String documento, ").append(rn)
      .append("                       String nomePortador, String complemento01, String complemento02, ").append(rn)
      .append("                       String complemento03, String nomeArquivo, String codCentroCusto) {").append(rn)
      .append("    String conta = contaMovimento;\r\n");
	String aspas = "\"";
    
	sb.append("    String complemento04 = ").append(aspas).append(aspas).append(";\r\n") ;
	sb.append("    String complemento05 = ").append(aspas).append(aspas).append(";\r\n") ;
	sb.append("    String complemento06 = ").append(aspas).append(aspas).append(";\r\n") ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;

	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
            String sConta_Ser__c = "";
            Object oConta_Ser__c = reg.getField("Conta_Ser__c");
            if (oConta_Ser__c != null) sConta_Ser__c = oConta_Ser__c.toString();
            if (sConta_Ser__c.equals("")) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
				
				String temAspas = "\"";
				
				if (reg.getField("Conta_Ser__c").toString().contains("complemento") || 
				    reg.getField("Conta_Ser__c").toString().equals("cpfCnpj")) temAspas = "";
                sb.append(") {").append(rn)
                  .append("        conta = ")
				  .append(temAspas)
                  .append(reg.getField("Conta_Ser__c").toString());
				if (reg.getField("Inverte_Contas__c").equals("true"))  sb.append("INVERTE");
				sb.append(temAspas).append(";\r\n");
				  
				if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					sb.append("        return conta;\r\n");
				}
				sb.append("    }").append(rn);
				 

            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return conta;\r\n")
            .append("}").append(rn);
}

private void makeCodigoContasMovimento(String idRoteiro, 
                                   String idRoteiroGrupo, 
                                   String idRoteiroCartoes, 
                                   StringBuilder sb, 
                                   PartnerConnection sfCon,
                                   List<T> regrasContaMovimento,
                                   InoutLogger logger) throws Exception {
	//F2

    String rn = "\r\n";
	
	int contador = 0;

	Iterator itr_regras = regrasContaMovimento.iterator();
	
	StringBuilder cabecalhoGetContaMovimento = new StringBuilder();
    cabecalhoGetContaMovimento.append("public String getContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
    .append("    String conta = contaMovimento;\r\n");


	String aspas = "\"";
    
	cabecalhoGetContaMovimento.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	cabecalhoGetContaMovimento.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	cabecalhoGetContaMovimento.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
	int contadorMetodos = 1;
	while (itr_regras.hasNext() || contadorMetodos <= 6) {
		String cabecalho = cabecalhoGetContaMovimento.toString();
		// logger.logInfo("CONTADOR METODOS == "+contadorMetodos);
		if (contadorMetodos > 1) {
			cabecalho = cabecalho.replace("getContaMovimento", "getContaMovimento" + contadorMetodos);
		}
		sb.append(cabecalho);
		contadorMetodos++;
		

		for (contador = 0; contador < 400; contador++) {
			if (itr_regras.hasNext()) {
				Object regra = itr_regras.next();
				SObject reg = null;
				if (regra instanceof SObject) {
					reg = (SObject) regra;
				} else {
					JSONArray regra40 = (JSONArray) regra;
					String conta_movimento = ((JSONObject) regra40.get(0)).optString("gr.conta_movimento");

					if (conta_movimento != null && conta_movimento != "") {
						makeCodigoRegrasConta40(sb, regra40, "gr.conta_movimento", logger);
					}
					continue;
				}
				
				// logger.logInfo("REG = "+reg.getField("Resumo_Regra__c"));
				
				String sName = "";
				Object oName = reg.getField("name");
				if (oName != null) sName = oName.toString();
		
				String sConta_Movimento__c = "";
				String tratarComo = "";
				Object oConta_Movimento__c = reg.getField("Conta_Movimento__c");
				if (oConta_Movimento__c != null) sConta_Movimento__c = oConta_Movimento__c.toString();
				if (sConta_Movimento__c.equals("")) continue;
				if (sConta_Movimento__c.equals("null")) continue;

				
				oConta_Movimento__c = reg.getField("Tratar_como__c");
				if (oConta_Movimento__c != null) tratarComo = oConta_Movimento__c.toString();
				if (!tratarComo.equals("Conta Contabil - Tradicional")) continue;
				
				// try {
					// logger.logInfo(reg.getField("Seq_Roteiro__c").toString());
				// } catch (Exception ex) {logger.logInfo("GEROU ERRO seq");}
				String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
				String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
				String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
				String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
				String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));	
				
				String codRoteiro = "";
				Object campoOb = reg.getField("Codigo_Roteiro__c");
				if (campoOb != null) codRoteiro = campoOb.toString();
				
				if (!stmt04.isEmpty()) {
					sb.append("    if (").append(stmt04);
					if (!stmt05.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt05);
					}
					if (!stmt06.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt06);
					}
					if (!stmt07.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt07);
					}
					if (!stmt08.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt08);
					}
					String temAspas = "\"";
					
					// logger.logInfo("CONTADOR == "+contadorMetodos+" | STMT 4 = "+stmt04+" | STMT 5 = "+stmt05+" | STMT 6 = "+stmt06+" | STMT 7 = "+stmt07+" | STMT 8 = "+stmt08);
					
					if (reg.getField("Conta_Movimento__c").toString().contains("complemento") || 
						reg.getField("Conta_Movimento__c").toString().equals("cpfCnpj")) temAspas = "";
						
					String sConta = "";
					Object oConta = reg.getField("Conta_Movimento__c");
					if (oConta != null) sConta = oConta.toString();
					sConta = sConta.replaceAll("EM BRANCO","").trim();	
					
					sb.append(") {").append(" //").append(codRoteiro).append(rn)
					.append("        conta = ")
					.append(temAspas)
					.append(sConta);
					if (reg.getField("Inverte_Contas__c").equals("true"))  sb.append("INVERTE");
					sb.append(temAspas).append(";\r\n");
					
					
					sb.append("        contaMovimento = ")
					.append(temAspas)
					.append(sConta);
					if (reg.getField("Inverte_Contas__c").equals("true"))  sb.append("INVERTE");
					sb.append(temAspas).append(";\r\n");
					
					
					if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
						sb.append("        return conta;\r\n");
					}
					sb.append("    }").append(rn);


				}
			}
			else {
				break;
			}
		}
		sb.append("    return conta;\r\n")
				.append("}").append(rn);
	}

}


private void makeRegraContasMovimento(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Contas__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";
    
    sb.append("public String getRegraContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
    .append("    String conta = contaMovimento;\r\n");


	String aspas = "\"";
    
	sb.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
	int contaRegra = 0;
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
			contaRegra++;
			if(contaRegra>400){continue;}
            String sConta_Movimento__c = "";
			String tratarComo = "";
			
            Object oConta_Movimento__c = reg.getField("Conta_Movimento__c");
            if (oConta_Movimento__c != null) sConta_Movimento__c = oConta_Movimento__c.toString();
            if (sConta_Movimento__c.equals("")) continue;
            if (sConta_Movimento__c.equals("null")) continue;
			
			oConta_Movimento__c = reg.getField("Tratar_como__c");
            if (oConta_Movimento__c != null) tratarComo = oConta_Movimento__c.toString();
            if (!tratarComo.equals("Conta Contabil - Tradicional")) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
                sb.append(") {").append(rn)
                  .append("        conta = \"")
                  .append(StringUtil.removeSpecialChars(reg.getField("Resumo_Regra__c").toString().replaceAll("\"","\'")));
				if (reg.getField("Inverte_Contas__c").equals("true"))  sb.append("INVERTE");
				sb.append("\";\r\n");
				  
				if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					sb.append("        return conta;\r\n");
				}
				sb.append("    }").append(rn);

            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
     
    sb.append("    return conta;\r\n")
            .append("}").append(rn);
}

private void makeTratarComoExtrato(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Contas__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";
    
    sb.append("public boolean getTratarComoExtrato(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
    .append("    boolean tratarComoExtrato = false;\r\n");


	String aspas = "\"";
    
	sb.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
			String tratarComo = "";
			
            Object oTratarComo = reg.getField("Tratar_como__c");
            if (oTratarComo != null) tratarComo = oTratarComo.toString();
            if (!tratarComo.equals("Tratar como extrato - cruzamento")) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
                sb.append(") {").append(rn)
                  .append("        tratarComoExtrato = true");
				sb.append(";\r\n");
				  
				
				sb.append("    }").append(rn);

            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return tratarComoExtrato;\r\n")
            .append("}").append(rn);
}

private void makeTratarComoDesconto(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Contas__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";
    
    sb.append("public boolean getTratarComoDesconto(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
    .append("    boolean tratarComoDesconto = false;\r\n");


	String aspas = "\"";
    
	sb.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
           String tratarComo = "";
			
           Object oTratarComo = reg.getField("Tratar_como__c");
           if (oTratarComo != null) tratarComo = oTratarComo.toString();
           if (!tratarComo.equals("Tratar linha como desconto")) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
                sb.append(") {").append(rn)
                  .append("        tratarComoDesconto = true");
				sb.append(";\r\n");
				  
				
				sb.append("    }").append(rn);

            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return tratarComoDesconto;\r\n")
            .append("}").append(rn);
}

private void makeTratarComoJuros(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Contas__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";
    
    sb.append("public boolean getTratarComoJuros(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
    .append("    boolean tratarComoJuros = false;\r\n");


	String aspas = "\"";
    
	sb.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
            String tratarComo = "";
			
           Object oTratarComo = reg.getField("Tratar_como__c");
           if (oTratarComo != null) tratarComo = oTratarComo.toString();
           if (!tratarComo.equals("Tratar linha como juros")) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
                sb.append(") {").append(rn)
                  .append("        tratarComoJuros = true");
				sb.append(";\r\n");
				  
				
				sb.append("    }").append(rn);

            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return tratarComoJuros;\r\n")
            .append("}").append(rn);
}

private void makeTratarLinhaIgnorar(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Contas__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";
    
    sb.append("public boolean getTratarLinhaIgnorar(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
    .append("    boolean tratarIgnoraLinha = false;\r\n");


	String aspas = "\"";
    
	sb.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
             String tratarComo = "";
			
           Object oTratarComo = reg.getField("Tratar_como__c");
           if (oTratarComo != null) tratarComo = oTratarComo.toString();
           if (!tratarComo.equals("Ignorar linha antes das regras")) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04.replaceAll("EM BRANCO",""));
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05.replaceAll("EM BRANCO",""));
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06.replaceAll("EM BRANCO",""));
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
                sb.append(") {").append(rn)
                  .append("        tratarIgnoraLinha = true");
				sb.append(";\r\n");
				  
				
				sb.append("    }").append(rn);

            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return tratarIgnoraLinha;\r\n")
            .append("}").append(rn);
}

private void makeCodigoValorAlternativo(String idRoteiro, 
										String idRoteiroGrupo, 
										String idRoteiroCartoes, 
										QueryResult qr_Contas__c,
										StringBuilder sb, 
										PartnerConnection sfCon, 
										InoutLogger logger) throws Exception {	//#18042019

    String rn	 = "\r\n";
	String aspas = "\"";
	
    sb.append("public String getTratarValorAlternativo(JSONObject objHistorico) {").append(rn)
	  .append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	  .append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	  .append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	  .append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	  .append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	  .append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	  .append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	  .append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	  .append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	  .append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	  .append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	  .append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	  .append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	  .append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	  .append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	  .append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	  .append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	  .append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	  .append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	  .append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	  .append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	  .append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	  .append("    String tipoLancamento  = objHistorico.optString(\"tipoLancamento\");\r\n")
	  .append("    String documento    = objHistorico.optString(\"documento\");\r\n")
	  .append("    String nomeOrigem    = objHistorico.optString(\"nomeOrigem\");\r\n")
	  .append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	
	  .append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	  .append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	  .append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	  .append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append(rn)
	  .append("    String retornoAlternativo  = "+aspas + aspas+";\r\n")
	  .append(rn);


    
	sb.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
	        String sName = "";
            Object oName = reg.getField("name");
            if (oName != null) sName = oName.toString();
	
	        String sDebitoCredito = "";
	        String sRecordTypeId  = "";
            Object oAlternativo = reg.getField("Debito_Credito__c");
            if (oAlternativo != null) sDebitoCredito = oAlternativo.toString();
            if (sDebitoCredito.equals("")) continue;
            
			Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            if (!sRecordTypeId.startsWith("0121C000001lApR")) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
	
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
				
				oAlternativo = reg.getField("Debito_Credito__c");
				if (oAlternativo != null) sDebitoCredito = oAlternativo.toString();
				sDebitoCredito = sDebitoCredito.replaceAll("EM BRANCO","").trim();	
				
                sb.append(") {").append(rn)
                  .append("        retornoAlternativo = ")
				  .append(aspas)
                  .append(sDebitoCredito)
				  .append(aspas).append(";")
				  .append(rn)
				  .append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return retornoAlternativo;\r\n")
      .append("}").append(rn);
}

private void makeCodigoTratarComoDiv(String idRoteiro, 
										String idRoteiroGrupo, 
										String idRoteiroCartoes, 
										QueryResult qr_Contas__c,
										StringBuilder sb, 
										PartnerConnection sfCon, 
										InoutLogger logger) throws Exception {	//#07112019

    String rn	 = "\r\n";
	String aspas = "\"";
	
    sb.append("public String getTratarComoDiv(String documento, String nomeOrigem, JSONObject objHistorico){").append(rn)
	  .append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	  .append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	  .append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	  .append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	  .append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	  .append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	  .append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	  .append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	  .append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	  .append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	  .append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	  .append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	  .append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	  .append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	  .append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	  .append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	  .append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	  .append("    String tipoLancamento  = objHistorico.optString(\"tipoLancamento\");\r\n")
	  .append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	  .append("    String classificacao  = objHistorico.optString(\"classificacao\");\r\n")
	  .append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	  .append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	  .append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	  .append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append(rn)
	  .append("    String retornoDiv  = "+aspas + aspas+";\r\n")
	  .append(rn);


    
	sb.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
	        String sName = "";
            Object oName = reg.getField("name");
            if (oName != null) sName = oName.toString();
	
	        String sTipoDiv = "";
	        String sFilialDiv = "";
	        String sRecordTypeId  = "";
            Object oDiv = reg.getField("Tipo_DIV__c");
            if (oDiv != null) sTipoDiv = oDiv.toString();
            oDiv = reg.getField("Filial_DIV__c");
            if (oDiv != null) sFilialDiv = oDiv.toString();
            if (sTipoDiv.equals("")) continue;
            if (sFilialDiv.equals("")) continue;
            
			Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            if (!sRecordTypeId.startsWith("0121C000001pMQW")) continue;
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
	
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
				
				oDiv = reg.getField("Tipo_DIV__c");
				if (oDiv != null) sTipoDiv = oDiv.toString();
				oDiv = reg.getField("Filial_DIV__c");
				if (oDiv != null) sFilialDiv = oDiv.toString();

				String resultado = sTipoDiv+"-"+sFilialDiv; 
				if(resultado.contains("EM BRANCO")) resultado = "";
				
                sb.append(") {").append(rn)
                  .append("        retornoDiv = ")
				  .append(aspas)
                  .append(resultado)
				  .append(aspas).append(";")
				  .append(rn)
				  .append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return retornoDiv;\r\n")
      .append("}").append(rn);
}


private void makeCodigoClassificacao(String idRoteiro, 
										String idRoteiroGrupo, 
										String idRoteiroCartoes, 
										QueryResult qr_Contas__c,
										StringBuilder sb, 
										PartnerConnection sfCon, 
										InoutLogger logger) throws Exception {	//#07112019

    String rn	 = "\r\n";
	String aspas = "\"";
	
    sb.append("public String getCodigoClassificacao(String nomeOrigem, JSONObject objHistorico){").append(rn)
	  .append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	  .append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	  .append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	  .append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	  .append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	  .append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	  .append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	  .append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	  .append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	  .append("    String documento   = objHistorico.optString(\"documento\");\r\n")
	  .append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	  .append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	  .append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	  .append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	  .append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	  .append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	  .append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	  .append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	  .append("    String tipoLancamento  = objHistorico.optString(\"tipoLancamento\");\r\n")
	  .append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	  .append("    String classificacao  = objHistorico.optString(\"classificacao\");\r\n")
	  .append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	  .append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	  .append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	  .append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append(rn)
	  .append("    String retornoClassificacao  = "+aspas + aspas+";\r\n")
	  .append(rn);


    
	sb.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
	        String sName = "";
            Object oName = reg.getField("name");
            if (oName != null) sName = oName.toString();
	
	        String classificacao = "";
	        String sRecordTypeId  = "";
            Object oClass = reg.getField("Classificacao__c");
            if (oClass != null) classificacao = oClass.toString();
            if (classificacao.equals("")) continue;
            
			Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            if (!sRecordTypeId.startsWith("0121C000001pMWU")) continue; // 0121C000001pMWU
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
	
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
				
				oClass = reg.getField("Classificacao__c");
				if (oClass != null) classificacao = oClass.toString();
				

				String resultado = classificacao; 
				if(resultado.contains("EM BRANCO")) resultado = "";
				
                sb.append(") {").append(rn)
                  .append("        retornoClassificacao = ")
				  .append(aspas)
                  .append(resultado)
				  .append(aspas).append(";")
				  .append(rn)
				  .append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return retornoClassificacao;\r\n")
      .append("}").append(rn);
}


private void makeCodigoModificaData(String idRoteiro, 
										String idRoteiroGrupo, 
										String idRoteiroCartoes, 
										QueryResult qr_Contas__c,
										StringBuilder sb, 
										PartnerConnection sfCon, 
										InoutLogger logger) throws Exception {	//#18042019

    String rn	 = "\r\n";
	String aspas = "\"";
	
    sb.append("public String getModificaData(JSONObject objHistorico) {").append(rn)
	  .append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	  .append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	  .append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	  .append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	  .append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	  .append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	  .append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	  .append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	  .append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	  .append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	  .append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	  .append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	  .append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	  .append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	  .append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	  .append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	  .append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	  .append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	  .append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	  .append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	  .append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	  .append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	  .append("    String tipoLancamento  = objHistorico.optString(\"tipoLancamento\");\r\n")
	  .append("    String documento    = objHistorico.optString(\"documento\");\r\n")
	  .append("    String nomeOrigem    = objHistorico.optString(\"nomeOrigem\");\r\n")
	  .append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	
	  .append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	  .append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	  .append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	  .append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append(rn)
	  .append("    String retornoData  = "+aspas + aspas+";\r\n")
	  .append(rn);


    
	sb.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
	        String sName = "";
            Object oName = reg.getField("name");
            if (oName != null) sName = oName.toString();
	
	        String sRetornoData = "";
	        String sRecordTypeId  = "";
            Object oAlternativo = reg.getField("Modificar_Data__c");
            if (oAlternativo != null) sRetornoData = StringUtil.removeSpecialCharsToUC(oAlternativo.toString());
            if (sRetornoData.equals("")) continue;
            
			Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            //if (!sRecordTypeId.startsWith("0121C000001lApR")) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
	
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
				
		
                sb.append(") {").append(rn)
                  .append("        retornoData = ")
				  .append(aspas)
                  .append(sRetornoData)
				  .append(aspas).append(";")
				  .append(rn)
				  .append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return retornoData;\r\n")
      .append("}").append(rn);
}

private void makeCodigoContasPortador(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
								   StringBuilder sb, 
                                   PartnerConnection sfCon,
								   List<T> regrasContaMovimento,
                                   InoutLogger logger) throws Exception {
    String rn = "\r\n";
	
	int contador = 0;
	Iterator itr_regras = regrasContaMovimento.iterator();
	
    StringBuilder cabecalhoGetContaPortador = new StringBuilder();

    cabecalhoGetContaPortador.append("public String getContaPortador(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
    .append("    String conta = contaMovimento;\r\n");

	String aspas = "\"";
    
	cabecalhoGetContaPortador.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	cabecalhoGetContaPortador.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	cabecalhoGetContaPortador.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
	int contadorMetodos = 1;
	while (itr_regras.hasNext() || contadorMetodos <= 6) {
		String cabecalho = cabecalhoGetContaPortador.toString();
		if (contadorMetodos > 1) {
			cabecalho = cabecalho.replace("getContaPortador", "getContaPortador" + contadorMetodos);
		}
		sb.append(cabecalho);
		contadorMetodos++;
			
		for (contador = 0; contador < 400; contador++) {
			if (itr_regras.hasNext()) {
				Object regra = itr_regras.next();
				SObject reg = null;
				if (regra instanceof SObject) {
					reg = (SObject) regra;
				} else {
					JSONArray regra40 = (JSONArray) regra;
					String conta_portador = ((JSONObject) regra40.get(0)).optString("gr.conta_portador");

					if (conta_portador != null && conta_portador != "") {
						makeCodigoRegrasConta40(sb, regra40, "gr.conta_portador", logger);
					}
					continue;
				}
            
				String sConta_Portador__c = "";
				Object oConta_Portador__c = reg.getField("Conta_Portador__c");
				if (oConta_Portador__c != null) sConta_Portador__c = oConta_Portador__c.toString();
				if (sConta_Portador__c.equals("")) continue;
				if (sConta_Portador__c.equals("null")) continue;
				
				String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
				String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
				String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
				String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
				String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
				
				if (!stmt04.isEmpty()) {
					sb.append("    if (").append(stmt04);
					if (!stmt05.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt05);
					}
					if (!stmt06.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt06);
					}
					if (!stmt07.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt07);
					}
					if (!stmt08.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt08);
					}
						
					String temAspas = "\"";
					
					if (reg.getField("Conta_Portador__c").toString().contains("complemento") || 
						reg.getField("Conta_Portador__c").toString().equals("cpfCnpj")) temAspas = "";
				
					sb.append(") {").append(rn)
					.append("        conta = ")
					.append(temAspas)
					.append(reg.getField("Conta_Portador__c").toString());
					if (reg.getField("Inverte_Contas__c").equals("true"))  sb.append("INVERTE");
					sb.append(temAspas).append(";\r\n");
					
					if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
						sb.append("        return conta;\r\n");
					}
					sb.append("    }").append(rn);
				}
            }
			else {
				break;
			}
        }
    
		sb.append("    return conta;\r\n")
				.append("}").append(rn);
	}
}

private void makeCodigoContasJuros(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
								   StringBuilder sb, 
                                   PartnerConnection sfCon,
								   List<T> regrasConta,
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";

	int contador = 0;

	Iterator itr_regras = regrasConta.iterator();

	StringBuilder cabecalhoGetContaJuros = new StringBuilder();
    cabecalhoGetContaJuros.append("public String getContaJuros(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
    .append("    String conta = contaJuros;\r\n");


	String aspas = "\"";
    
	cabecalhoGetContaJuros.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	cabecalhoGetContaJuros.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	cabecalhoGetContaJuros.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
	
	int contadorMetodos = 1;
	while (itr_regras.hasNext() || contadorMetodos <= 6) {
		String cabecalho = cabecalhoGetContaJuros.toString();
		if (contadorMetodos > 1) {
			cabecalho = cabecalho.replace("getContaJuros", "getContaJuros" + contadorMetodos);
		}
		sb.append(cabecalho);
		contadorMetodos++;

        for (contador = 0; contador < 400; contador++) {
			if (itr_regras.hasNext()) {
				Object regra = itr_regras.next();
				SObject reg = null;
				if (regra instanceof SObject) {
					reg = (SObject) regra;
				} else {
					JSONArray regra40 = (JSONArray) regra;
					String conta_juros = ((JSONObject) regra40.get(0)).optString("gr.conta_juros");

					if (conta_juros != null && conta_juros != "") {
						makeCodigoRegrasConta40(sb, regra40, "gr.conta_juros", logger);
					}
					continue;
				} 
				String sConta_Juros__c = "";
				Object oConta_Juros__c = reg.getField("Conta_Juros__c");
				if (oConta_Juros__c != null) sConta_Juros__c = oConta_Juros__c.toString();
				if (sConta_Juros__c.equals("")) continue;
				
				
				String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
				String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
				String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
				String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
				String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
				
				if (!stmt04.isEmpty()) {
					sb.append("    if (").append(stmt04);
					if (!stmt05.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt05);
					}
					if (!stmt06.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt06);
					}
					if (!stmt07.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt07);
					}
					if (!stmt08.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt08);
					}
					sb.append(") {").append(rn)
					.append("        conta = \"")
					.append(reg.getField("Conta_Juros__c").toString());
					sb.append("\";\r\n");
					
					if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
						sb.append("        return conta;\r\n");
					}
					sb.append("    }").append(rn);

				}
			}
			else {break;}
    	}
		sb.append("    return conta;\r\n")
            .append("}").append(rn);
	}
    
}

private void makeCodigoContasDesconto(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
								   StringBuilder sb, 
                                   PartnerConnection sfCon,
								   List<T> regrasConta,
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";

	int contador = 0;

	Iterator itr_regras = regrasConta.iterator();

	StringBuilder cabecalhoGetContaDesconto = new StringBuilder();
    cabecalhoGetContaDesconto.append("public String getContaDesconto(String contaDesconto, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
    .append("    String conta = contaDesconto;\r\n");


	String aspas = "\"";
    
	cabecalhoGetContaDesconto.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	cabecalhoGetContaDesconto.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	cabecalhoGetContaDesconto.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
	
	
	int contadorMetodos = 1;
	while (itr_regras.hasNext() || contadorMetodos == 1) {
		String cabecalho = cabecalhoGetContaDesconto.toString();
		if (contadorMetodos > 1) {
			cabecalho = cabecalho.replace("getContaDesconto", "getContaDesconto" + contadorMetodos);
		}
		sb.append(cabecalho);
		contadorMetodos++;

        for (contador = 0; contador < 400; contador++) {
			if (itr_regras.hasNext()) {
				Object regra = itr_regras.next();
				SObject reg = null;
				if (regra instanceof SObject) {
					reg = (SObject) regra;
				} else {
					JSONArray regra40 = (JSONArray) regra;
					String conta_desconto = ((JSONObject) regra40.get(0)).optString("gr.conta_desconto");

					if (conta_desconto != null && conta_desconto != "") {
						makeCodigoRegrasConta40(sb, regra40, "gr.conta_desconto", logger);
					}
					continue;
				} 
            
				String sConta_Desconto__c = "";
				Object oConta_Desconto__c = reg.getField("Conta_Desconto__c");
				if (oConta_Desconto__c != null) sConta_Desconto__c = oConta_Desconto__c.toString();
				if (sConta_Desconto__c.equals("")) continue;
				
				String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
				String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
				String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
				String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
				String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
				
				if (!stmt04.isEmpty()) {
					sb.append("    if (").append(stmt04);
					if (!stmt05.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt05);
					}
					if (!stmt06.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt06);
					}
					if (!stmt07.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt07);
					}
					if (!stmt08.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt08);
					}
					sb.append(") {").append(rn)
					.append("        conta = \"")
					.append(reg.getField("Conta_Desconto__c").toString());
					sb.append("\";\r\n");
					
					if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
						sb.append("        return conta;\r\n");
					}
					sb.append("    }").append(rn);

				}
			}
			else {break;}
		}
		sb.append("    return conta;\r\n")
            .append("}").append(rn);
    }
}

private void makeCodigoContasMulta(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
								   StringBuilder sb, 
                                   PartnerConnection sfCon,
								   List<T> regrasConta,
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";

    int contador = 0;

	Iterator itr_regras = regrasConta.iterator();

	StringBuilder cabecalhoGetContaMulta = new StringBuilder();
    cabecalhoGetContaMulta.append("public String getContaMulta(String contaMulta, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"cntaJuros\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
    .append("    String conta = contaMulta;\r\n");


	String aspas = "\"";
    
	cabecalhoGetContaMulta.append("    if (complemento03.contains(").append(aspas).append("C6#").append(aspas).append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C6#").append(aspas).append(")).trim(); }").append(rn) ;
	cabecalhoGetContaMulta.append("    if (complemento03.contains(").append(aspas).append("C5#").append(aspas).append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C5#").append(aspas).append(")).trim(); }").append(rn) ;
	cabecalhoGetContaMulta.append("    if (complemento03.contains(").append(aspas).append("C4#").append(aspas).append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append(aspas).append("C4#").append(aspas).append(")).trim(); }").append(rn) ;
	
	
	
    int contadorMetodos = 1;
	while (itr_regras.hasNext() || contadorMetodos == 1) {
		String cabecalho = cabecalhoGetContaMulta.toString();
		if (contadorMetodos > 1) {
			cabecalho = cabecalho.replace("getContaMulta", "getContaMulta" + contadorMetodos);
		}
		sb.append(cabecalho);
		contadorMetodos++;

        for (contador = 0; contador < 400; contador++) {
			if (itr_regras.hasNext()) {
				Object regra = itr_regras.next();
				SObject reg = null;
				if (regra instanceof SObject) {
					reg = (SObject) regra;
				} else {
					JSONArray regra40 = (JSONArray) regra;
					String conta_multa = ((JSONObject) regra40.get(0)).optString("gr.conta_multa");

					if (conta_multa != null && conta_multa != "") {
						makeCodigoRegrasConta40(sb, regra40, "gr.conta_multa", logger);
					}
					continue;
				}
            
				String sConta_Multa__c = "";
				Object oConta_Multa__c = reg.getField("Conta_Multa__c");
				if (oConta_Multa__c != null) sConta_Multa__c = oConta_Multa__c.toString();
				if (sConta_Multa__c.equals("")) continue;
				
				String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
				String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
				String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
				String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
				String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
				
				if (!stmt04.isEmpty()) {
					sb.append("    if (").append(stmt04);
					if (!stmt05.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt05);
					}
					if (!stmt06.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt06);
					}
					if (!stmt07.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt07);
					}
					if (!stmt08.isEmpty()) {
						sb.append(" &&").append(rn).append("        ").append(stmt08);
					}
					sb.append(") {").append(rn)
					.append("        conta = \"")
					.append(reg.getField("Conta_Multa__c").toString());
					sb.append("\";\r\n");
					
					if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
						sb.append("        return conta;\r\n");
					}
					sb.append("    }").append(rn);

				}
			}
			else {break;}
        }
		sb.append("    return conta;\r\n")
            .append("}").append(rn);
	}
}

private void makeHistoricos(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Historico__Conta_c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";
    
    sb.append("public String getHistorico(String conta, String histParam, String tipoLancamento, String nomeOrigem, String documento, ").append(rn)
      .append("                           String nomePortador, String complemento01, String complemento02, String complemento03, ").append(rn)
      .append("                           String nomeArquivo, String codCentroCusto) {").append(rn)
      .append("    String historico = \"\";\r\n")
	  .append("    if(!histParam.equals(\"\")) historico = histParam;\r\n").append(rn)
	  .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"PAGAR\"))    historico = \"PAGAMENTO \" + documento + \" \" + nomeOrigem;\r\n")
      .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"RECEBER\"))  historico = \"RECEBIMENTO \" + documento + \" \" + nomeOrigem;\r\n").append(rn);
	String [] listaContas = null;
	String historico = "";
	String lista = "";
	String codigoHistorico = "";
	  
    if (qr_Historico__Conta_c.getSize() > 0) {
		for (SObject reg : qr_Historico__Conta_c.getRecords()) {
			
            String sO_Texto_01__c = "";
            String sRecordTypeId = "";
            
            Object oO_Texto_01__c = reg.getField("O_Texto_01__c");
            if (oO_Texto_01__c != null) sO_Texto_01__c = oO_Texto_01__c.toString();
            if (!sO_Texto_01__c.equals("")) continue;
            
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            if (sRecordTypeId.startsWith("01215000001Ngh1")) continue;
			if (!sRecordTypeId.startsWith("0121500000100G6")) continue;

			listaContas = null;
			historico = "";
			lista = "";
			
			Object campoOb = reg.getField("Quando_Conta_Igual__c");
			if (campoOb != null) lista = campoOb.toString();
			listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");
		   
  		  	for(int i = 0; i < listaContas.length; i++){
				if (i==0){
					if(listaContas[i].trim().equals("")){
						historico = "historico = ";
					}else{
						historico = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}else{
					historico = historico + " || conta.equals(\"" + listaContas[i].trim() + "\")";
				}
			}
			if(historico.startsWith("if")){
				historico = historico + ") historico = ";
			}
			
			String aspas = "\"";

			String textoInicial = "";
			String texto02 = "";
			String texto03 = "";
			String texto04 = "";
			codigoHistorico = "";

			
			campoOb = reg.getField("Texto_01__c");
			if (campoOb != null) textoInicial = campoOb.toString();
			textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Texto_02__c");
			if (campoOb != null) texto02 = campoOb.toString();
			texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_03__c");
			if (campoOb != null) texto03 = campoOb.toString();
			texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_04__c");
			if (campoOb != null) texto04 = campoOb.toString();
			texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Codigo_Historico__c");
			if (campoOb != null) codigoHistorico = campoOb.toString();
			codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
   	
		
			String campo01 = "";
			String campo02 = "";
			String campo03 = "";
			
			campoOb = reg.getField("Campo_01__c");
			if (campoOb != null) campo01 = campoOb.toString();
			campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_02__c");
			if (campoOb != null) campo02 = campoOb.toString();
			campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_03__c");
			if (campoOb != null) campo03 = campoOb.toString();
			campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();
			
			if(campo01.equals(null))campo01 = "";
			if(campo02.equals(null))campo02 = "";
			if(campo03.equals(null))campo03 = "";
			if (campo01.length() > 0) campo01 = " + \" \" + " + campo01;
			if (campo02.length() > 0) campo02 = " + \" \" + " + campo02;
			if (campo03.length() > 0) campo03 = " + \" \" + " + campo03;
			
			texto02 = aspas + texto02;
			texto03 = aspas + texto03;
			texto04 = aspas + texto04;
			
			if (texto02.contains("Complemento (04)")) continue;
			if (texto03.contains("Complemento (04)")) continue;
			if (texto04.contains("Complemento (04)")) continue;
			if (campo01.contains("Complemento (04)")) continue;
			if (campo02.contains("Complemento (04)")) continue;
			if (campo03.contains("Complemento (04)")) continue;
			
			
			if (texto02.length() > 0) texto02 = " + \" \" + " + texto02;
			if (texto03.length() > 0) texto03 = " + \" \" + " + texto03;
			if (texto04.length() > 0) texto04 = " + \" \" + " + texto04;
			
			historico = "    " + historico;
			String hist = aspas + textoInicial + aspas + " " + campo01 + " " + texto02 + aspas + " " + 
			              campo02 + " " + texto03 + aspas + " " + campo03 + " " + texto04;
			
			hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
			hist = hist.replaceAll("Documento/NF","documento");
			hist = hist.replaceAll("Complemento ","complemento");
			hist = hist.replaceAll("[()]","");
			hist = hist.replaceAll("Centro de Custo","codCentroCusto");
			hist = hist.replaceAll("Numero da Aba Planilha","");
			hist = hist.replaceAll("Complemento \\(06\\)","");
			hist = hist.replaceAll("Complemento \\(07\\)","");
			hist = hist.replaceAll("Complemento \\(08\\)","");
			hist = hist.replaceAll("Complemento \\(09\\)","");
			hist = hist.replaceAll("Complemento \\(10\\)","");
			hist = hist.replaceAll("valorDocumento","");
			hist = hist.replaceAll("valorJuros","");
			hist = hist.replaceAll("valorDesconto","");
			hist = hist.replaceAll("Trimestre Mes-Ano Atual","");
			hist = hist.replaceAll("Trimestre Mes-Ano Anterior","");
			hist = hist.replaceAll("Data Movimento","");
			hist = hist.replaceAll("Dia Movimento","");
			hist = hist.replaceAll("Mes-Ano Anterior","");
			hist = hist.replaceAll("2 Meses-Ano Anterior","");
			hist = hist.replaceAll("Mes-Ano Atual","");
			hist = hist.replaceAll("Contra Partida - Portador","");
			hist = hist.replaceAll("Conta Partida - nomePortador","");			
			hist = hist.replaceAll("Centro de Custo","");
			hist = hist.replaceAll("Parcela Atual-Final","");
			hist = hist.replaceAll("Parcela Atual", "");
			hist = hist.replaceAll("Descricao Plano Conta Movimento","");
			hist = hist.replaceAll("Descricao Plano Conta Portador","");
			hist = hist.replaceAll("Portador","nomePortador");
			hist = hist.replaceAll("contanomePortador","contaPortador");
			hist = hist.replaceAll("Conta Movimento","");

			
			hist = hist.replaceAll("  "," ").trim();
			
			if (!codigoHistorico.equals("")) hist = hist + " " + " CodigoHistorico:" + codigoHistorico;
			
			hist = hist + aspas + ";";

			sb.append(historico).append(hist).append(rn);
			
		}
	}
	

	sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
	  .append("}").append(rn);	
 
}

private void makeHistoricosRegras(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Historico__c,
                                   QueryResult qr_Historico__c2,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    logger.logInfo("Entrou make historicosRegras antigo");
	String rn = "\r\n";
	int contador = 0;
   
    sb.append("public String getHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
      .append("    String historico = \"\";\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\").replaceAll(\"INVERTE\",\"\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\").replaceAll(\"INVERTE\",\"\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String parcelaAtual    = objHistorico.optString(\"parcelaAtual\");\r\n")
	.append("    String parcelaAtualeFinal  = objHistorico.optString(\"parcelaAtualeFinal\");\r\n")
	.append("    String trimestreMesAnoAnterior = objHistorico.optString(\"trimestreMesAnoAnterior\");\r\n")
	.append("    String trimestreMesAnoAtual = objHistorico.optString(\"trimestreMesAnoAtual\");\r\n")
	.append("    String descricaoPlanoMovimento  = objHistorico.optString(\"descricaoPlanoMovimento\");\r\n")
	.append("    String descricaoPlanoPortador  = objHistorico.optString(\"descricaoPlanoPortador\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append("    if(!histParam.equals(\"\")) historico = histParam;\r\n").append(rn)
	  .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"PAGAR\"))    historico = \"PAGAMENTO \" + documento + \" \" + nomeOrigem;\r\n")
      .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"RECEBER\"))  historico = \"RECEBIMENTO \" + documento + \" \" + nomeOrigem;\r\n").append(rn);
	String [] listaContas = null;
	String historico = "";
	String lista = "";
	String codigoHistorico = "";
	  
    if (qr_Historico__c.getSize() > 0) {
		for (SObject reg : qr_Historico__c.getRecords()) {
			
            String sRecordTypeId = "";
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            if (sRecordTypeId.startsWith("01215000001Ngh1")) continue;
			contador++;
			if (contador > 400) continue;
            
			listaContas = null;
			historico = "";
			lista = "";
			
			Object campoOb = reg.getField("Quando_Conta_Igual__c");
			if (campoOb != null) lista = campoOb.toString();
			listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");

			// CASO HISTORICO SEJA ESPECIFICO PARA JUROS E DESCONTO, NAO GERA NO HISTORICO DE REGRAS 
		    String tipoHistorico = "";
			campoOb = reg.getField("Tipo_Historico__c");
			if (campoOb != null) tipoHistorico = campoOb.toString();
			if (tipoHistorico.toUpperCase().contains("JUROS")) continue;
			if (tipoHistorico.toUpperCase().contains("MULTA")) continue;
			if (tipoHistorico.toUpperCase().contains("DESCONTO")) continue;
			if (tipoHistorico.toUpperCase().contains("TERMO")) continue;
			if (tipoHistorico.toUpperCase().contains("LIMPA")) continue;
			if (tipoHistorico.toUpperCase().contains("ACUMULA")) continue;
			if (tipoHistorico.toUpperCase().contains("PORTADOR")) continue;

  		  	for(int i = 0; i < listaContas.length; i++){
				if (i==0){
					if(listaContas[i].trim().equals("")){
						historico = "historico = ";
					}else{
						historico = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}else{
					historico = historico + " || conta.equals(\"" + listaContas[i].trim() + "\")";
				}
			}
			
            String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
			if (stmt04 == null) stmt04 = "";
			if (stmt05 == null) stmt05 = "";
			if (stmt06 == null) stmt06 = "";
			if (stmt07 == null) stmt07 = "";
			if (stmt08 == null) stmt08 = "";
			
            if (!stmt04.isEmpty()) {
				historico = "if (" + stmt04;
			}
			if (!stmt05.isEmpty()) {historico = historico + " && " + stmt05;                }
			if (!stmt06.isEmpty()) {historico = historico + " && " + stmt06;}
			if (!stmt07.isEmpty()) {historico = historico + " && " + stmt07;}
			if (!stmt08.isEmpty()) {historico = historico + " && " + stmt08;}


			if(historico.startsWith("if")){
				historico = historico + ")  historico = ";
			}
			
			String aspas = "\"";

			String textoInicial = "";
			String texto02 = "";
			String texto03 = "";
			String texto04 = "";
			String texto05 = "";
			codigoHistorico = "";

			
			campoOb = reg.getField("Texto_01__c");
			if (campoOb != null) textoInicial = campoOb.toString();
			textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Texto_02__c");
			if (campoOb != null) texto02 = campoOb.toString();
			texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_03__c");
			if (campoOb != null) texto03 = campoOb.toString();
			texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_04__c");
			if (campoOb != null) texto04 = campoOb.toString();
			texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_05__c");
			if (campoOb != null) texto05 = campoOb.toString();
			texto05 = StringUtil.removeSpecialChars(texto05).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Codigo_Historico__c");
			if (campoOb != null) codigoHistorico = campoOb.toString();
			codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
   	
		
			String campo01 = "";
			String campo02 = "";
			String campo03 = "";
			String campo04 = "";
			String campo05 = "";
			
			campoOb = reg.getField("Campo_01__c");
			if (campoOb != null) campo01 = campoOb.toString();
			campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_02__c");
			if (campoOb != null) campo02 = campoOb.toString();
			campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_03__c");
			if (campoOb != null) campo03 = campoOb.toString();
			campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_04__c");
			if (campoOb != null) campo04 = campoOb.toString();
			campo04 = StringUtil.removeSpecialChars(campo04).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_05__c");
			if (campoOb != null) campo05 = campoOb.toString();
			campo05 = StringUtil.removeSpecialChars(campo05).replaceAll("\"","").trim();
			
			if(campo01.equals(null))campo01 = "";
			if(campo02.equals(null))campo02 = "";
			if(campo03.equals(null))campo03 = "";
			if(campo04.equals(null))campo03 = "";
			if(campo05.equals(null))campo03 = "";
			if (campo01.length() > 0) campo01 = " + \" \" + " + campo01;
			if (campo02.length() > 0) campo02 = " + \" \" + " + campo02;
			if (campo03.length() > 0) campo03 = " + \" \" + " + campo03;
			if (campo04.length() > 0) campo04 = " + \" \" + " + campo04;
			if (campo05.length() > 0) campo05 = " + \" \" + " + campo05;
			
			texto02 = aspas + texto02;
			texto03 = aspas + texto03;
			texto04 = aspas + texto04;
			texto05 = aspas + texto05;
			
			if (texto02.length() > 0) texto02 = " + \" \" + " + texto02;
			if (texto03.length() > 0) texto03 = " + \" \" + " + texto03;
			if (texto04.length() > 0) texto04 = " + \" \" + " + texto04;
			if (texto05.length() > 0) texto05 = " + \" \" + " + texto05;
			
			historico = "    " + historico;
			String hist = aspas + textoInicial + aspas + " " + campo01 + " " + texto02 + aspas + " " + 
			              campo02 + " " + texto03 + aspas + " " + campo03 + " " + texto04 + aspas + " " + campo04 + " " + texto05 + aspas + " " + campo05 + " + " + aspas;
			
			hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
			hist = hist.replaceAll("Documento/NF","documento");
			hist = hist.replaceAll("Complemento \\(01\\)","complemento01");
			hist = hist.replaceAll("Complemento \\(02\\)","complemento02");
			hist = hist.replaceAll("Complemento \\(03\\)","complemento03");
			hist = hist.replaceAll("Complemento \\(04\\)","complemento04");
			hist = hist.replaceAll("Complemento \\(05\\)","complemento05");
			hist = hist.replaceAll("Complemento \\(06\\)","complemento06");
			hist = hist.replaceAll("Complemento \\(07\\)","complemento07");
			hist = hist.replaceAll("Complemento \\(08\\)","complemento08");
			hist = hist.replaceAll("Complemento \\(09\\)","complemento09");
			hist = hist.replaceAll("Complemento \\(10\\)","complemento10");

			hist = hist.replaceAll("Numero da Aba Planilha","numeroAba");
			hist = hist.replaceAll("valorDocumento","valorDocumento");
			hist = hist.replaceAll("valorJuros","valorJuros");
			hist = hist.replaceAll("valorDesconto","valorDesconto");
			
			hist = hist.replaceAll("Trimestre Mes-Ano Atual","trimestreMesAnoAtual");
			hist = hist.replaceAll("Trimestre Mes-Ano Anterior","trimestreMesAnoAnterior");
			hist = hist.replaceAll("Data Movimento","dataMovimento");
			hist = hist.replaceAll("Dia Movimento","dataMovimento.substring(0,2)");
			hist = hist.replaceAll("Mes-Ano Anterior","mesAnoAnterior");
			hist = hist.replaceAll("2 Meses-Ano Anterior","mesAno2Anterior");
			hist = hist.replaceAll("Mes-Ano Atual","mesAnoAtual");
			hist = hist.replaceAll("Contra Partida - Portador","contaPortador");
			hist = hist.replaceAll("Contra Partida - nomePortador","contaPortador");

			hist = hist.replaceAll("Conta Partida - nomePortador","contaPortador");			
			hist = hist.replaceAll("Centro de Custo","codCentroCusto");
			hist = hist.replaceAll("Parcela Atual-Final","parcelaAtualeFinal");
			hist = hist.replaceAll("Parcela Atual", "parcelaAtual");
			hist = hist.replaceAll("Descricao Plano Conta Movimento","descricaoPlanoMovimento");
			hist = hist.replaceAll("Portador","nomePortador");
			hist = hist.replaceAll("Descricao Plano Conta nomePortador","descricaoPlanoPortador");
			hist = hist.replaceAll("Conta Movimento","contaMovimento");
			hist = hist.replaceAll("contanomePortador","contaPortador");
		
			hist = hist.replaceAll("  "," ").trim();
			
			if (!codigoHistorico.equals("")) hist = hist + " " + " CodigoHistorico:" + codigoHistorico;
			
			hist = hist + aspas + ";";
 			
			sb.append(historico).append(hist).append(rn);
			
			if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
				sb.append("        return historico.replaceAll(\"  \",\" \").trim();\r\n");
			}
			sb.append("    ").append(rn);

				
		}
	}
	

	sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
	  .append("}").append(rn);
	  
	sb.append("public String getHistoricoRegra2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
      .append("    String historico = \"\";\r\n")
	  .append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	  .append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	  .append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	  .append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	  .append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	  .append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	  .append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	  .append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	  .append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	  .append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	  .append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	  .append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	  .append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	  .append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	  .append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	  .append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\").replaceAll(\"INVERTE\",\"\");\r\n")
	  .append("    String contaPortador   = objHistorico.optString(\"contaPortador\").replaceAll(\"INVERTE\",\"\");\r\n")
	  .append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	  .append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	  .append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	  .append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	  .append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	  .append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	  .append("    String parcelaAtual    = objHistorico.optString(\"parcelaAtual\");\r\n")
	  .append("    String parcelaAtualeFinal  = objHistorico.optString(\"parcelaAtualeFinal\");\r\n")
	  .append("    String trimestreMesAnoAnterior = objHistorico.optString(\"trimestreMesAnoAnterior\");\r\n")
	  .append("    String trimestreMesAnoAtual = objHistorico.optString(\"trimestreMesAnoAtual\");\r\n")
	  .append("    String descricaoPlanoMovimento  = objHistorico.optString(\"descricaoPlanoMovimento\");\r\n")
	  .append("    String descricaoPlanoPortador  = objHistorico.optString(\"descricaoPlanoPortador\");\r\n")
	  .append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	  .append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	  .append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	  .append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append("    if(!histParam.equals(\"\")) historico = histParam;\r\n").append(rn)
	  .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"PAGAR\"))    historico = \"PAGAMENTO \" + documento + \" \" + nomeOrigem;\r\n")
      .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"RECEBER\"))  historico = \"RECEBIMENTO \" + documento + \" \" + nomeOrigem;\r\n").append(rn);
	
	  
	contador = 0;  
    if (qr_Historico__c.getSize() > 0) {
		for (SObject reg : qr_Historico__c.getRecords()) {
			contador ++;
			if (!reg.getField("Continua__c").toString().contains("0") && !reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					if (contador < 400) continue;
				}
			// if(contador > 400) continue;
			if (contador > 800) continue;
			
            String sRecordTypeId = "";
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            if (sRecordTypeId.startsWith("01215000001Ngh1")) continue;
            
			listaContas = null;
			historico = "";
			lista = "";
			
			Object campoOb = reg.getField("Quando_Conta_Igual__c");
			if (campoOb != null) lista = campoOb.toString();
			listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");

			// CASO HISTORICO SEJA ESPECIFICO PARA JUROS E DESCONTO, NAO GERA NO HISTORICO DE REGRAS 
		    String tipoHistorico = "";
			campoOb = reg.getField("Tipo_Historico__c");
			if (campoOb != null) tipoHistorico = campoOb.toString();
			if (tipoHistorico.toUpperCase().contains("JUROS")) continue;
			if (tipoHistorico.toUpperCase().contains("MULTA")) continue;
			if (tipoHistorico.toUpperCase().contains("DESCONTO")) continue;
			if (tipoHistorico.toUpperCase().contains("TERMO")) continue;
			if (tipoHistorico.toUpperCase().contains("LIMPA")) continue;
			if (tipoHistorico.toUpperCase().contains("ACUMULA")) continue;
			if (tipoHistorico.toUpperCase().contains("PORTADOR")) continue;

  		  	for(int i = 0; i < listaContas.length; i++){
				if (i==0){
					if(listaContas[i].trim().equals("")){
						historico = "historico = ";
					}else{
						historico = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}else{
					historico = historico + " || conta.equals(\"" + listaContas[i].trim() + "\")";
				}
			}
			
            String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
			if (stmt04 == null) stmt04 = "";
			if (stmt05 == null) stmt05 = "";
			if (stmt06 == null) stmt06 = "";
			if (stmt07 == null) stmt07 = "";
			if (stmt08 == null) stmt08 = "";
			
            if (!stmt04.isEmpty()) {
				historico = "if (" + stmt04;
			}
			if (!stmt05.isEmpty()) {historico = historico + " && " + stmt05;                }
			if (!stmt06.isEmpty()) {historico = historico + " && " + stmt06;}
			if (!stmt07.isEmpty()) {historico = historico + " && " + stmt07;}
			if (!stmt08.isEmpty()) {historico = historico + " && " + stmt08;}


			if(historico.startsWith("if")){
				historico = historico + ")  historico = ";
			}
			
			String aspas = "\"";

			String textoInicial = "";
			String texto02 = "";
			String texto03 = "";
			String texto04 = "";
			String texto05 = "";
			codigoHistorico = "";

			
			campoOb = reg.getField("Texto_01__c");
			if (campoOb != null) textoInicial = campoOb.toString();
			textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Texto_02__c");
			if (campoOb != null) texto02 = campoOb.toString();
			texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_03__c");
			if (campoOb != null) texto03 = campoOb.toString();
			texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_04__c");
			if (campoOb != null) texto04 = campoOb.toString();
			texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_05__c");
			if (campoOb != null) texto05 = campoOb.toString();
			texto05 = StringUtil.removeSpecialChars(texto05).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Codigo_Historico__c");
			if (campoOb != null) codigoHistorico = campoOb.toString();
			codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
   	
		
			String campo01 = "";
			String campo02 = "";
			String campo03 = "";
			String campo04 = "";
			String campo05 = "";
			
			campoOb = reg.getField("Campo_01__c");
			if (campoOb != null) campo01 = campoOb.toString();
			campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_02__c");
			if (campoOb != null) campo02 = campoOb.toString();
			campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_03__c");
			if (campoOb != null) campo03 = campoOb.toString();
			campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_04__c");
			if (campoOb != null) campo04 = campoOb.toString();
			campo04 = StringUtil.removeSpecialChars(campo04).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_05__c");
			if (campoOb != null) campo05 = campoOb.toString();
			campo05 = StringUtil.removeSpecialChars(campo05).replaceAll("\"","").trim();
			
			if(campo01.equals(null))campo01 = "";
			if(campo02.equals(null))campo02 = "";
			if(campo03.equals(null))campo03 = "";
			if(campo04.equals(null))campo03 = "";
			if(campo05.equals(null))campo03 = "";
			if (campo01.length() > 0) campo01 = " + \" \" + " + campo01;
			if (campo02.length() > 0) campo02 = " + \" \" + " + campo02;
			if (campo03.length() > 0) campo03 = " + \" \" + " + campo03;
			if (campo04.length() > 0) campo04 = " + \" \" + " + campo04;
			if (campo05.length() > 0) campo05 = " + \" \" + " + campo05;
			
			texto02 = aspas + texto02;
			texto03 = aspas + texto03;
			texto04 = aspas + texto04;
			texto05 = aspas + texto05;
			
			if (texto02.length() > 0) texto02 = " + \" \" + " + texto02;
			if (texto03.length() > 0) texto03 = " + \" \" + " + texto03;
			if (texto04.length() > 0) texto04 = " + \" \" + " + texto04;
			if (texto05.length() > 0) texto05 = " + \" \" + " + texto05;
			
			historico = "    " + historico;
			String hist = aspas + textoInicial + aspas + " " + campo01 + " " + texto02 + aspas + " " + 
			              campo02 + " " + texto03 + aspas + " " + campo03 + " " + texto04 + aspas + " " + campo04 + " " + texto05 + aspas + " " + campo05 + " + " + aspas;
			
			hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
			hist = hist.replaceAll("Documento/NF","documento");
			hist = hist.replaceAll("Complemento \\(01\\)","complemento01");
			hist = hist.replaceAll("Complemento \\(02\\)","complemento02");
			hist = hist.replaceAll("Complemento \\(03\\)","complemento03");
			hist = hist.replaceAll("Complemento \\(04\\)","complemento04");
			hist = hist.replaceAll("Complemento \\(05\\)","complemento05");
			hist = hist.replaceAll("Complemento \\(06\\)","complemento06");
			hist = hist.replaceAll("Complemento \\(07\\)","complemento07");
			hist = hist.replaceAll("Complemento \\(08\\)","complemento08");
			hist = hist.replaceAll("Complemento \\(09\\)","complemento09");
			hist = hist.replaceAll("Complemento \\(10\\)","complemento10");

			hist = hist.replaceAll("Numero da Aba Planilha","numeroAba");
			hist = hist.replaceAll("valorDocumento","valorDocumento");
			hist = hist.replaceAll("valorJuros","valorJuros");
			hist = hist.replaceAll("valorDesconto","valorDesconto");
			
			hist = hist.replaceAll("Trimestre Mes-Ano Atual","trimestreMesAnoAtual");
			hist = hist.replaceAll("Trimestre Mes-Ano Anterior","trimestreMesAnoAnterior");
			hist = hist.replaceAll("Data Movimento","dataMovimento");
			hist = hist.replaceAll("Dia Movimento","dataMovimento.substring(0,2)");
			hist = hist.replaceAll("Mes-Ano Anterior","mesAnoAnterior");
			hist = hist.replaceAll("2 Meses-Ano Anterior","mesAno2Anterior");
			hist = hist.replaceAll("Mes-Ano Atual","mesAnoAtual");
			hist = hist.replaceAll("Contra Partida - Portador","contaPortador");
			hist = hist.replaceAll("Contra Partida - nomePortador","contaPortador");

			hist = hist.replaceAll("Conta Partida - nomePortador","contaPortador");			
			hist = hist.replaceAll("Centro de Custo","codCentroCusto");
			hist = hist.replaceAll("Parcela Atual-Final","parcelaAtualeFinal");
			hist = hist.replaceAll("Parcela Atual", "parcelaAtual");
			hist = hist.replaceAll("Descricao Plano Conta Movimento","descricaoPlanoMovimento");
			hist = hist.replaceAll("Portador","nomePortador");
			hist = hist.replaceAll("Descricao Plano Conta nomePortador","descricaoPlanoPortador");
			hist = hist.replaceAll("Conta Movimento","contaMovimento");
			hist = hist.replaceAll("contanomePortador","contaPortador");
		
			hist = hist.replaceAll("  "," ").trim();
			
			if (!codigoHistorico.equals("")) hist = hist + " " + " CodigoHistorico:" + codigoHistorico;
			
			hist = hist + aspas + ";";
 			
			sb.append(historico).append(hist).append(rn);
			
			if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
				sb.append("        return historico.replaceAll(\"  \",\" \").trim();\r\n");
			}
			sb.append("    ").append(rn);

				
		}
	}
	

	sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
	  .append("}").append(rn);	
	  
	sb.append("public String getHistoricoRegra3(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
      .append("    String historico = \"\";\r\n")
	  .append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	  .append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	  .append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	  .append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	  .append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	  .append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	  .append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	  .append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	  .append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	  .append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	  .append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	  .append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	  .append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	  .append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	  .append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	  .append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\").replaceAll(\"INVERTE\",\"\");\r\n")
	  .append("    String contaPortador   = objHistorico.optString(\"contaPortador\").replaceAll(\"INVERTE\",\"\");\r\n")
	  .append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	  .append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	  .append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	  .append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	  .append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	  .append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	  .append("    String parcelaAtual    = objHistorico.optString(\"parcelaAtual\");\r\n")
	  .append("    String parcelaAtualeFinal  = objHistorico.optString(\"parcelaAtualeFinal\");\r\n")
	  .append("    String trimestreMesAnoAnterior = objHistorico.optString(\"trimestreMesAnoAnterior\");\r\n")
	  .append("    String trimestreMesAnoAtual = objHistorico.optString(\"trimestreMesAnoAtual\");\r\n")
	  .append("    String descricaoPlanoMovimento  = objHistorico.optString(\"descricaoPlanoMovimento\");\r\n")
	  .append("    String descricaoPlanoPortador  = objHistorico.optString(\"descricaoPlanoPortador\");\r\n")
	  .append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	  .append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	  .append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	  .append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append("    if(!histParam.equals(\"\")) historico = histParam;\r\n").append(rn)
	  .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"PAGAR\"))    historico = \"PAGAMENTO \" + documento + \" \" + nomeOrigem;\r\n")
      .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"RECEBER\"))  historico = \"RECEBIMENTO \" + documento + \" \" + nomeOrigem;\r\n").append(rn);
	
	  
	contador = 0;  
    if (qr_Historico__c.getSize() > 0) {
		for (SObject reg : qr_Historico__c.getRecords()) {
			contador ++;
			if (!reg.getField("Continua__c").toString().contains("0") && !reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					if (contador < 800) continue;
				}
			// if(contador > 400) continue;
			
            String sRecordTypeId = "";
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            if (sRecordTypeId.startsWith("01215000001Ngh1")) continue;
            
			listaContas = null;
			historico = "";
			lista = "";
			
			Object campoOb = reg.getField("Quando_Conta_Igual__c");
			if (campoOb != null) lista = campoOb.toString();
			listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");

			// CASO HISTORICO SEJA ESPECIFICO PARA JUROS E DESCONTO, NAO GERA NO HISTORICO DE REGRAS 
		    String tipoHistorico = "";
			campoOb = reg.getField("Tipo_Historico__c");
			if (campoOb != null) tipoHistorico = campoOb.toString();
			if (tipoHistorico.toUpperCase().contains("JUROS")) continue;
			if (tipoHistorico.toUpperCase().contains("MULTA")) continue;
			if (tipoHistorico.toUpperCase().contains("DESCONTO")) continue;
			if (tipoHistorico.toUpperCase().contains("TERMO")) continue;
			if (tipoHistorico.toUpperCase().contains("LIMPA")) continue;
			if (tipoHistorico.toUpperCase().contains("ACUMULA")) continue;
			if (tipoHistorico.toUpperCase().contains("PORTADOR")) continue;

  		  	for(int i = 0; i < listaContas.length; i++){
				if (i==0){
					if(listaContas[i].trim().equals("")){
						historico = "historico = ";
					}else{
						historico = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}else{
					historico = historico + " || conta.equals(\"" + listaContas[i].trim() + "\")";
				}
			}
			
            String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
			if (stmt04 == null) stmt04 = "";
			if (stmt05 == null) stmt05 = "";
			if (stmt06 == null) stmt06 = "";
			if (stmt07 == null) stmt07 = "";
			if (stmt08 == null) stmt08 = "";
			
            if (!stmt04.isEmpty()) {
				historico = "if (" + stmt04;
			}
			if (!stmt05.isEmpty()) {historico = historico + " && " + stmt05;                }
			if (!stmt06.isEmpty()) {historico = historico + " && " + stmt06;}
			if (!stmt07.isEmpty()) {historico = historico + " && " + stmt07;}
			if (!stmt08.isEmpty()) {historico = historico + " && " + stmt08;}


			if(historico.startsWith("if")){
				historico = historico + ")  historico = ";
			}
			
			String aspas = "\"";

			String textoInicial = "";
			String texto02 = "";
			String texto03 = "";
			String texto04 = "";
			String texto05 = "";
			codigoHistorico = "";

			
			campoOb = reg.getField("Texto_01__c");
			if (campoOb != null) textoInicial = campoOb.toString();
			textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Texto_02__c");
			if (campoOb != null) texto02 = campoOb.toString();
			texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_03__c");
			if (campoOb != null) texto03 = campoOb.toString();
			texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_04__c");
			if (campoOb != null) texto04 = campoOb.toString();
			texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_05__c");
			if (campoOb != null) texto05 = campoOb.toString();
			texto05 = StringUtil.removeSpecialChars(texto05).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Codigo_Historico__c");
			if (campoOb != null) codigoHistorico = campoOb.toString();
			codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
   	
		
			String campo01 = "";
			String campo02 = "";
			String campo03 = "";
			String campo04 = "";
			String campo05 = "";
			
			campoOb = reg.getField("Campo_01__c");
			if (campoOb != null) campo01 = campoOb.toString();
			campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_02__c");
			if (campoOb != null) campo02 = campoOb.toString();
			campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_03__c");
			if (campoOb != null) campo03 = campoOb.toString();
			campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_04__c");
			if (campoOb != null) campo04 = campoOb.toString();
			campo04 = StringUtil.removeSpecialChars(campo04).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_05__c");
			if (campoOb != null) campo05 = campoOb.toString();
			campo05 = StringUtil.removeSpecialChars(campo05).replaceAll("\"","").trim();
			
			if(campo01.equals(null))campo01 = "";
			if(campo02.equals(null))campo02 = "";
			if(campo03.equals(null))campo03 = "";
			if(campo04.equals(null))campo03 = "";
			if(campo05.equals(null))campo03 = "";
			if (campo01.length() > 0) campo01 = " + \" \" + " + campo01;
			if (campo02.length() > 0) campo02 = " + \" \" + " + campo02;
			if (campo03.length() > 0) campo03 = " + \" \" + " + campo03;
			if (campo04.length() > 0) campo04 = " + \" \" + " + campo04;
			if (campo05.length() > 0) campo05 = " + \" \" + " + campo05;
			
			texto02 = aspas + texto02;
			texto03 = aspas + texto03;
			texto04 = aspas + texto04;
			texto05 = aspas + texto05;
			
			if (texto02.length() > 0) texto02 = " + \" \" + " + texto02;
			if (texto03.length() > 0) texto03 = " + \" \" + " + texto03;
			if (texto04.length() > 0) texto04 = " + \" \" + " + texto04;
			if (texto05.length() > 0) texto05 = " + \" \" + " + texto05;
			
			historico = "    " + historico;
			String hist = aspas + textoInicial + aspas + " " + campo01 + " " + texto02 + aspas + " " + 
			              campo02 + " " + texto03 + aspas + " " + campo03 + " " + texto04 + aspas + " " + campo04 + " " + texto05 + aspas + " " + campo05 + " + " + aspas;
			
			hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
			hist = hist.replaceAll("Documento/NF","documento");
			hist = hist.replaceAll("Complemento \\(01\\)","complemento01");
			hist = hist.replaceAll("Complemento \\(02\\)","complemento02");
			hist = hist.replaceAll("Complemento \\(03\\)","complemento03");
			hist = hist.replaceAll("Complemento \\(04\\)","complemento04");
			hist = hist.replaceAll("Complemento \\(05\\)","complemento05");
			hist = hist.replaceAll("Complemento \\(06\\)","complemento06");
			hist = hist.replaceAll("Complemento \\(07\\)","complemento07");
			hist = hist.replaceAll("Complemento \\(08\\)","complemento08");
			hist = hist.replaceAll("Complemento \\(09\\)","complemento09");
			hist = hist.replaceAll("Complemento \\(10\\)","complemento10");

			hist = hist.replaceAll("Numero da Aba Planilha","numeroAba");
			hist = hist.replaceAll("valorDocumento","valorDocumento");
			hist = hist.replaceAll("valorJuros","valorJuros");
			hist = hist.replaceAll("valorDesconto","valorDesconto");
			
			hist = hist.replaceAll("Trimestre Mes-Ano Atual","trimestreMesAnoAtual");
			hist = hist.replaceAll("Trimestre Mes-Ano Anterior","trimestreMesAnoAnterior");
			hist = hist.replaceAll("Data Movimento","dataMovimento");
			hist = hist.replaceAll("Dia Movimento","dataMovimento.substring(0,2)");
			hist = hist.replaceAll("Mes-Ano Anterior","mesAnoAnterior");
			hist = hist.replaceAll("2 Meses-Ano Anterior","mesAno2Anterior");
			hist = hist.replaceAll("Mes-Ano Atual","mesAnoAtual");
			hist = hist.replaceAll("Contra Partida - Portador","contaPortador");
			hist = hist.replaceAll("Contra Partida - nomePortador","contaPortador");

			hist = hist.replaceAll("Conta Partida - nomePortador","contaPortador");			
			hist = hist.replaceAll("Centro de Custo","codCentroCusto");
			hist = hist.replaceAll("Parcela Atual-Final","parcelaAtualeFinal");
			hist = hist.replaceAll("Parcela Atual", "parcelaAtual");
			hist = hist.replaceAll("Descricao Plano Conta Movimento","descricaoPlanoMovimento");
			hist = hist.replaceAll("Portador","nomePortador");
			hist = hist.replaceAll("Descricao Plano Conta nomePortador","descricaoPlanoPortador");
			hist = hist.replaceAll("Conta Movimento","contaMovimento");
			hist = hist.replaceAll("contanomePortador","contaPortador");
		
			hist = hist.replaceAll("  "," ").trim();
			
			if (!codigoHistorico.equals("")) hist = hist + " " + " CodigoHistorico:" + codigoHistorico;
			
			hist = hist + aspas + ";";
 			
			sb.append(historico).append(hist).append(rn);
			
			if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
				sb.append("        return historico.replaceAll(\"  \",\" \").trim();\r\n");
			}
			sb.append("    ").append(rn);

				
		}
	}
	

	sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
	  .append("}").append(rn);

	sb.append("public String getHistoricoRegra4(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
      .append("    String historico = \"\";\r\n")
	  .append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	  .append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	  .append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	  .append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	  .append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	  .append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	  .append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	  .append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	  .append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	  .append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	  .append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	  .append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	  .append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	  .append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	  .append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	  .append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\").replaceAll(\"INVERTE\",\"\");\r\n")
	  .append("    String contaPortador   = objHistorico.optString(\"contaPortador\").replaceAll(\"INVERTE\",\"\");\r\n")
	  .append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	  .append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	  .append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	  .append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	  .append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	  .append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	  .append("    String parcelaAtual    = objHistorico.optString(\"parcelaAtual\");\r\n")
	  .append("    String parcelaAtualeFinal  = objHistorico.optString(\"parcelaAtualeFinal\");\r\n")
	  .append("    String trimestreMesAnoAnterior = objHistorico.optString(\"trimestreMesAnoAnterior\");\r\n")
	  .append("    String trimestreMesAnoAtual = objHistorico.optString(\"trimestreMesAnoAtual\");\r\n")
	  .append("    String descricaoPlanoMovimento  = objHistorico.optString(\"descricaoPlanoMovimento\");\r\n")
	  .append("    String descricaoPlanoPortador  = objHistorico.optString(\"descricaoPlanoPortador\");\r\n")
	  .append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	  .append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	  .append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	  .append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append("    if(!histParam.equals(\"\")) historico = histParam;\r\n").append(rn)
	  .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"PAGAR\"))    historico = \"PAGAMENTO \" + documento + \" \" + nomeOrigem;\r\n")
      .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"RECEBER\"))  historico = \"RECEBIMENTO \" + documento + \" \" + nomeOrigem;\r\n").append(rn);
	
	  
	contador = 0;  
    if (qr_Historico__c2 != null && qr_Historico__c2.getSize() > 0) {
		for (SObject reg : qr_Historico__c2.getRecords()) {
			contador ++;
			/*if (!reg.getField("Continua__c").toString().contains("0") && !reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
				if (contador < 800) continue;
			}*/
			if(contador > 400) continue;
			
            String sRecordTypeId = "";
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            if (sRecordTypeId.startsWith("01215000001Ngh1")) continue;
            
			listaContas = null;
			historico = "";
			lista = "";
			
			Object campoOb = reg.getField("Quando_Conta_Igual__c");
			if (campoOb != null) lista = campoOb.toString();
			listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");

			// CASO HISTORICO SEJA ESPECIFICO PARA JUROS E DESCONTO, NAO GERA NO HISTORICO DE REGRAS 
		    String tipoHistorico = "";
			campoOb = reg.getField("Tipo_Historico__c");
			if (campoOb != null) tipoHistorico = campoOb.toString();
			if (tipoHistorico.toUpperCase().contains("JUROS")) continue;
			if (tipoHistorico.toUpperCase().contains("MULTA")) continue;
			if (tipoHistorico.toUpperCase().contains("DESCONTO")) continue;
			if (tipoHistorico.toUpperCase().contains("TERMO")) continue;
			if (tipoHistorico.toUpperCase().contains("LIMPA")) continue;
			if (tipoHistorico.toUpperCase().contains("ACUMULA")) continue;
			if (tipoHistorico.toUpperCase().contains("PORTADOR")) continue;

  		  	for(int i = 0; i < listaContas.length; i++){
				if (i==0){
					if(listaContas[i].trim().equals("")){
						historico = "historico = ";
					}else{
						historico = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}else{
					historico = historico + " || conta.equals(\"" + listaContas[i].trim() + "\")";
				}
			}
			
            String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
			if (stmt04 == null) stmt04 = "";
			if (stmt05 == null) stmt05 = "";
			if (stmt06 == null) stmt06 = "";
			if (stmt07 == null) stmt07 = "";
			if (stmt08 == null) stmt08 = "";
			
            if (!stmt04.isEmpty()) {
				historico = "if (" + stmt04;
			}
			if (!stmt05.isEmpty()) {historico = historico + " && " + stmt05;                }
			if (!stmt06.isEmpty()) {historico = historico + " && " + stmt06;}
			if (!stmt07.isEmpty()) {historico = historico + " && " + stmt07;}
			if (!stmt08.isEmpty()) {historico = historico + " && " + stmt08;}


			if(historico.startsWith("if")){
				historico = historico + ")  historico = ";
			}
			
			String aspas = "\"";

			String textoInicial = "";
			String texto02 = "";
			String texto03 = "";
			String texto04 = "";
			String texto05 = "";
			codigoHistorico = "";

			
			campoOb = reg.getField("Texto_01__c");
			if (campoOb != null) textoInicial = campoOb.toString();
			textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Texto_02__c");
			if (campoOb != null) texto02 = campoOb.toString();
			texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_03__c");
			if (campoOb != null) texto03 = campoOb.toString();
			texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_04__c");
			if (campoOb != null) texto04 = campoOb.toString();
			texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_05__c");
			if (campoOb != null) texto05 = campoOb.toString();
			texto05 = StringUtil.removeSpecialChars(texto05).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Codigo_Historico__c");
			if (campoOb != null) codigoHistorico = campoOb.toString();
			codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
   	
		
			String campo01 = "";
			String campo02 = "";
			String campo03 = "";
			String campo04 = "";
			String campo05 = "";
			
			campoOb = reg.getField("Campo_01__c");
			if (campoOb != null) campo01 = campoOb.toString();
			campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_02__c");
			if (campoOb != null) campo02 = campoOb.toString();
			campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_03__c");
			if (campoOb != null) campo03 = campoOb.toString();
			campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_04__c");
			if (campoOb != null) campo04 = campoOb.toString();
			campo04 = StringUtil.removeSpecialChars(campo04).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_05__c");
			if (campoOb != null) campo05 = campoOb.toString();
			campo05 = StringUtil.removeSpecialChars(campo05).replaceAll("\"","").trim();
			
			if(campo01.equals(null))campo01 = "";
			if(campo02.equals(null))campo02 = "";
			if(campo03.equals(null))campo03 = "";
			if(campo04.equals(null))campo03 = "";
			if(campo05.equals(null))campo03 = "";
			if (campo01.length() > 0) campo01 = " + \" \" + " + campo01;
			if (campo02.length() > 0) campo02 = " + \" \" + " + campo02;
			if (campo03.length() > 0) campo03 = " + \" \" + " + campo03;
			if (campo04.length() > 0) campo04 = " + \" \" + " + campo04;
			if (campo05.length() > 0) campo05 = " + \" \" + " + campo05;
			
			texto02 = aspas + texto02;
			texto03 = aspas + texto03;
			texto04 = aspas + texto04;
			texto05 = aspas + texto05;
			
			if (texto02.length() > 0) texto02 = " + \" \" + " + texto02;
			if (texto03.length() > 0) texto03 = " + \" \" + " + texto03;
			if (texto04.length() > 0) texto04 = " + \" \" + " + texto04;
			if (texto05.length() > 0) texto05 = " + \" \" + " + texto05;
			
			historico = "    " + historico;
			String hist = aspas + textoInicial + aspas + " " + campo01 + " " + texto02 + aspas + " " + 
			              campo02 + " " + texto03 + aspas + " " + campo03 + " " + texto04 + aspas + " " + campo04 + " " + texto05 + aspas + " " + campo05 + " + " + aspas;
			
			hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
			hist = hist.replaceAll("Documento/NF","documento");
			hist = hist.replaceAll("Complemento \\(01\\)","complemento01");
			hist = hist.replaceAll("Complemento \\(02\\)","complemento02");
			hist = hist.replaceAll("Complemento \\(03\\)","complemento03");
			hist = hist.replaceAll("Complemento \\(04\\)","complemento04");
			hist = hist.replaceAll("Complemento \\(05\\)","complemento05");
			hist = hist.replaceAll("Complemento \\(06\\)","complemento06");
			hist = hist.replaceAll("Complemento \\(07\\)","complemento07");
			hist = hist.replaceAll("Complemento \\(08\\)","complemento08");
			hist = hist.replaceAll("Complemento \\(09\\)","complemento09");
			hist = hist.replaceAll("Complemento \\(10\\)","complemento10");

			hist = hist.replaceAll("Numero da Aba Planilha","numeroAba");
			hist = hist.replaceAll("valorDocumento","valorDocumento");
			hist = hist.replaceAll("valorJuros","valorJuros");
			hist = hist.replaceAll("valorDesconto","valorDesconto");
			
			hist = hist.replaceAll("Trimestre Mes-Ano Atual","trimestreMesAnoAtual");
			hist = hist.replaceAll("Trimestre Mes-Ano Anterior","trimestreMesAnoAnterior");
			hist = hist.replaceAll("Data Movimento","dataMovimento");
			hist = hist.replaceAll("Dia Movimento","dataMovimento.substring(0,2)");
			hist = hist.replaceAll("Mes-Ano Anterior","mesAnoAnterior");
			hist = hist.replaceAll("2 Meses-Ano Anterior","mesAno2Anterior");
			hist = hist.replaceAll("Mes-Ano Atual","mesAnoAtual");
			hist = hist.replaceAll("Contra Partida - Portador","contaPortador");
			hist = hist.replaceAll("Contra Partida - nomePortador","contaPortador");

			hist = hist.replaceAll("Conta Partida - nomePortador","contaPortador");			
			hist = hist.replaceAll("Centro de Custo","codCentroCusto");
			hist = hist.replaceAll("Parcela Atual-Final","parcelaAtualeFinal");
			hist = hist.replaceAll("Parcela Atual", "parcelaAtual");
			hist = hist.replaceAll("Descricao Plano Conta Movimento","descricaoPlanoMovimento");
			hist = hist.replaceAll("Portador","nomePortador");
			hist = hist.replaceAll("Descricao Plano Conta nomePortador","descricaoPlanoPortador");
			hist = hist.replaceAll("Conta Movimento","contaMovimento");
			hist = hist.replaceAll("contanomePortador","contaPortador");
		
			hist = hist.replaceAll("  "," ").trim();
			
			if (!codigoHistorico.equals("")) hist = hist + " " + " CodigoHistorico:" + codigoHistorico;
			
			hist = hist + aspas + ";";
 			
			sb.append(historico).append(hist).append(rn);
			
			if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
				sb.append("        return historico.replaceAll(\"  \",\" \").trim();\r\n");
			}
			sb.append("    ").append(rn);

				
		}
	}
	sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
	  .append("}").append(rn);
 
}


private void makeRegraHistoricosRegras(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Historico__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";
    
    sb.append("public String getRegraHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
      .append("    String historico = \"\";\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha     = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n");
	
	String [] listaContas = null;
	String historico = "";
	String lista = "";
	String codigoHistorico = "";
	
	int contadorHistorico = 0;
	
    if (qr_Historico__c.getSize() > 0) {
		for (SObject reg : qr_Historico__c.getRecords()) {
			
			contadorHistorico++;
			
			if (contadorHistorico > 400) continue;
			
            String sRecordTypeId = "";
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            if (sRecordTypeId.startsWith("01215000001Ngh1")) continue;
            
			listaContas = null;
			historico = "";
			lista = "";
			
			Object campoOb = reg.getField("Quando_Conta_Igual__c");
			if (campoOb != null) lista = campoOb.toString();
			listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");

			// CASO HISTORICO SEJA ESPECIFICO PARA JUROS E DESCONTO, NAO GERA NO HISTORICO DE REGRAS 
		    String tipoHistorico = "";
			campoOb = reg.getField("Tipo_Historico__c");
			if (campoOb != null) tipoHistorico = campoOb.toString();
			if (tipoHistorico.toUpperCase().contains("JUROS")) continue;
			if (tipoHistorico.toUpperCase().contains("MULTA")) continue;
			if (tipoHistorico.toUpperCase().contains("DESCONTO")) continue;
			if (tipoHistorico.toUpperCase().contains("ACUMULAR")) continue;
			if (tipoHistorico.toUpperCase().contains("TERMO")) continue;
			if (tipoHistorico.toUpperCase().contains("LIMPA")) continue;
			if (tipoHistorico.toUpperCase().contains("PORTADOR")) continue;

			
  		  	for(int i = 0; i < listaContas.length; i++){
				if (i==0){
					if(listaContas[i].trim().equals("")){
						historico = "historico = ";
					}else{
						historico = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}else{
					historico = historico + " || conta.equals(\"" + listaContas[i].trim() + "\")";
				}
			}
			
            String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
			if (stmt04 == null) stmt04 = "";
			if (stmt05 == null) stmt05 = "";
			if (stmt06 == null) stmt06 = "";
			if (stmt07 == null) stmt07 = "";
			if (stmt08 == null) stmt08 = "";
			
            if (!stmt04.isEmpty()) {
				historico = "if (" + stmt04;
			}
			if (!stmt05.isEmpty()) {historico = historico + " && " + stmt05;                }
			if (!stmt06.isEmpty()) {historico = historico + " && " + stmt06;}
			if (!stmt07.isEmpty()) {historico = historico + " && " + stmt07;}
			if (!stmt08.isEmpty()) {historico = historico + " && " + stmt08;}


			if(historico.startsWith("if")){
				historico = historico + ")  historico = ";
			}
			
			String aspas = "\"";

			String textoInicial = "";
			String texto02 = "";
			String texto03 = "";
			String texto04 = "";
			String texto05 = "";
			codigoHistorico = "";

			
			campoOb = reg.getField("Exemplo_Historico__c");
			if (campoOb != null) textoInicial = campoOb.toString();
			textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
			
			
			historico = "    " + historico;
			String hist = aspas + StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","\'");
			hist = hist.replaceAll("  "," ").trim();
		
			
			hist = hist + aspas + ";";
 			
			sb.append(historico).append(hist).append(rn);
			
			if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
				sb.append("        return historico.replaceAll(\"  \",\" \").trim();\r\n");
			}
			sb.append("    ").append(rn);
			
		}
	}
	

	sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
	  .append("}").append(rn);	
 
}

private void makeHistoricosPortador(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Historico__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";
    
    sb.append("public String getHistoricoPortador(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
      .append("    String historico = \"\";\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha     = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String parcelaAtual    = objHistorico.optString(\"parcelaAtual\");\r\n")
	.append("    String parcelaAtualeFinal  = objHistorico.optString(\"parcelaAtualeFinal\");\r\n")
	.append("    String trimestreMesAnoAnterior = objHistorico.optString(\"trimestreMesAnoAnterior\");\r\n")
	.append("    String trimestreMesAnoAtual = objHistorico.optString(\"trimestreMesAnoAtual\");\r\n")
	.append("    String descricaoPlanoMovimento  = objHistorico.optString(\"descricaoPlanoMovimento\");\r\n")
	.append("    String descricaoPlanoPortador  = objHistorico.optString(\"descricaoPlanoPortador\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append("    if(!histParam.equals(\"\")) historico = histParam;\r\n").append(rn)
	  .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"PAGAR\"))    historico = \"PAGAMENTO \" + documento + \" \" + nomeOrigem;\r\n")
      .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"RECEBER\"))  historico = \"RECEBIMENTO \" + documento + \" \" + nomeOrigem;\r\n").append(rn);
	String [] listaContas = null;
	String historico = "";
	String lista = "";
	String codigoHistorico = "";
	  
    if (qr_Historico__c.getSize() > 0) {
		for (SObject reg : qr_Historico__c.getRecords()) {
			
            String sRecordTypeId = "";
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            if (sRecordTypeId.startsWith("01215000001Ngh1")) continue;
            
			listaContas = null;
			historico = "";
			lista = "";
			
			// CASO LE SOMENTE HISTORICO DE JUROS. 
		    String tipoHistorico = "";
			Object campoOb = reg.getField("Tipo_Historico__c");
			if (campoOb != null) tipoHistorico = campoOb.toString();
			if (!tipoHistorico.toUpperCase().contains("PORTADOR")) continue;
			
			campoOb = reg.getField("Quando_Conta_Igual__c");
			if (campoOb != null) lista = campoOb.toString();
			listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");
		   
  		  	for(int i = 0; i < listaContas.length; i++){
				if (i==0){
					if(listaContas[i].trim().equals("")){
						historico = "historico = ";
					}else{
						historico = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}else{
					historico = historico + " || conta.equals(\"" + listaContas[i].trim() + "\")";
				}
			}
			
            String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
			if (stmt04 == null) stmt04 = "";
			if (stmt05 == null) stmt05 = "";
			if (stmt06 == null) stmt06 = "";
			if (stmt07 == null) stmt07 = "";
			if (stmt08 == null) stmt08 = "";
			
            if (!stmt04.isEmpty()) {
				historico = "if (" + stmt04;
			}
			if (!stmt05.isEmpty()) {historico = historico + " && " + stmt05;                }
			if (!stmt06.isEmpty()) {historico = historico + " && " + stmt06;}
			if (!stmt07.isEmpty()) {historico = historico + " && " + stmt07;}
			if (!stmt08.isEmpty()) {historico = historico + " && " + stmt08;}


			if(historico.startsWith("if")){
				historico = historico + ")  historico = ";
			}
			
			String aspas = "\"";

			String textoInicial = "";
			String texto02 = "";
			String texto03 = "";
			String texto04 = "";
			String texto05 = "";
			codigoHistorico = "";

			
			campoOb = reg.getField("Texto_01__c");
			if (campoOb != null) textoInicial = campoOb.toString();
			textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Texto_02__c");
			if (campoOb != null) texto02 = campoOb.toString();
			texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_03__c");
			if (campoOb != null) texto03 = campoOb.toString();
			texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_04__c");
			if (campoOb != null) texto04 = campoOb.toString();
			texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_05__c");
			if (campoOb != null) texto05 = campoOb.toString();
			texto05 = StringUtil.removeSpecialChars(texto05).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Codigo_Historico__c");
			if (campoOb != null) codigoHistorico = campoOb.toString();
			codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
   	
		
			String campo01 = "";
			String campo02 = "";
			String campo03 = "";
			String campo04 = "";
			String campo05 = "";
			
			campoOb = reg.getField("Campo_01__c");
			if (campoOb != null) campo01 = campoOb.toString();
			campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_02__c");
			if (campoOb != null) campo02 = campoOb.toString();
			campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_03__c");
			if (campoOb != null) campo03 = campoOb.toString();
			campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_04__c");
			if (campoOb != null) campo04 = campoOb.toString();
			campo04 = StringUtil.removeSpecialChars(campo04).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_05__c");
			if (campoOb != null) campo05 = campoOb.toString();
			campo05 = StringUtil.removeSpecialChars(campo05).replaceAll("\"","").trim();
			
			if(campo01.equals(null))campo01 = "";
			if(campo02.equals(null))campo02 = "";
			if(campo03.equals(null))campo03 = "";
			if(campo04.equals(null))campo03 = "";
			if(campo05.equals(null))campo03 = "";
			if (campo01.length() > 0) campo01 = " + \" \" + " + campo01;
			if (campo02.length() > 0) campo02 = " + \" \" + " + campo02;
			if (campo03.length() > 0) campo03 = " + \" \" + " + campo03;
			if (campo04.length() > 0) campo04 = " + \" \" + " + campo04;
			if (campo05.length() > 0) campo05 = " + \" \" + " + campo05;
			
			texto02 = aspas + texto02;
			texto03 = aspas + texto03;
			texto04 = aspas + texto04;
			texto05 = aspas + texto05;
			
			if (texto02.length() > 0) texto02 = " + \" \" + " + texto02;
			if (texto03.length() > 0) texto03 = " + \" \" + " + texto03;
			if (texto04.length() > 0) texto04 = " + \" \" + " + texto04;
			if (texto05.length() > 0) texto05 = " + \" \" + " + texto05;
			
			historico = "    " + historico;
			String hist = aspas + textoInicial + aspas + " " + campo01 + " " + texto02 + aspas + " " + 
			              campo02 + " " + texto03 + aspas + " " + campo03 + " " + texto04 + aspas + " " + campo04 + " " + texto05 + aspas + " " + campo05 + " + " + aspas;
			
			hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
			hist = hist.replaceAll("Documento/NF","documento");
			hist = hist.replaceAll("Complemento \\(01\\)","complemento01");
			hist = hist.replaceAll("Complemento \\(02\\)","complemento02");
			hist = hist.replaceAll("Complemento \\(03\\)","complemento03");
			hist = hist.replaceAll("Complemento \\(04\\)","complemento04");
			hist = hist.replaceAll("Complemento \\(05\\)","complemento05");
			hist = hist.replaceAll("Complemento \\(06\\)","complemento06");
			hist = hist.replaceAll("Complemento \\(07\\)","complemento07");
			hist = hist.replaceAll("Complemento \\(08\\)","complemento08");
			hist = hist.replaceAll("Complemento \\(09\\)","complemento09");
			hist = hist.replaceAll("Complemento \\(10\\)","complemento10");

			hist = hist.replaceAll("Numero da Aba Planilha","numeroAba");
			hist = hist.replaceAll("valorDocumento","valorDocumento");
			hist = hist.replaceAll("valorJuros","valorJuros");
			hist = hist.replaceAll("valorDesconto","valorDesconto");
			
			hist = hist.replaceAll("Trimestre Mes-Ano Atual","trimestreMesAnoAtual");
			hist = hist.replaceAll("Trimestre Mes-Ano Anterior","trimestreMesAnoAnterior");
			hist = hist.replaceAll("Data Movimento","dataMovimento");
			hist = hist.replaceAll("Dia Movimento","dataMovimento.substring(0,2)");
			hist = hist.replaceAll("Mes-Ano Anterior","mesAnoAnterior");
			hist = hist.replaceAll("2 Meses-Ano Anterior","mesAno2Anterior");
			hist = hist.replaceAll("Mes-Ano Atual","mesAnoAtual");
			hist = hist.replaceAll("Contra Partida - Portador","contaPortador");
			hist = hist.replaceAll("Contra Partida - nomePortador","contaPortador");
			
			hist = hist.replaceAll("Conta Partida - nomePortador","contaPortador");			
			hist = hist.replaceAll("Centro de Custo","codCentroCusto");
			hist = hist.replaceAll("Parcela Atual-Final","parcelaAtualeFinal");
			hist = hist.replaceAll("Parcela Atual", "parcelaAtual");
			hist = hist.replaceAll("Descricao Plano Conta Movimento","descricaoPlanoMovimento");
			hist = hist.replaceAll("Portador","nomePortador");
			hist = hist.replaceAll("Descricao Plano Conta nomePortador","descricaoPlanoPortador");
			hist = hist.replaceAll("Conta Movimento","contaMovimento");
			hist = hist.replaceAll("contanomePortador","contaPortador");

			
			hist = hist.replaceAll("  "," ").trim();
			
			if (!codigoHistorico.equals("")) hist = hist + " " + " CodigoHistorico:" + codigoHistorico;
			
			hist = hist + aspas + ";";
 			
			sb.append(historico).append(hist).append(rn);
			
			if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
				sb.append("        return historico.replaceAll(\"  \",\" \").trim();\r\n");
			}
			sb.append("    ").append(rn);
			
		}
	}
	
	sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
	  .append("}").append(rn);	
 
}

private void makeHistoricosJuros(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Historico__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";
    
    sb.append("public String getHistoricoJuros(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
      .append("    String historico = \"\";\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha     = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String parcelaAtual    = objHistorico.optString(\"parcelaAtual\");\r\n")
	.append("    String parcelaAtualeFinal  = objHistorico.optString(\"parcelaAtualeFinal\");\r\n")
	.append("    String trimestreMesAnoAnterior = objHistorico.optString(\"trimestreMesAnoAnterior\");\r\n")
	.append("    String trimestreMesAnoAtual = objHistorico.optString(\"trimestreMesAnoAtual\");\r\n")
	.append("    String descricaoPlanoMovimento  = objHistorico.optString(\"descricaoPlanoMovimento\");\r\n")
	.append("    String descricaoPlanoPortador  = objHistorico.optString(\"descricaoPlanoPortador\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append("    if(!histParam.equals(\"\")) historico = histParam;\r\n").append(rn)
	  .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"PAGAR\"))    historico = \"PAGAMENTO \" + documento + \" \" + nomeOrigem;\r\n")
      .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"RECEBER\"))  historico = \"RECEBIMENTO \" + documento + \" \" + nomeOrigem;\r\n").append(rn);
	String [] listaContas = null;
	String historico = "";
	String lista = "";
	String codigoHistorico = "";
	  
    if (qr_Historico__c.getSize() > 0) {
		for (SObject reg : qr_Historico__c.getRecords()) {
			
            String sRecordTypeId = "";
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            if (sRecordTypeId.startsWith("01215000001Ngh1")) continue;
            
			listaContas = null;
			historico = "";
			lista = "";
			
			// CASO LE SOMENTE HISTORICO DE JUROS. 
		    String tipoHistorico = "";
			Object campoOb = reg.getField("Tipo_Historico__c");
			if (campoOb != null) tipoHistorico = campoOb.toString();
			if (!tipoHistorico.toUpperCase().contains("JUROS")) continue;
			
			campoOb = reg.getField("Quando_Conta_Igual__c");
			if (campoOb != null) lista = campoOb.toString();
			listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");
		   
  		  	for(int i = 0; i < listaContas.length; i++){
				if (i==0){
					if(listaContas[i].trim().equals("")){
						historico = "historico = ";
					}else{
						historico = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}else{
					historico = historico + " || conta.equals(\"" + listaContas[i].trim() + "\")";
				}
			}
			
            String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
			if (stmt04 == null) stmt04 = "";
			if (stmt05 == null) stmt05 = "";
			if (stmt06 == null) stmt06 = "";
			if (stmt07 == null) stmt07 = "";
			if (stmt08 == null) stmt08 = "";
			
            if (!stmt04.isEmpty()) {
				historico = "if (" + stmt04;
			}
			if (!stmt05.isEmpty()) {historico = historico + " && " + stmt05;                }
			if (!stmt06.isEmpty()) {historico = historico + " && " + stmt06;}
			if (!stmt07.isEmpty()) {historico = historico + " && " + stmt07;}
			if (!stmt08.isEmpty()) {historico = historico + " && " + stmt08;}


			if(historico.startsWith("if")){
				historico = historico + ")  historico = ";
			}
			
			String aspas = "\"";

			String textoInicial = "";
			String texto02 = "";
			String texto03 = "";
			String texto04 = "";
			String texto05 = "";
			codigoHistorico = "";

			
			campoOb = reg.getField("Texto_01__c");
			if (campoOb != null) textoInicial = campoOb.toString();
			textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Texto_02__c");
			if (campoOb != null) texto02 = campoOb.toString();
			texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_03__c");
			if (campoOb != null) texto03 = campoOb.toString();
			texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_04__c");
			if (campoOb != null) texto04 = campoOb.toString();
			texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_05__c");
			if (campoOb != null) texto05 = campoOb.toString();
			texto05 = StringUtil.removeSpecialChars(texto05).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Codigo_Historico__c");
			if (campoOb != null) codigoHistorico = campoOb.toString();
			codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
   	
		
			String campo01 = "";
			String campo02 = "";
			String campo03 = "";
			String campo04 = "";
			String campo05 = "";
			
			campoOb = reg.getField("Campo_01__c");
			if (campoOb != null) campo01 = campoOb.toString();
			campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_02__c");
			if (campoOb != null) campo02 = campoOb.toString();
			campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_03__c");
			if (campoOb != null) campo03 = campoOb.toString();
			campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_04__c");
			if (campoOb != null) campo04 = campoOb.toString();
			campo04 = StringUtil.removeSpecialChars(campo04).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_05__c");
			if (campoOb != null) campo05 = campoOb.toString();
			campo05 = StringUtil.removeSpecialChars(campo05).replaceAll("\"","").trim();
			
			if(campo01.equals(null))campo01 = "";
			if(campo02.equals(null))campo02 = "";
			if(campo03.equals(null))campo03 = "";
			if(campo04.equals(null))campo03 = "";
			if(campo05.equals(null))campo03 = "";
			if (campo01.length() > 0) campo01 = " + \" \" + " + campo01;
			if (campo02.length() > 0) campo02 = " + \" \" + " + campo02;
			if (campo03.length() > 0) campo03 = " + \" \" + " + campo03;
			if (campo04.length() > 0) campo04 = " + \" \" + " + campo04;
			if (campo05.length() > 0) campo05 = " + \" \" + " + campo05;
			
			texto02 = aspas + texto02;
			texto03 = aspas + texto03;
			texto04 = aspas + texto04;
			texto05 = aspas + texto05;
			
			if (texto02.length() > 0) texto02 = " + \" \" + " + texto02;
			if (texto03.length() > 0) texto03 = " + \" \" + " + texto03;
			if (texto04.length() > 0) texto04 = " + \" \" + " + texto04;
			if (texto05.length() > 0) texto05 = " + \" \" + " + texto05;
			
			historico = "    " + historico;
			String hist = aspas + textoInicial + aspas + " " + campo01 + " " + texto02 + aspas + " " + 
			              campo02 + " " + texto03 + aspas + " " + campo03 + " " + texto04 + aspas + " " + campo04 + " " + texto05 + aspas + " " + campo05 + " + " + aspas;
			
			hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
			hist = hist.replaceAll("Documento/NF","documento");
			hist = hist.replaceAll("Complemento \\(01\\)","complemento01");
			hist = hist.replaceAll("Complemento \\(02\\)","complemento02");
			hist = hist.replaceAll("Complemento \\(03\\)","complemento03");
			hist = hist.replaceAll("Complemento \\(04\\)","complemento04");
			hist = hist.replaceAll("Complemento \\(05\\)","complemento05");
			hist = hist.replaceAll("Complemento \\(06\\)","complemento06");
			hist = hist.replaceAll("Complemento \\(07\\)","complemento07");
			hist = hist.replaceAll("Complemento \\(08\\)","complemento08");
			hist = hist.replaceAll("Complemento \\(09\\)","complemento09");
			hist = hist.replaceAll("Complemento \\(10\\)","complemento10");

			hist = hist.replaceAll("Numero da Aba Planilha","numeroAba");
			hist = hist.replaceAll("valorDocumento","valorDocumento");
			hist = hist.replaceAll("valorJuros","valorJuros");
			hist = hist.replaceAll("valorDesconto","valorDesconto");
			
			hist = hist.replaceAll("Trimestre Mes-Ano Atual","trimestreMesAnoAtual");
			hist = hist.replaceAll("Trimestre Mes-Ano Anterior","trimestreMesAnoAnterior");
			hist = hist.replaceAll("Data Movimento","dataMovimento");
			hist = hist.replaceAll("Dia Movimento","dataMovimento.substring(0,2)");
			hist = hist.replaceAll("Mes-Ano Anterior","mesAnoAnterior");
			hist = hist.replaceAll("2 Meses-Ano Anterior","mesAno2Anterior");
			hist = hist.replaceAll("Mes-Ano Atual","mesAnoAtual");
			hist = hist.replaceAll("Contra Partida - Portador","contaPortador");
			hist = hist.replaceAll("Contra Partida - nomePortador","contaPortador");
			
			hist = hist.replaceAll("Conta Partida - nomePortador","contaPortador");			
			hist = hist.replaceAll("Centro de Custo","codCentroCusto");
			hist = hist.replaceAll("Parcela Atual-Final","parcelaAtualeFinal");
			hist = hist.replaceAll("Parcela Atual", "parcelaAtual");
			hist = hist.replaceAll("Descricao Plano Conta Movimento","descricaoPlanoMovimento");
			hist = hist.replaceAll("Portador","nomePortador");
			hist = hist.replaceAll("Descricao Plano Conta nomePortador","descricaoPlanoPortador");
			hist = hist.replaceAll("Conta Movimento","contaMovimento");
			hist = hist.replaceAll("contanomePortador","contaPortador");
			
			hist = hist.replaceAll("  "," ").trim();
			
			if (!codigoHistorico.equals("")) hist = hist + " " + " CodigoHistorico:" + codigoHistorico;
			
			hist = hist + aspas + ";";
 			
			sb.append(historico).append(hist).append(rn);
			
			if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
				sb.append("        return historico.replaceAll(\"  \",\" \").trim();\r\n");
			}
			sb.append("    ").append(rn);
			
		}
	}
	
	sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
	  .append("}").append(rn);	
 
}

private void makeHistoricosDesconto(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Historico__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";

    sb.append("public String getHistoricoDesconto(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
    .append("    String historico = \"\";\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha     = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String parcelaAtual    = objHistorico.optString(\"parcelaAtual\");\r\n")
	.append("    String parcelaAtualeFinal  = objHistorico.optString(\"parcelaAtualeFinal\");\r\n")
	.append("    String trimestreMesAnoAnterior = objHistorico.optString(\"trimestreMesAnoAnterior\");\r\n")
	.append("    String trimestreMesAnoAtual = objHistorico.optString(\"trimestreMesAnoAtual\");\r\n")
	.append("    String descricaoPlanoMovimento  = objHistorico.optString(\"descricaoPlanoMovimento\");\r\n")
	.append("    String descricaoPlanoPortador  = objHistorico.optString(\"descricaoPlanoPortador\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append("    if(!histParam.equals(\"\")) historico = histParam;\r\n").append(rn)
	  .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"PAGAR\"))    historico = \"PAGAMENTO \" + documento + \" \" + nomeOrigem;\r\n")
      .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"RECEBER\"))  historico = \"RECEBIMENTO \" + documento + \" \" + nomeOrigem;\r\n").append(rn);
	String [] listaContas = null;
	String historico = "";
	String lista = "";
	String codigoHistorico = "";
	  
    if (qr_Historico__c.getSize() > 0) {
		for (SObject reg : qr_Historico__c.getRecords()) {
			
            String sRecordTypeId = "";
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            if (sRecordTypeId.startsWith("01215000001Ngh1")) continue;
            
			listaContas = null;
			historico = "";
			lista = "";
			
			// CASO LE SOMENTE HISTORICO DE DESCONTO. 
		    String tipoHistorico = "";
			Object campoOb = reg.getField("Tipo_Historico__c");
			if (campoOb != null) tipoHistorico = campoOb.toString();
			if (!tipoHistorico.toUpperCase().contains("DESCONTO")) continue;
			
			campoOb = reg.getField("Quando_Conta_Igual__c");
			if (campoOb != null) lista = campoOb.toString();
			listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");
		   
  		  	for(int i = 0; i < listaContas.length; i++){
				if (i==0){
					if(listaContas[i].trim().equals("")){
						historico = "historico = ";
					}else{
						historico = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}else{
					historico = historico + " || conta.equals(\"" + listaContas[i].trim() + "\")";
				}
			}
			
            String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
			if (stmt04 == null) stmt04 = "";
			if (stmt05 == null) stmt05 = "";
			if (stmt06 == null) stmt06 = "";
			if (stmt07 == null) stmt07 = "";
			if (stmt08 == null) stmt08 = "";
			
            if (!stmt04.isEmpty()) {
				historico = "if (" + stmt04;
			}
			if (!stmt05.isEmpty()) {historico = historico + " && " + stmt05;                }
			if (!stmt06.isEmpty()) {historico = historico + " && " + stmt06;}
			if (!stmt07.isEmpty()) {historico = historico + " && " + stmt07;}
			if (!stmt08.isEmpty()) {historico = historico + " && " + stmt08;}


			if(historico.startsWith("if")){
				historico = historico + ")  historico = ";
			}
			
			String aspas = "\"";

			String textoInicial = "";
			String texto02 = "";
			String texto03 = "";
			String texto04 = "";
			String texto05 = "";
			codigoHistorico = "";

			
			campoOb = reg.getField("Texto_01__c");
			if (campoOb != null) textoInicial = campoOb.toString();
			textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Texto_02__c");
			if (campoOb != null) texto02 = campoOb.toString();
			texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_03__c");
			if (campoOb != null) texto03 = campoOb.toString();
			texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_04__c");
			if (campoOb != null) texto04 = campoOb.toString();
			texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_05__c");
			if (campoOb != null) texto05 = campoOb.toString();
			texto05 = StringUtil.removeSpecialChars(texto05).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Codigo_Historico__c");
			if (campoOb != null) codigoHistorico = campoOb.toString();
			codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
   	
		
			String campo01 = "";
			String campo02 = "";
			String campo03 = "";
			String campo04 = "";
			String campo05 = "";
			
			campoOb = reg.getField("Campo_01__c");
			if (campoOb != null) campo01 = campoOb.toString();
			campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_02__c");
			if (campoOb != null) campo02 = campoOb.toString();
			campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_03__c");
			if (campoOb != null) campo03 = campoOb.toString();
			campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_04__c");
			if (campoOb != null) campo04 = campoOb.toString();
			campo04 = StringUtil.removeSpecialChars(campo04).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_05__c");
			if (campoOb != null) campo05 = campoOb.toString();
			campo05 = StringUtil.removeSpecialChars(campo05).replaceAll("\"","").trim();
			
			if(campo01.equals(null))campo01 = "";
			if(campo02.equals(null))campo02 = "";
			if(campo03.equals(null))campo03 = "";
			if(campo04.equals(null))campo03 = "";
			if(campo05.equals(null))campo03 = "";
			if (campo01.length() > 0) campo01 = " + \" \" + " + campo01;
			if (campo02.length() > 0) campo02 = " + \" \" + " + campo02;
			if (campo03.length() > 0) campo03 = " + \" \" + " + campo03;
			if (campo04.length() > 0) campo04 = " + \" \" + " + campo04;
			if (campo05.length() > 0) campo05 = " + \" \" + " + campo05;
			
			texto02 = aspas + texto02;
			texto03 = aspas + texto03;
			texto04 = aspas + texto04;
			texto05 = aspas + texto05;
			
			if (texto02.length() > 0) texto02 = " + \" \" + " + texto02;
			if (texto03.length() > 0) texto03 = " + \" \" + " + texto03;
			if (texto04.length() > 0) texto04 = " + \" \" + " + texto04;
			if (texto05.length() > 0) texto05 = " + \" \" + " + texto05;
			
			historico = "    " + historico;
			String hist = aspas + textoInicial + aspas + " " + campo01 + " " + texto02 + aspas + " " + 
			              campo02 + " " + texto03 + aspas + " " + campo03 + " " + texto04 + aspas + " " + campo04 + " " + texto05 + aspas + " " + campo05 + " + " + aspas;
			
			hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
			hist = hist.replaceAll("Documento/NF","documento");
			hist = hist.replaceAll("Complemento \\(01\\)","complemento01");
			hist = hist.replaceAll("Complemento \\(02\\)","complemento02");
			hist = hist.replaceAll("Complemento \\(03\\)","complemento03");
			hist = hist.replaceAll("Complemento \\(04\\)","complemento04");
			hist = hist.replaceAll("Complemento \\(05\\)","complemento05");
			hist = hist.replaceAll("Complemento \\(06\\)","complemento06");
			hist = hist.replaceAll("Complemento \\(07\\)","complemento07");
			hist = hist.replaceAll("Complemento \\(08\\)","complemento08");
			hist = hist.replaceAll("Complemento \\(09\\)","complemento09");
			hist = hist.replaceAll("Complemento \\(10\\)","complemento10");

			hist = hist.replaceAll("Numero da Aba Planilha","numeroAba");
			hist = hist.replaceAll("valorDocumento","valorDocumento");
			hist = hist.replaceAll("valorJuros","valorJuros");
			hist = hist.replaceAll("valorDesconto","valorDesconto");
			
			hist = hist.replaceAll("Trimestre Mes-Ano Atual","trimestreMesAnoAtual");
			hist = hist.replaceAll("Trimestre Mes-Ano Anterior","trimestreMesAnoAnterior");
			hist = hist.replaceAll("Data Movimento","dataMovimento");
			hist = hist.replaceAll("Dia Movimento","dataMovimento.substring(0,2)");
			hist = hist.replaceAll("Mes-Ano Anterior","mesAnoAnterior");
			hist = hist.replaceAll("2 Meses-Ano Anterior","mesAno2Anterior");
			hist = hist.replaceAll("Mes-Ano Atual","mesAnoAtual");
			hist = hist.replaceAll("Contra Partida - Portador","contaPortador");
			hist = hist.replaceAll("Conta Partida - nomePortador","contaPortador");			
			hist = hist.replaceAll("Centro de Custo","codCentroCusto");
			hist = hist.replaceAll("Parcela Atual-Final","parcelaAtualeFinal");
			hist = hist.replaceAll("Parcela Atual", "parcelaAtual");
			hist = hist.replaceAll("Descricao Plano Conta Movimento","descricaoPlanoMovimento");
			hist = hist.replaceAll("Portador","nomePortador");
			hist = hist.replaceAll("Descricao Plano Conta nomePortador","descricaoPlanoPortador");
			hist = hist.replaceAll("Conta Movimento","contaMovimento");
			hist = hist.replaceAll("contanomePortador","contaPortador");
			hist = hist.replaceAll("  "," ").trim();
			
			if (!codigoHistorico.equals("")) hist = hist + " " + " CodigoHistorico:" + codigoHistorico;
			
			hist = hist + aspas + ";";
 			
			sb.append(historico).append(hist).append(rn);
			
			if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
				sb.append("        return historico.replaceAll(\"  \",\" \").trim();\r\n");
			}
			sb.append("    ").append(rn);
			
		}
	}
	
	
	sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
	  .append("}").append(rn);	
 
}

private void makeHistoricosMulta(String idRoteiro, 
								   String idRoteiroGrupo,
	     						   String idRoteiroCartoes,
                                   QueryResult qr_Historico__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";
    
    sb.append("public String getHistoricoMulta(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
      .append("    String historico = \"\";\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha     = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String parcelaAtual    = objHistorico.optString(\"parcelaAtual\");\r\n")
	.append("    String parcelaAtualeFinal  = objHistorico.optString(\"parcelaAtualeFinal\");\r\n")
	.append("    String trimestreMesAnoAnterior = objHistorico.optString(\"trimestreMesAnoAnterior\");\r\n")
	.append("    String trimestreMesAnoAtual = objHistorico.optString(\"trimestreMesAnoAtual\");\r\n")
	.append("    String descricaoPlanoMovimento  = objHistorico.optString(\"descricaoPlanoMovimento\");\r\n")
	.append("    String descricaoPlanoPortador  = objHistorico.optString(\"descricaoPlanoPortador\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append("    if(!histParam.equals(\"\")) historico = histParam;\r\n").append(rn)
	  .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"PAGAR\"))    historico = \"PAGAMENTO \" + documento + \" \" + nomeOrigem;\r\n")
      .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"RECEBER\"))  historico = \"RECEBIMENTO \" + documento + \" \" + nomeOrigem;\r\n").append(rn);
	String [] listaContas = null;
	String historico = "";
	String lista = "";
	String codigoHistorico = "";
	  
    if (qr_Historico__c.getSize() > 0) {
		for (SObject reg : qr_Historico__c.getRecords()) {
			
            String sRecordTypeId = "";
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            if (sRecordTypeId.startsWith("01215000001Ngh1")) continue;
            
			listaContas = null;
			historico = "";
			lista = "";
			
			// CASO LE SOMENTE HISTORICO DE MULTA. 
		    String tipoHistorico = "";
			Object campoOb = reg.getField("Tipo_Historico__c");
			if (campoOb != null) tipoHistorico = campoOb.toString();
			if (!tipoHistorico.toUpperCase().contains("MULTA")) continue;
			
			campoOb = reg.getField("Quando_Conta_Igual__c");
			if (campoOb != null) lista = campoOb.toString();
			listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");
		   
  		  	for(int i = 0; i < listaContas.length; i++){
				if (i==0){
					if(listaContas[i].trim().equals("")){
						historico = "historico = ";
					}else{
						historico = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}else{
					historico = historico + " || conta.equals(\"" + listaContas[i].trim() + "\")";
				}
			}
			
            String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
			if (stmt04 == null) stmt04 = "";
			if (stmt05 == null) stmt05 = "";
			if (stmt06 == null) stmt06 = "";
			if (stmt07 == null) stmt07 = "";
			if (stmt08 == null) stmt08 = "";
			
            if (!stmt04.isEmpty()) {
				historico = "if (" + stmt04;
			}
			if (!stmt05.isEmpty()) {historico = historico + " && " + stmt05;                }
			if (!stmt06.isEmpty()) {historico = historico + " && " + stmt06;}
			if (!stmt07.isEmpty()) {historico = historico + " && " + stmt07;}
			if (!stmt08.isEmpty()) {historico = historico + " && " + stmt08;}


			if(historico.startsWith("if")){
				historico = historico + ")  historico = ";
			}
			
			String aspas = "\"";

			String textoInicial = "";
			String texto02 = "";
			String texto03 = "";
			String texto04 = "";
			String texto05 = "";
			codigoHistorico = "";

			
			campoOb = reg.getField("Texto_01__c");
			if (campoOb != null) textoInicial = campoOb.toString();
			textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Texto_02__c");
			if (campoOb != null) texto02 = campoOb.toString();
			texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_03__c");
			if (campoOb != null) texto03 = campoOb.toString();
			texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_04__c");
			if (campoOb != null) texto04 = campoOb.toString();
			texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_05__c");
			if (campoOb != null) texto05 = campoOb.toString();
			texto05 = StringUtil.removeSpecialChars(texto05).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Codigo_Historico__c");
			if (campoOb != null) codigoHistorico = campoOb.toString();
			codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
   	
		
			String campo01 = "";
			String campo02 = "";
			String campo03 = "";
			String campo04 = "";
			String campo05 = "";
			
			campoOb = reg.getField("Campo_01__c");
			if (campoOb != null) campo01 = campoOb.toString();
			campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_02__c");
			if (campoOb != null) campo02 = campoOb.toString();
			campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_03__c");
			if (campoOb != null) campo03 = campoOb.toString();
			campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_04__c");
			if (campoOb != null) campo04 = campoOb.toString();
			campo04 = StringUtil.removeSpecialChars(campo04).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_05__c");
			if (campoOb != null) campo05 = campoOb.toString();
			campo05 = StringUtil.removeSpecialChars(campo05).replaceAll("\"","").trim();
			
			if(campo01.equals(null))campo01 = "";
			if(campo02.equals(null))campo02 = "";
			if(campo03.equals(null))campo03 = "";
			if(campo04.equals(null))campo03 = "";
			if(campo05.equals(null))campo03 = "";
			if (campo01.length() > 0) campo01 = " + \" \" + " + campo01;
			if (campo02.length() > 0) campo02 = " + \" \" + " + campo02;
			if (campo03.length() > 0) campo03 = " + \" \" + " + campo03;
			if (campo04.length() > 0) campo04 = " + \" \" + " + campo04;
			if (campo05.length() > 0) campo05 = " + \" \" + " + campo05;
			
			texto02 = aspas + texto02;
			texto03 = aspas + texto03;
			texto04 = aspas + texto04;
			texto05 = aspas + texto05;
			
			if (texto02.length() > 0) texto02 = " + \" \" + " + texto02;
			if (texto03.length() > 0) texto03 = " + \" \" + " + texto03;
			if (texto04.length() > 0) texto04 = " + \" \" + " + texto04;
			if (texto05.length() > 0) texto05 = " + \" \" + " + texto05;
			
			historico = "    " + historico;
			String hist = aspas + textoInicial + aspas + " " + campo01 + " " + texto02 + aspas + " " + 
			              campo02 + " " + texto03 + aspas + " " + campo03 + " " + texto04 + aspas + " " + campo04 + " " + texto05 + aspas + " " + campo05 + " + " + aspas;
			
			hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
			hist = hist.replaceAll("Documento/NF","documento");
			hist = hist.replaceAll("Complemento \\(01\\)","complemento01");
			hist = hist.replaceAll("Complemento \\(02\\)","complemento02");
			hist = hist.replaceAll("Complemento \\(03\\)","complemento03");
			hist = hist.replaceAll("Complemento \\(04\\)","complemento04");
			hist = hist.replaceAll("Complemento \\(05\\)","complemento05");
			hist = hist.replaceAll("Complemento \\(06\\)","complemento06");
			hist = hist.replaceAll("Complemento \\(07\\)","complemento07");
			hist = hist.replaceAll("Complemento \\(08\\)","complemento08");
			hist = hist.replaceAll("Complemento \\(09\\)","complemento09");
			hist = hist.replaceAll("Complemento \\(10\\)","complemento10");

			hist = hist.replaceAll("Numero da Aba Planilha","numeroAba");
			hist = hist.replaceAll("valorDocumento","valorDocumento");
			hist = hist.replaceAll("valorJuros","valorJuros");
			hist = hist.replaceAll("valorDesconto","valorDesconto");
			
			hist = hist.replaceAll("Trimestre Mes-Ano Atual","trimestreMesAnoAtual");
			hist = hist.replaceAll("Trimestre Mes-Ano Anterior","trimestreMesAnoAnterior");
			hist = hist.replaceAll("Data Movimento","dataMovimento");
			hist = hist.replaceAll("Dia Movimento","dataMovimento.substring(0,2)");
			hist = hist.replaceAll("Mes-Ano Anterior","mesAnoAnterior");
			hist = hist.replaceAll("2 Meses-Ano Anterior","mesAno2Anterior");
			hist = hist.replaceAll("Mes-Ano Atual","mesAnoAtual");
			hist = hist.replaceAll("Contra Partida - Portador","contaPortador");
			hist = hist.replaceAll("Conta Partida - nomePortador","contaPortador");			
			hist = hist.replaceAll("Centro de Custo","codCentroCusto");
			hist = hist.replaceAll("Parcela Atual-Final","parcelaAtualeFinal");
			hist = hist.replaceAll("Parcela Atual", "parcelaAtual");
			hist = hist.replaceAll("Descricao Plano Conta Movimento","descricaoPlanoMovimento");
			hist = hist.replaceAll("Portador","nomePortador");
			hist = hist.replaceAll("Descricao Plano Conta nomePortador","descricaoPlanoPortador");
			hist = hist.replaceAll("Conta Movimento","contaMovimento");
			hist = hist.replaceAll("contanomePortador","contaPortador");
			hist = hist.replaceAll("  "," ").trim();
			
			if (!codigoHistorico.equals("")) hist = hist + " " + " CodigoHistorico:" + codigoHistorico;
			
			hist = hist + aspas + ";";

			sb.append(historico).append(hist).append(rn);
			
			if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
				sb.append("        return historico.replaceAll(\"  \",\" \").trim();\r\n");
			}
			sb.append("    ").append(rn);
			
		}
	}
	
	
	sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
	  .append("}").append(rn);	
 
}

private void makeRegrasParaAcumular(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Historico__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";
    
    sb.append("public String getRegrasParaAcumular(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
    .append("    String lote = \"\";\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String tipoPlanilha     = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	.append("    if(!chave.equals(\"\")) lote = chave;\r\n").append(rn).append(rn);
	String [] listaContas = null;
	String lote = "";
	String lista = "";
	String codigoHistorico = "";
	  
    if (qr_Historico__c.getSize() > 0) {
		for (SObject reg : qr_Historico__c.getRecords()) {
			
            String sRecordTypeId = "";
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            if (!sRecordTypeId.startsWith("01215000001Ngh1")) continue;
            
			listaContas = null;
			lote = "";
			lista = "";
			
			// CASO LE SOMENTE TIPO DE ACUMULAR LANCAMENTOS
		    String tipoHistorico = "";
			Object campoOb = reg.getField("Tipo_Historico__c");
			if (campoOb != null) tipoHistorico = campoOb.toString();
			if (!tipoHistorico.toUpperCase().contains("ACUMULAR LA")) continue;
			if (tipoHistorico.toUpperCase().contains("PORTADOR")) continue;
			
			campoOb = reg.getField("Quando_Conta_Igual__c");
			if (campoOb != null) lista = campoOb.toString();
			listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");
		   
  		  	for(int i = 0; i < listaContas.length; i++){
				if (i==0){
					if(listaContas[i].trim().equals("")){
						lote = "lote = ";
					}else{
						lote = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}else{
					lote = lote + " || conta.equals(\"" + listaContas[i].trim() + "\")";
				}
			}
			
            String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
			if (stmt04 == null) stmt04 = "";
			if (stmt05 == null) stmt05 = "";
			if (stmt06 == null) stmt06 = "";
			if (stmt07 == null) stmt07 = "";
			if (stmt08 == null) stmt08 = "";
			
            if (!stmt04.isEmpty()) {
				lote = "if (" + stmt04;
			}
			if (!stmt05.isEmpty()) {lote = lote + " && " + stmt05;                }
			if (!stmt06.isEmpty()) {lote = lote + " && " + stmt06;}
			if (!stmt07.isEmpty()) {lote = lote + " && " + stmt07;}
			if (!stmt08.isEmpty()) {lote = lote + " && " + stmt08;}


			if(lote.startsWith("if")){
				lote = lote + ") lote = loteParam + ";
			}
			
			String aspas = "\"";

			String textoInicial = "";
			String texto02 = "";
			String texto03 = "";
			String texto04 = "";
			String texto05 = "";
			codigoHistorico = "";

			
			campoOb = reg.getField("Texto_01__c");
			if (campoOb != null) textoInicial = campoOb.toString();
			textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Texto_02__c");
			if (campoOb != null) texto02 = campoOb.toString();
			texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_03__c");
			if (campoOb != null) texto03 = campoOb.toString();
			texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_04__c");
			if (campoOb != null) texto04 = campoOb.toString();
			texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_05__c");
			if (campoOb != null) texto05 = campoOb.toString();
			texto05 = StringUtil.removeSpecialChars(texto05).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Codigo_Historico__c");
			if (campoOb != null) codigoHistorico = campoOb.toString();
			codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
   	
		
			String campo01 = "";
			String campo02 = "";
			String campo03 = "";
			String campo04 = "";
			String campo05 = "";
			
			campoOb = reg.getField("Campo_01__c");
			if (campoOb != null) campo01 = campoOb.toString();
			campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_02__c");
			if (campoOb != null) campo02 = campoOb.toString();
			campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_03__c");
			if (campoOb != null) campo03 = campoOb.toString();
			campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_04__c");
			if (campoOb != null) campo04 = campoOb.toString();
			campo04 = StringUtil.removeSpecialChars(campo04).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_05__c");
			if (campoOb != null) campo05 = campoOb.toString();
			campo05 = StringUtil.removeSpecialChars(campo05).replaceAll("\"","").trim();
			
			if(campo01.equals(null))campo01 = "";
			if(campo02.equals(null))campo02 = "";
			if(campo03.equals(null))campo03 = "";
			if(campo04.equals(null))campo03 = "";
			if(campo05.equals(null))campo03 = "";
						
			String hist = aspas + textoInicial + aspas + "+" + campo01;
			if (!campo02.equals("")) hist = hist + "+" + aspas + "-" + aspas + "+" + campo02;
			if (!campo03.equals("")) hist = hist + "+" + aspas + "-" + aspas + "+" + campo03;
			if (!campo04.equals("")) hist = hist + "+" + aspas + "-" + aspas + "+" + campo04;
			if (!campo05.equals("")) hist = hist + "+" + aspas + "-" + aspas + "+" + campo05;

			
			hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
			hist = hist.replaceAll("Documento/NF","documento");
			hist = hist.replaceAll("Portador","nomePortador");
			hist = hist.replaceAll("Complemento \\(01\\)","complemento01");
			hist = hist.replaceAll("Complemento \\(02\\)","complemento02");
			hist = hist.replaceAll("Complemento \\(03\\)","complemento03");
			hist = hist.replaceAll("Complemento \\(04\\)","complemento04");
			hist = hist.replaceAll("Complemento \\(05\\)","complemento05");
			hist = hist.replaceAll("Complemento \\(06\\)","complemento06");
			hist = hist.replaceAll("Complemento \\(07\\)","complemento07");
			hist = hist.replaceAll("Complemento \\(08\\)","complemento08");
			hist = hist.replaceAll("Complemento \\(09\\)","complemento09");
			hist = hist.replaceAll("Complemento \\(10\\)","complemento10");

			hist = hist.replaceAll("Numero da Aba Planilha","numeroAba");
			hist = hist.replaceAll("valorDocumento","valorDocumento");
			hist = hist.replaceAll("valorJuros","valorJuros");
			hist = hist.replaceAll("valorDesconto","valorDesconto");
			
			hist = hist.replaceAll("Trimestre Mes-Ano Atual","trimestreMesAnoAtual");
			hist = hist.replaceAll("Trimestre Mes-Ano Anterior","trimestreMesAnoAnterior");
			hist = hist.replaceAll("Data Movimento","dataMovimento");
			hist = hist.replaceAll("Dia Movimento","dataMovimento.substring(0,2)");
			hist = hist.replaceAll("Mes-Ano Anterior","mesAnoAnterior");
			hist = hist.replaceAll("2 Meses-Ano Anterior","mesAno2Anterior");
			hist = hist.replaceAll("Mes-Ano Atual","mesAnoAtual");
			hist = hist.replaceAll("Conta Movimento","contaMovimento");
			hist = hist.replaceAll("Conta Juros","contaJuros");
			hist = hist.replaceAll("Conta Desconto","contaDesconto");
			hist = hist.replaceAll("Conta Multa","contaMulta");
			hist = hist.replaceAll("Contra Partida - Portador","contaPortador");
			hist = hist.replaceAll("Contra Partida - nomePortador","contaPortador");
			hist = hist.replaceAll("Conta Partida - nomePortador","contaPortador");			
			hist = hist.replaceAll("Conta Movimento","contaMovimento");
			hist = hist.replaceAll("Centro de Custo","codCentroCusto");
			hist = hist.replaceAll("contanomePortador","contaPortador");
			
			
			hist = hist.replaceAll(" ","-").trim();
			
			hist = hist + ";";
 						
			sb.append(lote).append(hist).append(rn);
			
			if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
				sb.append("        return lote.trim();\r\n");
			}
			sb.append("    ").append(rn);
			
		}
	}

	sb.append(rn).append("    return lote.trim();\r\n")
	  .append("}").append(rn);	
 
}
private void makeRegrasParaAcumularPortador(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Historico__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";
    
    sb.append("public String getRegrasParaAcumularPortador(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
    .append("    String lote = \"\";\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String tipoPlanilha     = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	.append("    if(!chave.equals(\"\")) lote = chave;\r\n").append(rn).append(rn);
	String [] listaContas = null;
	String lote = "";
	String lista = "";
	String codigoHistorico = "";
	  
    if (qr_Historico__c.getSize() > 0) {
		for (SObject reg : qr_Historico__c.getRecords()) {
			
            String sRecordTypeId = "";
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
             
			listaContas = null;
			lote = "";
			lista = "";
			
			// CASO LE SOMENTE TIPO DE ACUMULAR LANCAMENTOS
		    String tipoHistorico = "";
			Object campoOb = reg.getField("Tipo_Historico__c");
			if (campoOb != null) tipoHistorico = campoOb.toString();
			if (tipoHistorico.toUpperCase().contains("ACUMULAR LA")) continue;
			if (!tipoHistorico.toUpperCase().contains("ACUMULAR PORTADOR")) continue;
			
			campoOb = reg.getField("Quando_Conta_Igual__c");
			if (campoOb != null) lista = campoOb.toString();
			listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");
		   
  		  	for(int i = 0; i < listaContas.length; i++){
				if (i==0){
					if(listaContas[i].trim().equals("")){
						lote = "lote = ";
					}else{
						lote = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}else{
					lote = lote + " || conta.equals(\"" + listaContas[i].trim() + "\")";
				}
			}
			
            String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
			if (stmt04 == null) stmt04 = "";
			if (stmt05 == null) stmt05 = "";
			if (stmt06 == null) stmt06 = "";
			if (stmt07 == null) stmt07 = "";
			if (stmt08 == null) stmt08 = "";
			
            if (!stmt04.isEmpty()) {
				lote = "if (" + stmt04;
			}
			if (!stmt05.isEmpty()) {lote = lote + " && " + stmt05;                }
			if (!stmt06.isEmpty()) {lote = lote + " && " + stmt06;}
			if (!stmt07.isEmpty()) {lote = lote + " && " + stmt07;}
			if (!stmt08.isEmpty()) {lote = lote + " && " + stmt08;}


			if(lote.startsWith("if")){
				lote = lote + ") lote = loteParam + ";
			}
			
			String aspas = "\"";

			String textoInicial = "";
			String texto02 = "";
			String texto03 = "";
			String texto04 = "";
			String texto05 = "";
			codigoHistorico = "";

			
			campoOb = reg.getField("Texto_01__c");
			if (campoOb != null) textoInicial = campoOb.toString();
			textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Texto_02__c");
			if (campoOb != null) texto02 = campoOb.toString();
			texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_03__c");
			if (campoOb != null) texto03 = campoOb.toString();
			texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_04__c");
			if (campoOb != null) texto04 = campoOb.toString();
			texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();

			campoOb = reg.getField("Texto_05__c");
			if (campoOb != null) texto05 = campoOb.toString();
			texto05 = StringUtil.removeSpecialChars(texto05).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Codigo_Historico__c");
			if (campoOb != null) codigoHistorico = campoOb.toString();
			codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
   	
		
			String campo01 = "";
			String campo02 = "";
			String campo03 = "";
			String campo04 = "";
			String campo05 = "";
			
			campoOb = reg.getField("Campo_01__c");
			if (campoOb != null) campo01 = campoOb.toString();
			campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_02__c");
			if (campoOb != null) campo02 = campoOb.toString();
			campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
			
			campoOb = reg.getField("Campo_03__c");
			if (campoOb != null) campo03 = campoOb.toString();
			campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_04__c");
			if (campoOb != null) campo04 = campoOb.toString();
			campo04 = StringUtil.removeSpecialChars(campo04).replaceAll("\"","").trim();

			campoOb = reg.getField("Campo_05__c");
			if (campoOb != null) campo05 = campoOb.toString();
			campo05 = StringUtil.removeSpecialChars(campo05).replaceAll("\"","").trim();
			
			if(campo01.equals(null))campo01 = "";
			if(campo02.equals(null))campo02 = "";
			if(campo03.equals(null))campo03 = "";
			if(campo04.equals(null))campo03 = "";
			if(campo05.equals(null))campo03 = "";
						
			String hist = aspas + textoInicial + aspas + "+" + campo01;
			if (!campo02.equals("")) hist = hist + "+" + aspas + "-" + aspas + "+" + campo02;
			if (!campo03.equals("")) hist = hist + "+" + aspas + "-" + aspas + "+" + campo03;
			if (!campo04.equals("")) hist = hist + "+" + aspas + "-" + aspas + "+" + campo04;
			if (!campo05.equals("")) hist = hist + "+" + aspas + "-" + aspas + "+" + campo05;

			
			hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
			hist = hist.replaceAll("Documento/NF","documento");
			hist = hist.replaceAll("Portador","nomePortador");
			hist = hist.replaceAll("Complemento \\(01\\)","complemento01");
			hist = hist.replaceAll("Complemento \\(02\\)","complemento02");
			hist = hist.replaceAll("Complemento \\(03\\)","complemento03");
			hist = hist.replaceAll("Complemento \\(04\\)","complemento04");
			hist = hist.replaceAll("Complemento \\(05\\)","complemento05");
			hist = hist.replaceAll("Complemento \\(06\\)","complemento06");
			hist = hist.replaceAll("Complemento \\(07\\)","complemento07");
			hist = hist.replaceAll("Complemento \\(08\\)","complemento08");
			hist = hist.replaceAll("Complemento \\(09\\)","complemento09");
			hist = hist.replaceAll("Complemento \\(10\\)","complemento10");

			hist = hist.replaceAll("Numero da Aba Planilha","numeroAba");
			hist = hist.replaceAll("valorDocumento","valorDocumento");
			hist = hist.replaceAll("valorJuros","valorJuros");
			hist = hist.replaceAll("valorDesconto","valorDesconto");
			
			hist = hist.replaceAll("Trimestre Mes-Ano Atual","trimestreMesAnoAtual");
			hist = hist.replaceAll("Trimestre Mes-Ano Anterior","trimestreMesAnoAnterior");
			hist = hist.replaceAll("Data Movimento","dataMovimento");
			hist = hist.replaceAll("Dia Movimento","dataMovimento.substring(0,2)");
			hist = hist.replaceAll("Mes-Ano Anterior","mesAnoAnterior");
			hist = hist.replaceAll("2 Meses-Ano Anterior","mesAno2Anterior");
			hist = hist.replaceAll("Mes-Ano Atual","mesAnoAtual");
			hist = hist.replaceAll("Conta Movimento","contaMovimento");
			hist = hist.replaceAll("Conta Juros","contaJuros");
			hist = hist.replaceAll("Conta Desconto","contaDesconto");
			hist = hist.replaceAll("Conta Multa","contaMulta");
			hist = hist.replaceAll("Contra Partida - Portador","contaPortador");
			hist = hist.replaceAll("Contra Partida - nomePortador","contaPortador");
			hist = hist.replaceAll("Conta Partida - nomePortador","contaPortador");			
			hist = hist.replaceAll("Conta Movimento","contaMovimento");
			hist = hist.replaceAll("Centro de Custo","codCentroCusto");
			hist = hist.replaceAll("contanomePortador","contaPortador");
			
			
			hist = hist.replaceAll(" ","-").trim();
			
			hist = hist + ";";
 						
			sb.append(lote).append(hist).append(rn);
			
			if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
				sb.append("        return lote.trim();\r\n");
			}
			sb.append("    ").append(rn);
			
		}
	}

	sb.append(rn).append("    return lote.trim();\r\n")
	  .append("}").append(rn);	
 
}

private void makeCodigoParticipante(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Contas__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";
    
    sb.append("public String getParticipante(String participante, String nomeOrigem, String documento, String nomePortador,").append(rn)
      .append("                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, ").append(rn)
      .append("                             String nomeArquivo) {").append(rn)
      .append("          String retornaParticipantePai = participante;\r\n");
	sb.append("    complemento04 = ").append("\"").append("\"").append(";\r\n") ;
	sb.append("    complemento05 = ").append("\"").append("\"").append(";\r\n") ;
	sb.append("    String complemento06 = ").append("\"").append("\"").append(";\r\n") ;
	sb.append("    if (complemento03.contains(").append("\"").append("C6#").append("\"").append(")) { complemento06 = complemento03.substring(complemento03.indexOf(").append("\"").append("C6#").append("\"").append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append("\"").append("C6#").append("\"").append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append("\"").append("C5#").append("\"").append(")) { complemento05 = complemento03.substring(complemento03.indexOf(").append("\"").append("C5#").append("\"").append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append("\"").append("C5#").append("\"").append(")).trim(); }").append(rn) ;
	sb.append("    if (complemento03.contains(").append("\"").append("C4#").append("\"").append(")) { complemento04 = complemento03.substring(complemento03.indexOf(").append("\"").append("C4#").append("\"").append(")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf(").append("\"").append("C4#").append("\"").append(")).trim(); }").append(rn) ;
    
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
		
            String sConta_Pai_quando_Participante__c = "";
            Object oConta_Pai_quando_Participante__c = reg.getField("Conta_Pai_quando_Participante__c");
            if (oConta_Pai_quando_Participante__c != null) sConta_Pai_quando_Participante__c = oConta_Pai_quando_Participante__c.toString();
            if (sConta_Pai_quando_Participante__c.equals("")) continue;
        
            String stmt1 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt2 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt3 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt4 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt5 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
            if (!stmt1.isEmpty()) {
                sb.append("    if (").append(stmt1);
                if (!stmt2.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt2);
                }
                if (!stmt3.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt3);
                }
                if (!stmt4.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt4);
                }
                if (!stmt5.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt5);
                }
                sb.append(") {").append(rn)
                  .append("        retornaParticipantePai = \"")
                  .append(reg.getField("Conta_Pai_quando_Participante__c").toString())
                  .append("\";\r\n")
                  .append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return retornaParticipantePai;\r\n")
            .append("}").append(rn);
}

private void makeReplaceTermos(String idRoteiro,
                                   String idRoteiroGrupo,
                                   String idRoteiroCartoes, 
                                   QueryResult qr_Historico__c,
                                   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";
    
    sb.append("public String  getReplaceTermos(String parametro, String parametro2, JSONObject objHistorico) {").append(rn)
    .append("    String lote = \"\";\r\n")
	.append("    String nomeOrigem      = objHistorico.optString(\"nomeOrigem\");\r\n")
	.append("    String documento       = objHistorico.optString(\"documento\");\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n");
	
	String hist = "";
	  
    if (qr_Historico__c.getSize() > 0) {
		for (SObject reg : qr_Historico__c.getRecords()) {
			
            String sRecordTypeId = "";
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            if (!sRecordTypeId.startsWith("01215000001Nh1M")) continue;

            
            String stmt04 = reg.getField("Se_campo__c").toString();
			if (stmt04 == null) stmt04 = "";
            String stmt05 = reg.getField("Termo_Origem__c").toString();
			if (stmt05 == null) stmt05 = "";
            
			Object campoOb = reg.getField("Termo_Destino__c");
			String stmt06 = "";
			if (campoOb != null) stmt06 = campoOb.toString();
			
			stmt04 = StringUtil.removeSpecialChars(stmt04);
			stmt05 = StringUtil.removeSpecialChars(stmt05).toUpperCase();
			stmt06 = StringUtil.removeSpecialChars(stmt06).toUpperCase();
			
            if (!stmt04.isEmpty()) {
				stmt04 = stmt04.replaceAll("Fornecedor/Cliente contem","nomeOrigem");
				stmt04 = stmt04.replaceAll("Documento/NF contem","documento");
				stmt04 = stmt04.replaceAll("Portador contem","nomePortador");
				stmt04 = stmt04.replaceAll("Complemento \\(01\\) contem","complemento01");
				stmt04 = stmt04.replaceAll("Complemento \\(02\\) contem","complemento02");
				stmt04 = stmt04.replaceAll("Complemento \\(03\\) contem","complemento03");
				stmt04 = stmt04.replaceAll("Complemento \\(04\\) contem","complemento04");
				stmt04 = stmt04.replaceAll("Complemento \\(05\\) contem","complemento05");
				stmt04 = stmt04.replaceAll("Complemento \\(06\\) contem","complemento06");
				stmt04 = stmt04.replaceAll("Complemento \\(07\\) contem","complemento07");
				stmt04 = stmt04.replaceAll("Complemento \\(08\\) contem","complemento08");
				stmt04 = stmt04.replaceAll("Complemento \\(09\\) contem","complemento09");
				stmt04 = stmt04.replaceAll("Complemento \\(10\\) contem","complemento10");
				stmt04 = stmt04.replaceAll("Centro de Custo contem","codCentroCusto");
				
				hist = "    if (parametro.equals(\"" + stmt04 + "\")) parametro2 = parametro2.replace(\"" + stmt05 + "\",\"" + stmt06 + "\");";
			}	

			sb.append(hist).append(rn);
			
		}
	}

	sb.append(rn).append("    return parametro2.trim();\r\n")
	  .append("}").append(rn);	
 
}

private void makeReplaceTermosAvancado(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Historico__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";

    sb.append("public String  getReplaceTermosAvancado(String parametro, String parametro2, JSONObject objHistorico) {").append(rn)
      .append("    String lote = parametro2;\r\n")
	.append("    String nomeOrigem      = objHistorico.optString(\"nomeOrigem\");\r\n")
	.append("    String documento       = objHistorico.optString(\"documento\");\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double numeroAba  		= objHistorico.optDouble(\"numeroAba\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n");
	
	String hist = "";
    
    if (qr_Historico__c.getSize() > 0) {
		for (SObject reg : qr_Historico__c.getRecords()) {
			
            String sRecordTypeId = "";
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();


			if (!sRecordTypeId.startsWith("0121C000001pMJ1")) continue;
			
			Object campoOb = reg.getField("Campo_a_ser_Limpo__c");
			String stmt04 = "";
			if (campoOb != null) stmt04 = campoOb.toString();

			campoOb = reg.getField("Termo_Origem__c");
			String stmt05 = "";
			if (campoOb != null) stmt05 = campoOb.toString();

			campoOb = reg.getField("Termo_Destino__c");
			String stmt06 = "";
			if (campoOb != null) stmt06 = campoOb.toString();


			stmt04 = StringUtil.removeSpecialChars(stmt04);
			stmt05 = StringUtil.removeSpecialChars(stmt05).toUpperCase().trim();
			stmt06 = StringUtil.removeSpecialChars(stmt06).toUpperCase().trim();

			stmt04 = stmt04.replaceAll("_","");
			stmt05 = stmt05.replaceAll("_","");
			stmt06 = stmt06.replaceAll("_"," ");
            if (!stmt04.isEmpty()) {
			
				// BUSCA A REGRA PARA SUBSTITUIR TERMO QUANDO TIVER REGRA (POIS E OPCIONAL) 
				String stmt14 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("Texto_01__c"));
				String stmt15 = preparaComparacao(reg.getField("E_02__c"), reg.getField("Texto_02__c"));
				String stmt16 = preparaComparacao(reg.getField("E_03__c"), reg.getField("Texto_03__c"));
				String stmt17 = preparaComparacao(reg.getField("E_04__c"), reg.getField("Texto_04__c"));
				String stmt18 = preparaComparacao(reg.getField("E_05__c"), reg.getField("Texto_05__c"));
				if (stmt14 == null) stmt14 = "";
				if (stmt15 == null) stmt15 = "";
				if (stmt16 == null) stmt16 = "";
				if (stmt17 == null) stmt17 = "";
				if (stmt18 == null) stmt18 = "";
				String regraParaCampo = "";
				
				if (!stmt14.isEmpty()) {
					regraParaCampo = stmt14;
					if (!stmt15.equals("")) {regraParaCampo = regraParaCampo + " && " + stmt15;}
					if (!stmt16.equals("")) {regraParaCampo = regraParaCampo + " && " + stmt16;}
					if (!stmt17.equals("")) {regraParaCampo = regraParaCampo + " && " + stmt17;}
					if (!stmt18.equals("")) {regraParaCampo = regraParaCampo + " && " + stmt18;}
					regraParaCampo = regraParaCampo + " && ";
				}	
				
				// logger.logInfo("RPC " + regraParaCampo + " | " + stmt15 + " | " + stmt16 + " | " + stmt17 + " | " + stmt18);
				
				// -------------------------------------------------------------------------------------------
							
				stmt04 = stmt04.replaceAll("Fornecedor/Cliente","nomeOrigem");
				stmt04 = stmt04.replaceAll("Documento/NF","documento");
				stmt04 = stmt04.replaceAll("Portador","nomePortador");
				stmt04 = stmt04.replaceAll("Complemento \\(01\\)","complemento01");
				stmt04 = stmt04.replaceAll("Complemento \\(02\\)","complemento02");
				stmt04 = stmt04.replaceAll("Complemento \\(03\\)","complemento03");
				stmt04 = stmt04.replaceAll("Complemento \\(04\\)","complemento04");
				stmt04 = stmt04.replaceAll("Complemento \\(05\\)","complemento05");
				stmt04 = stmt04.replaceAll("Complemento \\(06\\)","complemento06");
				stmt04 = stmt04.replaceAll("Complemento \\(07\\)","complemento07");
				stmt04 = stmt04.replaceAll("Complemento \\(08\\)","complemento08");
				stmt04 = stmt04.replaceAll("Complemento \\(09\\)","complemento09");
				stmt04 = stmt04.replaceAll("Complemento \\(10\\)","complemento10");
				stmt04 = stmt04.replaceAll("Centro de Custo","codCentroCusto");
			
				hist = "    if (" + regraParaCampo + "parametro.equals(\"" + stmt04 + "\")) lote = lote.replace(\"" + stmt05 + "\",\"" + stmt06 + "\");";
				sb.append(hist).append(rn);
			}
		}
	}

	sb.append(rn).append("    return lote.trim();\r\n")
	  .append("}").append(rn);	
}

private void makeLimpaCampos(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Historico__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";

    sb.append("public String  getLimpaCampos(String parametro, String parametro2, JSONObject objHistorico) {").append(rn)
      .append("    String lote = parametro2;\r\n")
	.append("    String nomeOrigem      = objHistorico.optString(\"nomeOrigem\");\r\n")
	.append("    String documento       = objHistorico.optString(\"documento\");\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n");
	
	String hist = "";
    
    if (qr_Historico__c.getSize() > 0) {
		for (SObject reg : qr_Historico__c.getRecords()) {
			
            String sRecordTypeId = "";
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();

			
            if (!sRecordTypeId.startsWith("01215000001NhRe")) continue;
									   
            
			Object campoOb = reg.getField("Cortar_a_Partir_do_indice__c");
			String stmt04 = "";
			if (campoOb != null) stmt04 = campoOb.toString();

			campoOb = reg.getField("Se_campo__c");
			String stmt02 = "";
			if (campoOb != null) stmt02 = campoOb.toString();

			campoOb = reg.getField("Cortar_a_Partir_do_Texto__c");
			String stmt03 = "";
			if (campoOb != null) stmt03 = campoOb.toString();


			campoOb = reg.getField("Cortar_Ate_Indice__c");
			String stmt05 = "";
			if (campoOb != null) stmt05 = campoOb.toString();

			campoOb = reg.getField("Cortar_Ate_Texto__c");
			String stmt06 = "";
			if (campoOb != null) stmt06 = campoOb.toString();

			
			
			stmt02 = StringUtil.removeSpecialChars(stmt02);
			stmt03 = StringUtil.removeSpecialChars(stmt03).toUpperCase().trim();
			stmt04 = StringUtil.removeSpecialChars(stmt04).toUpperCase().trim();
			stmt05 = StringUtil.removeSpecialChars(stmt05).toUpperCase().trim();
			stmt06 = StringUtil.removeSpecialChars(stmt06).toUpperCase().trim();

			stmt03 = stmt03.replaceAll("_"," ");
			stmt04 = stmt04.replaceAll("_","");
			stmt05 = stmt05.replaceAll("_","");
			stmt06 = stmt06.replaceAll("_"," ");
			
            if (!stmt02.isEmpty()) {
				stmt02 = stmt02.replaceAll("Fornecedor/Cliente contem","nomeOrigem");
				stmt02 = stmt02.replaceAll("Documento/NF contem","documento");
				stmt02 = stmt02.replaceAll("Portador contem","nomePortador");
				stmt02 = stmt02.replaceAll("Complemento \\(01\\) contem","complemento01");
				stmt02 = stmt02.replaceAll("Complemento \\(02\\) contem","complemento02");
				stmt02 = stmt02.replaceAll("Complemento \\(03\\) contem","complemento03");
				stmt02 = stmt02.replaceAll("Complemento \\(04\\) contem","complemento04");
				stmt02 = stmt02.replaceAll("Complemento \\(05\\) contem","complemento05");
				stmt02 = stmt02.replaceAll("Complemento \\(06\\) contem","complemento06");
				stmt02 = stmt02.replaceAll("Complemento \\(07\\) contem","complemento07");
				stmt02 = stmt02.replaceAll("Complemento \\(08\\) contem","complemento08");
				stmt02 = stmt02.replaceAll("Complemento \\(09\\) contem","complemento09");
				stmt02 = stmt02.replaceAll("Complemento \\(10\\) contem","complemento10");
				stmt02 = stmt02.replaceAll("Centro de Custo contem","codCentroCusto");
			
				if (stmt03.equals("") && stmt04.equals("")) stmt04 = "1";
				
				if (stmt04.equals("")) stmt04 = "0";
				if (stmt05.equals("")) stmt05 = "0";
				if (stmt04.contains(".")) stmt04 = stmt04.substring(0, stmt04.indexOf("."));
				if (stmt05.contains(".")) stmt05 = stmt05.substring(0, stmt05.indexOf("."));
				
				int indiceInicial = Integer.parseInt(stmt04);
				indiceInicial = indiceInicial -1;
				
				int indiceFinal = Integer.parseInt(stmt05);
				indiceFinal = indiceFinal -1;
				
				
				if (!stmt03.equals("") &&  stmt06.equals("") && indiceFinal <  0 && indiceInicial <  0) {
					hist = "    if (parametro.equals(\"" + stmt02 + "\")) lote = cutString(lote,\"" + stmt03 + "\");";
					sb.append(hist).append(rn);
				}
				if (!stmt03.equals("") && !stmt06.equals(""))                                           {
					hist = "    if (parametro.equals(\"" + stmt02 + "\")) lote = cutString(lote,\"" + stmt03 + "\",\"" + stmt06 + "\");";
					sb.append(hist).append(rn);
				}
				if (!stmt03.equals("") &&  stmt06.equals("") && indiceFinal >= 0 ) {
					hist = "    if (parametro.equals(\"" + stmt02 + "\")) lote = cutString(lote,\"" + stmt03 + "\"," + indiceFinal + ");";
					sb.append(hist).append(rn);
				}
				if (stmt03.equals("") && indiceInicial >= 0 && !stmt06.equals("")) {
					hist = "    if (parametro.equals(\"" + stmt02 + "\")) lote = cutString(lote," + indiceInicial + ",\"" + stmt06 + "\");";
					sb.append(hist).append(rn);
				}
				if (stmt03.equals("") && indiceInicial >= 0 &&  stmt06.equals("") && indiceFinal >= 0 ) {
					hist = "    if (parametro.equals(\"" + stmt02 + "\")) lote = cutString(lote," + indiceInicial + "," + indiceFinal + ");";
					sb.append(hist).append(rn);
				}
				
				if (stmt03.equals("") && indiceInicial >= 0 &&  stmt06.equals("") && indiceFinal < 0 ) {
					hist = "    if (parametro.equals(\"" + stmt02 + "\")) lote = cutString(lote," + indiceInicial + ");";
					sb.append(hist).append(rn);
				}
			}
		}
	}

	sb.append(rn).append("    return lote.trim();\r\n")
	  .append("}").append(rn);	
}



private void makeLimpaCamposAvancado(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Historico__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";

    sb.append("public String  getLimpaCamposAvancado(String parametro, String parametro2, JSONObject objHistorico) {").append(rn)
      .append("    String lote = parametro2;\r\n")
	.append("    String nomeOrigem      = objHistorico.optString(\"nomeOrigem\");\r\n")
	.append("    String documento       = objHistorico.optString(\"documento\");\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaDebito     = objHistorico.optString(\"contaDebito\");\r\n")
	.append("    String contaCredito    = objHistorico.optString(\"contaCredito\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n");
	
	String hist = "";
    
    if (qr_Historico__c.getSize() > 0) {
		for (SObject reg : qr_Historico__c.getRecords()) {
			
            String sRecordTypeId = "";
            Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();

		
            if (!sRecordTypeId.startsWith("0121C000001cx3I")) continue;
									   
            
			Object campoOb = reg.getField("Cortar_a_Partir_do_indice__c");
			String stmt04 = "";
			if (campoOb != null) stmt04 = campoOb.toString();

			campoOb = reg.getField("Campo_a_ser_Limpo__c");
			String stmt02 = "";
			if (campoOb != null) stmt02 = campoOb.toString();

			campoOb = reg.getField("Cortar_a_Partir_do_Texto__c");
			String stmt03 = "";
			if (campoOb != null) stmt03 = campoOb.toString();


			campoOb = reg.getField("Cortar_Ate_Indice__c");
			String stmt05 = "";
			if (campoOb != null) stmt05 = campoOb.toString();

			campoOb = reg.getField("Cortar_Ate_Texto__c");
			String stmt06 = "";
			if (campoOb != null) stmt06 = campoOb.toString();

			String codRoteiro = "";
			campoOb = reg.getField("Codigo_Roteiro__c");
			if (campoOb != null) codRoteiro = campoOb.toString();
			
			stmt02 = StringUtil.removeSpecialChars(stmt02);
			stmt03 = StringUtil.removeSpecialChars(stmt03).toUpperCase().trim();
			stmt04 = StringUtil.removeSpecialChars(stmt04).toUpperCase().trim();
			stmt05 = StringUtil.removeSpecialChars(stmt05).toUpperCase().trim();
			stmt06 = StringUtil.removeSpecialChars(stmt06).toUpperCase().trim();

			stmt03 = stmt03.replaceAll("_"," ");
			stmt04 = stmt04.replaceAll("_","");
			stmt05 = stmt05.replaceAll("_","");
			stmt06 = stmt06.replaceAll("_"," ");
			
            if (!stmt02.isEmpty()) {
			
				// BUSCA A REGRA PARA LIMPAR CAMPO QUANDO TIVER REGRA (POIS E OPCIONAL) 
				String stmt14 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
				String stmt15 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
				String stmt16 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
				String stmt17 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
				String stmt18 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
				if (stmt14 == null) stmt14 = "";
				if (stmt15 == null) stmt15 = "";
				if (stmt16 == null) stmt16 = "";
				if (stmt17 == null) stmt17 = "";
				if (stmt18 == null) stmt18 = "";
				String regraParaCampo = "";
				
				if (!stmt14.isEmpty()) {
					regraParaCampo = stmt14;
					if (!stmt15.equals("")) {regraParaCampo = regraParaCampo + " && " + stmt15;}
					if (!stmt16.equals("")) {regraParaCampo = regraParaCampo + " && " + stmt16;}
					if (!stmt17.equals("")) {regraParaCampo = regraParaCampo + " && " + stmt17;}
					if (!stmt18.equals("")) {regraParaCampo = regraParaCampo + " && " + stmt18;}
					regraParaCampo = regraParaCampo + " && ";
				}	
				// -------------------------------------------------------------------------------------------
							
							
				stmt02 = stmt02.replaceAll("Fornecedor/Cliente","nomeOrigem");
				stmt02 = stmt02.replaceAll("Documento/NF","documento");
				stmt02 = stmt02.replaceAll("Portador","nomePortador");
				stmt02 = stmt02.replaceAll("Complemento \\(01\\)","complemento01");
				stmt02 = stmt02.replaceAll("Complemento \\(02\\)","complemento02");
				stmt02 = stmt02.replaceAll("Complemento \\(03\\)","complemento03");
				stmt02 = stmt02.replaceAll("Complemento \\(04\\)","complemento04");
				stmt02 = stmt02.replaceAll("Complemento \\(05\\)","complemento05");
				stmt02 = stmt02.replaceAll("Complemento \\(06\\)","complemento06");
				stmt02 = stmt02.replaceAll("Complemento \\(07\\)","complemento07");
				stmt02 = stmt02.replaceAll("Complemento \\(08\\)","complemento08");
				stmt02 = stmt02.replaceAll("Complemento \\(09\\)","complemento09");
				stmt02 = stmt02.replaceAll("Complemento \\(10\\)","complemento10");
				stmt02 = stmt02.replaceAll("Centro de Custo","codCentroCusto");
			
				if (stmt03.equals("") && stmt04.equals("")) stmt04 = "1";
				
				if (stmt04.equals("")) stmt04 = "0";
				if (stmt05.equals("")) stmt05 = "0";
				if (stmt04.contains(".")) stmt04 = stmt04.substring(0, stmt04.indexOf("."));
				if (stmt05.contains(".")) stmt05 = stmt05.substring(0, stmt05.indexOf("."));
				
				int indiceInicial = Integer.parseInt(stmt04);
				indiceInicial = indiceInicial -1;
				
				int indiceFinal = Integer.parseInt(stmt05);
				indiceFinal = indiceFinal -1;
				
				
				if (!stmt03.equals("") &&  stmt06.equals("") && indiceFinal <  0 && indiceInicial <  0) {
					hist = "    if (" + regraParaCampo + "parametro.equals(\"" + stmt02 + "\")) lote = cutString(lote,\"" + stmt03 + "\");";
					if (hist.contains("LIMPACAMPO"))  hist = "    if (" + regraParaCampo + "parametro.equals(\"" + stmt02 + "\")) lote = \"\";";

					sb.append(hist).append(" //").append(codRoteiro).append(rn);
				}
				if (!stmt03.equals("") && !stmt06.equals(""))                                           {
					hist = "    if (" + regraParaCampo + "parametro.equals(\"" + stmt02 + "\")) lote = cutString(lote,\"" + stmt03 + "\",\"" + stmt06 + "\");";
					sb.append(hist).append(" //").append(codRoteiro).append(rn);
				}
				if (!stmt03.equals("") &&  stmt06.equals("") && indiceFinal >= 0 ) {
					hist = "    if (" + regraParaCampo + "parametro.equals(\"" + stmt02 + "\")) lote = cutString(lote,\"" + stmt03 + "\"," + indiceFinal + ");";
					sb.append(hist).append(" //").append(codRoteiro).append(rn);
				}
				if (stmt03.equals("") && indiceInicial >= 0 && !stmt06.equals("")) {
					hist = "    if (" + regraParaCampo + "parametro.equals(\"" + stmt02 + "\")) lote = cutString(lote," + indiceInicial + ",\"" + stmt06 + "\");";
					sb.append(hist).append(" //").append(codRoteiro).append(rn);
				}
				if (stmt03.equals("") && indiceInicial >= 0 &&  stmt06.equals("") && indiceFinal >= 0 ) {
					hist = "    if (" + regraParaCampo + "parametro.equals(\"" + stmt02 + "\")) lote = cutString(lote," + indiceInicial + "," + indiceFinal + ");";
					sb.append(hist).append(" //").append(codRoteiro).append(rn);
				}
				
				if (stmt03.equals("") && indiceInicial >= 0 &&  stmt06.equals("") && indiceFinal < 0 ) {
					hist = "    if (" + regraParaCampo + "parametro.equals(\"" + stmt02 + "\")) lote = cutString(lote," + indiceInicial + ");";
					sb.append(hist).append(" //").append(codRoteiro).append(rn);
				}
			}
		}
	}

    
	sb.append(rn).append("    return lote.trim();\r\n")
	  .append("}").append(rn);	
}

private List<String> listRoutes(String INOUT_URL, String token) throws Exception {

    try {
        // URL para listagem de Rotas.
        java.net.URL url = new java.net.URL(String.format("%s/inout/rest/inoutservice/getRouteIdsList/%s", INOUT_URL, token));
        java.net.URLConnection conLogin = url.openConnection();

        String result = convertStreamToString(conLogin.getInputStream());

        JSONObject jsResult = new JSONObject(result);
        JSONObject jsRecord = jsResult.optJSONObject("record");
        JSONArray jsArrayRoutes = jsRecord.optJSONArray("routeIds");

        String[] arrRouteIds = new String[jsArrayRoutes.length()];
        for (int i = 0; i < jsArrayRoutes.length(); i++) {
            arrRouteIds[i] = jsArrayRoutes.optString(i);
        }
        
        return Arrays.asList(arrRouteIds);
        
    } catch (Exception ex) {
        
    }
    
    return null;
}

private boolean createRoute(String INOUT_URL, String routeId, String group, String routeName, String token) throws Exception {

    String result = "";

    try {
        // URL para clonagem de rotas.
        java.net.URL url = new java.net.URL(
            String.format("%s/inout/rest/inoutservice/makeNewRoute/copy/%s/%s/%s/A/800/B/800/%s", INOUT_URL, routeId, group, routeName, token)
        );
        java.net.URLConnection con = url.openConnection();

        result = convertStreamToString(con.getInputStream());
    } catch (Exception ex) {
        return false;
    }
    
    return true;
}

private boolean deleteRoute(String INOUT_URL, String routeId, String token) {
    String result = "";

    try {
        // 
        java.net.URL url = new java.net.URL(
            String.format("%s/inout/rest/inoutservice/deleteRoute/%s/%s", INOUT_URL, token, routeId)
        );
        java.net.URLConnection con = url.openConnection();

        result = convertStreamToString(con.getInputStream());
    } catch (Exception ex) {
        
        
        return false;
    }
    
    return true;
}

private boolean switchRoute(String INOUT_URL, String token, String routeId) {
    String result = "";

    try {
        // 
        java.net.URL url = new java.net.URL(
            String.format("%s/inout/rest/inoutservice/routeOnOff/%s/%s/change", INOUT_URL, token, routeId)
        );
        java.net.URLConnection con = url.openConnection();

        result = convertStreamToString(con.getInputStream());
    } catch (Exception ex) {
        
        
        return false;
    }
    
    return true;
}

private String getToken(String INOUT_URL) {
    String token = "";
    String user = "";

    try {
         java.net.URL urlLogin = new java.net.URL(
            String.format("%s/inout/rest/inoutservice/login/admcroteiro@ottimizza.com.br/adm@123", INOUT_URL)
        );
        java.net.URLConnection conLogin = urlLogin.openConnection();

        String result = convertStreamToString(conLogin.getInputStream());

        JSONObject jsResult = new JSONObject(result);
        JSONObject jsRecord = jsResult.optJSONObject("record");

        token = jsRecord.optString("token");
        user = jsRecord.optString("userName");

         java.net.URL urlInout = new java.net.URL(
            String.format("%s/inout/main.jsp?token=%s&userName=%s", INOUT_URL, token, user)
        );
        java.net.URLConnection conInout = urlInout.openConnection();
    } catch (Exception ex) {
        
    }
    return token;
}

private static String convertStreamToString(InputStream is) {
    if (is == null) {
        return "";
    }

    java.util.Scanner s = new java.util.Scanner(is);
    s.useDelimiter("\\A");

    String streamString = s.hasNext() ? s.next() : "";

    s.close();

    return streamString;
}

public void updateProperties(HashMap<String, String> propertiesMap, File propertiesFile) {

	FileReader reader = new FileReader(propertiesFile);
	StringBuilder sb = new StringBuilder();

	try {

		reader.openFile();

		while (reader.hasNextLine()) {

			String line = reader.nextLine();
			String key = "";
			String value = "";

			// comentarios
			if (line.trim().startsWith("#") || line.trim().startsWith("/")) {
				sb.append(line);
				continue;
			}

			// linhas em branco
			if (line.trim().length() == 0) {
				sb.append("\r\n");
				continue;
			}

			if (line.contains(" = ")) {
				key = line.substring(0, line.indexOf(" = ")).trim();
				value = line.substring(line.indexOf(" = ") + 3).trim();

				if (propertiesMap.get(key) != null) {
					value = (String) propertiesMap.get(key);
				}

				sb.append(key).append(" = ").append(value).append("\r\n");
			}
		}

		FileWriter writer = new FileWriter(propertiesFile.getAbsolutePath());
		writer.writeNewFile(sb.toString());

	} catch (Exception e) {
		// logger.logInfo(e.getMessage());
	} finally {
		reader.closeFile();
	}
}

private void makeCodigoTipoGrafico(String idRoteiro, 
                                   String idRoteiroGrupo, 
                                   String idRoteiroCartoes, 
                                   QueryResult qr_Contas__c,
                                   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";
	
    sb.append("public String getTipoGrafico(JSONObject objGrafico) {").append(rn)
	.append("    String complemento01   = objGrafico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objGrafico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objGrafico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objGrafico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objGrafico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objGrafico.optString(\"complemento06\");\r\n")
    .append("    String graph = \"\";\r\n").append(rn);

	sb.append("    //feito para manter o legado sem problemas, sera sobreposto por regras! ;-)").append(rn);
	sb.append("    //tipos esperados: Column, Multiple_Column_Stacked, Multiple_Columns, Line, Multiple_Lines, Pie, Donut").append(rn);
	sb.append("    //Card refere-se ao Lucro/Prejuizo").append(rn);

	sb.append("    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);\r\n").append(rn)
	
	.append("    if (complemento01.startsWith(\"07\") || complemento01.startsWith(\"12\")) graph = \"CardChart\";\r\n").append(rn)

	.append("    if (complemento01.startsWith(\"01\") || complemento01.startsWith(\"02\") || complemento01.startsWith(\"04\") || ").append(rn)
	.append("    	complemento01.startsWith(\"08\") || complemento01.startsWith(\"09\") || complemento01.startsWith(\"10\") || ").append(rn)
	.append("    	complemento01.startsWith(\"11\") || complemento01.startsWith(\"21\"))  graph = \"ColumnChart\";\r\n").append(rn)
	
	.append("    if (complemento01.startsWith(\"15\") || complemento01.startsWith(\"16\") || complemento01.startsWith(\"17\")) ").append(rn)
	.append("    	graph = \"ColumnChartStacked\";\r\n").append(rn)
    
	.append("    if (complemento01.startsWith(\"05\") || complemento01.startsWith(\"06\")) graph = \"LineChart\";\r\n").append(rn)
    
	.append("    if (complemento01.startsWith(\"18\") || complemento01.startsWith(\"19\") || complemento01.startsWith(\"20\")) ").append(rn)
	.append("    	graph = \"LineChartMultiple\";\r\n").append(rn)
    
	.append("    if (complemento01.startsWith(\"03\") || complemento01.startsWith(\"13\") || complemento01.startsWith(\"14\")) ").append(rn)
	.append("    	graph = \"DonutChart\";\r\n")
    .append(rn);


	String aspas = "\"";
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
	        String sName = "";
            Object oName = reg.getField("name");
            if (oName != null) sName = oName.toString();
			
			if (reg.getField("Tipo_Grafico__c") == null || reg.getField("Tipo_Grafico__c").toString().equals("")) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
                String temAspas = "\"";
				
				if (reg.getField("Tipo_Grafico__c") != null &&  reg.getField("Tipo_Grafico__c").toString().contains("complemento")) temAspas = "";
				
				String sConta = "";
				Object oConta = reg.getField("Tipo_Grafico__c");
				if (oConta != null) sConta = oConta.toString();
				sConta = sConta.replaceAll("EM BRANCO","").trim();	
				
				
                sb.append(") {").append(rn)
                  .append("        graph = ")
				  .append(temAspas)
                  .append(sConta);

				sb.append(temAspas).append(";\r\n");
				  
				if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					sb.append("        return graph;\r\n");
				}
				sb.append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
	
    sb.append("    return graph;\r\n")
	
            .append("}").append(rn);
}

private void makeCodigoSimboloValor(String idRoteiro, 
                                   String idRoteiroGrupo, 
                                   String idRoteiroCartoes, 
                                   QueryResult qr_Contas__c,
                                   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";
	
    sb.append("public String getSimboloValor(JSONObject objGrafico) {").append(rn)
	.append("    String complemento01   = objGrafico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objGrafico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objGrafico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objGrafico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objGrafico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objGrafico.optString(\"complemento06\");\r\n")
    .append("    String simboloValor = \"R$\";\r\n").append(rn);

	sb.append("    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);\r\n").append(rn);
	
    
	String aspas = "\"";
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
	        String sName = "";
            Object oName = reg.getField("name");
            if (oName != null) sName = oName.toString();
			
			if (reg.getField("Simbolo_Valor__c") == null || reg.getField("Simbolo_Valor__c").toString().equals("")) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			String sRecordTypeId = "";
				Object oRecordTypeId = reg.getField("RecordTypeId");
				if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
				if (!sRecordTypeId.startsWith("0121C000001lATG")) continue;
				
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
                String temAspas = "\"";
				
				if (reg.getField("Simbolo_Valor__c") != null &&  reg.getField("Simbolo_Valor__c").toString().contains("complemento")) temAspas = "";
				
				
				String sConta = "";
				Object oConta = reg.getField("Simbolo_Valor__c");
				if (oConta != null) sConta = oConta.toString();
				sConta = sConta.replaceAll("EM BRANCO","").trim();	
				
                sb.append(") {").append(rn)
                  .append("        simboloValor = ")
				  .append(temAspas)
                  .append(sConta);

				sb.append(temAspas).append(";\r\n");
				  
				if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					sb.append("        return simboloValor;\r\n");
				}
				sb.append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
	
    sb.append("    return simboloValor.replaceAll(\"Nenhum\",\"\");\r\n")
	
            .append("}").append(rn);
}

private void makeCodigoSeries(String idRoteiro, 
                                   String idRoteiroGrupo, 
                                   String idRoteiroCartoes, 
                                   QueryResult qr_Contas__c,
                                   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";
	
    sb.append("public String getSeriesGrafico(JSONObject objGrafico) {").append(rn)
	.append("    String complemento01   = objGrafico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objGrafico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objGrafico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objGrafico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objGrafico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objGrafico.optString(\"complemento06\");\r\n")
    .append("    String series = \"\";\r\n").append(rn);

	
	sb.append("    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);\r\n").append(rn);
	
	

	String aspas = "\"";
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
	        String sName = "";
            Object oName = reg.getField("name");
            if (oName != null) sName = oName.toString();
			
			if (reg.getField("Rotulos__c") == null || reg.getField("Rotulos__c").toString().equals("")) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
                String temAspas = "\"";
				
				if (reg.getField("Rotulos__c") != null &&  reg.getField("Rotulos__c").toString().contains("complemento")) temAspas = "";
				
				String sConta = "";
				Object oConta = reg.getField("Rotulos__c");
				if (oConta != null) sConta = oConta.toString();
				sConta = sConta.replaceAll("EM BRANCO","").trim();	
				sConta = StringUtil.removeSpecialChars(sConta);
				
                sb.append(") {").append(rn)
                  .append("        series = ")
				  .append(temAspas)
                  .append(sConta);

				sb.append(temAspas).append(";\r\n");
				  
				if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					sb.append("        return series;\r\n");
				}
				sb.append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
	
    sb.append("    return series;\r\n")
	
            .append("}").append(rn);
}


private void makeTituloGrafico(String idRoteiro, 
                                   String idRoteiroGrupo, 
                                   String idRoteiroCartoes, 
                                   QueryResult qr_Contas__c,
                                   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    String rn = "\r\n";
	
    sb.append("public String getTituloGrafico(JSONObject objGrafico) {").append(rn)
	.append("    String complemento01   = objGrafico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objGrafico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objGrafico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objGrafico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objGrafico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objGrafico.optString(\"complemento06\");\r\n")
    .append("    String Titulo_Grafico = \"\";\r\n").append(rn);

	
	sb.append("    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);\r\n").append(rn);
	
	

	String aspas = "\"";
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
	        String sName = "";
            Object oName = reg.getField("name");
            if (oName != null) sName = oName.toString();
			
			if (reg.getField("Titulo_Grafico__c") == null || reg.getField("Titulo_Grafico__c").toString().equals("")) continue;
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
			
            if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
                String temAspas = "\"";
				
				if (reg.getField("Titulo_Grafico__c") != null &&  reg.getField("Titulo_Grafico__c").toString().contains("complemento")) temAspas = "";
				
				String sConta = "";
				Object oConta = reg.getField("Titulo_Grafico__c");
				if (oConta != null) sConta = oConta.toString();
				sConta = sConta.replaceAll("EM BRANCO","").trim();	

				sConta = StringUtil.removeSpecialChars(sConta);

				
                sb.append(") {").append(rn)
                  .append("        Titulo_Grafico = ")
				  .append(temAspas)
                  .append(sConta);

				sb.append(temAspas).append(";\r\n");
				  
				if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					sb.append("        return Titulo_Grafico;\r\n");
				}
				sb.append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
	
    sb.append("    return Titulo_Grafico;\r\n")
	
            .append("}").append(rn);
}

private void makePadroesCartoes(String idRoteiro, 
								StringBuilder sb, 
								PartnerConnection sfCon, 
								InoutLogger logger) throws Exception {

	StringBuilder sql = new StringBuilder();
     sql.append("SELECT Planilhas_Padroes__c, Lista_Padroes__c, Lista_Cartoes__c, Lista_Extratos__c, Lista_extra_01__c ")
       .append(" FROM Roteiros__c WHERE Id='").append(idRoteiro).append("'");

 	QueryResult qres1		= sfCon.query(sql.toString());
 	StringBuilder listaPadroes		=  new StringBuilder();
	String planilhasPadroes	= "";
 	
	if (qres1.getSize() > 0) {
		SObject rot = qres1.getRecords()[0];	
		
	
	    // QUEBRADO EM 3 VARIAVIS ((LISTA CARTOES,LISTA PADROES E LISTA EXTRATO) POIS O VALOR MAXIMO DE UM CAMPO STRING RETORNADO DO SALESFORCE 
		// EH 1300 CARACTERES.
		
		Object campoOb = rot.getField("Planilhas_Padroes__c");
		if (campoOb != null) planilhasPadroes = campoOb.toString();
		
		campoOb = rot.getField("Lista_Padroes__c");
		if (campoOb != null) listaPadroes.append(campoOb.toString());
		
		campoOb = rot.getField("Lista_Cartoes__c");
		if (campoOb != null) {
			listaPadroes.append(";");
			listaPadroes.append(campoOb.toString());
		}
		
		campoOb = rot.getField("Lista_Extratos__c");
		if (campoOb != null) {
			listaPadroes.append(";");		
			listaPadroes.append(campoOb.toString());
		}
		
		campoOb = rot.getField("Lista_extra_01__c");
		if (campoOb != null) {
			listaPadroes.append(";");		
			listaPadroes.append(campoOb.toString());
		}
		
	}
	//teste
	//listaPadroes = "Boticario_Excel;BySoft_i-Broker;Cartao_Abrapetite_Excel;Cartao_American_Express_Excel";
	 
	
	String [] padroes = listaPadroes.toString().replaceAll(" ", "").split(";");
    String rn = "\r\n";
	
	for(int kk = 0; kk < padroes.length;  kk++){
		File toRead;
		if(planilhasPadroes.contains(padroes[kk])){
			toRead = new File(String.format(
				"c:/inout/scriptlib/io_contabil/oicOnDemand/%s.script",
				padroes[kk].trim()
			));
		} else {
			try {
				toRead = new File(String.format(
					"c:/inout/scriptlib/io_contabil/oicOnDemand/empty/%s.script",
					padroes[kk].trim()
				));
			} catch (Exception e) {
				continue;
			}
		}
		
		try {
			FileReader reader = new FileReader(toRead);		

			reader.openFile();
			sb.append(rn);
			while (reader.hasNextLine()) {
				String line = reader.nextLine();
				sb.append(line);
			}
			sb.append(rn);
			
			
		} catch (Exception to) {
			//logger.logError("Erro lendo arquivo padrao -> "+padroes[kk]);
			//logger.logError("Erro -> "+to.getMessage());
		}
	}
	
	
	
}



private void makeEspecieDuplicata(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Contas__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	 String rn = "\r\n";
	String aspas = "\"";


     sb.append("public String getCampoFiscal(String parametro, JSONObject objHistorico) {").append(rn)
 	  .append("    String especie         = objHistorico.optString(\"especie\");\r\n")
	  .append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	  .append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	  .append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	  .append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	  .append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	  .append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	  .append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	  .append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	  .append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	  .append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	  .append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	  .append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	  .append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	  .append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	  .append("    String documento       = objHistorico.optString(\"documento\");\r\n")
	  .append("    String nomeOrigem      = objHistorico.optString(\"nomeOrigem\");\r\n")
	  .append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")	
	  .append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	  .append(rn)
	  .append("    String returnaCodigo  = "+aspas + aspas+";\r\n")
	  .append(rn);
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
	        String sName = "";
            Object oName = reg.getField("name");
            if (oName != null) sName = oName.toString();
	
	        String codigoFiscal = "";
	        String sColuna = "";
	        String sRecordTypeId  = "";
			
			
            Object oAlternativo = reg.getField("Codigo_Fiscal__c");
            if (oAlternativo != null) codigoFiscal = StringUtil.removeSpecialChars(oAlternativo.toString());
            if (codigoFiscal.equals("")) continue; 
            
			 
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
            String stmt09 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_texto_06__c"));
            String stmt10 = preparaComparacao(reg.getField("E_06__c"), reg.getField("O_texto_07__c"));
			
			sColuna = sColuna.replaceAll("Fornecedor/Cliente","nomeOrigem");
			sColuna = sColuna.replaceAll("Documento/NF","documento");
			sColuna = sColuna.replaceAll("Complemento \\(01\\)","complemento01");
			sColuna = sColuna.replaceAll("Complemento \\(02\\)","complemento02");
			sColuna = sColuna.replaceAll("Complemento \\(03\\)","complemento03");
			sColuna = sColuna.replaceAll("Complemento \\(04\\)","complemento04");
			sColuna = sColuna.replaceAll("Complemento \\(05\\)","complemento05");
			sColuna = sColuna.replaceAll("Complemento \\(06\\)","complemento06");
			sColuna = sColuna.replaceAll("Complemento \\(07\\)","complemento07");
			sColuna = sColuna.replaceAll("Complemento \\(08\\)","complemento08");
			sColuna = sColuna.replaceAll("Complemento \\(09\\)","complemento09");
			sColuna = sColuna.replaceAll("Complemento \\(10\\)","complemento10");

 			sColuna = sColuna.replaceAll("Portador","nomePortador");
 			sColuna = sColuna.replaceAll("Data Movimento","dataMovimento");
			
 			sColuna = sColuna.replaceAll("Especie Duplicata","especie");
 			sColuna = sColuna.replaceAll("Valor Documento","valorDocumento");
			sColuna = sColuna.replaceAll("Valor Juros","valorJuros");
			sColuna = sColuna.replaceAll("Valor Desconto","valorDesconto");
			sColuna = sColuna.replaceAll("Valor Multa","valorMulta");
			
			if (!stmt04.isEmpty()) {
                sb.append("    if (parametro.equals(" + aspas + sColuna + aspas + ") && ").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
				 if (!stmt09.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt09);
                }
				 if (!stmt10.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt10);
                }
				
		
                sb.append(") {").append(rn)
                  .append("        returnaCodigo = ")
				  .append(aspas)
                  .append(codigoFiscal)
				  .append(aspas).append(";")
				  .append(rn)
				  .append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return returnaCodigo.trim();\r\n")
      .append("}").append(rn);
}



private void makeDefineCabecalho(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   QueryResult qr_Contas__c,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	 String rn = "\r\n";
	String aspas = "\"";


     sb.append("public int getContadorCabecalho(int contador, String line) {") 	  	
	  .append(rn);
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
	        String sName = "";
            Object oName = reg.getField("name");
            if (oName != null) sName = oName.toString();
	
	        String codigoFiscal = "";
	        String sColuna = "";
	        String sRecordTypeId  = "";	
       
			
			Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString(); 
			
 			
			if (!sRecordTypeId.contains("0121C0000014G79")) continue;   // somente traz 17 Definir Cabecalhp
             
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
             
			sColuna = sColuna.replaceAll("Linha contem","line"); 
 			
			if (!stmt04.isEmpty()) {
                sb.append("    if (").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                 
				
		
                sb.append(") {").append(rn)
                  .append("        contador = ")
                  .append("0")
				  .append(";")
				  .append(rn)
				  .append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return contador;\r\n")
      .append("}").append(rn);
}



private void makeCodigoColunaAlternativa(String idRoteiro, 
										String idRoteiroGrupo, 
										String idRoteiroCartoes, 
										QueryResult qr_Contas__c,
										StringBuilder sb, 
										PartnerConnection sfCon, 
										InoutLogger logger) throws Exception {

    String rn	 = "\r\n";
	String aspas = "\"";
	
    sb.append("public String getColunaAlternativa(String parametro, JSONObject objHistorico) {").append(rn)
	  .append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	  .append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	  .append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	  .append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	  .append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	  .append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	  .append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	  .append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	  .append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	  .append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	  .append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	  .append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	  .append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	  .append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	  .append("    String documento       = objHistorico.optString(\"documento\");\r\n")
	  .append("    String nomeOrigem      = objHistorico.optString(\"nomeOrigem\");\r\n")
	  .append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")	
	  .append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	  .append(rn)
	  .append("    String retornaColunas  = "+aspas + aspas+";\r\n")
	  .append(rn);
	
    if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
            
	        String sName = "";
            Object oName = reg.getField("name");
            if (oName != null) sName = oName.toString();
	
	        String sRetornaColuna = "";
	        String sColuna = "";
	        String sRecordTypeId  = "";
            Object oAlternativo = reg.getField("Coluna_Alternativa__c");
            if (oAlternativo != null) sRetornaColuna = StringUtil.removeSpecialChars(oAlternativo.toString());
            if (sRetornaColuna.equals("")) continue;
			
            oAlternativo = reg.getField("Campo_Coluna_Alternativa__c");
            if (oAlternativo != null) sColuna = StringUtil.removeSpecialChars(oAlternativo.toString());
            if (sColuna.equals("")) continue;
			
			Object oRecordTypeId = reg.getField("RecordTypeId");
            if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
            
            String stmt04 = preparaComparacao(reg.getField("Se_Campo__c"), reg.getField("O_texto_01__c"));
            String stmt05 = preparaComparacao(reg.getField("E_01__c"), reg.getField("O_texto_02__c"));
            String stmt06 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_texto_03__c"));
            String stmt07 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_texto_04__c"));
            String stmt08 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_texto_05__c"));
            String stmt09 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_texto_06__c"));
            String stmt10 = preparaComparacao(reg.getField("E_06__c"), reg.getField("O_texto_07__c"));
			
			sColuna = sColuna.replaceAll("Fornecedor/Cliente","nomeOrigem");
			sColuna = sColuna.replaceAll("Documento/NF","documento");
			sColuna = sColuna.replaceAll("Complemento \\(01\\)","complemento01");
			sColuna = sColuna.replaceAll("Complemento \\(02\\)","complemento02");
			sColuna = sColuna.replaceAll("Complemento \\(03\\)","complemento03");
			sColuna = sColuna.replaceAll("Complemento \\(04\\)","complemento04");
			sColuna = sColuna.replaceAll("Complemento \\(05\\)","complemento05");
			sColuna = sColuna.replaceAll("Complemento \\(06\\)","complemento06");
			sColuna = sColuna.replaceAll("Complemento \\(07\\)","complemento07");
			sColuna = sColuna.replaceAll("Complemento \\(08\\)","complemento08");
			sColuna = sColuna.replaceAll("Complemento \\(09\\)","complemento09");
			sColuna = sColuna.replaceAll("Complemento \\(10\\)","complemento10");

 			sColuna = sColuna.replaceAll("Portador","nomePortador");
 			sColuna = sColuna.replaceAll("Data Movimento","dataMovimento");
			
 			sColuna = sColuna.replaceAll("Valor Documento","valorDocumento");
			sColuna = sColuna.replaceAll("Valor Juros","valorJuros");
			sColuna = sColuna.replaceAll("Valor Desconto","valorDesconto");
			sColuna = sColuna.replaceAll("Valor Multa","valorMulta");
			
			if (!stmt04.isEmpty()) {
                sb.append("    if (parametro.equals(" + aspas + sColuna + aspas + ") && ").append(stmt04);
                if (!stmt05.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt05);
                }
                if (!stmt06.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt06);
                }
                if (!stmt07.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt07);
                }
                if (!stmt08.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt08);
                }
				 if (!stmt09.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt09);
                }
				 if (!stmt10.isEmpty()) {
                    sb.append(" &&").append(rn).append("        ").append(stmt10);
                }
				
		
                sb.append(") {").append(rn)
                  .append("        retornaColunas = ")
				  .append(aspas)
                  .append(sRetornaColuna)
				  .append(aspas).append(";")
				  .append(rn)
				  .append("    }").append(rn);
            }
        }
    } else {
        logger.logDebug(">> NAO TINHA REGRAS A EXPORTAR!");
    }
    sb.append("    return retornaColunas.replace(\",\",\";\").trim();\r\n")
      .append("}").append(rn).append("//FINALPARAMETRIZACAOREGRAS").append(rn);
}

 
private void makeCodigoRegrasConta40 (StringBuilder sb, JSONArray regras, String campoDb, InoutLogger logger) throws Exception {
	String rn = "\r\n";
    String aspas = "\"";
	Boolean inseriuIf = false;
	
	if (regras != null) {
		String conta = "";
		for (int contador = 0; contador < regras.length(); contador++) {
			JSONObject regra = (JSONObject) regras.get(contador);
			
			conta = regra.optString(campoDb);
			// logger.logInfo("RR " + regra.optString("gr.id") +  " | "+  regra.optString("r.campo") + " | " + regra.optString("r.valor"));

			if (contador == 0 && conta == null || conta.equals("")) {
				return;
			}
			
			if (!inseriuIf) {
				sb.append("    if (");
				inseriuIf = true;
			}

			int condicao = Integer.parseInt(regra.optString("r.condicao"));
			String valor = regra.optString("r.valor");
			String campo = validaCampo40(regra.optString("r.campo"));
			

			if (campo.equals("naoLer")) {continue;}
			
			sb.append(preparaComparacao40(campo, condicao, valor));

			boolean hasNext = contador + 1 < regras.length();
			if (hasNext && !campo.equals("")) {sb.append(" && ");}
		}
		sb.append(finalizaIf(conta))
		  .append(rn);
	}
}

private String finalizaIf(String conta) {
    StringBuilder sb = new StringBuilder();
    String aspas = "\"";
    String rn = "\r\n";

    sb.append(")").append(" {")
    .append(rn)
    .append("        conta = ").append(aspas).append(conta).append(aspas).append(";")
    .append(rn)
	.append("        contaMovimento = ").append(aspas).append(conta).append(aspas).append(";")
    .append(rn)
    .append("    }");

    return sb.toString();
}

//Exemplo
//Entra   -> campo = tipoPlanilha      condicao = 1      valor = MOVIMENTO
//Retorno -> tipoPlanilha.contains("MOVIMENTO")
private String preparaComparacao40 (String campo, int condicao, String valor) throws Exception{

	// -----Condicoes----- //
	//    1 -> CONTEM      //
	//    2 -> NAO_CONTEM  //
	//    3 -> COMECA_COM  //
	//    4 -> IGUAL       //

    String aspas = "\"";
	StringBuilder validacao = new StringBuilder();

    if (condicao == 2) {
        validacao.append("!");
    }

    validacao.append(campo);

    switch (condicao) {
        case 1: 
            validacao.append(".contains(");
            break;
        case 2:
            validacao.append(".contains(");
            break;
        case 3:
            validacao.append(".startsWith(");
            break;
        case 4:
            validacao.append(".equals(");
            break;
    }

    validacao.append(aspas);
    validacao.append(valor.replaceAll("\"","").trim());
	// validacao.append(valor.replaceAll("\"",""));
    validacao.append(aspas);
    validacao.append(")");
    
    return validacao.toString();
}






public List<T> unirRegrasSF40(QueryResult qr_Contas__c, QueryResult qr_Contas__c2, List<JSONArray> regrasList40, InoutLogger logger) throws Exception{
	List<T> regrasContaMovimento = new ArrayList();
	List<SObject> regrasComReturn = new ArrayList();
	boolean inseriuRegras40 = false;
	String idExterno = "";

	if (qr_Contas__c != null) {
		for (SObject reg : qr_Contas__c.getRecords()) {
			idExterno = "";
			
			//guarda as regras com return para que elas sejam inseridas ao final (Dessa forma, as regras com return serao geradas no ultimo getContaMovimento)
			if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
				regrasComReturn.add(reg);
			}
			
			String sequencia = reg.getField("Seq_Roteiro__c").toString();
			if (!inseriuRegras40 && sequencia.matches("[5-9].*")) { //Insere as regras do 4.0 antes das regras de sequencia acima de 500 (salesForce)
				regrasContaMovimento.addAll(regrasList40);
				inseriuRegras40 = true;
			}
			
			Object campoOb = reg.getField("ID_Externo__c");
			if (campoOb != null) idExterno = campoOb.toString();
			
			if (!idExterno.equals("")) {
				if (!regrasList40.toString().contains(idExterno)) {
					regrasContaMovimento.add(reg);
				}
			}
		}
	}

	if (qr_Contas__c2 != null) {
		for (SObject reg : qr_Contas__c2.getRecords()) {
			idExterno = "";
			//guarda as regras com return para que elas sejam inseridas ao final (Dessa forma, as regras com return serao geradas no ultimo getContaMovimento)
			if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) { 
				regrasComReturn.add(reg);
			}
			
			String sequencia = reg.getField("Seq_Roteiro__c").toString();
			if (!inseriuRegras40 && sequencia.matches("[5-9].*")) { //Insere as regras do 4.0 antes das regras de sequencia acima de 500 (salesForce)
				regrasContaMovimento.addAll(regrasList40);
				inseriuRegras40 = true;
			}
			Object campoOb = reg.getField("ID_Externo__c");
			if (campoOb != null) idExterno = campoOb.toString();
			
			if (!idExterno.equals("")) {
				if (!regrasList40.toString().contains(idExterno)) {
					regrasContaMovimento.add(reg);
				}
			}
		}
	}
    
	if (!inseriuRegras40) { //Insere as regras do 4.0 ao final (Caso ainda nao tenha inserido)
		regrasContaMovimento.addAll(regrasList40);
		inseriuRegras40 = true;
	}

	regrasContaMovimento.addAll(regrasComReturn);

	return regrasContaMovimento;
}

class Regras40Sf {
	private List<T> regrasMovimento = null;
	private List<T> regrasPortador = null;
	private List<T> regrasMulta = null;
	private List<T> regrasDesconto = null;
	private List<T> regrasJuros = null;

	public Regras40Sf() {
		regrasMovimento = new ArrayList<T>();
		regrasPortador = new ArrayList<T>();
		regrasMulta = new ArrayList<T>();
		regrasDesconto = new ArrayList<T>();
		regrasJuros = new ArrayList<T>();
	}

	public void build(List<T> regras) throws Exception{
		for (Object regra : regras) {
			if (regra instanceof SObject) { //Salesforce
				SObject reg = (SObject) regra;

				if (isContaXSf(reg, "Conta_Movimento__c")) {
					regrasMovimento.add(regra);
				}
				if (isContaXSf(reg, "Conta_Portador__c")) {
					regrasPortador.add(regra);
				}
				if (isContaXSf(reg, "Conta_Juros__c")) {
					regrasJuros.add(regra);
				}
				if (isContaXSf(reg, "Conta_Desconto__c")) {
					regrasDesconto.add(regra);
				}
				if (isContaXSf(reg, "Conta_Multa__c")) {
					regrasMulta.add(regra);
				}
			}
			else if (regra instanceof JSONArray) { //regra40
				JSONArray regra40 = (JSONArray) regra;
				JSONObject condicao = (JSONObject) regra40.get(0);

				if (this.isContaX40(condicao, "gr.conta_movimento")) {
					regrasMovimento.add(regra);
				}
				if (this.isContaX40(condicao, "gr.conta_portador")) {
					regrasPortador.add(regra);
				}
				if (this.isContaX40(condicao, "gr.conta_juros")) {
					regrasJuros.add(regra);
				}
				if (this.isContaX40(condicao, "gr.conta_desconto")) {
					regrasDesconto.add(regra);
				}
				if (this.isContaX40(condicao, "gr.conta_multa")) {
					regrasMulta.add(regra);
				}
			}
		}
	}

	public boolean isContaX40(JSONObject condicao, String campoDb) {
		String conta = condicao.optString(campoDb);
		if (conta != null && conta != "") {
			return true;
		}
		return false;
	}

	public boolean isContaXSf(SObject reg, String sfCampo) {
		String sConta = "";
		Object oConta = reg.getField(sfCampo);
		if (oConta != null) sConta = oConta.toString();

		if (!sConta.equals("") && !sConta.equals("null")) {
			//A conta movimento deve possuir "Conta Contabil - Tradicional" no campo tratar_como__c (de acordo com o codigo legado)
			if (sfCampo.contains("Conta_Movimento__c")) {
				Object oTratarComo = reg.getField("Tratar_como__c");
				String tratarComo = "";

				if (oTratarComo != null) tratarComo = oTratarComo.toString();
				if (!tratarComo.equals("Conta Contabil - Tradicional")) return false;
			}

			return true;
		}
		return false; 
	}

	public List<T> getContasMovimento() {
		return this.regrasMovimento;
	}

	public List<T> getContasPortador() {
		return this.regrasPortador;
	}

	public List<T> getContasMulta() {
		return this.regrasMulta;
	}

	public List<T> getContasDesconto() {
		return this.regrasDesconto;
	}

	public List<T> getContasJuros() {
		return this.regrasJuros;
	}
}



//<HISTORICO40>
//metodo criado para definir os campos validos para que a condicao da regra seja gerada
private String validaHistorico40(String historico) {
	// String codHistorico = "";
	
	// if(historico.startsWith("CodigoHistorico:")){	
		// codHistorico = cutString(historico, 0, "\\$");
	// }
	
	historico = historico.replaceAll("\\$\\{descricao\\}", "\\$\\{nomeOrigem\\}")
						.replaceAll("\\$\\{portador\\}", "\\$\\{nomePortador\\}")
						.replaceAll("\\$\\{competenciaAnterior\\}", "\\$\\{mesAnoAnterior\\}")
						.replaceAll("\\$\\{competencia\\}", "\\$\\{mesAnoAtual\\}")
						.replaceAll("\\$\\{nenhum\\}", "");
	
	// historico = historico + " " + codHistorico;

    return historico.trim();
}

//metodo criado para definir os campos validos para que a condicao da regra seja gerada
private String validaCondicao40(String campoNoDb) {
	String campoNoDbAux = campoNoDb.trim().toUpperCase();
		
	// logger.logInfo("CAMPONODBAUX -> " + campoNoDbAux);
	if (campoNoDbAux.contains("DESCRICAO")) return "nomeOrigem";
	if (campoNoDbAux.contains("FORNECEDOR")) return "nomeOrigem";
	if (campoNoDbAux.contains("PORTADOR")) return "nomePortador";
	if (campoNoDbAux.contains("TIPO") && campoNoDbAux.contains("PLANILHA")) return "tipoPlanilha";
	if (campoNoDbAux.contains("TIPO") && campoNoDbAux.contains("MOVIMENTO")) return "naoLer";
	if (campoNoDbAux.contains("NENHUM")) return "NENHUM";
	// Adicionado campos de complemento, pois ocorria um erro onde os mesmos não eram tratados.
	if (campoNoDbAux.contains("COMPLEMENTO (01)")) return "complemento01";
	if (campoNoDbAux.contains("COMPLEMENTO (02)")) return "complemento02";
	if (campoNoDbAux.contains("COMPLEMENTO (03)")) return "complemento03";
	if (campoNoDbAux.contains("COMPLEMENTO (04)")) return "complemento04";
	if (campoNoDbAux.contains("COMPLEMENTO (05)")) return "complemento05";
	if (campoNoDbAux.contains("COMPLEMENTO (06)")) return "complemento06";

    return campoNoDb.trim();
}



private void makeCodigoHistoricoRegras40 (StringBuilder sb, Regra regra, InoutLogger logger) throws Exception {
	String rn = "\r\n";
    String aspas = "\"";
	Boolean inseriuIf = false;
	
	if (regra != null) {
		Iterator iterador = regra.condicoes.iterator();
		sb.append("    if (");

		while (iterador.hasNext()) {
			Condicao condicao = (Condicao) iterador.next();

			int tipoCondicao = Integer.parseInt(condicao.condicao);
			// logger.logInfo("CE " + condicao.campo);
			String valor = condicao.valor;
			String campo = validaCondicao40(condicao.campo);
			

			if (campo.equals("naoLer")) {continue;}
			

			campo = "StringUtil.removeSpecialCharsToUC(" + campo + ")";
			// logger.logInfo("SKRR " + campo + " | " + tipoCondicao + " | " + valor);
			
			sb.append(preparaComparacao40(campo, tipoCondicao, valor));

			if (iterador.hasNext()) {sb.append(" && ");}
		}

		
		String historico = regra.valor.trim();
		
		
		
		String codHistorico = "";
	
		if(historico.startsWith("CodigoHistorico:")){	
			codHistorico = cutString(historico, 0, "$");
			historico = cutString(historico, "$") + "$" + codHistorico;
		}
		// logger.logInfo("HIST -> " + historico + " CODHIST -> " + codHistorico);
		historico = historico.replaceAll("\"", "");
		
		historico = validaHistorico40(historico);
		
		
		// logger.logInfo("HIST 40 FINAL ->  " + historico);
		/*
		Comentado pois havia um erro onde nos trocavamos os espacos apos os termos por nada
		fiz um ajuste para deixar o espaco e caso tenha mais de um substituir o mesmo*/
		/*historico = historico.replaceFirst("\\$\\{", "\" + ")
							.replaceAll("\\s{0,1}\\$\\{", "\" + ")
							.replaceAll("\\}", " + \"")
							.replaceAll("\\$(\\s)*", "");*/
							
		//Feito ajuste no replace de ("  ", "") por ("  ", " ") 
		historico = historico.replaceFirst("\\$\\{", "\" + ")
							.replaceAll("\\$\\{", "\" + ")
							.replaceAll("  ", " ")
							.replaceAll("\\}", " + \"")
							.replaceAll("\\$(\\s)*", "");
							
							
							
		// logger.logInfo("HIST 40 completo ->  " + historico);
		// historico = historico.replaceFirst("\\$\\{", "\" + ")
		// .replaceAll("\\}\\s*", "")
		// .replace("${", " + ")
		// .replaceAll("\\$(\\s)*", "");
		
		historico = "\"" + historico.trim() + "\"";
		// logger.logInfo("HIST 40 FINAL ->  " + historico);
		
		sb.append(")    historico = " + historico + ";  //id -> " + regra.id + rn);
		
		if(sb.toString().contains(" && )")){
			String sbAux = sb.toString();
			sb.delete(0, sb.length());
        	sbAux = sbAux.replaceAll(" && \\)", "\\)");
        	sb.append(sbAux);   
		}

		// logger.logInfo("Historico -> " + historico);

	}
}



private void makeHistoricosRegras(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   List<T> regrasHistorico,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    logger.logInfo("Entrou make historicosRegras");
	String rn = "\r\n";
	int contador = 0;
	
	// logger.logInfo("REGRAS HISTORICO >> " + regrasHistorico.toString());
	StringBuilder cabecalhoGetHistoricoRegras = new StringBuilder();
	Iterator itr_regras = null;
	try {
		itr_regras = regrasHistorico.iterator();
	} catch(Exception ex) {
		logger.logInfo("Erro ao iterar as regrasDeHistorico - makeHistoricosRegras()");
		itr_regras = new ArrayList().iterator();
	}
   
    cabecalhoGetHistoricoRegras.append("public String getHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
      .append("    String historico = \"\";\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\").replaceAll(\"INVERTE\",\"\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\").replaceAll(\"INVERTE\",\"\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha    = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String parcelaAtual    = objHistorico.optString(\"parcelaAtual\");\r\n")
	.append("    String parcelaAtualeFinal  = objHistorico.optString(\"parcelaAtualeFinal\");\r\n")
	.append("    String trimestreMesAnoAnterior = objHistorico.optString(\"trimestreMesAnoAnterior\");\r\n")
	.append("    String trimestreMesAnoAtual = objHistorico.optString(\"trimestreMesAnoAtual\");\r\n")
	.append("    String descricaoPlanoMovimento  = objHistorico.optString(\"descricaoPlanoMovimento\");\r\n")
	.append("    String descricaoPlanoPortador  = objHistorico.optString(\"descricaoPlanoPortador\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append("    if(!histParam.equals(\"\")) historico = histParam;\r\n").append(rn)
	  .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"PAGAR\"))    historico = \"PAGAMENTO \" + documento + \" \" + nomeOrigem;\r\n")
      .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"RECEBER\"))  historico = \"RECEBIMENTO \" + documento + \" \" + nomeOrigem;\r\n").append(rn);
	String [] listaContas = null;
	String historico = "";
	String lista = "";
	String codigoHistorico = "";

	int contadorMetodos = 1;
	if (itr_regras != null) {
		while (itr_regras.hasNext() || contadorMetodos <= 6) {
			String cabecalho = cabecalhoGetHistoricoRegras.toString();
			if (contadorMetodos > 1) {
				cabecalho = cabecalho.replace("getHistoricoRegra", "getHistoricoRegra" + contadorMetodos);
			}
			sb.append(cabecalho);
			contadorMetodos++;
			
			for (contador = 0; contador < 400; contador++) {
				// logger.logInfo("contador -> " + contador);
				if (itr_regras.hasNext()) {
					Object regra = itr_regras.next();
					SObject reg = null;
					if (regra instanceof SObject) {
						// logger.logInfo("Instancia SOBJECT");
						reg = (SObject) regra;
					} else {
						// logger.logInfo("Regra40");
						Regra regra40 = (Regra) regra;
						if (regra40.movimento) {
							// logger.logInfo("Regra movimento");
							makeCodigoHistoricoRegras40(sb, regra40, logger);
						}
						continue;
					}

					String sRecordTypeId = "";
					Object oRecordTypeId = reg.getField("RecordTypeId");
					if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
					if (sRecordTypeId.startsWith("01215000001Ngh1")) continue;
					contador++;
					
					listaContas = null;
					historico = "";
					lista = "";
					
					Object campoOb = reg.getField("Quando_Conta_Igual__c");
					if (campoOb != null) lista = campoOb.toString();
					listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");

					// CASO HISTORICO SEJA ESPECIFICO PARA JUROS E DESCONTO, NAO GERA NO HISTORICO DE REGRAS 
					String tipoHistorico = "";
					campoOb = reg.getField("Tipo_Historico__c");
					if (campoOb != null) tipoHistorico = campoOb.toString();
					if (tipoHistorico.toUpperCase().contains("JUROS")) continue;
					if (tipoHistorico.toUpperCase().contains("MULTA")) continue;
					if (tipoHistorico.toUpperCase().contains("DESCONTO")) continue;
					if (tipoHistorico.toUpperCase().contains("TERMO")) continue;
					if (tipoHistorico.toUpperCase().contains("LIMPA")) continue;
					if (tipoHistorico.toUpperCase().contains("ACUMULA")) continue;
					if (tipoHistorico.toUpperCase().contains("PORTADOR")) continue;

					for(int i = 0; i < listaContas.length; i++){
						if (i==0){
							if(listaContas[i].trim().equals("")){
								historico = "historico = ";
							}else{
								historico = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
							}
						}else{
							historico = historico + " || conta.equals(\"" + listaContas[i].trim() + "\")";
						}
					}
					
					String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
					String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
					String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
					String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
					String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
					if (stmt04 == null) stmt04 = "";
					if (stmt05 == null) stmt05 = "";
					if (stmt06 == null) stmt06 = "";
					if (stmt07 == null) stmt07 = "";
					if (stmt08 == null) stmt08 = "";
					
					if (!stmt04.isEmpty()) {
						historico = "if (" + stmt04;
					}
					if (!stmt05.isEmpty()) {historico = historico + " && " + stmt05;}
					if (!stmt06.isEmpty()) {historico = historico + " && " + stmt06;}
					if (!stmt07.isEmpty()) {historico = historico + " && " + stmt07;}
					if (!stmt08.isEmpty()) {historico = historico + " && " + stmt08;}


					if(historico.startsWith("if")){
						historico = historico + ")  historico = ";
					}
					
					//logger.logInfo("STMT 4 = "+stmt04+" | 5 = "+stmt05+" | 6 = "+stmt06+" | 7 = "+stmt07+" | 8 = "+stmt08);
					// logger.logInfo("HISTORICO REGRA == "+historico);
					
					// if(historico.contains("&& )")) historico = historico.replaceAll("&& )", ")");
					
					String aspas = "\"";

					String textoInicial = "";
					String texto02 = "";
					String texto03 = "";
					String texto04 = "";
					String texto05 = "";
					codigoHistorico = "";

					
					campoOb = reg.getField("Texto_01__c");
					if (campoOb != null) textoInicial = campoOb.toString();
					textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
					
					campoOb = reg.getField("Texto_02__c");
					if (campoOb != null) texto02 = campoOb.toString();
					texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

					campoOb = reg.getField("Texto_03__c");
					if (campoOb != null) texto03 = campoOb.toString();
					texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

					campoOb = reg.getField("Texto_04__c");
					if (campoOb != null) texto04 = campoOb.toString();
					texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();

					campoOb = reg.getField("Texto_05__c");
					if (campoOb != null) texto05 = campoOb.toString();
					texto05 = StringUtil.removeSpecialChars(texto05).replaceAll("\"","").trim();
					
					campoOb = reg.getField("Codigo_Historico__c");
					if (campoOb != null) codigoHistorico = campoOb.toString();
					codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
			
				
					String campo01 = "";
					String campo02 = "";
					String campo03 = "";
					String campo04 = "";
					String campo05 = "";
					
					campoOb = reg.getField("Campo_01__c");
					if (campoOb != null) campo01 = campoOb.toString();
					campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
					
					campoOb = reg.getField("Campo_02__c");
					if (campoOb != null) campo02 = campoOb.toString();
					campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
					
					campoOb = reg.getField("Campo_03__c");
					if (campoOb != null) campo03 = campoOb.toString();
					campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();

					campoOb = reg.getField("Campo_04__c");
					if (campoOb != null) campo04 = campoOb.toString();
					campo04 = StringUtil.removeSpecialChars(campo04).replaceAll("\"","").trim();

					campoOb = reg.getField("Campo_05__c");
					if (campoOb != null) campo05 = campoOb.toString();
					campo05 = StringUtil.removeSpecialChars(campo05).replaceAll("\"","").trim();
					
					// logger.logInfo("ANTES TEXTOINICIAL -> " + textoInicial + "\n" + " texto2 -> " + texto02 + "\n" + " texto3 -> " + texto03 + "\n" + " texto4 -> " + texto04 + "\n" + " texto5 -> " + texto05 + "\n"
									// + " CAMPO01 -> " + campo01 + "\n" + " CAMPO02 -> " + campo02 + "\n" + " CAMPO03 -> " + campo03 + "\n" + " CAMPO04 -> " + campo04 + "\n"  + " CAMPO05 -> " + campo05 + "\n" );
					
					if(campo01.equals(null))campo01 = "";
					if(campo02.equals(null))campo02 = "";
					if(campo03.equals(null))campo03 = "";
					if(campo04.equals(null))campo03 = "";
					if(campo05.equals(null))campo03 = "";
					if (campo01.length() > 0) campo01 = " + \" \" + " + campo01;
					if (campo02.length() > 0) campo02 = " + \" \" + " + campo02;
					if (campo03.length() > 0) campo03 = " + \" \" + " + campo03;
					if (campo04.length() > 0) campo04 = " + \" \" + " + campo04;
					if (campo05.length() > 0) campo05 = " + \" \" + " + campo05;
					
					texto02 = aspas + texto02;
					texto03 = aspas + texto03;
					texto04 = aspas + texto04;
					texto05 = aspas + texto05;
					
					if (texto02.length() > 0) texto02 = " + \" \" + " + texto02;
					if (texto03.length() > 0) texto03 = " + \" \" + " + texto03;
					if (texto04.length() > 0) texto04 = " + \" \" + " + texto04;
					if (texto05.length() > 0) texto05 = " + \" \" + " + texto05;
					
					// logger.logInfo("DPS TEXTOINICIAL -> " + textoInicial + "\n" + " texto2 -> " + texto02 + "\n" + " texto3 -> " + texto03 + "\n" + " texto4 -> " + texto04 + "\n" + " texto5 -> " + texto05 + "\n"
									// + " CAMPO01 -> " + campo01 + "\n" + " CAMPO02 -> " + campo02 + "\n" + " CAMPO03 -> " + campo03 + "\n" + " CAMPO04 -> " + campo04 + "\n"  + " CAMPO05 -> " + campo05 + "\n" );
					
					
					historico = "    " + historico;
					String hist = aspas + textoInicial + aspas + " " + campo01 + " " + texto02 + aspas + " " + 
								campo02 + " " + texto03 + aspas + " " + campo03 + " " + texto04 + aspas + " " + campo04 + " " + texto05 + aspas + " " + campo05 + " + " + aspas;					
					
					hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
					hist = hist.replaceAll("Documento/NF","documento");
					hist = hist.replaceAll("Complemento \\(01\\)","complemento01");
					hist = hist.replaceAll("Complemento \\(02\\)","complemento02");
					hist = hist.replaceAll("Complemento \\(03\\)","complemento03");
					hist = hist.replaceAll("Complemento \\(04\\)","complemento04");
					hist = hist.replaceAll("Complemento \\(05\\)","complemento05");
					hist = hist.replaceAll("Complemento \\(06\\)","complemento06");
					hist = hist.replaceAll("Complemento \\(07\\)","complemento07");
					hist = hist.replaceAll("Complemento \\(08\\)","complemento08");
					hist = hist.replaceAll("Complemento \\(09\\)","complemento09");
					hist = hist.replaceAll("Complemento \\(10\\)","complemento10");

					hist = hist.replaceAll("Numero da Aba Planilha","numeroAba");
					hist = hist.replaceAll("valorDocumento","valorDocumento");
					hist = hist.replaceAll("valorJuros","valorJuros");
					hist = hist.replaceAll("valorDesconto","valorDesconto");
					
					hist = hist.replaceAll("Trimestre Mes-Ano Atual","trimestreMesAnoAtual");
					hist = hist.replaceAll("Trimestre Mes-Ano Anterior","trimestreMesAnoAnterior");
					hist = hist.replaceAll("Data Movimento","dataMovimento");
					hist = hist.replaceAll("Dia Movimento","dataMovimento.substring(0,2)");
					hist = hist.replaceAll("Mes-Ano Anterior","mesAnoAnterior");
					hist = hist.replaceAll("2 Meses-Ano Anterior","mesAno2Anterior");
					hist = hist.replaceAll("Mes-Ano Atual","mesAnoAtual");
					hist = hist.replaceAll("Contra Partida - Portador","contaPortador");
					hist = hist.replaceAll("Contra Partida - nomePortador","contaPortador");

					hist = hist.replaceAll("Conta Partida - nomePortador","contaPortador");			
					hist = hist.replaceAll("Centro de Custo","codCentroCusto");
					hist = hist.replaceAll("Parcela Atual-Final","parcelaAtualeFinal");
					hist = hist.replaceAll("Parcela Atual", "parcelaAtual");
					hist = hist.replaceAll("Descricao Plano Conta Movimento","descricaoPlanoMovimento");
					hist = hist.replaceAll("Portador","nomePortador");
					hist = hist.replaceAll("Descricao Plano Conta nomePortador","descricaoPlanoPortador");
					hist = hist.replaceAll("Conta Movimento","contaMovimento");
					hist = hist.replaceAll("contanomePortador","contaPortador");
				
					hist = hist.replaceAll("  "," ").trim();
					
					if (!codigoHistorico.equals("")) hist = hist + " " + " CodigoHistorico:" + codigoHistorico;
					
					hist = hist + aspas + ";";
					
					// logger.logInfo("HISTORICO REGRA == "+ historico+ " | " + hist);
					
					sb.append(historico).append(hist).append(rn);
					
					if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
						sb.append("        return historico.replaceAll(\"  \",\" \").trim();\r\n");
					}
					sb.append("    ").append(rn);
				}
				else {
					break;
				}
			}

			sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
			  .append("}").append(rn);
		}
	} else {
		logger.logInfo("Sem hst");
		sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
			  .append("}").append(rn);
	}
	

	// logger.logInfo("Final makehistoricos");
 
}


public List<T> unirHistoricoSF40(QueryResult qr_Contas__c, QueryResult qr_Contas__c2, List<Regra> regrasHistorico, InoutLogger logger) throws Exception{
	List<T> regrasContaMovimento = new ArrayList();
	List<SObject> regrasComReturn = new ArrayList();
	boolean inseriuRegras40 = false;
	String idExterno = "";

	try {
		// logger.logInfo("CHEGOU 1");
		if (qr_Contas__c != null) {
			// logger.logInfo("CHEGOU 2");
			for (SObject reg : qr_Contas__c.getRecords()) {
				idExterno = "";
				// logger.logInfo("CHEGOU 1 qr_contas");
				// logger.logInfo("REG -> " + reg.toString());
				// logger.logInfo("regrasHistorico -> " + regrasHistorico.toString());
				
				if(reg != null){
					String sequencia = reg.getField("Seq_Roteiro__c").toString();
					// logger.logInfo("SEQUENCIAAAA " + sequencia);
					if (!inseriuRegras40 && sequencia.matches("[5-9].*") && regrasHistorico != null) { //Insere as regras do 4.0 antes das regras de sequencia acima de 500 (salesForce)
						regrasContaMovimento.addAll(regrasHistorico);
						inseriuRegras40 = true;
					}
					Object campoOb = reg.getField("ID_Externo__c");
					if (campoOb != null) idExterno = campoOb.toString();
					
					if (idExterno.equals("")) {
						// if (!regrasHistorico.toString().contains(idExterno)) {
							regrasContaMovimento.add(reg);
						// }
					}
				}else{
					if (!inseriuRegras40 && regrasHistorico != null) { //Insere as regras do 4.0 antes das regras de sequencia acima de 500 (salesForce)
						regrasContaMovimento.addAll(regrasHistorico);
						inseriuRegras40 = true;
					}
				}
			}
		}
	} catch (Exception ex) {
		throw new Exception("Erro ao adicionar regars do primeiro QueryResult -> " + ex.getMessage());
	}

	try {
		if (qr_Contas__c2 != null) {
			for (SObject reg : qr_Contas__c2.getRecords()) {
				idExterno = "";
				String sequencia = reg.getField("Seq_Roteiro__c").toString();
				if (!inseriuRegras40 && sequencia.matches( "[5-9].*") && regrasHistorico != null) { //Insere as regras do 4.0 antes das regras de sequencia acima de 500 (salesForce)
					regrasContaMovimento.addAll(regrasHistorico);
					inseriuRegras40 = true;
				}
				Object campoOb = reg.getField("ID_Externo__c");
				if (campoOb != null) idExterno = campoOb.toString();
				
				if (idExterno.equals("")) {
					// if (!regrasHistorico.toString().contains(idExterno)) {
						regrasContaMovimento.add(reg);
					// }
				}
			}
		}
	} catch (Exception ex) {
		throw new Exception("Erro ao adicionar regars do segundo QueryResult -> " + ex.getMessage());
	}
    
	if (!inseriuRegras40 && regrasHistorico != null) { //Insere as regras do 4.0 ao final (Caso ainda nao tenha inserido)
		regrasContaMovimento.addAll(regrasHistorico);
		inseriuRegras40 = true;
	}

	regrasContaMovimento.addAll(regrasComReturn);

	return regrasContaMovimento;
}

private void makeHistoricosPortador(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
								   List<T> regrasHistorico,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";

	int contador = 0;

	StringBuilder cabecalhoGetHistoricoRegras = new StringBuilder();
	Iterator itr_regras = null;
	try {
		itr_regras = regrasHistorico.iterator();
	} catch(Exception ex) {
		logger.logInfo("Erro ao iterar as regrasDeHistorico - makeHistoricosPortador()");
		itr_regras = new ArrayList().iterator();
	}
    
    cabecalhoGetHistoricoRegras.append("public String getHistoricoPortador(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
      .append("    String historico = \"\";\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha     = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String parcelaAtual    = objHistorico.optString(\"parcelaAtual\");\r\n")
	.append("    String parcelaAtualeFinal  = objHistorico.optString(\"parcelaAtualeFinal\");\r\n")
	.append("    String trimestreMesAnoAnterior = objHistorico.optString(\"trimestreMesAnoAnterior\");\r\n")
	.append("    String trimestreMesAnoAtual = objHistorico.optString(\"trimestreMesAnoAtual\");\r\n")
	.append("    String descricaoPlanoMovimento  = objHistorico.optString(\"descricaoPlanoMovimento\");\r\n")
	.append("    String descricaoPlanoPortador  = objHistorico.optString(\"descricaoPlanoPortador\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append("    if(!histParam.equals(\"\")) historico = histParam;\r\n").append(rn)
	  .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"PAGAR\"))    historico = \"PAGAMENTO \" + documento + \" \" + nomeOrigem;\r\n")
      .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"RECEBER\"))  historico = \"RECEBIMENTO \" + documento + \" \" + nomeOrigem;\r\n").append(rn);
	String [] listaContas = null;
	String historico = "";
	String lista = "";
	String codigoHistorico = "";
	  
    int contadorMetodos = 1;
	while (itr_regras.hasNext() || contadorMetodos <= 2) {
		String cabecalho = cabecalhoGetHistoricoRegras.toString();
		if (contadorMetodos > 1) {
			cabecalho = cabecalho.replace("getHistoricoPortador", "getHistoricoPortador" + contadorMetodos);
		}
		sb.append(cabecalho);
		contadorMetodos++;

		for (contador = 0; contador < 400; contador++) {
			// logger.logInfo("contador -> " + contador);
			if (itr_regras.hasNext()) {
				Object regra = itr_regras.next();
				SObject reg = null;
				if (regra instanceof SObject) {
					// logger.logInfo("Instancia SOBJECT");
					reg = (SObject) regra;
				} else {
					// logger.logInfo("Regra40");
					Regra regra40 = (Regra) regra;
					if (regra40.portador) {
						// logger.logInfo("Regra movimento");
						makeCodigoHistoricoRegras40(sb, regra40, logger);
					}
					continue;
				}
			
				String sRecordTypeId = "";
				Object oRecordTypeId = reg.getField("RecordTypeId");
				if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
				if (sRecordTypeId.startsWith("01215000001Ngh1")) continue;
            
				listaContas = null;
				historico = "";
				lista = "";
				
				// CASO LE SOMENTE HISTORICO DE JUROS. 
				String tipoHistorico = "";
				Object campoOb = reg.getField("Tipo_Historico__c");
				if (campoOb != null) tipoHistorico = campoOb.toString();
				if (!tipoHistorico.toUpperCase().contains("PORTADOR")) continue;
				
				campoOb = reg.getField("Quando_Conta_Igual__c");
				if (campoOb != null) lista = campoOb.toString();
				listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");
			
				for(int i = 0; i < listaContas.length; i++){
					if (i==0){
						if(listaContas[i].trim().equals("")){
							historico = "historico = ";
						}else{
							historico = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
						}
					}else{
						historico = historico + " || conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}
				
				String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
				String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
				String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
				String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
				String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
				if (stmt04 == null) stmt04 = "";
				if (stmt05 == null) stmt05 = "";
				if (stmt06 == null) stmt06 = "";
				if (stmt07 == null) stmt07 = "";
				if (stmt08 == null) stmt08 = "";
				
				if (!stmt04.isEmpty()) {
					historico = "if (" + stmt04;
				}
				if (!stmt05.isEmpty()) {historico = historico + " && " + stmt05;                }
				if (!stmt06.isEmpty()) {historico = historico + " && " + stmt06;}
				if (!stmt07.isEmpty()) {historico = historico + " && " + stmt07;}
				if (!stmt08.isEmpty()) {historico = historico + " && " + stmt08;}


				if(historico.startsWith("if")){
					historico = historico + ")  historico = ";
				}
				
				String aspas = "\"";

				String textoInicial = "";
				String texto02 = "";
				String texto03 = "";
				String texto04 = "";
				String texto05 = "";
				codigoHistorico = "";

				
				campoOb = reg.getField("Texto_01__c");
				if (campoOb != null) textoInicial = campoOb.toString();
				textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Texto_02__c");
				if (campoOb != null) texto02 = campoOb.toString();
				texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

				campoOb = reg.getField("Texto_03__c");
				if (campoOb != null) texto03 = campoOb.toString();
				texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

				campoOb = reg.getField("Texto_04__c");
				if (campoOb != null) texto04 = campoOb.toString();
				texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();

				campoOb = reg.getField("Texto_05__c");
				if (campoOb != null) texto05 = campoOb.toString();
				texto05 = StringUtil.removeSpecialChars(texto05).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Codigo_Historico__c");
				if (campoOb != null) codigoHistorico = campoOb.toString();
				codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
		
			
				String campo01 = "";
				String campo02 = "";
				String campo03 = "";
				String campo04 = "";
				String campo05 = "";
				
				campoOb = reg.getField("Campo_01__c");
				if (campoOb != null) campo01 = campoOb.toString();
				campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Campo_02__c");
				if (campoOb != null) campo02 = campoOb.toString();
				campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Campo_03__c");
				if (campoOb != null) campo03 = campoOb.toString();
				campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();

				campoOb = reg.getField("Campo_04__c");
				if (campoOb != null) campo04 = campoOb.toString();
				campo04 = StringUtil.removeSpecialChars(campo04).replaceAll("\"","").trim();

				campoOb = reg.getField("Campo_05__c");
				if (campoOb != null) campo05 = campoOb.toString();
				campo05 = StringUtil.removeSpecialChars(campo05).replaceAll("\"","").trim();
				
				if(campo01.equals(null))campo01 = "";
				if(campo02.equals(null))campo02 = "";
				if(campo03.equals(null))campo03 = "";
				if(campo04.equals(null))campo03 = "";
				if(campo05.equals(null))campo03 = "";
				if (campo01.length() > 0) campo01 = " + \" \" + " + campo01;
				if (campo02.length() > 0) campo02 = " + \" \" + " + campo02;
				if (campo03.length() > 0) campo03 = " + \" \" + " + campo03;
				if (campo04.length() > 0) campo04 = " + \" \" + " + campo04;
				if (campo05.length() > 0) campo05 = " + \" \" + " + campo05;
				
				texto02 = aspas + texto02;
				texto03 = aspas + texto03;
				texto04 = aspas + texto04;
				texto05 = aspas + texto05;
				
				if (texto02.length() > 0) texto02 = " + \" \" + " + texto02;
				if (texto03.length() > 0) texto03 = " + \" \" + " + texto03;
				if (texto04.length() > 0) texto04 = " + \" \" + " + texto04;
				if (texto05.length() > 0) texto05 = " + \" \" + " + texto05;
				
				historico = "    " + historico;
				String hist = aspas + textoInicial + aspas + " " + campo01 + " " + texto02 + aspas + " " + 
							campo02 + " " + texto03 + aspas + " " + campo03 + " " + texto04 + aspas + " " + campo04 + " " + texto05 + aspas + " " + campo05 + " + " + aspas;
				
				hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
				hist = hist.replaceAll("Documento/NF","documento");
				hist = hist.replaceAll("Complemento \\(01\\)","complemento01");
				hist = hist.replaceAll("Complemento \\(02\\)","complemento02");
				hist = hist.replaceAll("Complemento \\(03\\)","complemento03");
				hist = hist.replaceAll("Complemento \\(04\\)","complemento04");
				hist = hist.replaceAll("Complemento \\(05\\)","complemento05");
				hist = hist.replaceAll("Complemento \\(06\\)","complemento06");
				hist = hist.replaceAll("Complemento \\(07\\)","complemento07");
				hist = hist.replaceAll("Complemento \\(08\\)","complemento08");
				hist = hist.replaceAll("Complemento \\(09\\)","complemento09");
				hist = hist.replaceAll("Complemento \\(10\\)","complemento10");

				hist = hist.replaceAll("Numero da Aba Planilha","numeroAba");
				hist = hist.replaceAll("valorDocumento","valorDocumento");
				hist = hist.replaceAll("valorJuros","valorJuros");
				hist = hist.replaceAll("valorDesconto","valorDesconto");
				
				hist = hist.replaceAll("Trimestre Mes-Ano Atual","trimestreMesAnoAtual");
				hist = hist.replaceAll("Trimestre Mes-Ano Anterior","trimestreMesAnoAnterior");
				hist = hist.replaceAll("Data Movimento","dataMovimento");
				hist = hist.replaceAll("Dia Movimento","dataMovimento.substring(0,2)");
				hist = hist.replaceAll("Mes-Ano Anterior","mesAnoAnterior");
				hist = hist.replaceAll("2 Meses-Ano Anterior","mesAno2Anterior");
				hist = hist.replaceAll("Mes-Ano Atual","mesAnoAtual");
				hist = hist.replaceAll("Contra Partida - Portador","contaPortador");
				hist = hist.replaceAll("Contra Partida - nomePortador","contaPortador");
				
				hist = hist.replaceAll("Conta Partida - nomePortador","contaPortador");			
				hist = hist.replaceAll("Centro de Custo","codCentroCusto");
				hist = hist.replaceAll("Parcela Atual-Final","parcelaAtualeFinal");
				hist = hist.replaceAll("Parcela Atual", "parcelaAtual");
				hist = hist.replaceAll("Descricao Plano Conta Movimento","descricaoPlanoMovimento");
				hist = hist.replaceAll("Portador","nomePortador");
				hist = hist.replaceAll("Descricao Plano Conta nomePortador","descricaoPlanoPortador");
				hist = hist.replaceAll("Conta Movimento","contaMovimento");
				hist = hist.replaceAll("contanomePortador","contaPortador");

				
				hist = hist.replaceAll("  "," ").trim();
				
				if (!codigoHistorico.equals("")) hist = hist + " " + " CodigoHistorico:" + codigoHistorico;
				
				hist = hist + aspas + ";";
 			
				sb.append(historico).append(hist).append(rn);
				
				if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					sb.append("        return historico.replaceAll(\"  \",\" \").trim();\r\n");
				}
				sb.append("    ").append(rn);
			}
			else {
				break;
			}
		}
		sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
	  		.append("}").append(rn);	
	}
	
	// logger.logInfo("Final makehistPortador");
 
}

private void makeHistoricosJuros(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   List<T> regrasHistorico,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";

	int contador = 0;

	StringBuilder cabecalhoGetHistoricoRegras = new StringBuilder();
	Iterator itr_regras = null;
	try {
		itr_regras = regrasHistorico.iterator();
	} catch(Exception ex) {
		logger.logInfo("Erro ao iterar as regrasDeHistorico - makeHistoricosJuros()");
		itr_regras = new ArrayList().iterator();
	}
    
    cabecalhoGetHistoricoRegras.append("public String getHistoricoJuros(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
      .append("    String historico = \"\";\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha     = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String parcelaAtual    = objHistorico.optString(\"parcelaAtual\");\r\n")
	.append("    String parcelaAtualeFinal  = objHistorico.optString(\"parcelaAtualeFinal\");\r\n")
	.append("    String trimestreMesAnoAnterior = objHistorico.optString(\"trimestreMesAnoAnterior\");\r\n")
	.append("    String trimestreMesAnoAtual = objHistorico.optString(\"trimestreMesAnoAtual\");\r\n")
	.append("    String descricaoPlanoMovimento  = objHistorico.optString(\"descricaoPlanoMovimento\");\r\n")
	.append("    String descricaoPlanoPortador  = objHistorico.optString(\"descricaoPlanoPortador\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append("    if(!histParam.equals(\"\")) historico = histParam;\r\n").append(rn)
	  .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"PAGAR\"))    historico = \"PAGAMENTO \" + documento + \" \" + nomeOrigem;\r\n")
      .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"RECEBER\"))  historico = \"RECEBIMENTO \" + documento + \" \" + nomeOrigem;\r\n").append(rn);
	String [] listaContas = null;
	String historico = "";
	String lista = "";
	String codigoHistorico = "";
	  
    int contadorMetodos = 1;
	while (itr_regras.hasNext() || contadorMetodos <= 2) {
		String cabecalho = cabecalhoGetHistoricoRegras.toString();
		if (contadorMetodos > 1) {
			cabecalho = cabecalho.replace("getHistoricoJuros", "getHistoricoJuros" + contadorMetodos);
		}
		sb.append(cabecalho);
		contadorMetodos++;

		for (contador = 0; contador < 400; contador++) {
			// logger.logInfo("contador -> " + contador);
			if (itr_regras.hasNext()) {
				Object regra = itr_regras.next();
				SObject reg = null;
				if (regra instanceof SObject) {
					// logger.logInfo("Instancia SOBJECT");
					reg = (SObject) regra;
				} else {
					// logger.logInfo("Regra40");
					Regra regra40 = (Regra) regra;
					if (regra40.juros) {
						// logger.logInfo("Regra juros");
						makeCodigoHistoricoRegras40(sb, regra40, logger);
					}
					continue;
				}
			
				String sRecordTypeId = "";
				Object oRecordTypeId = reg.getField("RecordTypeId");
				if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
				if (sRecordTypeId.startsWith("01215000001Ngh1")) continue;
				
				listaContas = null;
				historico = "";
				lista = "";
				
				// CASO LE SOMENTE HISTORICO DE JUROS. 
				String tipoHistorico = "";
				Object campoOb = reg.getField("Tipo_Historico__c");
				if (campoOb != null) tipoHistorico = campoOb.toString();
				if (!tipoHistorico.toUpperCase().contains("JUROS")) continue;
				
				campoOb = reg.getField("Quando_Conta_Igual__c");
				if (campoOb != null) lista = campoOb.toString();
				listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");
			
				for(int i = 0; i < listaContas.length; i++){
					if (i==0){
						if(listaContas[i].trim().equals("")){
							historico = "historico = ";
						}else{
							historico = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
						}
					}else{
						historico = historico + " || conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}
				
				String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
				String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
				String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
				String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
				String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
				if (stmt04 == null) stmt04 = "";
				if (stmt05 == null) stmt05 = "";
				if (stmt06 == null) stmt06 = "";
				if (stmt07 == null) stmt07 = "";
				if (stmt08 == null) stmt08 = "";
				
				if (!stmt04.isEmpty()) {
					historico = "if (" + stmt04;
				}
				if (!stmt05.isEmpty()) {historico = historico + " && " + stmt05;                }
				if (!stmt06.isEmpty()) {historico = historico + " && " + stmt06;}
				if (!stmt07.isEmpty()) {historico = historico + " && " + stmt07;}
				if (!stmt08.isEmpty()) {historico = historico + " && " + stmt08;}


				if(historico.startsWith("if")){
					historico = historico + ")  historico = ";
				}
				
				String aspas = "\"";

				String textoInicial = "";
				String texto02 = "";
				String texto03 = "";
				String texto04 = "";
				String texto05 = "";
				codigoHistorico = "";

				
				campoOb = reg.getField("Texto_01__c");
				if (campoOb != null) textoInicial = campoOb.toString();
				textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Texto_02__c");
				if (campoOb != null) texto02 = campoOb.toString();
				texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

				campoOb = reg.getField("Texto_03__c");
				if (campoOb != null) texto03 = campoOb.toString();
				texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

				campoOb = reg.getField("Texto_04__c");
				if (campoOb != null) texto04 = campoOb.toString();
				texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();

				campoOb = reg.getField("Texto_05__c");
				if (campoOb != null) texto05 = campoOb.toString();
				texto05 = StringUtil.removeSpecialChars(texto05).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Codigo_Historico__c");
				if (campoOb != null) codigoHistorico = campoOb.toString();
				codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
		
			
				String campo01 = "";
				String campo02 = "";
				String campo03 = "";
				String campo04 = "";
				String campo05 = "";
				
				campoOb = reg.getField("Campo_01__c");
				if (campoOb != null) campo01 = campoOb.toString();
				campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Campo_02__c");
				if (campoOb != null) campo02 = campoOb.toString();
				campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Campo_03__c");
				if (campoOb != null) campo03 = campoOb.toString();
				campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();

				campoOb = reg.getField("Campo_04__c");
				if (campoOb != null) campo04 = campoOb.toString();
				campo04 = StringUtil.removeSpecialChars(campo04).replaceAll("\"","").trim();

				campoOb = reg.getField("Campo_05__c");
				if (campoOb != null) campo05 = campoOb.toString();
				campo05 = StringUtil.removeSpecialChars(campo05).replaceAll("\"","").trim();
				
				if(campo01.equals(null))campo01 = "";
				if(campo02.equals(null))campo02 = "";
				if(campo03.equals(null))campo03 = "";
				if(campo04.equals(null))campo03 = "";
				if(campo05.equals(null))campo03 = "";
				if (campo01.length() > 0) campo01 = " + \" \" + " + campo01;
				if (campo02.length() > 0) campo02 = " + \" \" + " + campo02;
				if (campo03.length() > 0) campo03 = " + \" \" + " + campo03;
				if (campo04.length() > 0) campo04 = " + \" \" + " + campo04;
				if (campo05.length() > 0) campo05 = " + \" \" + " + campo05;
				
				texto02 = aspas + texto02;
				texto03 = aspas + texto03;
				texto04 = aspas + texto04;
				texto05 = aspas + texto05;
				
				if (texto02.length() > 0) texto02 = " + \" \" + " + texto02;
				if (texto03.length() > 0) texto03 = " + \" \" + " + texto03;
				if (texto04.length() > 0) texto04 = " + \" \" + " + texto04;
				if (texto05.length() > 0) texto05 = " + \" \" + " + texto05;
				
				historico = "    " + historico;
				String hist = aspas + textoInicial + aspas + " " + campo01 + " " + texto02 + aspas + " " + 
							campo02 + " " + texto03 + aspas + " " + campo03 + " " + texto04 + aspas + " " + campo04 + " " + texto05 + aspas + " " + campo05 + " + " + aspas;
				
				hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
				hist = hist.replaceAll("Documento/NF","documento");
				hist = hist.replaceAll("Complemento \\(01\\)","complemento01");
				hist = hist.replaceAll("Complemento \\(02\\)","complemento02");
				hist = hist.replaceAll("Complemento \\(03\\)","complemento03");
				hist = hist.replaceAll("Complemento \\(04\\)","complemento04");
				hist = hist.replaceAll("Complemento \\(05\\)","complemento05");
				hist = hist.replaceAll("Complemento \\(06\\)","complemento06");
				hist = hist.replaceAll("Complemento \\(07\\)","complemento07");
				hist = hist.replaceAll("Complemento \\(08\\)","complemento08");
				hist = hist.replaceAll("Complemento \\(09\\)","complemento09");
				hist = hist.replaceAll("Complemento \\(10\\)","complemento10");

				hist = hist.replaceAll("Numero da Aba Planilha","numeroAba");
				hist = hist.replaceAll("valorDocumento","valorDocumento");
				hist = hist.replaceAll("valorJuros","valorJuros");
				hist = hist.replaceAll("valorDesconto","valorDesconto");
				
				hist = hist.replaceAll("Trimestre Mes-Ano Atual","trimestreMesAnoAtual");
				hist = hist.replaceAll("Trimestre Mes-Ano Anterior","trimestreMesAnoAnterior");
				hist = hist.replaceAll("Data Movimento","dataMovimento");
				hist = hist.replaceAll("Dia Movimento","dataMovimento.substring(0,2)");
				hist = hist.replaceAll("Mes-Ano Anterior","mesAnoAnterior");
				hist = hist.replaceAll("2 Meses-Ano Anterior","mesAno2Anterior");
				hist = hist.replaceAll("Mes-Ano Atual","mesAnoAtual");
				hist = hist.replaceAll("Contra Partida - Portador","contaPortador");
				hist = hist.replaceAll("Contra Partida - nomePortador","contaPortador");
				
				hist = hist.replaceAll("Conta Partida - nomePortador","contaPortador");			
				hist = hist.replaceAll("Centro de Custo","codCentroCusto");
				hist = hist.replaceAll("Parcela Atual-Final","parcelaAtualeFinal");
				hist = hist.replaceAll("Parcela Atual", "parcelaAtual");
				hist = hist.replaceAll("Descricao Plano Conta Movimento","descricaoPlanoMovimento");
				hist = hist.replaceAll("Portador","nomePortador");
				hist = hist.replaceAll("Descricao Plano Conta nomePortador","descricaoPlanoPortador");
				hist = hist.replaceAll("Conta Movimento","contaMovimento");
				hist = hist.replaceAll("contanomePortador","contaPortador");
				
				hist = hist.replaceAll("  "," ").trim();
				
				if (!codigoHistorico.equals("")) hist = hist + " " + " CodigoHistorico:" + codigoHistorico;
				
				hist = hist + aspas + ";";
				
				sb.append(historico).append(hist).append(rn);
				
				if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					sb.append("        return historico.replaceAll(\"  \",\" \").trim();\r\n");
				}
				sb.append("    ").append(rn);
			
			}
			else {
				break;
			}
		}
		sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
			  .append("}").append(rn);
	}
	
	// logger.logInfo("Final makehistJuros");
 
}

private void makeHistoricosDesconto(String idRoteiro, 
                                   String idRoteiroGrupo,
								   String idRoteiroCartoes,
                                   List<T> regrasHistorico,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";

    int contador = 0;

	StringBuilder cabecalhoGetHistoricoRegras = new StringBuilder();
	Iterator itr_regras = null;
	try {
		itr_regras = regrasHistorico.iterator();
	} catch(Exception ex) {
		logger.logInfo("Erro ao iterar as regrasDeHistorico - getHistoricoDesconto()");
		itr_regras = new ArrayList().iterator();
	}
    
    cabecalhoGetHistoricoRegras.append("public String getHistoricoDesconto(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
    .append("    String historico = \"\";\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha     = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String parcelaAtual    = objHistorico.optString(\"parcelaAtual\");\r\n")
	.append("    String parcelaAtualeFinal  = objHistorico.optString(\"parcelaAtualeFinal\");\r\n")
	.append("    String trimestreMesAnoAnterior = objHistorico.optString(\"trimestreMesAnoAnterior\");\r\n")
	.append("    String trimestreMesAnoAtual = objHistorico.optString(\"trimestreMesAnoAtual\");\r\n")
	.append("    String descricaoPlanoMovimento  = objHistorico.optString(\"descricaoPlanoMovimento\");\r\n")
	.append("    String descricaoPlanoPortador  = objHistorico.optString(\"descricaoPlanoPortador\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append("    if(!histParam.equals(\"\")) historico = histParam;\r\n").append(rn)
	  .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"PAGAR\"))    historico = \"PAGAMENTO \" + documento + \" \" + nomeOrigem;\r\n")
      .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"RECEBER\"))  historico = \"RECEBIMENTO \" + documento + \" \" + nomeOrigem;\r\n").append(rn);
	String [] listaContas = null;
	String historico = "";
	String lista = "";
	String codigoHistorico = "";
	  
    int contadorMetodos = 1;
	while (itr_regras.hasNext() || contadorMetodos <= 2) {
		String cabecalho = cabecalhoGetHistoricoRegras.toString();
		if (contadorMetodos > 1) {
			cabecalho = cabecalho.replace("getHistoricoDesconto", "getHistoricoDesconto" + contadorMetodos);
		}
		sb.append(cabecalho);
		contadorMetodos++;

		for (contador = 0; contador < 400; contador++) {
			// logger.logInfo("contador -> " + contador);
			if (itr_regras.hasNext()) {
				Object regra = itr_regras.next();
				SObject reg = null;
				if (regra instanceof SObject) {
					// logger.logInfo("Instancia SOBJECT");
					reg = (SObject) regra;
				} else {
					// logger.logInfo("Regra40");
					Regra regra40 = (Regra) regra;
					if (regra40.desconto) {
						// logger.logInfo("Regra Desconto");
						makeCodigoHistoricoRegras40(sb, regra40, logger);
					}
					continue;
				}
			
				String sRecordTypeId = "";
				Object oRecordTypeId = reg.getField("RecordTypeId");
				if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
				if (sRecordTypeId.startsWith("01215000001Ngh1")) continue;
				
				listaContas = null;
				historico = "";
				lista = "";
				
				// CASO LE SOMENTE HISTORICO DE DESCONTO. 
				String tipoHistorico = "";
				Object campoOb = reg.getField("Tipo_Historico__c");
				if (campoOb != null) tipoHistorico = campoOb.toString();
				if (!tipoHistorico.toUpperCase().contains("DESCONTO")) continue;
				
				campoOb = reg.getField("Quando_Conta_Igual__c");
				if (campoOb != null) lista = campoOb.toString();
				listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");
			
				for(int i = 0; i < listaContas.length; i++){
					if (i==0){
						if(listaContas[i].trim().equals("")){
							historico = "historico = ";
						}else{
							historico = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
						}
					}else{
						historico = historico + " || conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}
				
				String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
				String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
				String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
				String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
				String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
				if (stmt04 == null) stmt04 = "";
				if (stmt05 == null) stmt05 = "";
				if (stmt06 == null) stmt06 = "";
				if (stmt07 == null) stmt07 = "";
				if (stmt08 == null) stmt08 = "";
				
				if (!stmt04.isEmpty()) {
					historico = "if (" + stmt04;
				}
				if (!stmt05.isEmpty()) {historico = historico + " && " + stmt05;                }
				if (!stmt06.isEmpty()) {historico = historico + " && " + stmt06;}
				if (!stmt07.isEmpty()) {historico = historico + " && " + stmt07;}
				if (!stmt08.isEmpty()) {historico = historico + " && " + stmt08;}


				if(historico.startsWith("if")){
					historico = historico + ")  historico = ";
				}
				
				String aspas = "\"";

				String textoInicial = "";
				String texto02 = "";
				String texto03 = "";
				String texto04 = "";
				String texto05 = "";
				codigoHistorico = "";

				
				campoOb = reg.getField("Texto_01__c");
				if (campoOb != null) textoInicial = campoOb.toString();
				textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Texto_02__c");
				if (campoOb != null) texto02 = campoOb.toString();
				texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

				campoOb = reg.getField("Texto_03__c");
				if (campoOb != null) texto03 = campoOb.toString();
				texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

				campoOb = reg.getField("Texto_04__c");
				if (campoOb != null) texto04 = campoOb.toString();
				texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();

				campoOb = reg.getField("Texto_05__c");
				if (campoOb != null) texto05 = campoOb.toString();
				texto05 = StringUtil.removeSpecialChars(texto05).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Codigo_Historico__c");
				if (campoOb != null) codigoHistorico = campoOb.toString();
				codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
		
			
				String campo01 = "";
				String campo02 = "";
				String campo03 = "";
				String campo04 = "";
				String campo05 = "";
				
				campoOb = reg.getField("Campo_01__c");
				if (campoOb != null) campo01 = campoOb.toString();
				campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Campo_02__c");
				if (campoOb != null) campo02 = campoOb.toString();
				campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Campo_03__c");
				if (campoOb != null) campo03 = campoOb.toString();
				campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();

				campoOb = reg.getField("Campo_04__c");
				if (campoOb != null) campo04 = campoOb.toString();
				campo04 = StringUtil.removeSpecialChars(campo04).replaceAll("\"","").trim();

				campoOb = reg.getField("Campo_05__c");
				if (campoOb != null) campo05 = campoOb.toString();
				campo05 = StringUtil.removeSpecialChars(campo05).replaceAll("\"","").trim();
				
				if(campo01.equals(null))campo01 = "";
				if(campo02.equals(null))campo02 = "";
				if(campo03.equals(null))campo03 = "";
				if(campo04.equals(null))campo03 = "";
				if(campo05.equals(null))campo03 = "";
				if (campo01.length() > 0) campo01 = " + \" \" + " + campo01;
				if (campo02.length() > 0) campo02 = " + \" \" + " + campo02;
				if (campo03.length() > 0) campo03 = " + \" \" + " + campo03;
				if (campo04.length() > 0) campo04 = " + \" \" + " + campo04;
				if (campo05.length() > 0) campo05 = " + \" \" + " + campo05;
				
				texto02 = aspas + texto02;
				texto03 = aspas + texto03;
				texto04 = aspas + texto04;
				texto05 = aspas + texto05;
				
				if (texto02.length() > 0) texto02 = " + \" \" + " + texto02;
				if (texto03.length() > 0) texto03 = " + \" \" + " + texto03;
				if (texto04.length() > 0) texto04 = " + \" \" + " + texto04;
				if (texto05.length() > 0) texto05 = " + \" \" + " + texto05;
				
				historico = "    " + historico;
				String hist = aspas + textoInicial + aspas + " " + campo01 + " " + texto02 + aspas + " " + 
							campo02 + " " + texto03 + aspas + " " + campo03 + " " + texto04 + aspas + " " + campo04 + " " + texto05 + aspas + " " + campo05 + " + " + aspas;
				
				hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
				hist = hist.replaceAll("Documento/NF","documento");
				hist = hist.replaceAll("Complemento \\(01\\)","complemento01");
				hist = hist.replaceAll("Complemento \\(02\\)","complemento02");
				hist = hist.replaceAll("Complemento \\(03\\)","complemento03");
				hist = hist.replaceAll("Complemento \\(04\\)","complemento04");
				hist = hist.replaceAll("Complemento \\(05\\)","complemento05");
				hist = hist.replaceAll("Complemento \\(06\\)","complemento06");
				hist = hist.replaceAll("Complemento \\(07\\)","complemento07");
				hist = hist.replaceAll("Complemento \\(08\\)","complemento08");
				hist = hist.replaceAll("Complemento \\(09\\)","complemento09");
				hist = hist.replaceAll("Complemento \\(10\\)","complemento10");

				hist = hist.replaceAll("Numero da Aba Planilha","numeroAba");
				hist = hist.replaceAll("valorDocumento","valorDocumento");
				hist = hist.replaceAll("valorJuros","valorJuros");
				hist = hist.replaceAll("valorDesconto","valorDesconto");
				
				hist = hist.replaceAll("Trimestre Mes-Ano Atual","trimestreMesAnoAtual");
				hist = hist.replaceAll("Trimestre Mes-Ano Anterior","trimestreMesAnoAnterior");
				hist = hist.replaceAll("Data Movimento","dataMovimento");
				hist = hist.replaceAll("Dia Movimento","dataMovimento.substring(0,2)");
				hist = hist.replaceAll("Mes-Ano Anterior","mesAnoAnterior");
				hist = hist.replaceAll("2 Meses-Ano Anterior","mesAno2Anterior");
				hist = hist.replaceAll("Mes-Ano Atual","mesAnoAtual");
				hist = hist.replaceAll("Contra Partida - Portador","contaPortador");
				hist = hist.replaceAll("Conta Partida - nomePortador","contaPortador");			
				hist = hist.replaceAll("Centro de Custo","codCentroCusto");
				hist = hist.replaceAll("Parcela Atual-Final","parcelaAtualeFinal");
				hist = hist.replaceAll("Parcela Atual", "parcelaAtual");
				hist = hist.replaceAll("Descricao Plano Conta Movimento","descricaoPlanoMovimento");
				hist = hist.replaceAll("Portador","nomePortador");
				hist = hist.replaceAll("Descricao Plano Conta nomePortador","descricaoPlanoPortador");
				hist = hist.replaceAll("Conta Movimento","contaMovimento");
				hist = hist.replaceAll("contanomePortador","contaPortador");
				hist = hist.replaceAll("  "," ").trim();
				
				if (!codigoHistorico.equals("")) hist = hist + " " + " CodigoHistorico:" + codigoHistorico;
				
				hist = hist + aspas + ";";
				
				sb.append(historico).append(hist).append(rn);
				
				if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					sb.append("        return historico.replaceAll(\"  \",\" \").trim();\r\n");
				}
				sb.append("    ").append(rn);
			}
			else {
				break;
			}
			
		}
		sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
	  		.append("}").append(rn);	
	}
	
	// logger.logInfo("Final makehistDescontos");
}

private void makeHistoricosMulta(String idRoteiro, 
								   String idRoteiroGrupo,
	     						   String idRoteiroCartoes,
								   List<T> regrasHistorico,
								   StringBuilder sb, 
                                   PartnerConnection sfCon, 
                                   InoutLogger logger) throws Exception {

    
	String rn = "\r\n";
    
    int contador = 0;

	StringBuilder cabecalhoGetHistoricoRegras = new StringBuilder();
	Iterator itr_regras = null;
	try {
		itr_regras = regrasHistorico.iterator();
	} catch(Exception ex) {
		logger.logInfo("Erro ao iterar as regrasDeHistorico - makeHistoricosPortador()");
		itr_regras = new ArrayList().iterator();
	}
    
    cabecalhoGetHistoricoRegras.append("public String getHistoricoMulta(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {").append(rn)
      .append("    String historico = \"\";\r\n")
	.append("    String complemento01   = objHistorico.optString(\"complemento01\");\r\n")
	.append("    String complemento02   = objHistorico.optString(\"complemento02\");\r\n")
	.append("    String complemento03   = objHistorico.optString(\"complemento03\");\r\n")
	.append("    String complemento04   = objHistorico.optString(\"complemento04\");\r\n")
	.append("    String complemento05   = objHistorico.optString(\"complemento05\");\r\n")
	.append("    String complemento06   = objHistorico.optString(\"complemento06\");\r\n")
	.append("    String complemento07   = objHistorico.optString(\"complemento07\");\r\n")
	.append("    String complemento08   = objHistorico.optString(\"complemento08\");\r\n")
	.append("    String complemento09   = objHistorico.optString(\"complemento09\");\r\n")
	.append("    String complemento10   = objHistorico.optString(\"complemento10\");\r\n")
	.append("    String dataMovimento   = objHistorico.optString(\"dataMovimento\");\r\n")
	.append("    String mesAnoAnterior  = objHistorico.optString(\"mesAnoAnterior\");\r\n")
	.append("    String mesAno2Anterior = objHistorico.optString(\"mesAno2Anterior\");\r\n")
	.append("    String mesAnoAtual     = objHistorico.optString(\"mesAnoAtual\");\r\n")
	.append("    String nomeArquivo     = objHistorico.optString(\"nomeArquivo\").toUpperCase();\r\n")
	.append("    String contaMovimento  = objHistorico.optString(\"contaMovimento\");\r\n")
	.append("    String contaPortador   = objHistorico.optString(\"contaPortador\");\r\n")
	.append("    String contaJuros      = objHistorico.optString(\"contaJuros\");\r\n")
	.append("    String contaDesconto   = objHistorico.optString(\"contaDesconto\");\r\n")
	.append("    String contaMulta      = objHistorico.optString(\"contaMulta\");\r\n")
	.append("    String nomePortador    = objHistorico.optString(\"nomePortador\");\r\n")
	.append("    String tipoPlanilha     = objHistorico.optString(\"tipoPlanilha\");\r\n")
	.append("    String codCentroCusto  = objHistorico.optString(\"centroCusto\");\r\n")
	.append("    int    numeroAba       = objHistorico.optInt(\"numeroAba\");\r\n")
	.append("    String parcelaAtual    = objHistorico.optString(\"parcelaAtual\");\r\n")
	.append("    String parcelaAtualeFinal  = objHistorico.optString(\"parcelaAtualeFinal\");\r\n")
	.append("    String trimestreMesAnoAnterior = objHistorico.optString(\"trimestreMesAnoAnterior\");\r\n")
	.append("    String trimestreMesAnoAtual = objHistorico.optString(\"trimestreMesAnoAtual\");\r\n")
	.append("    String descricaoPlanoMovimento  = objHistorico.optString(\"descricaoPlanoMovimento\");\r\n")
	.append("    String descricaoPlanoPortador  = objHistorico.optString(\"descricaoPlanoPortador\");\r\n")
	.append("    double valorDocumento  = objHistorico.optDouble(\"valorDocumento\");\r\n")
	.append("    double valorDesconto   = objHistorico.optDouble(\"valorDesconto\");\r\n")
	.append("    double valorJuros      = objHistorico.optDouble(\"valorJuros\");\r\n")
	  .append("    if(!histParam.equals(\"\")) historico = histParam;\r\n").append(rn)
	  .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"PAGAR\"))    historico = \"PAGAMENTO \" + documento + \" \" + nomeOrigem;\r\n")
      .append("    if(histParam.equals(\"\") && tipoLancamento.contains(\"RECEBER\"))  historico = \"RECEBIMENTO \" + documento + \" \" + nomeOrigem;\r\n").append(rn);
	String [] listaContas = null;
	String historico = "";
	String lista = "";
	String codigoHistorico = "";
	  
    int contadorMetodos = 1;
	while (itr_regras.hasNext() || contadorMetodos <= 2) {
		String cabecalho = cabecalhoGetHistoricoRegras.toString();
		if (contadorMetodos > 1) {
			cabecalho = cabecalho.replace("getHistoricoMulta", "getHistoricoMulta" + contadorMetodos);
		}
		sb.append(cabecalho);
		contadorMetodos++;

		for (contador = 0; contador < 400; contador++) {
			// logger.logInfo("contador -> " + contador);
			if (itr_regras.hasNext()) {
				Object regra = itr_regras.next();
				SObject reg = null;
				if (regra instanceof SObject) {
					// logger.logInfo("Instancia SOBJECT");
					reg = (SObject) regra;
				} else {
					// logger.logInfo("Regra40");
					Regra regra40 = (Regra) regra;
					if (regra40.multa) {
						// logger.logInfo("Regra multa");
						makeCodigoHistoricoRegras40(sb, regra40, logger);
					}
					continue;
				}
			
				String sRecordTypeId = "";
				Object oRecordTypeId = reg.getField("RecordTypeId");
				if (oRecordTypeId != null) sRecordTypeId = oRecordTypeId.toString();
				if (sRecordTypeId.startsWith("01215000001Ngh1")) continue;
				
				listaContas = null;
				historico = "";
				lista = "";
				
				// CASO LE SOMENTE HISTORICO DE MULTA. 
				String tipoHistorico = "";
				Object campoOb = reg.getField("Tipo_Historico__c");
				if (campoOb != null) tipoHistorico = campoOb.toString();
				if (!tipoHistorico.toUpperCase().contains("MULTA")) continue;
				
				campoOb = reg.getField("Quando_Conta_Igual__c");
				if (campoOb != null) lista = campoOb.toString();
				listaContas = StringUtil.removeSpecialCharsToUC(lista).split(";");
			
				for(int i = 0; i < listaContas.length; i++){
					if (i==0){
						if(listaContas[i].trim().equals("")){
							historico = "historico = ";
						}else{
							historico = "if(conta.equals(\"" + listaContas[i].trim() + "\")";
						}
					}else{
						historico = historico + " || conta.equals(\"" + listaContas[i].trim() + "\")";
					}
				}
				
				String stmt04 = preparaComparacao(reg.getField("Se_campo__c"), reg.getField("O_Texto_01__c"));
				String stmt05 = preparaComparacao(reg.getField("E_02__c"), reg.getField("O_Texto_02__c"));
				String stmt06 = preparaComparacao(reg.getField("E_03__c"), reg.getField("O_Texto_03__c"));
				String stmt07 = preparaComparacao(reg.getField("E_04__c"), reg.getField("O_Texto_04__c"));
				String stmt08 = preparaComparacao(reg.getField("E_05__c"), reg.getField("O_Texto_05__c"));
				if (stmt04 == null) stmt04 = "";
				if (stmt05 == null) stmt05 = "";
				if (stmt06 == null) stmt06 = "";
				if (stmt07 == null) stmt07 = "";
				if (stmt08 == null) stmt08 = "";
				
				if (!stmt04.isEmpty()) {
					historico = "if (" + stmt04;
				}
				if (!stmt05.isEmpty()) {historico = historico + " && " + stmt05;                }
				if (!stmt06.isEmpty()) {historico = historico + " && " + stmt06;}
				if (!stmt07.isEmpty()) {historico = historico + " && " + stmt07;}
				if (!stmt08.isEmpty()) {historico = historico + " && " + stmt08;}


				if(historico.startsWith("if")){
					historico = historico + ")  historico = ";
				}
				
				String aspas = "\"";

				String textoInicial = "";
				String texto02 = "";
				String texto03 = "";
				String texto04 = "";
				String texto05 = "";
				codigoHistorico = "";

				
				campoOb = reg.getField("Texto_01__c");
				if (campoOb != null) textoInicial = campoOb.toString();
				textoInicial = StringUtil.removeSpecialChars(textoInicial).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Texto_02__c");
				if (campoOb != null) texto02 = campoOb.toString();
				texto02 = StringUtil.removeSpecialChars(texto02).replaceAll("\"","").trim();

				campoOb = reg.getField("Texto_03__c");
				if (campoOb != null) texto03 = campoOb.toString();
				texto03 = StringUtil.removeSpecialChars(texto03).replaceAll("\"","").trim();

				campoOb = reg.getField("Texto_04__c");
				if (campoOb != null) texto04 = campoOb.toString();
				texto04 = StringUtil.removeSpecialChars(texto04).replaceAll("\"","").trim();

				campoOb = reg.getField("Texto_05__c");
				if (campoOb != null) texto05 = campoOb.toString();
				texto05 = StringUtil.removeSpecialChars(texto05).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Codigo_Historico__c");
				if (campoOb != null) codigoHistorico = campoOb.toString();
				codigoHistorico = StringUtil.removeSpecialChars(codigoHistorico).replaceAll("\"","").trim();	
		
			
				String campo01 = "";
				String campo02 = "";
				String campo03 = "";
				String campo04 = "";
				String campo05 = "";
				
				campoOb = reg.getField("Campo_01__c");
				if (campoOb != null) campo01 = campoOb.toString();
				campo01 = StringUtil.removeSpecialChars(campo01).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Campo_02__c");
				if (campoOb != null) campo02 = campoOb.toString();
				campo02 = StringUtil.removeSpecialChars(campo02).replaceAll("\"","").trim();
				
				campoOb = reg.getField("Campo_03__c");
				if (campoOb != null) campo03 = campoOb.toString();
				campo03 = StringUtil.removeSpecialChars(campo03).replaceAll("\"","").trim();

				campoOb = reg.getField("Campo_04__c");
				if (campoOb != null) campo04 = campoOb.toString();
				campo04 = StringUtil.removeSpecialChars(campo04).replaceAll("\"","").trim();

				campoOb = reg.getField("Campo_05__c");
				if (campoOb != null) campo05 = campoOb.toString();
				campo05 = StringUtil.removeSpecialChars(campo05).replaceAll("\"","").trim();
				
				if(campo01.equals(null))campo01 = "";
				if(campo02.equals(null))campo02 = "";
				if(campo03.equals(null))campo03 = "";
				if(campo04.equals(null))campo03 = "";
				if(campo05.equals(null))campo03 = "";
				if (campo01.length() > 0) campo01 = " + \" \" + " + campo01;
				if (campo02.length() > 0) campo02 = " + \" \" + " + campo02;
				if (campo03.length() > 0) campo03 = " + \" \" + " + campo03;
				if (campo04.length() > 0) campo04 = " + \" \" + " + campo04;
				if (campo05.length() > 0) campo05 = " + \" \" + " + campo05;
				
				texto02 = aspas + texto02;
				texto03 = aspas + texto03;
				texto04 = aspas + texto04;
				texto05 = aspas + texto05;
				
				if (texto02.length() > 0) texto02 = " + \" \" + " + texto02;
				if (texto03.length() > 0) texto03 = " + \" \" + " + texto03;
				if (texto04.length() > 0) texto04 = " + \" \" + " + texto04;
				if (texto05.length() > 0) texto05 = " + \" \" + " + texto05;
				
				historico = "    " + historico;
				String hist = aspas + textoInicial + aspas + " " + campo01 + " " + texto02 + aspas + " " + 
							campo02 + " " + texto03 + aspas + " " + campo03 + " " + texto04 + aspas + " " + campo04 + " " + texto05 + aspas + " " + campo05 + " + " + aspas;
				
				hist = hist.replaceAll("Fornecedor/Cliente","nomeOrigem");
				hist = hist.replaceAll("Documento/NF","documento");
				hist = hist.replaceAll("Complemento \\(01\\)","complemento01");
				hist = hist.replaceAll("Complemento \\(02\\)","complemento02");
				hist = hist.replaceAll("Complemento \\(03\\)","complemento03");
				hist = hist.replaceAll("Complemento \\(04\\)","complemento04");
				hist = hist.replaceAll("Complemento \\(05\\)","complemento05");
				hist = hist.replaceAll("Complemento \\(06\\)","complemento06");
				hist = hist.replaceAll("Complemento \\(07\\)","complemento07");
				hist = hist.replaceAll("Complemento \\(08\\)","complemento08");
				hist = hist.replaceAll("Complemento \\(09\\)","complemento09");
				hist = hist.replaceAll("Complemento \\(10\\)","complemento10");

				hist = hist.replaceAll("Numero da Aba Planilha","numeroAba");
				hist = hist.replaceAll("valorDocumento","valorDocumento");
				hist = hist.replaceAll("valorJuros","valorJuros");
				hist = hist.replaceAll("valorDesconto","valorDesconto");
				
				hist = hist.replaceAll("Trimestre Mes-Ano Atual","trimestreMesAnoAtual");
				hist = hist.replaceAll("Trimestre Mes-Ano Anterior","trimestreMesAnoAnterior");
				hist = hist.replaceAll("Data Movimento","dataMovimento");
				hist = hist.replaceAll("Dia Movimento","dataMovimento.substring(0,2)");
				hist = hist.replaceAll("Mes-Ano Anterior","mesAnoAnterior");
				hist = hist.replaceAll("2 Meses-Ano Anterior","mesAno2Anterior");
				hist = hist.replaceAll("Mes-Ano Atual","mesAnoAtual");
				hist = hist.replaceAll("Contra Partida - Portador","contaPortador");
				hist = hist.replaceAll("Conta Partida - nomePortador","contaPortador");			
				hist = hist.replaceAll("Centro de Custo","codCentroCusto");
				hist = hist.replaceAll("Parcela Atual-Final","parcelaAtualeFinal");
				hist = hist.replaceAll("Parcela Atual", "parcelaAtual");
				hist = hist.replaceAll("Descricao Plano Conta Movimento","descricaoPlanoMovimento");
				hist = hist.replaceAll("Portador","nomePortador");
				hist = hist.replaceAll("Descricao Plano Conta nomePortador","descricaoPlanoPortador");
				hist = hist.replaceAll("Conta Movimento","contaMovimento");
				hist = hist.replaceAll("contanomePortador","contaPortador");
				hist = hist.replaceAll("  "," ").trim();
				
				if (!codigoHistorico.equals("")) hist = hist + " " + " CodigoHistorico:" + codigoHistorico;
				
				hist = hist + aspas + ";";

				sb.append(historico).append(hist).append(rn);
				
				if (reg.getField("Continua__c").toString().contains("0") || reg.getField("Continua__c").toString().toUpperCase().contains("SE ENCONTRAR")) {
					sb.append("        return historico.replaceAll(\"  \",\" \").trim();\r\n");
				}
				sb.append("    ").append(rn);
			
			}
			else {
				break;
			}
		}
		sb.append(rn).append("    return historico.replaceAll(\"  \",\" \").trim();\r\n")
	  		.append("}").append(rn);	
	}

	// logger.logInfo("Final makehistMulta");
}

public void verificaRegraCentroCusto(QueryResult qr_Contas__c, String codEmpresa, String contabilidade, InoutLogger logger) {
	if (qr_Contas__c.getSize() > 0) {
        for (SObject reg : qr_Contas__c.getRecords()) {
			
			try {
				String sCentro_Custo_Sera__c = "";
				Object oCentro_Custo_Sera__c = reg.getField("Centro_Custo_Sera__c");
				if (oCentro_Custo_Sera__c != null) sCentro_Custo_Sera__c = oCentro_Custo_Sera__c.toString();
				if (sCentro_Custo_Sera__c.equals("")) continue;
				
				SysProperties props = SysProperties.getInstance();
				props.load("contabil/" + contabilidade + "/contabil.properties");
				
				DataBase dbIOCont = null;
				dbIOCont = connectIOContabil(props, logger);
				
				insereTemCentroCusto(dbIOCont, codEmpresa);
				
				try {
					dbIOCont.closeConnection();
				} catch (Exception eedbIOCont) {}
				break;
			} catch (Exception e) {}
		}
	}
}