public class TemplateUtils {
    public static double lerValoresExtrasArquivoTxt(double valorDocumentoArray[], String line, JSONObject roteiroCRM, JSONObject futureObject) {
        //O futureObject serve para possibilitar futuras alteracoes sem que a assinatura do metodo seja modificada
        String [] indiceValores = roteiroCRM.optString("Colunas_de_Valores_Extras").split(";");
        double valorSomaArray = 0;

        for(int iv = 0; iv < indiceValores.length; iv++) {
            double denomidador = 0; 
            int indiceDenominador = -1;
            String sinal = "";
            boolean multiplica100 = false;
            boolean divide100 = false;
            
            if (indiceValores[iv].contains("*100")) multiplica100 = true;
            if (indiceValores[iv].contains("/100")) divide100 = true;
            indiceValores[iv] = indiceValores[iv].replace("*100","").replace("/100","");
            
            if (indiceValores[iv].contains("*")) sinal = "*";
            if (indiceValores[iv].contains("/")) sinal = "/";
            if (indiceValores[iv].contains("+")) sinal = "+";
            if (indiceValores[iv].contains("-")) sinal = "-";										

                                                    
            if (!sinal.equals("") && indiceValores[iv].contains(sinal)) {
                try {
                    if (!indiceValores[iv].contains("#")) {
                        String iDenominador = OicUtils.cutString(indiceValores[iv], sinal);
                        int iInicioDenominador = Integer.parseInt(OicUtils.cutString(iDenominador, "(", ","));
                        int iFinalDenominador    = Integer.parseInt(OicUtils.cutString(iDenominador, ",", ")"));

                        denomidador = Math.abs(DecimalUtil.toDecimal(OicUtils.cutString(line, iInicioDenominador, iFinalDenominador)));
                    }
                    else {
                        denomidador = DecimalUtil.toDecimal(OicUtils.cutString(indiceValores[iv], "#"));
                    }
                } catch (Exception xx) {denomidador = 0;}
                indiceValores[iv] = OicUtils.cutString(indiceValores[iv], 0, sinal);
            } 
                    
            
            try{
                int iInicioValorExtra = Integer.parseInt(OicUtils.cutString(indiceValores[iv], "(", ","));
                int iFinalValorExtra = Integer.parseInt(OicUtils.cutString(indiceValores[iv], ",", ")"));

				if (iInicioValorExtra >= line.length()){
					continue;
				}
			
				String valorExtraAux = OicUtils.cutString(line, iInicioValorExtra, iFinalValorExtra);

                //Trata a string do valor antes de converter para Double
                valorExtraAux = valorExtraAux.replaceAll("\\,", "\\.");
                valorExtraAux = valorExtraAux.replaceAll("[^0-9\\.]", "");
                while (OicUtils.quantityOf(valorExtraAux, ".") > 1) {
                    valorExtraAux = valorExtraAux.replaceFirst("\\.", "");
                }

                valorDocumentoArray[iv] = Math.abs(Double.valueOf(valorExtraAux));

                if (sinal.equals("*") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] * denomidador;
                if (sinal.equals("/") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] / denomidador;
                if (sinal.equals("+") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] + denomidador;
                if (sinal.equals("-") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] - denomidador;
                if (multiplica100) valorDocumentoArray[iv] = valorDocumentoArray[iv] * 100;
                if (divide100)     valorDocumentoArray[iv] = valorDocumentoArray[iv] / 100;
            }
            catch (Exception vlrd) { 
                valorDocumentoArray[iv] = 0; 
            }
            
            if(valorDocumentoArray[iv] < 0){
                valorDocumentoArray[iv] = 0;
            } 
            
            valorSomaArray += valorDocumentoArray[iv];
        }
        
        return valorSomaArray;
    }
	
	public static int verificaAba(String nomeArquivo) {
		int abaConvertida = 0;
		if (nomeArquivo.toUpperCase().startsWith("ABA_")) {
			return abaConvertida = Integer.parseInt(OicUtils.cutString(nomeArquivo.toUpperCase(), "ABA_", "_"));
		}
		return abaConvertida;
	}
	
	public static StringBuilder geraLinhaFiscalQuestor(JSONObject jDescricaoDupl) {
		return  new StringBuilder(jDescricaoDupl.optString("USAFILIAL").toUpperCase().equals("TRUE") ? 
					OicUtils.cutString(jDescricaoDupl.optString("CODEMPRESA"), "-") : jDescricaoDupl.optString("CODEMPRESA"))
				.append(";1;")
				.append(jDescricaoDupl.optString("CHAVEDUPLICATA")).append(";")
				.append(jDescricaoDupl.optString("PARCELADOC")).append(";")
				 // quando o formato da parcela deve ser igual ao duplicatas em aberto (questor) comentar linha acima e descomentar a linha abaixo
				 //txtFiscal.append(jDescricaoDupl.optString("PARCELADOCORIGINAL")); 
				.append(jDescricaoDupl.optString("DATAMOVIMENTO")).append(";")
				.append(jDescricaoDupl.optString("DATAMOVIMENTO")).append(";")
				.append(OicUtils.cutString(jDescricaoDupl.optString("DUPLICATA"), 0, "-")).append(";")
				.append(jDescricaoDupl.optString("VALORFINAL").replaceAll("\\.", ",")).append(";")
				.append(jDescricaoDupl.optString("VALORFINALJUROS").replaceAll("\\.", ",")).append(";")
				.append(jDescricaoDupl.optString("TABELACONTABIL")).append(";")
				.append(jDescricaoDupl.optString("CODIGOFORNECEDOR")).append(";")
				.append(jDescricaoDupl.optString("VALORFINALDESCONTO").replaceAll("\\.", ",")).append(";")
				.append(jDescricaoDupl.optString("VALORFINALMULTA").replaceAll("\\.", ",")).append("\r\n");
	}
	
	public static StringBuilder geraLinhaFiscalCordilheira(JSONObject jDescricaoDupl, ttMovimentoPadrao ttMov, boolean geraCabecalhoCordilheira) {
		
		return new StringBuilder(geraCabecalhoCordilheira ? 
			"DATA DE VENCIMENTO;DATA DO PAGAMENTO;CNPJ DO CLIENTE;DOCUMENTO;NOME/RAZAO;NUMERO DA PARCELA;VALOR ORIGINAL;VALOR PAGO;VALOR JUROS;VALOR DESCONTO;FORMA DE PAGAMENTO;NUMERO DA NOTA\r\n" : "")
			.append(jDescricaoDupl.optString("DATAVENCIMENTO")).append(";")
			.append(ttMov.dataMovimento).append(";")
			.append(ttMov.cpfCnpj).append(";")
			// quando o formato da parcela deve ser igual ao duplicatas em aberto (questor) comentar linha acima e descomentar a linha abaixo
			//txtFiscal[0].append(jDescricaoDupl.optString("PARCELADOCORIGINAL")); 
			.append(OicUtils.cutString(ttMov.documento, 0, "-")).append(";")
			.append(ttMov.nomeOrigem).append(";")
			.append(jDescricaoDupl.optString("PARCELADOC")).append(";")
			.append(jDescricaoDupl.optString("VALORPARCELA").replaceAll("\\.",",")).append(";")
			.append(String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto)).replaceAll("\\.",",")).append(";")
			.append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",",")).append(";")
			.append(String.format("%.2f",ttMov.valorDesconto).replaceAll("\\.",",")).append(";")
			.append(jDescricaoDupl.optString("TABELACONTABIL")).append(";")
			.append(ttMov.documento).append("\r\n");
	}
	
	public static StringBuilder geraLinhaFiscalContabit(JSONObject jDescricaoDupl, ttMovimentoPadrao ttMov) {
		return  new StringBuilder()
				.append(jDescricaoDupl.optString("CPFCNPJ")).append(",")
				.append(jDescricaoDupl.optString("EMISSAO")).append(",")
				.append(jDescricaoDupl.optString("DATAPAGAMENTO")).append(",")
				.append(jDescricaoDupl.optString("VALORFINALMULTA")).append(",")
				.append(jDescricaoDupl.optString("VALORFINALJUROS")).append(",")
				.append(jDescricaoDupl.optString("VALORFINALDESCONTO")).append(",")
				.append(jDescricaoDupl.optString("VALORPAGO")).append(",")
				.append(jDescricaoDupl.optString("DUPLICATA")).append("\r\n");
	}
	
	
	public JSONArray geraFiscalContabit(JSONObject roteiroCRMPrincipal, JSONObject jDadosAux, JSONArray jDescricaoDupl, DataBase dbIOCont, ttMovimentoPadrao ttMov, InoutLogger logger) throws Exception{
		
		JSONObject histobj = new JSONObject();
		
		JSONObject jDados = new JSONObject();
		jDados.put("CODEMPRESA",     jDadosAux.optString("CODEMPRESA"));
		
		if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  jDados.put("DATAVENCIMENTO", jDadosAux.optString("DATAVENCTTMOV")); 
		jDados.put("RAZAOSOCIAL",    jDadosAux.optString("RAZAOSOCIAL"));
		jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
		jDados.put("DOCUMENTO",      ttMov.documento);
		jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
		jDados.put("PARCELADOC",     ttMov.parcelaDoc);
		jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
		jDados.put("VALORJUROS",     ttMov.valorJuros);
		jDados.put("VALORMULTA",     ttMov.valorMulta);
		jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
		jDados.put("TABELACONTABIL", jDadosAux.optString("TABELACONTABIL"));
		
		jDescricaoDupl    = buscarIODuplicataContabit(jDados, dbIOCont, logger);
		
		// logger.logInfo("BIDC " + jDescricaoDupl.toString());
		return jDescricaoDupl;
	}
	
	public JSONObject geraFiscalQuestor (JSONObject roteiroCRMPrincipal, JSONObject jDadosAux, JSONObject jDescricaoDupl, DataBase dbIOCont, ttMovimentoPadrao ttMov, InoutLogger logger) throws Exception{
		
		JSONObject histobj = new JSONObject();
		
		JSONObject jDados = new JSONObject();
		jDados.put("CODEMPRESA",     jDadosAux.optString("CODEMPRESA"));

		// usando a filial do questor em duplicatas em aberto
		if (roteiroCRMPrincipal.optString("Usa_Filial_Questor").toUpperCase().equals("TRUE"))  jDados.put("CODEMPRESA",     jDadosAux.optString("CODEMPRESA") + "-%");

		if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  jDados.put("DATAVENCIMENTO", jDadosAux.optString("DATAVENCTTMOV")); 


		jDados.put("RAZAOSOCIAL",    jDadosAux.optString("RAZAOSOCIAL"));
		jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
		jDados.put("DOCUMENTO",      ttMov.documento);
		jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
		jDados.put("PARCELADOC",     ttMov.parcelaDoc);
		jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
		jDados.put("VALORJUROS",     ttMov.valorJuros);
		jDados.put("VALORMULTA",     ttMov.valorMulta);
		jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
		jDados.put("TABELACONTABIL", jDadosAux.optString("TABELACONTABIL"));
		
		//2308-014199 Refatoracao do validaFornecedorFiscal 
		if (!roteiroCRMPrincipal.optString("ValidaFornecedorFiscal").equals("")) {
			jDados.put("VALIDAFORNECEDORFISCAL", roteiroCRMPrincipal.optString("ValidaFornecedorFiscal"));
		}


		jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

		// #Fabrica(2019-05-20)
		// Descomentar a proxima linha para testar a razaoSocial do movimento com a jDescricaoDupl.optString("RAZAOSOCIAL") que vem das duplicatas em aberto!
		// if (jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, razaoSocial);      //IDENTIFICAMOS UMA FALHA LOGICA
		// if (jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem); //USAR ESSE
		// #Fabrica(2019-07-30)
		// Descomentar a proxima linha para testar o codigo de filial do movimento com a jDescricaoDupl.optString("SITUACAO") que vem das duplicatas em aberto! OBS: Lembrando que deve existir regra de c?digo filial no CRM
		// if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorFilial(jDescricaoDupl, ttMov.codFilial);
		// #Fabrica(2019-07-31)
		// Descomentar a proxima linha para testar data de vencimento  a jDescricaoDupl.optString("DATAVENCIMENTO") que vem das duplicatas em aberto! OBS: Complemento06, deve estar lendo a data de vencimento da planilha financeira

		// if (jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
		// if (roteiroCRMPrincipal.has("validaFornecedorFiscal")) jDescricaoDupl.put("VALIDAFORNECEDORFISCAL", roteiroCRMPrincipal.optInt("validaFornecedorFiscal"));
		// jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem);
		// }
		
		//2308-014199 Retirado para refatoracao do validaFornecedorFiscal 
		// if (jDescricaoDupl.optString("TIPO").equals("FISCAL") && !roteiroCRMPrincipal.optString("validaFornecedorFiscal").equals("")) {
			// jDescricaoDupl.put("VALIDAFORNECEDORFISCAL", roteiroCRMPrincipal.optInt("validaFornecedorFiscal"));
			// jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem);
		// }

		if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
			if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorDataVencimento(jDescricaoDupl, jDadosAux.optString("DATAVENCTTMOV"));
		}

		return jDescricaoDupl;
	}
	
	public static boolean validaData(String data) {
		if (data.matches("(0[1-9]|[1-2][0-9]|3[0-1])\\/(0[1-9]|1[0-2])\\/20[0-9]{2}")) {
			return true;
		}
		return false;
	}
	
	public static boolean verificaConversorNovo(String arquivoCompleto) {
        if (arquivoCompleto.contains("CARTAO:") && arquivoCompleto.contains("DETALHAMENTO DA SUA FATURA") &&
            arquivoCompleto.contains("BB.COM.BR") && arquivoCompleto.contains("BANCO DO BRASIL")) {
            return true; //FATURA CARTAO CREDITO BANCO DO BRASIL
        }

		return false;
	}
	
	public static boolean verificaConversorNovoTipoPlanilha(String tipoPlanilha) {
		if (tipoPlanilha.contains("OTTCARTAO")) {
			if (tipoPlanilha.contains("BANRICOMPRASPDF")) {
				return true;
			}
		}
		return false;
	}
	
	
	public static String getIdLote(String lote) {
		String idLote = OicUtils.cutString(lote, "ott_oud", lote.indexOf("ott_oud") + 16);//202302-0025707
		
		if (lote.contains("_id")) {
			if (lote.contains("ott_oud__id")) idLote = OicUtils.cutString(lote, "ott_oud__id", "_");//2308-011361
			if (lote.contains("ott_oud_id")) idLote = OicUtils.cutString(lote, "ott_oud_id", "_");//2308-011361
		} else {
			idLote = "";
		}
		
		return idLote;
	}
}
