{import: io_contabil.Database};
{import: io_contabil.RegrasSemCartoes};
{import: io_contabil.Duplicatas};
{import: io_contabil.Util};
{import: io_contabil.RunExtratosECartoes};
{import: io_contabil.Ottimizza_MeuCaixa};
{import: io_contabil.Lancamentos};
{import: io_contabil.TemplateUtils};
{import: io_contabil.OICUtils};


{import: io_contabil.Classes.Extrato};
// TEMPLATE 25.03.2024
// Colocado tipoPlanilha no Lote Encerrado
// colocado para trocar XLSX por CSV se marcado no roteiro 
 
public JSONArray run(InoutLogger logger) throws Exception {

	JSONArray  records  = new JSONArray();
	JSONObject ultimoJS = new JSONObject();

	// gera seguranca nas conexoes com Heroku
	// Create a trust manager that does not validate certificate chains
	javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[] {
		new javax.net.ssl.X509TrustManager(){
			public java.security.cert.X509Certificate[] getAcceptedIssuers(){ return null; }

			public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) { }

			public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) { }
		}
	};

	// Install the all-trusting trust manager
	try {
		javax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext.getInstance("TLS");
		sc.init(null, trustAllCerts, new java.security.SecureRandom());
		javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
	} catch (Exception e) {
		// 
	}
	
	
	// Carrega as propriedades
	SysProperties props = SysProperties.getInstance();
	SysProperties propsEmp = SysProperties.getInstance();
	JSONObject roteiroCRMPrincipal = getRoteiro();
	JSONObject roteiroCRM = getRoteiro();
	JSONObject jStatus = new JSONObject();
	
 
	props.load("contabil/" + roteiroCRM.optString("contabilidade") + "/contabil.properties");
	propsEmp.load("contabil/" + roteiroCRM.optString("contabilidade") + "/empresa.properties");

	//Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
	//Contectar na Base de Dados depara do heroku(nuvem)
	DBPostgreSQL dbIODepara = null;

 	String empresa = getNomeEmpresa();
	
	
	String codEmpresa = props.get(empresa + "_COD_EMPRESA");
	 
	if (codEmpresa == null) {
		empresa = propsEmp.get("NOME_EMPRESA").toUpperCase();
		codEmpresa = props.get(empresa + "_COD_EMPRESA");		
	}
	
	//#2303-002125
	//codEmpresa que sera utilizado para consultar o plano de contas
	String codEmpresaPlanoContas = codEmpresa;
	if (roteiroCRM.optString("contabilidade").toUpperCase().contains("CONTIBEMASSESSORIA")) {
		codEmpresaPlanoContas = "000";
	}
	//2312-024058
	if (roteiroCRM.optString("contabilidade").toUpperCase().contains("SETEC")) {
		codEmpresaPlanoContas = "000";
	}
 
	String tipoProduto = "";
	try {
		tipoProduto = props.get(empresa + "_TIPO_PRODUTO");
	} catch (Exception xx) {tipoProduto = "OIC_PACOTE";}
	
	
	if (tipoProduto.equals("")) tipoProduto = "OIC_PACOTE";
	if (tipoProduto.contains("IMPLANTA")) tipoProduto = "OIC_PACOTE";
	if (tipoProduto.contains("AVULSO")) tipoProduto = "OIC_PACOTE";
	
 	
	String processaOud = "";
	try {
		processaOud = props.get("PROCESSA_OUD");
	} catch (Exception e) {processaOud = "FALSE";}
	if (processaOud.equals("")) processaOud = "FALSE";

	String ERPContabil = props.get("ERP_CONTABILIDADE");
	String nomeEmpresa = props.get(empresa + "_NOME_EMPRESA");
	String cnpjEmpresa = props.get(empresa + "_CNPJ_EMPRESA");
	String emailResponsavel = props.get(empresa + "_EMAIL_RESPONSAVEL");
	String emailCanal = props.get("EMAIL_CANAL");
	String statusCRM = props.get(empresa + "_STATUS_CRM");
	String fornecedorUnico = props.get("FORNECEDOR_UNICO");
	
	String fazLcdpr = "";
	
	try {
		fazLcdpr = props.get(empresa+"_EQUIPE_FECHAMENTO");
	} catch (Exception e) {fazLcdpr = "FALSE";}

	if (fazLcdpr.toUpperCase().contains("LCDPR")) fazLcdpr = "TRUE";
	if (fazLcdpr.equals("")) fazLcdpr = "FALSE";
 	
	String mantemArquivo = propsEmp.get("MANTEM_ARQUIVO");
	if (mantemArquivo == null) mantemArquivo = "";
	
	String tipoLancamento = getNomeRota();
	if (tipoLancamento.toUpperCase().contains("PAGAS"))    tipoLancamento = "PAGAR";
	if (tipoLancamento.toUpperCase().contains("RECEBIDA")) tipoLancamento = "RECEBER";


	String compDirName = nomeEmpresa + "_#" + codEmpresa;
	String dirName = "";
	if (tipoLancamento.contains("PAGAR"))   dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/APagar";
	if (tipoLancamento.contains("RECEBER")) dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/AReceber";

	String backupDirName = dirName + "/Processado";

	boolean erroShrink = false;
	boolean geraCabecalhoCordilheira = true;
	boolean cabecalhoNaoEncontrada        = true;
	boolean apagaExtrato        = false;
	boolean apagaContaT         = false;
	boolean geraRegraPortador   = false;
	boolean comparaRazao        = false;
	boolean fazConciliacao		= false;
	boolean encontrouComplemento = true;
	boolean criaCabecalhoConciliacao = true;
	
	String tipoEmail            = "";
	String arquivoAgora         = tipoLancamento + "-" + DateUtil.dateToString(new Date(),"yyyyMMddhhmm");
	int    contadorArquivo      = 0;

	HashMap mapaLote			= new HashMap();
	HashMap mapaJuros   		= new HashMap();
	HashMap mapaPlano   		= new HashMap();
	HashMap mapaDePara			= new HashMap();
	HashMap mapaArquivo 		= new HashMap();
	HashMap mapaOficial			= new HashMap();
	HashMap mapaDesconto		= new HashMap();
	HashMap mapaVariavel		= new HashMap();
	HashMap mapaDocumento 		= new HashMap();
	HashMap mapaPartPlano 		= new HashMap();
	HashMap mapaFornecedor 		= new HashMap();
	HashMap mapaParticipante	= new HashMap();
	HashMap mapaParcelaDominio	= new HashMap();
	HashMap mapaConciliacao 	= new HashMap();

	JSONObject recordF = new JSONObject();


	String cruzaExtrato			= "";
	String Cruza_Extrato_com_Extrato = "";
	String mesAnoAnterior		= "";
	String mesAno2Anterior		= "";
	String mesAnoAtual			= "";
	int mesRef					= 0;
	int anoRef					= 0;
	String contaJuros			= "";
	String contaDesconto		= "";
	String contaMulta			= "";
	String contaTransitoria		= "";
	String contaEmpresaBranco	= "";
	String movimentoPortador	= "";
	String contaFixaDebito		= "";
	String contaFixaCredito		= "";
	String contaPortador		= "";		//pg - cred | rec - deb
	String contaMovimento		= "";		//pg - deb | rec - cred
	String tabelaContabil       = "";
	String dataMovimento        = "";
	String classificaPlano      = "";
	String classificaFornec     = "";
	String loteConciliacao 		= "";

	boolean geraFiscal			= false;
	String [] loteFiscal		= new String[20];
	boolean apagaStatus         = false;

	String Conta_Fixa_Cruzamento_Extrato = "";
	String contaInvertida	= "";
	String contaBuscaPlano	= "";
	String nomeArquivo      = "";
	String chave			= "";
	String classificacao	= "";
	String dataLote			= DateUtil.dateToString(new Date(),"yyyy-MM");
	String lote						= "";
 	String regraContaMovimento 		= "";
	String regraHistorico 			= "";
	String separadorCsv				= ";";
	String separadorTxt				= "";
	String tipoPlanilha				= "";
	String contaTemp				= "";
	String mesesdoAno			    = "JAN;FEV;MAR;ABR;MAI;JUN;JUL;AGO;SET;OUT;NOV;DEZ";
	boolean primeiroArquivo 		= true;
	boolean primeiraVezDuplicata	= true;
	boolean acumulouAntes			= false;
	boolean leuFinanceiro			= false;
	boolean dupliNaoEncontContabil	= false;
	boolean forcarPartidaDobrada	= false;
	boolean temOFX					= false;
	boolean temFiltro				= false;
	boolean temFiscal  				= false;
	boolean temLinhas               = false;
	boolean temIgnorar              = false;
	boolean logs = false;
	StringBuilder logsTxt = new StringBuilder();
	
	int abaConvertida = 0;
	
	String retornaPadroes = "";
	
	String zerarColAlternativo		= "";
	JSONObject deParaObj 			= new JSONObject();
	logger.logInfo("Template Empresa -> " + nomeEmpresa);
	//logger.logDebug("Padrao empresa " + mantemArquivo);
	try {

		// #DOCUMENTACAO
		// FOR leitura dos arquivos das extensoes abaixo
		// altera-se aqui para NAO LER xlsx por exemplo
		
		// liberado em 25/11/2020 @DiMaz
		// se precisar alterar somente as quantidades qX e qY 
		// cada unidade processa cerca de 3 arquivos ou seja 3 no qY processa uns 9 arquivos excel e uns 9 pdf por vez.
		// aumentar muito o XLSX pode causar TRAVAMENTOS
		int qX	= 9;	//ofx,csv,txt
		int qY	= 3;	//xlsx,pdf
		int qTotal = (qX*3)+(qY*2);
		String extensao = "";
		for(int extArquivo = 0; extArquivo < qTotal; extArquivo++) {
			if (extArquivo < qX)									extensao = ".ofx,.OFX,.omc,.OMC,.html,.HTML,.ret,.RET";
			if (extArquivo >= qX && extArquivo < (2*qX))			extensao = ".pdf,.PDF";
			if (extArquivo >= (2*qX) && extArquivo < (2*qX+qY))		extensao = ".xlsx,.XLSX";
			if (extArquivo >= (2*qX+qY) && extArquivo < (3*qX+qY))	extensao = ".txt,.TXT,.ret,.RET";
			if (extArquivo >= (3*qX+qY))							extensao = ".csv,.CSV"; 
			
			if (roteiroCRMPrincipal.has("ignoraExel") && roteiroCRMPrincipal.optString("ignoraExel").toUpperCase().equals("TRUE")) {
				extensao = extensao.replace(".XLSX",".CSV").replace(".xlsx",".csv");
			}			
			boolean ignoraAbas = false;
			
			// ------------------------------------------------------------------------------------------
			// colocado para nao ler pelo template mais de 3 planilhas xlsx por rodada
			// Motivo: quando tem planilha grande em excel para ler na personalizada
			// o sistema roda varias vezes a leitura da planilha no template e depois tudo de novo na personalizada.
			if (mantemArquivo.equals("SIM") && extensao.contains(".XLSX") && extArquivo > 20) continue;
			// ------------------------------------------------------------------------------------------
 
			for (int porAba = 0; porAba < 60; porAba++) {

				// #DOCUMENTACAO
				// tratamento de abas vindas do CRM
				
				String apagaArquivo		= backupDirName;
				String abasEspecificas	= roteiroCRMPrincipal.optString("Abas_Especificas");
				abasEspecificas 		= abasEspecificas.replace(",",";"); 

				if (mantemArquivo.equals("SIM")) abasEspecificas = "0;1;2;3;4;5;6;7;8;9;10";
				// if (mantemArquivo.equals("SIM")) abasEspecificas = "0;1";
				if (!extensao.contains("XLSX") || ignoraAbas)  abasEspecificas = "";

				// liberado em 25/11/2020 @DiMaz
				// tratar js.put("Abas_Especificas", "0-60");
				// grande numero de abas pode travar o nosso sistema
				String abasFor = "";
				if (!abasEspecificas.contains(";") && abasEspecificas.contains("-") && abasEspecificas.length() <= 7) {
					try {
						int a = Integer.parseInt(abasEspecificas.substring(0,abasEspecificas.indexOf("-")));
						int b = Integer.parseInt(abasEspecificas.substring(abasEspecificas.indexOf("-")+1));
						for (int k = a; k <= b; k++){
							if (k < b) abasFor += k+";";
							else abasFor += k;
						}
					} catch (Exception fr) {}
					if(!abasFor.equals("")) abasEspecificas = abasFor;
				}

				
				if (abasEspecificas.equals("")) {
					if (porAba > 0) break;
				}
				if (!abasEspecificas.equals("")) {
					if (!abasEspecificas.contains(String.valueOf(porAba))) {
						continue;
					}

					String ultimaAba = abasEspecificas;
					if (ultimaAba.contains(";")) ultimaAba = ultimaAba.substring(ultimaAba.lastIndexOf(";")+1).trim();
					if (!ultimaAba.equals(String.valueOf(porAba)) && extensao.contains(".XLSX")) apagaArquivo = null;
				}

				// #DOCUMENTACAO
				// auto ajuste do separador de CSV e TXt
				
				// logger.logInfo("Antes do separas"); apareceujwr
				
 
 				if(extensao.contains("CSV"))  separadorCsv = verificaSeparador(separadorCsv, dirName, extensao, props, logger);
  				if(extensao.contains("TXT"))  separadorTxt = verificaSeparador(separadorTxt, dirName, extensao, props, logger);
				
 
 				
				// #DOCUMENTACAO
				// carregamento do arquivo
				
				if (mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) apagaArquivo = null;
				// salva arquivo no hasmap para posterior eliminacao 

				
				FilesLoader fileLoader = new FilesLoader(dirName, extensao, apagaArquivo, true, logger);
				int[] abas = {porAba};
				fileLoader.setSheetsToRead(abas);
				try {
					fileLoader.loadFiles();
				} catch (Exception e) {
					// logger.logDebug("NAO CONVERTEU PDF " + e.getMessage());
					File file2 = new File(dirName);
					
					File []  arquivoParaConverter = file2.listFiles();
					if (FileUtil.dirHasFiles(dirName)) {
						for (File fl: arquivoParaConverter) {
							if (fl.getName().toUpperCase().contains(".PDF")) {
								LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
								// String idConversor  = TemplateUtils.getIdLote(fl.getName());
								// logger.logDebug("FOI PRO CONVERSORANTES " + fl.getName());
								boolean deubom = false;
								deubom = buscaProtocoloConversor("", apiWeb, tipoLancamento.toLowerCase(), fl.getName(), logger);
								try { 
									FileUtil.deleteFile(fl);
								} catch (Exception XX) {}

								if (deubom) break;
							}
						}
					}
				}
				try { forcarPartidaDobrada	= Boolean.parseBoolean(roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toLowerCase().trim()); } 
				catch (Exception bl) {forcarPartidaDobrada = false;}
				
				//2304-003551. Quando utiliza esse ERP ? obrigado a sem em partida dobrada.
				if (roteiroCRMPrincipal.optString("erpContabilidade").equals("DOMINIO2") || roteiroCRMPrincipal.optString("erpContabilidade").equals("ALTERDATA") || roteiroCRMPrincipal.optString("erpContabilidade").equals("CORDILHEIRA") || roteiroCRMPrincipal.optString("erpContabilidade").equals("LEDWARE")) {
                    forcarPartidaDobrada = true;
                }
				
				for (MemoryFile memFile: fileLoader.getMemFiles()) {
				
					// caso arquivo tenha mais de 250.000 linhas sera ignorado  . Xavier e Mello em 07.06.2023
					if (memFile.getTotalLines() > 250000 ){
						temLinhas = true;
						break;
					}			

					nomeArquivo = memFile.getFilename().replace("%","");
					
					// logger.logInfo("TEMPLATE NOME ARQUIVO == "+nomeArquivo);
					
					if (nomeArquivo.toUpperCase().startsWith("ABA_")) {
						
						abaConvertida = TemplateUtils.verificaAba(nomeArquivo);
						abasEspecificas = roteiroCRMPrincipal.optString("Abas_Especificas");
						
						// logger.logDebug("ACE " + nomeArquivo + " | " + abaConvertida + " | " + abasEspecificas);
						
						if (!abasEspecificas.equals("")) {
							if (!abasEspecificas.contains(String.valueOf(abaConvertida))) continue;
						}
					} else abaConvertida = porAba;
				
					contadorArquivo++;

					
					// =======================  =================   =======================
					// =======================  VARIAVEIS PADROES   =======================
					// =======================  =================   =======================
					String historico      = "";

					String codCcOrigem    = "";
					String cpfCnpj        = "";
					String nomeOrigem     = "";
					String nomePortador   = "";
					String nomePortador2  = "";
					String documento      = "";
					int    parcelaDoc     = 1;
					double valorDocumento = 0.00;
					double valorPagamento = 0.00;
					double valorDesconto  = 0.00;
					double valorJuros     = 0.00;
					double valorMulta     = 0.00;
					double valorAlternativo = 0;
					
					int icodCcOrigem    = -1;
					int icpfCnpj        = -1;
					int inomeOrigem     = -1;
					int inomePortador   = -1;
					int idocumento      = -1;
					int idataMovimento  = -1;
					int ivalorDocumento = -1;
					int ivalorAlternativo = -1;
					int ivalorPagamento = -1;
					int ivalorDesconto  = -1;
					int ivalorJuros     = -1;
					int ivalorMulta     = -1;
					int icomplemento01  = -1;
					int icomplemento02  = -1;
					int icomplemento03	= -1;
					int icomplemento04  = -1;
					int icomplemento05	= -1;
					int icomplemento06	= -1;
					int icomplemento07	= -1;
					int icomplemento08	= -1;
					int icomplemento09	= -1;
					int icomplemento10	= -1;
					int idataFake		= -1;

					String contaGetConta	= "";
					contaPortador	= "";		//pg - cred | rec - deb
					contaMovimento	= "";		//pg - deb | rec - cred 

					String complemento01	= "";
					String complemento02	= "";
					String complemento03	= "";
					String complemento04	= "";
					String complemento05	= "";
					String complemento06	= "";
					String complemento07	= "";
					String complemento08	= "";
					String complemento09	= "";
					String complemento10	= "";
					String codCentroCusto	= "";
					String codFilial        = "";

					double valorTotalDoc	= 0.0;
					double valorTotalJuros	= 0.0;
					double valorTotalDesc	= 0.0;
					
					double [] valorDocumentoArray = {0,0,0,0,0,0,0,0,0,0};  

					String classJur			= "";
					String classDes			= "";
					String classMul			= "";

					String codErroString	= "";
					int cont				= 0;
					int contAuxiliar		= 0;
					String linhasProblema	= "";
					String idEmpresa        = "";
					String idRoteiro  	    = "";

					String histAux			= "";
					String anoData			= "";
					boolean zerar			= true;
					boolean filtro			= true;
					

					String lerAposPrincipal   = "";
					boolean isLinhaPrincipal  = false;
					boolean ignorarAntes	  = false;
					boolean tratarComoExtrato = false;
					boolean tratarComoDesconto = false;
					boolean tratarComoJuros = false;

					dataMovimento        = "";

					double partidaDobradaJuros		= 0;
					double partidaDobradaDesconto	= 0;
					double partidaDobradaMulta		= 0;
					double valorSomaArray			= 0;

					String numSeparadorDuplicata = ""; //convertido em int depois
					
					StringBuilder cabecalhoPlanilha = new StringBuilder();
					StringBuilder cabecalhoRegra    = new StringBuilder(); // quarda pemanente as 9 primeiras linhas de cada planilha / aba
					
					int  	      contadorCabecalho = 0; 
					
					// #DOCUMENTACAO
					// definicao de separador do arquivo
					// se ouver separador em TXT deve ser tratado caso a caso
					// evitar usar tabulacao como separador 
					
					if(extensao.contains(".xlsx,.XLSX")) memFile.setFieldSeparator("\\|");
					if(extensao.contains(".pdf,.PDF"))   memFile.setFieldSeparator("\\|");
					if(extensao.contains(".csv,.CSV"))	 memFile.setFieldSeparator(separadorCsv);
					if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(separadorTxt);
					
					// if (codEmpresa.equals("9999")) memFile.setFieldSeparator(";");
					
					if (nomeArquivo.toUpperCase().contains(".PDF")) {
						
						// logger.logInfo("ARREPENDE " + nomeArquivo /*memFile.getLines().toString().contains("##$%#&") +*/  + " | " +  StringUtil.removeSpecialCharsToUC(memFile.getLines().toString().toUpperCase()));
						boolean rodaConversorNovo = TemplateUtils.verificaConversorNovo(StringUtil.removeSpecialCharsToUC(memFile.getLines().toString()).toUpperCase());
						// logger.logInfo("RCN " + rodaConversorNovo);
						if (rodaConversorNovo) {
							LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
							String idConversor  = TemplateUtils.getIdLote(nomeArquivo);
							// logger.logDebug("FOI PRO CONVERSOR1 " + nomeArquivo);
							boolean deubom = false;
							deubom = buscaProtocoloConversor(idConversor, apiWeb, tipoLancamento.toLowerCase(), nomeArquivo, logger);
							
							if (deubom) {
								File file2 = new File(dirName);
						
								File []  arquivoParaConverter = file2.listFiles();
								if (FileUtil.dirHasFiles(dirName)) {
									for (File fl: arquivoParaConverter) {
										if (fl.getName().toUpperCase().contains(nomeArquivo.toUpperCase())) {
											try { 
												FileUtil.deleteFile(fl);
											} catch (Exception XX) {}

											break;
										}
									}
								}
							}
							continue;
						}
					}
					
 					
					if(roteiroCRMPrincipal.has("delimitadorDoArquivo") && !roteiroCRMPrincipal.optString("delimitadorDoArquivo").equals("")) {
						if(extensao.contains(".txt,.TXT")) memFile.setFieldSeparator(roteiroCRMPrincipal.optString("delimitadorDoArquivo"));
					}
					
					//nao pode usar o line contem  ';' pois nao existe line neste ponto ainda.
					if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO")) {
						if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(";");
					}
 					
					String abaArquivo = String.valueOf(abaConvertida);
					if (abaConvertida == 0) abaArquivo = "0";

					// colocado para nao importar 2x o mesmo arquivo e mesma aba
					ttArquivo ttArq    = (ttArquivo)mapaArquivo.get(abaArquivo+"-"+nomeArquivo+"-"+abaArquivo);
					if (ttArq          == null) {
						ttArq          = new ttArquivo();
						ttArq.arquivo  = abaArquivo+"-"+nomeArquivo+"-"+abaArquivo;
					
					} else continue;
					mapaArquivo.put(abaArquivo+"-"+nomeArquivo+"-"+abaArquivo,ttArq);
					
					// putStatus(dirName, "01--Etapa 1 de 4--" + tipoLancamento + ".status", jStatus, logger);
					// logger.logDebug("NAAQ " + nomeArquivo.toUpperCase() + " | " + extensao + " | " + separadorCsv);
	
					// #DOCUMENTACAO
					// conecta ao BANCO DE DADOS
					if (dbIOCont == null) {
						dbIOCont = connectIOContabil(props, logger);
					}

					if (dbIODepara == null) {
						dbIODepara = connectDeParaDb(logger);
					}
					
					if(primeiroArquivo) {
						limparIORoteiro(codEmpresa, tipoLancamento, dbIOCont, logger);
						primeiroArquivo = false;
					}

					//########################################################################

					contaJuros		    = roteiroCRM.optString("contaFixaJuros");
					contaFixaCredito    = roteiroCRM.optString("contaFixaCredito");
					contaFixaDebito     = roteiroCRM.optString("contaFixaDebito");
					contaDesconto 	    = roteiroCRM.optString("contaFixaDesconto");
					contaMulta		    = roteiroCRM.optString("contaFixaMulta");
					idEmpresa      	    = roteiroCRM.optString("idEmpresa");
					idRoteiro   	    = roteiroCRM.optString("idRoteiro");
					movimentoPortador   = roteiroCRM.optString("movimentoPortador");
					classificaPlano     = roteiroCRM.optString("classificaPlano");
					classificaFornec    = roteiroCRM.optString("classificaFornec");
					cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
					Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
					numSeparadorDuplicata   = roteiroCRM.optString("Coluna_Valor_Duplicata_Dominio");

					tipoPlanilha = "MOVIMENTO";
					boolean enviaEmailExtrato = false;
					boolean naoLeMais = false;

					tipoEmail = "CLIENTE";
					if (nomeArquivo.toUpperCase().contains("OTTIMIZZA"))  tipoEmail = "CANAL";
					if (nomeArquivo.toUpperCase().contains("OTTIMIZZAF")) tipoEmail = "SUPORTE";

					String debitoCredito   		 = "";
					String chaveExtrato    		 = ""; 

					//if(roteiroCRM.has("contaBuscaPlano"))contaBuscaPlano = roteiroCRM.optString("contaBuscaPlano"); 

					// =======================  ========================   =======================
					// =======================  VARIAVEIS PERSONALIZADAS   =======================
					// =======================  ========================   =======================


					JSONObject objetoParametro = new JSONObject();

					// #DOCUMENTACAO
					// busca de indices da planilha principal
					if (tipoPlanilha.equals("MOVIMENTO")) {
						roteiroCRM = getRoteiro();

						inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
						idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
						inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
						idocumento      = getIndice("documento", idocumento, roteiroCRM);
						ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
						ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
						ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
						ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
						icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
						ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
						ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
						icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
						icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
						icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
						icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
						icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
						icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
						icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
						icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
						icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
						icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
						idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
						icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);
						
						zerar 			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
					}
					jStatus = new JSONObject();
					// logger.logDebug("PUTSTATUS 524 " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba + " | " + memFile.getTotalValidLines());
					if (memFile.getTotalValidLines() > 0) {
						// logger.logDebug("PUTSTATUS 527 " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba + " | " + memFile.getTotalValidLines());
						putStatus(dirName, "", jStatus, logger);
					}
					try{
						// #DOCUMENTACAO
						// leitura linha a linha
						while (memFile.hasNextLine()) {
							// logger.logDebug("PUTSTATUS WHILE " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba);
							try {
								String line = memFile.nextLine();
								line = StringUtil.removeSpecialCharsToUC(line);
								
								// logger.logDebug("Line -> "+tipoPlanilha + "<<>>" + porAba + "<<>>" + cutString(line,0,30));
								// logger.logDebug("TP = "+tipoPlanilha+" | LN = "+line);
								// JWR colocado para nao ocorrer mais casos de lentidao absurda em planilhas que nao conseguiram ler nenhum lancamento ate a linha 500
								contAuxiliar ++;
								
								contadorCabecalho++;
								if (contadorCabecalho<15) {
									cabecalhoPlanilha.append(line).append(" "); 
									cabecalhoRegra.append(stringNormalizer(line.replaceAll("\\|","").replaceAll("\"","").replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replaceAll("  ", " "), true)).append(" "); 
								}
								else {
									cabecalhoPlanilha = new StringBuilder();
									
									// ganha performance nao tendo que ler a planilha vezes pelo template se nao for roteiro secundario 
									if (mantemArquivo.equals("SIM") && tipoPlanilha.equals("MOVIMENTO") && abaConvertida > 2) ignoraAbas = true;
								}
								// logger.logDebug("PUTSTATUS 550");
								if (cont < 10)   putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + "-" + cont + ".status", jStatus, logger);  
								
								// JWR colocado para nao ocorrer mais casos de lentidao absurda em planilhas que nao conseguiram ler nenhum lancamento ate a linha 500
								if (cont == 0 && contAuxiliar == 500) {
									break;
								}
								   

								////////////////////////////////////////////////////////////////////////////////
								///////////////////////////////////////////////////////////// INICIO DOS PADROES
								////////////////////////////////////////////////////////////////////////////////
								
								JSONObject jDadosPadrao = new JSONObject();
								jDadosPadrao.put("TIPOLANCAMENTO", tipoLancamento).put("NOMEEMPRESA",nomeEmpresa)
											.put("CODEMPRESA", codEmpresa).put("CONTABILIDADE", roteiroCRM.optString("contabilidade"))
											.put("NOMEARQUIVO", nomeArquivo);
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								//LEITURA PADRAO ARQUIVOS .OMC
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--								
								if (nomeArquivo.toUpperCase().contains(".OMC")) {
 
									tipoPlanilha = "OTT-MEUCAIXA";
									jDadosPadrao.put("TIPOPLANILHA",   tipoPlanilha);
									
									// logger.logInfo("2 de 4 = NA = "+nomeArquivo);
 
									mapaVariavel = readOttimizzaMeuCaixa(memFile, dbIOCont, jDadosPadrao, mapaVariavel, logger);
									jStatus = new JSONObject();
									putStatus(dirName, "",  new JSONObject(), logger);
									// salva arquivo no hasmap para posterior eliminacao 
									ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
									if (ttArq          == null) {
										ttArq          = new ttArquivo();
										ttArq.arquivo  = nomeArquivo;
										
									}
									// if(roteiroCRM.optString("empresa").toUpperCase().contains("POSTOBRAGA")){//yuri
										cruzaExtrato = "FALSE";
										Cruza_Extrato_com_Extrato = "FALSE";
									// }
									
									mapaArquivo.put(nomeArquivo,ttArq);
									// double tempoInicio1 = System.currentTimeMillis();
									// logger.logDebug("Tempo Rota2; " + String.format("%.2f", (System.currentTimeMillis() - tempoInicio1) / 1000));
									break;
								}

								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								//LEITURA PADRAO ARQUIVOS .OFX
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								
								// quando se mantem o arquivo, somente devem ser processados arquivos padroes
								// planilhas do rotiero movimento (principal), OFX e demais devem ficar para a rota normal
								// logger.logDebug("NAOFX NO TEMPLATES " + nomeArquivo.toUpperCase() + " | " + mantemArquivo + " | " +tipoProduto);
								if (nomeArquivo.toUpperCase().contains(".OFX")) {
									
									if (!mantemArquivo.equals("SIM") || !tipoProduto.equals("OIC_PACOTE")) {
										tipoPlanilha = "EXTRATO-OFX";
										

										// quando o OFX vem em apenas 1 linha todas as informacoes
										// quebramos linha e geramos um novo arquivo para gerar como um ofx normal
										if (line.contains("ACCTID")) {
											String fileOfx = dirName + "/" + nomeArquivo.toLowerCase().replaceAll(".ofx","_2.ofx");
											FileWriter writer = new FileWriter(fileOfx);
											writer.writeNewFile(line.replaceAll("><",">\r\n<"));	
										}
										putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", new JSONObject(), logger);     putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", jStatus, logger);
										jDadosPadrao.put("CODEMPRESA", codEmpresa).put("TIPOLANCAMENTO", tipoLancamento)
													.put("NOMEEMPRESA", nomeEmpresa).put("NOMEARQUIVO", nomeArquivo);
										if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) jDadosPadrao.put("CHECKNUM", "CHECKNUM");	//usar para retornar o documento do OFX no complemento02
										readOFXDefault(memFile, jDadosPadrao, dbIOCont, logger);
										jStatus = new JSONObject();
										// logger.logDebug("PUTSTATUS 615");
										putStatus(dirName, "",  new JSONObject(), logger);
										temOFX = true;
										break;
									}
									
									// quando FOR OFX e estiver rodando pelo template
									// e a empresa for OIC pacote rodar pela especifica, entao foi dado um break para agili
									if (mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
										break;
									}
									
								}
								
								// quando se mantem o arquivo, somente devem ser processados arquivos padroes
								// planilhas do roteiro movimento (principal), OFX e demais devem ficar para a rota normal
								// if(codEmpresa.equals("3673")){
									// logger.logDebug("mAATEMPLATE " + mantemArquivo + " | " + tipoProduto + " | " + apagaArquivo + " | " + roteiroCRM.optString("Planilhas_Padroes") + " | " + tipoPlanilha + " | " + tipoProduto);									
								// }
 								/*if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null  || (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE"))) {
								// if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && abaConvertida == 0)  // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

 
									JSONObject variaveis = new JSONObject();
									variaveis.put("line", 			line);
									variaveis.put("anoData", 		anoData); 
									variaveis.put("dirName", 		dirName);
									variaveis.put("jStatus", 		jStatus);
									variaveis.put("extensao", 		extensao);
									variaveis.put("codEmpresa", 	codEmpresa);
									variaveis.put("nomeArquivo", 	nomeArquivo);
									variaveis.put("nomeEmpresa", 	nomeEmpresa);
									variaveis.put("nomePortador", 	nomePortador);
									variaveis.put("tipoPlanilha", 	tipoPlanilha);
									variaveis.put("complemento01", 	complemento01);
									variaveis.put("complemento02", 	complemento02);
									variaveis.put("nomePortador2", 	nomePortador2);
									variaveis.put("tipoLancamento", tipoLancamento);
									variaveis.put("cabecalhoPlanilha", cabecalhoPlanilha.toString());																		
																		
									String retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);
									
									//logger.logDebug("CHAMOU O TEMPLATE " + retornaPadroes);
 
									JSONObject objRetorno = new JSONObject(retornaPadroes);
									if (objRetorno.has("tipoRetorno")) {
										anoData        = objRetorno.optString("anoData");
										retornaPadroes = objRetorno.optString("tipoRetorno");
										nomePortador   = objRetorno.optString("nomePortador").trim();
										complemento01  = objRetorno.optString("complemento01").trim();
										nomePortador2  = objRetorno.optString("nomePortador2").trim();
									}
									// logger.logDebug("NP2 == "+nomePortador2);
									if (retornaPadroes.equals("continue")) continue;
									if (retornaPadroes.equals("break"))   {
										jStatus = new JSONObject();
										logger.logDebug("PUTSTATUS 657");
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								}*/
								if(codEmpresa.contains("409")) logger.logInfo("CP == "+cabecalhoPlanilha.toString());
								if (!cabecalhoPlanilha.toString().equals("") && (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null  || (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")))) {
								// if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && abaConvertida == 0)  // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

									JSONObject variaveis = new JSONObject();
									variaveis.put("line", line).put("anoData", anoData).put("dirName", dirName).put("jStatus", jStatus)
											 .put("extensao", extensao).put("codEmpresa", codEmpresa).put("nomeArquivo", nomeArquivo)
											 .put("nomeEmpresa", nomeEmpresa).put("nomePortador", nomePortador).put("tipoPlanilha", tipoPlanilha)
											 .put("complemento01", complemento01).put("complemento02", complemento02)
											 .put("nomePortador2", nomePortador2).put("tipoLancamento", tipoLancamento)
											 .put("cabecalhoPlanilha", cabecalhoPlanilha.toString());									
									
									// if (codEmpresa.contains("104")) {
										// roteiroCRM.put("Planilhas_Padroes", "Extrato_C6Bank_PDF");
									// }
									
									// logger.logDebug("nome do arquivo " + nomeArquivo);
									
									// logger.logInfo("LN TEMPLATE = "+line);
									
									retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);
									
									
									// logger.logDebug("retorna padroes -> " + retornaPadroes);
									
									
									// logger.logDebug("CHAMOU O TEMPLATE " + retornaPadroes);
 
									JSONObject objRetorno = new JSONObject(retornaPadroes);
									if (objRetorno.has("tipoRetorno")) {
										anoData        = objRetorno.optString("anoData");
										retornaPadroes = objRetorno.optString("tipoRetorno");
										nomePortador   = objRetorno.optString("nomePortador").trim();
										complemento01  = objRetorno.optString("complemento01").trim();
										nomePortador2  = objRetorno.optString("nomePortador2").trim();
									}
									
									// logger.logDebug("NP23 " + nomePortador + " | " + nomePortador2);
									
									// logger.logDebug("NP2 ==== "+nomePortador2);
									if (retornaPadroes.equals("continue")) continue;
									if (retornaPadroes.equals("break"))   {
										jStatus = new JSONObject();
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								}

								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~-
								//                      LEITURA PADRAO DE DUPLICATAS
								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~-
								if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && !mantemArquivo.equals("SIM")){

 
									jDadosPadrao.put("erpContabilidade", roteiroCRMPrincipal.optString("erpContabilidade"))
												.put("LINE", line).put("PRIMEIRAVEZ", primeiraVezDuplicata).put("DIRNAME", dirName)
												.put("TIPOPLANILHA", tipoPlanilha).put("TIPOLANCAMENTO", tipoLancamento);
									
									if (!numSeparadorDuplicata.equals("")) jDadosPadrao.put("NUMSEPARADOR", numSeparadorDuplicata);
									
									if (!roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("NAO USAR")) {
										jDadosPadrao.put("CONTROLAPARCELA",  true);  

									} 
 
									primeiraVezDuplicata = leituraDuplicataPadrao(jDadosPadrao, memFile, mapaVariavel, dbIOCont, logger);

									if(!primeiraVezDuplicata){
										jStatus = new JSONObject();
										// logger.logDebug("PUTSTATUS 687");
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								} 
								
								if (cont < 2) {
									// logger.logDebug(StringUtil.removeSpecialCharsToUC(memFile.getLines().toString()));
									if (TemplateUtils.verificaConciliacao(StringUtil.removeSpecialCharsToUC(memFile.getLines().toString()))) {
										mapaConciliacao = leituraConciliacao(mapaConciliacao, memFile, logger);
										fazConciliacao = true;
										break;
									}
								}

								//implementa leitura do arquivo de participantes lcdpr
								if (roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO") && !mantemArquivo.equals("SIM")) {
									if (fazLcdpr.equals("TRUE") && cont < 2) {
										if (memFile.getLines().toString().toUpperCase().contains("RELACAO DE PARTICIPANTES DA ATIVIDADE RURAL")){
											mapaParticipante = leituraLivroCaixaDigitalProdutorRural(mapaParticipante, memFile, logger);
											break;
										}
									}
									/// BUSCA COTNRATOS EM ABERTO (RECEBIMENTOS) PARA BAIXA DE CONTRATOS IMOBILIARIOS
									if(roteiroCRM.optString("Integracao_contratos").toUpperCase().contains("TRUE")) {
										
										if (line.contains("DOCUMENTO") && 
											line.contains("EMISSAO") && 
											line.contains("V. PARCELA") && 
											line.contains("DEVOLUCAO") && 
											line.contains("SALDO") && 
											line.contains("SITUACAO")) {
											

											tipoPlanilha = "DUPLICATA-DOMINIO"; 

											if(primeiraVezDuplicata) limparIODuplicataTipoPlanilha(codEmpresa, dbIOCont, tipoPlanilha, logger);

											JSONObject jIndices = new JSONObject();
												
											jIndices.put("IVENCIMENTO", 9).put("INOMEORIGEM", 4).put("IDUPLICATA", 4).put("IVALORPARCELA", 12)
													.put("CODEMPRESA", codEmpresa).put("TIPOPLANILHA", tipoPlanilha);

											primeiraVezDuplicata = inserirIODuplicata_DominioPlanilha02(jIndices, memFile, dbIOCont, logger);
											primeiraVezDuplicata = false;
											jStatus = new JSONObject();
											// logger.logDebug("PUTSTATUS 730");
											putStatus(dirName, "", jStatus, logger);

											break;
										}
									}
								}
																
								
									
								////////////////////////////////////////////////////////////////////////////////
								//////////////////////////////////////////////////////////////// FIM DOS PADROES
								////////////////////////////////////////////////////////////////////////////////
								
								// #DOCUMENTACAO
								// lipeza de variaveis e de indices ao mudar de TIPOPLANILHA
								// logger.logDebug("CPTS " + cabecalhoPlanilha.toString());
								JSONObject jDadosObj = new JSONObject();
								if(!tipoPlanilha.equals(getTipoPlanilha(cabecalhoPlanilha.toString() + " " + line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj))){
									inomeOrigem			= -1;		nomeOrigem		= "";
									idataMovimento		= -1;		dataMovimento	= "";
									inomePortador		= -1;		nomePortador	= "";
									idocumento			= -1;		documento		= "";
									icpfCnpj			= -1;		cpfCnpj			= "";
									icodCcOrigem		= -1;       codCcOrigem		= "";
									icomplemento01		= -1;      	complemento01	= "";
									icomplemento02		= -1;      	complemento02	= "";
									icomplemento03		= -1;      	complemento03	= "";
									icomplemento04		= -1;      	complemento04	= "";
									icomplemento05		= -1;      	complemento05	= "";
									icomplemento06		= -1;      	complemento06	= "";
									ivalorDocumento		= -1;		complemento07	= "";
									ivalorAlternativo	= -1;		complemento08	= "";
									ivalorJuros			= -1;		complemento09	= "";
									ivalorDesconto		= -1;		complemento10	= "";
									ivalorMulta			= -1;
									ivalorPagamento		= -1;
									idataFake			= -1;
								}
								// #DOCUMENTACAO
								// busca tipoplanilha e indices da planilhas secundarias
								
								tipoPlanilha = getTipoPlanilha(cabecalhoPlanilha.toString() + " " + line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj);
								if(codEmpresa.equals("214")){
									logger.logInfo("214 = TP -> "+tipoPlanilha+" | LN = "+line);
								}
								
								if (nomeArquivo.toUpperCase().contains(".PDF") && !nomeArquivo.toUpperCase().contains(".CSV")) {
									if (TemplateUtils.verificaConversorNovoTipoPlanilha(tipoPlanilha)) {
										LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
										String idConversor  = TemplateUtils.getIdLote(nomeArquivo);
										// logger.logDebug("FOI PRO CONVERSOR1 " + nomeArquivo);
										boolean deubom = false;
										deubom = buscaProtocoloConversor(idConversor, apiWeb, tipoLancamento.toLowerCase(), nomeArquivo, logger);
										
										if (deubom) {
											File file2 = new File(dirName);
									
											File []  arquivoParaConverter = file2.listFiles();
											if (FileUtil.dirHasFiles(dirName)) {
												for (File fl: arquivoParaConverter) {
													if (fl.getName().toUpperCase().contains(".PDF")) {
														try {
															FileUtil.deleteFile(fl);
														} catch (Exception XX) {}
														break;
													}
												}
											}
										}
										continue;
									}
								}
								
								//#2306-007459
								if(tipoPlanilha.contains("CARTAO_SIPAG7") && extensao.contains("CSV")){
									memFile.setFieldSeparator(";");
								}
 
								if(!tipoPlanilha.equals("MOVIMENTO")){
									roteiroCRM = buscaRoteiro("getRoteiro"+tipoPlanilha, logger);
									inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
									idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
									inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
									idocumento      = getIndice("documento", idocumento, roteiroCRM);
									ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
									ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
									ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
									ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
									icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
									ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
									ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
									icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
									icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
									icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
									icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
									icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
									icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
									icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
									icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
									icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
									icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
									idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
									icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);
									
									zerar			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
									
									
									// Em casos onde a planilha secund?ria precisa de uma aba espec?fica descomentar essa linha
									if(!roteiroCRM.optString("Abas_Especificas").equals("") && !roteiroCRM.optString("Abas_Especificas").contains(String.valueOf(abaConvertida))) continue;

								}
								
								if(nomeArquivo.toUpperCase().contains("OTTIMIZZA")){
									if(!logsTxt.toString().contains("MANTEMARQUIVO"))logsTxt.append("STATUS;DATA;VALOR;DOCUMENTO;CLIENTE/FORNECEDOR;PORTADOR;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;COMPLEMENTO06;TIPOPLANILHA;MANTEMARQUIVO;PROCESSAOUD;LINHA;");
									logs = true;
								}

								// #DOCUMENTACAO
								// tratamento de "Agrupar Colunas Excel" e "Agrupar a partir da coluna"
								try {
									fazerShrinkDelimitandoPosicoes(roteiroCRM, memFile);
								} catch (IllegalArgumentException e) {
									//TODO: handle exception
									erroShrink = true;
									logger.logError("Deu ruim no shrink \n"+e);
									break;
								}
								/////////////////////////////
								// VALIDACAO POR CABECALHO //
								/////////////////////////////
 

 								inomeOrigem		= getIndiceCabecalho("nomeOrigem", inomeOrigem, memFile, roteiroCRM);
								idataMovimento	= getIndiceCabecalho("dataMovimento", idataMovimento, memFile, roteiroCRM);
								inomePortador	= getIndiceCabecalho("nomePortador", inomePortador, memFile, roteiroCRM);
								idocumento		= getIndiceCabecalho("documento", idocumento, memFile, roteiroCRM);
								ivalorDocumento	= getIndiceCabecalho("valorDocumento", ivalorDocumento, memFile, roteiroCRM);
								ivalorJuros		= getIndiceCabecalho("valorJuros", ivalorJuros, memFile, roteiroCRM);
								ivalorDesconto	= getIndiceCabecalho("valorDesconto", ivalorDesconto, memFile, roteiroCRM);
								ivalorMulta		= getIndiceCabecalho("valorMulta", ivalorMulta, memFile, roteiroCRM);
								ivalorAlternativo = getIndiceCabecalho("valorAlternativo", ivalorAlternativo, memFile, roteiroCRM);
								ivalorPagamento	= getIndiceCabecalho("valorPagamento", ivalorPagamento, memFile, roteiroCRM);
								icodCcOrigem	= getIndiceCabecalho("codCcOrigem", icodCcOrigem, memFile, roteiroCRM);
								
								icomplemento01	= getIndiceCabecalho("complemento01", icomplemento01, memFile, roteiroCRM);
								icomplemento02	= getIndiceCabecalho("complemento02", icomplemento02, memFile, roteiroCRM);
								icomplemento03	= getIndiceCabecalho("complemento03", icomplemento03, memFile, roteiroCRM);
								icomplemento04	= getIndiceCabecalho("complemento04", icomplemento04, memFile, roteiroCRM);
								icomplemento05	= getIndiceCabecalho("complemento05", icomplemento05, memFile, roteiroCRM);
								icomplemento06	= getIndiceCabecalho("complemento06", icomplemento06, memFile, roteiroCRM);
								icomplemento07	= getIndiceCabecalho("complemento07", icomplemento07, memFile, roteiroCRM);
								icomplemento08	= getIndiceCabecalho("complemento08", icomplemento08, memFile, roteiroCRM);
								icomplemento09	= getIndiceCabecalho("complemento09", icomplemento09, memFile, roteiroCRM);
								icomplemento10	= getIndiceCabecalho("complemento10", icomplemento10, memFile, roteiroCRM);
								idataFake		= getIndiceCabecalho("dataFake", idataFake, memFile, roteiroCRM);
								icpfCnpj		= getIndiceCabecalho("cpfCnpj", icpfCnpj, memFile, roteiroCRM);
								
								isLinhaPrincipal = false;
								ignorarAntes = false;

								JSONObject histobj = new JSONObject();
								lerAposPrincipal = roteiroCRM.optString("lerAposPrincipal").toUpperCase();

								// #DOCUMENTACAO
								// ignorar antes
								if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO")) {

									histobj.put("nomeOrigem", getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger));
									histobj.put("documento", getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger));
									histobj.put("complemento01", getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger));
									histobj.put("complemento02", getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger));
									histobj.put("complemento03", getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger));
									histobj.put("complemento04", getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger));
									histobj.put("complemento05", getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger));
									histobj.put("complemento06", getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger));
									histobj.put("nomePortador", getCampoString(nomePortador,	inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger));
									histobj.put("dataMovimento", "").put("mesAnoAnterior", "").put("mesAno2Anterior", "")
										   .put("mesAnoAtual", "").put("contaMovimento", "").put("contaPortador", "").put("contaDebito", "")
										   .put("contaCredito", "").put("contaJuros", contaJuros).put("contaDesconto", contaDesconto)
										   .put("contaMulta", contaMulta).put("valorDocumento", "").put("valorJuros", "")
										   .put("valorDesconto", "").put("valorMulta","").put("codFilial", "")
										   .put("numeroAba", String.valueOf(abaConvertida)).put("tipoPlanilha", tipoPlanilha)
										   .put("nomeArquivo", nomeArquivo.toUpperCase());

									ignorarAntes = getTratarLinhaIgnorar(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento,
																		 getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger),
																		 getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger), histobj);

									if (ignorarAntes) continue;

									double valorValido = 0;
									try{valorValido = Math.abs(memFile.getDoubleField(ivalorDocumento));}
									catch (Exception vlrd) { valorValido = 0; }

									if(ivalorDocumento < 0 && ivalorPagamento >= 0){
										try{valorValido = Math.abs(memFile.getDoubleField(ivalorPagamento));}
										catch (Exception vlrd) { valorValido = 0; }
									}


									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&  valorValido > 0) isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !histobj.optString("nomeOrigem").equals("")) isLinhaPrincipal = true;

								}

								if (naoLeMais) continue;
								if (tipoPlanilha.equals("")) continue;
								

								// #DOCUMENTACAO
								// leitura de xlsx e csv
								if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || (!roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA ("))) {
									zerar 			  = !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
 									
									// #Fabrica(2019-05-20)
									if (tipoPlanilha.contains("OTTCARTAO")) {
										try{
											String auxMes 	  = getMonth(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "));
											if(auxMes.length() == 2 && !auxMes.equals(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "))){
												dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "), auxMes).replaceAll(" ", "/");
											}else if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).length() > 11 
											 && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains("/") 
											 && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains(",")
											 && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains(":")){
												dataMovimento     = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), 0, memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).lastIndexOf("/")+5);
											}else{
												dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
											}
											if(tipoPlanilha.contains("CARTAO_ALELO2")){
												if(dataMovimento.equals("")){
													String dataAux = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), 0, ".");
													Date dt = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
													int datanum = Integer.parseInt(dataAux);
													Calendar calSerial = Calendar.getInstance();
													calSerial.setTime(dt);
													calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
													dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
												}
											}

											
											 
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
										}catch(Exception e){
											// dataMovimento   = "";
											// dataLote        = "";
										}
									}
									
									if (!tipoPlanilha.contains("OTTCARTAO")) {
										// #Fabrica(2019-05-20)
										try{
											//dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
											dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
										}catch(Exception e){
											// dataMovimento   = "";
											// dataLote        = "";
										}
									}
									if (tipoLancamento.contains("PAGAR")&& memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA RECEBIMENTO") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("DOCUMENTO")
										&& memFile.getStringFieldRemoveEspCharsUpper(2).contains("CLIENTE /  DESCRICAO RECEITA") && memFile.getStringFieldRemoveEspCharsUpper(3).contains("DETALHES DO RECEBIMENTO")
										&& memFile.getStringFieldRemoveEspCharsUpper(4).contains("VALOR ORIGINAL") && memFile.getStringFieldRemoveEspCharsUpper(5).contains("VALOR RECEBIDO")
										&& memFile.getStringFieldRemoveEspCharsUpper(6).contains("BANCO (PORTADOR)") && memFile.getStringFieldRemoveEspCharsUpper(7).contains("CATEGORIA (RECEITA)")){
										break;
									}
									
									
									if (tipoLancamento.contains("RECEBER")&& memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA PAGAMENTO") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("DOCUMENTO")
										&& memFile.getStringFieldRemoveEspCharsUpper(2).contains("FORNECEDOR /  DESCRICAO PAGAMENTO") && memFile.getStringFieldRemoveEspCharsUpper(3).contains("DETALHES DO PAGAMENTO")
										&& memFile.getStringFieldRemoveEspCharsUpper(4).contains("VALOR ORIGINAL") && memFile.getStringFieldRemoveEspCharsUpper(5).contains("VALOR PAGO")
										&& memFile.getStringFieldRemoveEspCharsUpper(6).contains("BANCO (PORTADOR)") && memFile.getStringFieldRemoveEspCharsUpper(7).contains("CATEGORIA (DESPESA)")){
										break;
									}
									// logger.logDebug("TP -> "+tipoPlanilha+" - Empresa -> "+nomeEmpresa+" - DM -> "+line);
									
									
 								   
									// leitura de data mantida por seguranca
									// String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger).trim();
									// if (!dataString.equals("")) {
									// 	String dataMovimentoAux	  = getCampoDate(dataString);
									// 	if (dataMovimentoAux.contains("/")) {
									// 		dataMovimento     = getCampoDate(dataString);
									// 		dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
									// 	}
									// }

									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals("")) isLinhaPrincipal = true;
								
									
									if (!zerarColAlternativo.equals("")) {
										if (zerarColAlternativo.contains("documento"))		documento		= "";
										if (zerarColAlternativo.contains("nomeOrigem"))		nomeOrigem		= "";
										if (zerarColAlternativo.contains("nomePortador"))   nomePortador	= "";
										if (zerarColAlternativo.contains("complemento01"))  complemento01	= "";
										if (zerarColAlternativo.contains("complemento02"))  complemento02	= "";
										if (zerarColAlternativo.contains("complemento03"))  complemento03   = "";
										if (zerarColAlternativo.contains("complemento04"))  complemento04   = "";
										if (zerarColAlternativo.contains("complemento05"))  complemento05   = "";
										if (zerarColAlternativo.contains("complemento06"))  complemento06   = "";
										if (zerarColAlternativo.contains("complemento07"))  complemento07   = "";
										if (zerarColAlternativo.contains("complemento08"))  complemento08   = "";
										if (zerarColAlternativo.contains("complemento09"))  complemento09   = "";
										if (zerarColAlternativo.contains("complemento10"))  complemento10   = "";
									}
									
									nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger);
									nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger);
									documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger);

									complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);
									complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, logger);
									
									if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) {
											try{complemento01     = getDate(complemento01, icomplemento01, line, false, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) {
											try{complemento02     = getDate(complemento02, icomplemento02, line, false, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) {
											try{complemento03     = getDate(complemento03, icomplemento03, line, false, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) {
											try{complemento04     = getDate(complemento04, icomplemento04, line, false, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) {
											try{complemento05     = getDate(complemento05, icomplemento05, line, false, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										} 
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) {
											try{complemento06     = getDate(complemento06, icomplemento06, line, false, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										} 
									}
									
									cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, logger);
									codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, logger);

									historico		= "";
									parcelaDoc      = 1;

									valorDocumento	= 0;
									valorDocumentoArray[0] = 0;
									valorDocumentoArray[1] = 0;
									valorDocumentoArray[2] = 0;
									valorDocumentoArray[3] = 0;
									valorDocumentoArray[4] = 0;
									valorDocumentoArray[5] = 0;
									valorDocumentoArray[6] = 0;
									valorDocumentoArray[7] = 0;
									valorDocumentoArray[8] = 0;
									valorDocumentoArray[9] = 0;
									
									valorJuros		= 0;
									valorDesconto	= 0;
									valorMulta		= 0;
									valorPagamento	= 0;
									
									debitoCredito 	= "";
									valorAlternativo = 0;
									
									if(ivalorJuros >=0){
										try{valorJuros = Math.abs(memFile.getDoubleField(ivalorJuros));}
										catch (Exception vlrj) { valorJuros = 0;}
									}
									
									if(ivalorDesconto >=0){
										try{valorDesconto = Math.abs(memFile.getDoubleField(ivalorDesconto));}
										catch(Exception vlrd) {valorDesconto = 0;}
									}
									
									// quando no CRM colocarmos que a coluna de juros eh a mesma de valor desconto 
									// no caso do valor ser negativo, jogaremos zero para juros, ficando o valor absoluto da coluna como desconto
									// no caso do valor ser positivo, jogamos zero em valor desconto, ficando apenas com o valor dos juros
									if((ivalorDesconto == ivalorJuros) && valorJuros > 0 && ivalorJuros > 0){
										try{
											if(memFile.getDoubleField(ivalorDesconto) < 0) valorJuros = 0;
											else valorDesconto = 0;
										} catch(Exception vlrd) {}
									}
									
									if(ivalorMulta >=0){
										try{valorMulta = Math.abs(memFile.getDoubleField(ivalorMulta));}
										catch(Exception vlrm) {valorMulta = 0;}
									}
									
									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if(ivalorDocumento >=0){
										try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
										catch (Exception vlrd) { valorDocumento = 0; }
									}
									
									// if(codEmpresa.contains("191")) logger.logDebug("V = "+valorDocumento+" | DT = "+dataMovimento+" | NO = "+nomeOrigem);
									
									// logger.logDebug("TP -> "+ ivalorDocumento + " | " + idataMovimento + " TREM " + 
													// tipoPlanilha+" - Empresa -> "+valorDocumento+" - DM -> "+dataMovimento + " | " + memFile.getStringFieldRemoveEspCharsUpper(0));
									
									if(logs && cont <= 200){
										
										logsTxt.append("\r\n");
										logsTxt.append("ANALISTA AUX").append(";").append(dataMovimento).append(";").append(valorDocumento).append(";")
											   .append(documento).append(";").append(nomeOrigem).append(";").append(nomePortador).append(";").append(complemento01)
											   .append(";").append(complemento02).append(";").append(complemento03).append(";").append(complemento04).append(";")
											   .append(complemento05).append(";").append(complemento06).append(";").append(tipoPlanilha).append(";")
											   .append(mantemArquivo.equals("SIM") ? "LENDO PELO TEMPLATE (SIM)" : "LENDO ESPECIFICO (NAO)").append(";")
											   .append(line).append(";");
																	
									}

									// logger.logDebug("ROTEIRO coluna Extra => " + roteiroCRM.optString("Colunas_de_Valores_Extras") + " |TP => " + tipoPlanilha);
									if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {
										String [] indiceValores = roteiroCRM.optString("Colunas_de_Valores_Extras").split(";");
										valorSomaArray = 0;
										for(int iv = 0; iv < indiceValores.length; iv++) {
											// try{
												// logger.logDebug("IDValores -> " + indiceValores[iv].toString());
												// if(!indiceValores[iv].contains("*") && !indiceValores[iv].contains("/") && !indiceValores[iv].contains("+") && !indiceValores[iv].contains("-") && !indiceValores[iv].contains("#")){
													// logger.logDebug("ENTROU IF");
													// String rotuloColuna = "";
													// String [] rotuloArray  = roteiroCRM.optString("Rotulos_Para_Valores_Extras").split(";");
													// logger.logDebug("ROTULO ARRAY => " +rotuloArray[iv].toString());
													// indiceValores[iv]	= getIndiceCabecalhoExtra(rotuloArray[iv], memFile);
													// logger.logDebug("INDICE dps => " +indiceValores[iv].toString());
												// }
											// }catch(Exception xx){
												// logger.logDebug("CAIU CATCH");
											// }
												
											//ssss
											double denomidador = 0; 
											int indiceDenominador = -1;
											String sinal = "";
											boolean multiplica100 = false;
											boolean divide100 = false;
											
											if (indiceValores[iv].contains("*100")) multiplica100 = true;
											if (indiceValores[iv].contains("/100")) divide100 = true;
											indiceValores[iv] = indiceValores[iv].replace("*100","").replace("/100","");
											
											if (indiceValores[iv].contains("*")) sinal = "*";
											if (indiceValores[iv].contains("/")) sinal = "/";
											if (indiceValores[iv].contains("+")) sinal = "+";
											if (indiceValores[iv].contains("-")) sinal = "-";										

																					
											if (!sinal.equals("") && indiceValores[iv].contains(sinal)) {
 												try {
													if (!indiceValores[iv].contains("#")) {
														denomidador = Math.abs(memFile.getDoubleField(Integer.parseInt(cutString(indiceValores[iv], sinal))));
													}
													else {
														denomidador = DecimalUtil.toDecimal(cutString(indiceValores[iv], "#"));
													}
												} catch (Exception xx) {denomidador = 0;}
												indiceValores[iv] = cutString(indiceValores[iv], 0, sinal);
											} 
											 	
											
											try{
											
												valorDocumentoArray[iv] = Math.abs(memFile.getDoubleField(Integer.parseInt(indiceValores[iv])));
												if (sinal.equals("*") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] * denomidador;
												if (sinal.equals("/") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] / denomidador;
												if (sinal.equals("+") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] + denomidador;
												if (sinal.equals("-") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] - denomidador;
												if (multiplica100) valorDocumentoArray[iv] = valorDocumentoArray[iv] * 100;
												if (divide100)     valorDocumentoArray[iv] = valorDocumentoArray[iv] / 100;
												
 
												
 											}
											catch (Exception vlrd) { 

 
 
												valorDocumentoArray[iv] = 0; 
											}
											
											if(valorDocumentoArray[iv] < 0){
												valorDocumentoArray[iv] = 0;
											} 
											
											valorSomaArray += valorDocumentoArray[iv];
										}
									}
									
									
									if(ivalorPagamento >=0){
										try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
										catch(Exception vlrp) {valorPagamento = 0;}
									}
									
									if(ivalorAlternativo >= 0){
										try{valorAlternativo = memFile.getDoubleField(ivalorAlternativo);}
										catch (Exception vlrd) { valorAlternativo = 0; }
									}
									
									if (tipoLancamento.equals("PAGAR"))
										debitoCredito = "EXTRATO-DEBITO";
									
									if (tipoLancamento.equals("RECEBER"))
										debitoCredito = "EXTRATO-CREDITO";
								
									
									////////////////////////////////////////////////
									////	busca Coluna Alternativa 
									JSONObject obj1 = new JSONObject();
									String validar	= "dataMovimento;nomeOrigem;documento;complemento01;complemento02;complemento03;complemento04;complemento05;complemento06;complemento07;complemento08;complemento09;complemento10;nomePortador;valorDocumento;valorPagamento;valorJuros;valorDesconto;valorMulta";
									obj1.put("validar",			validar);
									obj1.put("documento",		documento);
									obj1.put("nomeOrigem",		nomeOrigem);
									obj1.put("nomePortador",	nomePortador);
									obj1.put("dataMovimento",	dataMovimento);
									obj1.put("complemento01",	complemento01);
									obj1.put("complemento02",	complemento02);
									obj1.put("complemento03",	complemento03);
									obj1.put("complemento04",	complemento04);
									obj1.put("complemento05",	complemento05);
									obj1.put("complemento06",	complemento06);
									obj1.put("complemento07",	complemento07);
									obj1.put("complemento08",	complemento08);
									obj1.put("complemento09",	complemento09);
									obj1.put("complemento10",	complemento10);
									obj1.put("codCentroCusto",	codCcOrigem);
									obj1.put("tipoPlanilha",	tipoPlanilha);
									obj1.put("numeroAba",		String.valueOf(abaConvertida));
									obj1.put("nomeArquivo",		nomeArquivo.toUpperCase());
									JSONObject alternativeObj = getAlternativeDataInt (obj1, memFile);
									String changed = alternativeObj.optString("changeIt");
									
									if(!changed.equals("")) {
										zerarColAlternativo = changed;
										if (changed.contains("dataMovimento")) {
											dataMovimento	= alternativeObj.optString("dataMovimento");
											dataLote		= alternativeObj.optString("dataLote");
										}
										if (changed.contains("documento"))		documento		= alternativeObj.optString("documento");
										if (changed.contains("nomeOrigem"))		nomeOrigem		= alternativeObj.optString("nomeOrigem");
										if (changed.contains("nomePortador"))   nomePortador	= alternativeObj.optString("nomePortador");
										
										if (changed.contains("complemento01"))  complemento01	= alternativeObj.optString("complemento01");
										if (changed.contains("complemento02"))  complemento02	= alternativeObj.optString("complemento02");
										if (changed.contains("complemento03"))  complemento03   = alternativeObj.optString("complemento03");
										if (changed.contains("complemento04"))  complemento04   = alternativeObj.optString("complemento04");
										if (changed.contains("complemento05"))  complemento05   = alternativeObj.optString("complemento05");
										if (changed.contains("complemento06"))  complemento06   = alternativeObj.optString("complemento06");
										if (changed.contains("complemento07"))  complemento07   = alternativeObj.optString("complemento07");
										if (changed.contains("complemento08"))  complemento08   = alternativeObj.optString("complemento08");
										if (changed.contains("complemento09"))  complemento09   = alternativeObj.optString("complemento09");
										if (changed.contains("complemento10"))  complemento10   = alternativeObj.optString("complemento10");
										
										if (changed.contains("valorDocumento"))	valorDocumento	= alternativeObj.optDouble("valorDocumento");
										
										if (changed.contains("valorPagamento"))	valorPagamento  = alternativeObj.optDouble("valorPagamento");
										if (changed.contains("valorDesconto"))	valorDesconto	= alternativeObj.optDouble("valorDesconto");
										if (changed.contains("valorJuros"))		valorJuros		= alternativeObj.optDouble("valorJuros");
										if (changed.contains("valorMulta"))		valorMulta		= alternativeObj.optDouble("valorMulta");
									}
									

									// fazer regra quando tiver valor documento e alternativo na mesma coluna
									String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
									if (!tratarComoValorAlternativo.equals("")) {											
										if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
										if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
										if(ivalorAlternativo >= 0) valorDocumento = valorAlternativo;
									}else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes	
										if(valorDocumento == 0 && ivalorAlternativo >= 0){		
											if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
											if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
											valorDocumento = valorAlternativo;
										}
									}
									// ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if((ivalorDocumento < 0 || tipoPlanilha.contains("PADRAOOTTIMIZZA")) && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}
									if(valorDocumento>0 && ivalorJuros < 0 && ivalorDesconto < 0 && valorPagamento > 0){
										if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
										if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
									}

									valorDocumento = Math.abs(valorDocumento);
									

									
									// ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && (valorDocumento > 0 || valorSomaArray > 0)) isLinhaPrincipal = true;
									
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&
										lerAposPrincipal.equals("") && (valorDocumento == 0 && valorSomaArray == 0)) {
											
										continue;
									}
								}
								
 

								// #DOCUMENTACAO
								// leitura de TXT
								if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && roteiroCRM.optString("dataMovimento").replaceAll(" ", "").toUpperCase().startsWith("COLUNA(") && roteiroCRM.optString("dataMovimento").endsWith(")")) {
  
									String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, roteiroCRM, logger).trim();
  
   
									if (!dataString.equals("") && dataString.contains("/")) {
										String dataMovimentoAux	  = getCampoDate(dataString);
										if (dataMovimentoAux.contains("/")) {
											dataMovimento     = getCampoDate(dataString);
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
 										}
									}
  									
  
									// ajusta data quando vem no formato 01012021  
									if (!dataString.equals("") && !dataString.contains("/") && dataString.contains("20")) {
										try {
											Date dts = DateUtil.stringToDate(dataString, "ddMMyyyy");
											dataMovimento = DateUtil.dateToString(dts, "dd/MM/yyyy");
											dataLote = DateUtil.dateToString(dts, "yyyy-MM");
											if (!dataMovimento.contains("/20")) {   // data bichada sera ignorada
												dataMovimento = "";
												continue;
											}
										} catch (Exception dt1) {
											continue;
										}
									}
  
 
									nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, roteiroCRM, logger);
									nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, roteiroCRM, logger);
									documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, roteiroCRM, logger);

									complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, roteiroCRM, logger);
									complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, roteiroCRM, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, roteiroCRM, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, roteiroCRM, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, roteiroCRM, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, roteiroCRM, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, roteiroCRM, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, roteiroCRM, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, roteiroCRM, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, roteiroCRM, logger);
									cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, roteiroCRM, logger);
									codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, 	line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, roteiroCRM, logger);


									valorDocumento = getDoubleTXT2020(roteiroCRM.optString("valorDocumento").toUpperCase(), line, objetoParametro);
									
									if (tipoPlanilha.contains("OTTCARTAO")) {
									    String valorStr = getCampoString("", -1, 	line, false, roteiroCRM.optString("valorDocumento").toUpperCase(), memFile, roteiroCRM, logger);
										if (!valorStr.contains(".") && !valorStr.contains(",")) valorDocumento = valorDocumento / 100;
									}

									valorJuros	   = getDoubleTXT2020(roteiroCRM.optString("valorJuros").toUpperCase(), line, objetoParametro);
									valorDesconto  = getDoubleTXT2020(roteiroCRM.optString("valorDesconto").toUpperCase(), line, objetoParametro);
									valorMulta 	   = getDoubleTXT2020(roteiroCRM.optString("valorMulta").toUpperCase(), line, objetoParametro);
									valorPagamento = getDoubleTXT2020(roteiroCRM.optString("valorPagamento").toUpperCase(), line, objetoParametro);

									if (tipoLancamento.equals("PAGAR")) 
										if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
											debitoCredito = "EXTRATO-DEBITO";
									
									if (tipoLancamento.equals("RECEBER")) 
										if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
											debitoCredito = "EXTRATO-CREDITO";

									// fazer regra quando tiver valor documento e alternativo na mesma coluna
									String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
									if (!tratarComoValorAlternativo.equals("")) {											
										if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
										if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
										if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")) valorDocumento = valorAlternativo;
									}else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes	
										if(valorDocumento == 0 && roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")){		
											if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
											if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
											valorDocumento = valorAlternativo;
										}
									}

									if(!roteiroCRM.optString("valorDocumento").toUpperCase().contains("COLUNA") && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}
									if(valorDocumento > 0 && !roteiroCRM.optString("valorJuros").toUpperCase().contains("COLUNA") && !roteiroCRM.optString("valorDesconto").toUpperCase().contains("COLUNA") && valorPagamento > 0){
										if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
										if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
									}
									
									//#2305-0004328. Coluna de valor extra para o formato txt
									if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {
                                        valorSomaArray = TemplateUtils.lerValoresExtrasArquivoTxt(valorDocumentoArray, line, roteiroCRM, null);
                                    }
									valorDocumento = Math.abs(valorDocumento);
									
									// if(logs && cont <= 200){
										// logsTxt.append("\r\n");
										
										// logsTxt.append("ANALISTA AUX");												logsTxt.append(";");
										// logsTxt.append(dataMovimento); 												logsTxt.append(";");
										// logsTxt.append(valorDocumento);												logsTxt.append(";");
										// logsTxt.append(documento);													logsTxt.append(";");
										// logsTxt.append(nomeOrigem);													logsTxt.append(";");
										// logsTxt.append(nomePortador);												logsTxt.append(";");
										// logsTxt.append(complemento01);												logsTxt.append(";");
										// logsTxt.append(complemento02);												logsTxt.append(";");
										// logsTxt.append(complemento03);												logsTxt.append(";");
										// logsTxt.append(complemento04);												logsTxt.append(";");
										// logsTxt.append(complemento05);												logsTxt.append(";");
										// logsTxt.append(complemento06);												logsTxt.append(";");
										// logsTxt.append(tipoPlanilha);												
										// if(mantemArquivo.equals("SIM"))logsTxt.append("LENDO PELO TEMPLATE");		logsTxt.append(";");
										// if(mantemArquivo.equals("NAO"))logsTxt.append("LENDO ESPECIFICO");			logsTxt.append(";");
										// logsTxt.append(line);														logsTxt.append(";");
																		
									// }
									
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals(""))  isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && (valorDocumento > 0 || valorSomaArray > 0))		  isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !nomeOrigem.equals("")) isLinhaPrincipal = true;
								}


								// #DOCUMENTACAO
								// mes ano anterior 
								if(dataMovimento.length() > 9){
									mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
									anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
									mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
								}
								
								// #DOCUMENTACAO
								// filtro de datas (parametro definido por integracao no CRM, e informado a cada processamento de arquivos)
								//if (nomeArquivo.toUpperCase().contains("FILTRO_")) filtro = validaFiltro(nomeArquivo, dataMovimento);
								if (nomeArquivo.toUpperCase().contains("FILTRO_")) {
									temFiltro = true;
									filtro = validaFiltro(nomeArquivo, dataMovimento);
								}
								if (!filtro) continue;

								valorTotalDoc   += valorDocumento;
								valorTotalJuros += valorJuros;
								valorTotalDesc  += valorDesconto;

								if (documento.contains(".") && documento.contains("E")) {
									documento = removerNotacaoCientificaExcel(documento);
								}
								
								// #DOCUMENTACAO
								// cpfCnpj
								boolean aceitaCpf			= true;
								boolean cnpjSomenteNumeros	= Boolean.parseBoolean(roteiroCRM.optString("cnpjSomenteNumeros").toLowerCase().trim());

								if(!cpfCnpj.equals("")) cpfCnpj = trataCpfCnpj(cpfCnpj, cnpjSomenteNumeros, aceitaCpf);
								
								// #DOCUMENTACAO
								// ajustes fornecedor/cliente e portador
								if (nomeOrigem.equals("") && !roteiroCRM.optString("lerAposPrincipal").toUpperCase().contains("FORNECEDOR")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
								nomeOrigem = nomeOrigem.trim();
								
								//Removemos o replace de AMP por conta de um efeito colateral #202212-0022861
								//nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").replaceAll("AMP","").trim();
								nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								// nomeOrigem = stringNormalizer(nomeOrigem, true);
								nomeOrigem = StringUtil.removeSpecialCharsToUC(nomeOrigem);
								
								// 202301-0023496 JWR Coloquei esse balde com o X para remontar o nomeOrigem
								// Descomentar caso d? problema com caracteres especiais
								/*String letrasPermitidas = "ABCDEFGHIJKLMNOPRSTUVWXYZ 0123456789.-/&";
								String nomeOrigemNovo = "";
								for (int xx = 0; xx < nomeOrigem.length(); xx++) {
									if (nomeOrigem.length() > xx) {
										if (letrasPermitidas.contains(nomeOrigem.substring(xx, xx+1))) {
											nomeOrigemNovo = nomeOrigemNovo + nomeOrigem.substring(xx, xx+1);
										}
									}
								}
								nomeOrigem = nomeOrigemNovo;*/

								
								if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();
								nomePortador = nomePortador.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").replaceAll("\\?", "").trim();
								nomePortador = stringNormalizer(nomePortador, true);

								complemento01 = complemento01.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento02 = complemento02.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento03 = complemento03.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento04 = complemento04.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento05 = complemento05.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento06 = complemento06.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();

								// logger.logDebug("DAMA " + dataMovimento + " | " + valorDocumento + " | " + isLinhaPrincipal);
								if(dataMovimento.equals("")) continue;
								// quando for ler linha principal zerar as variaveis que vem depois da principal para nao sobrepor campos.
								if(isLinhaPrincipal) {
									// #DOCUMENTACAO
									// cont define que eh um novo lancamento (normalmente uma nova linha)
									cont++;

									if (lerAposPrincipal.contains("FORNECEDOR"))	nomeOrigem = "";
									if (lerAposPrincipal.contains("DOCUMENTO"))		documento = "";
									if (lerAposPrincipal.contains("PORTADOR")) 		nomePortador = "";
									if (lerAposPrincipal.contains("COMPLEMENTO01")) complemento01 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO02")) complemento02 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO03")) complemento03 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO04")) complemento04 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO05")) complemento05 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO06")) complemento06 = "";

								}
								
								if(cont == 0) continue;
								
								histobj.put("nomeOrigem", nomeOrigem);					histobj.put("documento", documento);
								histobj.put("complemento01", complemento01);			histobj.put("complemento02", complemento02);
								histobj.put("complemento03", complemento03);			histobj.put("complemento04", complemento04);
								histobj.put("complemento05", complemento05);			histobj.put("complemento06", complemento06);
								histobj.put("complemento07", complemento07);			histobj.put("complemento08", complemento08);
								histobj.put("complemento09", complemento09);			histobj.put("complemento10", complemento10);
								histobj.put("dataMovimento", dataMovimento);			histobj.put("mesAnoAnterior", mesAnoAnterior);
								histobj.put("mesAno2Anterior", mesAno2Anterior);		histobj.put("mesAnoAtual", mesAnoAtual);
								histobj.put("nomePortador", nomePortador);				histobj.put("contaMovimento", contaMovimento);
								histobj.put("contaPortador", contaPortador);	   		histobj.put("contaDebito", "");
								histobj.put("contaCredito", "");						histobj.put("contaJuros", contaJuros);
								histobj.put("contaDesconto", contaDesconto);			histobj.put("contaMulta", contaMulta);
								histobj.put("valorDocumento", valorDocumento);			histobj.put("tipoPlanilha", tipoPlanilha); 
								histobj.put("valorJuros", valorJuros);   				histobj.put("valorDesconto", valorDesconto);
								histobj.put("valorMulta", valorMulta); 				    histobj.put("codFilial", codFilial);
								histobj.put("nomeArquivo", nomeArquivo.toUpperCase()); // foi ajustado 

								//feita limpeza de campo para poder pegar melhor os juros e descontos.
								documento     = getLimpaCamposAvancado("documento", documento, histobj);


								// #DOCUMENTACAO
								// TRATA PLANILHA OU LANCAMENTO EXPECIFICO COMO EXTRATO
								tratarComoExtrato = getTratarComoExtrato(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								nomeOrigem = nomeOrigem.replaceAll("  ", " ").trim();
								if (tratarComoExtrato) {
									if (nomeOrigem.length() > 199) nomeOrigem = cutString(nomeOrigem, 0, 180); // #Fabrica(2019-10-03) @Becker
									JSONObject jDados = new JSONObject();
									jDados.put("PORTADOR",    		nomePortador);
									jDados.put("EMPRESA",     		codEmpresa);
									jDados.put("DATAMOVIMENTO",	 	dataMovimento);
									jDados.put("NOMEARQUIVO",       debitoCredito+nomeArquivo.toUpperCase()); // #DOCUMENTACAO EVITA PROBLEMA DE TRANSFERENCIAS NO MESMO ARQUIVO
									jDados.put("NOMEORIGEM",    	nomeOrigem);
									jDados.put("VALORDOCUMENTO",    valorDocumento);
									jDados.put("COMPLEMENTO01",     complemento02);
									jDados.put("DEBITO-CREDITO",    debitoCredito);
									jDados.put("CONT",  			String.valueOf(cont));
									// logger.logDebug("nomePortador -> " + nomePortador);
									boolean primExtrato = insertIOExtrato(jDados, dbIOCont, logger );
									jStatus = new JSONObject();
									putStatus(dirName, "", jStatus, logger);
									continue;									
								}
								
								debitoCredito = ""; // zera aqui para n?o confundir com extratos bancarios.


								// #DOCUMENTACAO
								// trata lancamento como juros (de outro lancamento)
								complemento10 = "";
								tratarComoJuros = getTratarComoJuros(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								if (tratarComoJuros) {
									complemento10 = dataMovimento + "-" + documento + "-JUROS";
									ttJuros ttJ    = (ttJuros)mapaJuros.get(complemento10);
									if (ttJ == null) {
										ttJ  = new ttJuros();
										ttJ.documento  = documento;
										ttJ.valorJur   = valorDocumento;
										ttJ.valorLido  = 0;
									}
									mapaJuros.put(complemento10,ttJ);
									continue;
								}

								// #DOCUMENTACAO
								// trata lancamento como desconto (de outro lancamento)
								tratarComoDesconto = getTratarComoDesconto(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								if (tratarComoDesconto) {
									complemento10  = dataMovimento + "-" + documento + "-DESCONTO";
									ttDesconto ttD    = (ttDesconto)mapaDesconto.get(complemento10);

									if(valorDocumento == 0) continue;

									if (ttD == null) {
										ttD  = new ttDesconto();
										ttD.documento  = documento;
										ttD.valorDesc  = valorDocumento;
										ttD.valorLido  = 0;
									}
									mapaDesconto.put(complemento10,ttD);
									continue;
								}

								int restoLinha = 0;
								restoLinha = (cont % 100);
								
								// logger.logDebug("PUTSTATUS 1591");
								if (restoLinha == 0) putStatus(dirName, "02--Etapa 2 de 4 - " + String.valueOf(cont) + "--" + tipoLancamento + ".status", jStatus, logger);


								String contLinhaTexto = String.valueOf(cont);
								contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
								String consolidaClass = StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;

								classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;
								
								
								// quando usa o getColunaAlternativa tem que refatorar o datalote
								dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");								
								
								//alterado para evitar problemas de lote (maiusculo)
								lote = (nomeEmpresa + "_" + codEmpresa + "__" + nomeArquivo  + "__" + dataLote + "_" + tipoLancamento).replaceAll("\\." , "");
								chave = lote + "-" + String.valueOf(abaConvertida) + String.valueOf(contadorArquivo) + "-" + contLinhaTexto;

								// if(codEmpresa.equals("987789")) logger.logDebug("DATA == "+dataMovimento+" | LOTEEE == "+lote.replace("_rodaconversor", "")+" | TP === "+tipoPlanilha+" | COD ROT == "+roteiroCRMPrincipal.optString("codigo"));
								
								if(chave.length() > 200)  chave = chave.substring(0, 199);
								
								// #DOCUMENTACAO
								////////////////////////////////////////////////////////////// ACUMULA ANTES
								histobj.put("nomeOrigem", nomeOrigem);
								histobj.put("documento", documento);
								histobj.put("complemento01", complemento01);
								histobj.put("complemento02", complemento02);
								histobj.put("complemento03", complemento03);
								histobj.put("complemento04", complemento04);
								histobj.put("complemento05", complemento05);
								histobj.put("complemento06", complemento06);
								histobj.put("nomePortador", nomePortador);
								histobj.put("dataMovimento", dataMovimento);
								histobj.put("mesAnoAnterior", mesAnoAnterior);
								histobj.put("mesAno2Anterior", mesAno2Anterior);
								histobj.put("mesAnoAtual", mesAnoAtual);
								histobj.put("valorDocumento", valorDocumento);
								histobj.put("valorJuros", valorJuros);
								histobj.put("valorDesconto", valorDesconto);
								histobj.put("valorMulta",valorMulta);
								histobj.put("tipoPlanilha", tipoPlanilha);
								histobj.put("nomeArquivo", nomeArquivo.toUpperCase());
								histobj.put("line", line.toUpperCase());
								histobj.put("cabecalhoRegra", cabecalhoRegra.toString());
  								
								String modificaData = getModificaData(histobj);
								
								if (modificaData.startsWith("01"))  dataMovimento = getNextDay(dataMovimento, 1, true);
								if (modificaData.startsWith("02"))  dataMovimento = getNextDay(dataMovimento, 2, true);
								if (modificaData.startsWith("03"))  dataMovimento = getNextDay(dataMovimento, 1, false);
								if (modificaData.startsWith("04"))  dataMovimento = getNextDay(dataMovimento, 2, false);
								if (modificaData.startsWith("05"))  dataMovimento = "01/" + cutString(dataMovimento, "/");
								if (modificaData.startsWith("06"))  dataMovimento = getLastDayOfMonth(dataMovimento, true);
								
								
								// METODO QUE REFATORA OS CAMPOS COM BASE NO CABECALHO DO CRM
								// EXEMPLO QUANDO ENCONTRAR #LINE NO CAMPO COMPLEMENTO03, VAMOS JOGAR O LINE NESTE COMPLEMENTO
								// UM COMPLEMENTO02 POR EXEMPLO PODE RECEBER DADOS DE TIPOPLANILHA
								nomeOrigem       = getRefatoraCampo(nomeOrigem, roteiroCRM.optString("fornecedor"), histobj);
								nomePortador     = getRefatoraCampo(nomePortador, roteiroCRM.optString("portador"), histobj);
								documento        = getRefatoraCampo(documento, roteiroCRM.optString("documentoNF"), histobj);
								complemento01    = getRefatoraCampo(complemento01, roteiroCRM.optString("complemento01"), histobj);
								complemento02    = getRefatoraCampo(complemento02, roteiroCRM.optString("complemento02"), histobj);
								complemento03    = getRefatoraCampo(complemento03, roteiroCRM.optString("complemento03"), histobj);
								complemento04    = getRefatoraCampo(complemento04, roteiroCRM.optString("complemento04"), histobj);
								complemento05    = getRefatoraCampo(complemento05, roteiroCRM.optString("complemento05"), histobj);
								complemento06    = getRefatoraCampo(complemento06, roteiroCRM.optString("complemento06"), histobj);
								complemento07    = getRefatoraCampo(complemento07, roteiroCRM.optString("complemento07"), histobj);
								complemento08    = getRefatoraCampo(complemento08, roteiroCRM.optString("complemento08"), histobj);
								complemento09    = getRefatoraCampo(complemento09, roteiroCRM.optString("complemento09"), histobj);
								complemento10    = getRefatoraCampo(complemento10, roteiroCRM.optString("complemento10"), histobj);
								 

								
								String testeChave = getRegrasParaAcumular(lote, chave, tipoLancamento, documento, nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
								if(testeChave.toUpperCase().contains("ACUMULAANTES") || testeChave.toUpperCase().contains("ACUMULARANTES")) {
									chave = testeChave;
									if(chave.length() > 180) chave = cutString(chave, 0, 179);
									acumulouAntes = true;
								}
								////////////////////////////////////////////////////////////////////////////////////
								String key = chave  + "-CTB";
								nomeOrigem = nomeOrigem.replaceAll("  "," ").trim();

								partidaDobradaJuros		= 0;
								partidaDobradaDesconto	= 0;
								partidaDobradaMulta		= 0;

								if (forcarPartidaDobrada) {
									partidaDobradaJuros		= valorJuros;
									partidaDobradaDesconto	= valorDesconto;
									partidaDobradaMulta		= valorMulta;
									valorJuros				= 0;
									valorDesconto			= 0;
									valorMulta				= 0;
								}
								
								if (tipoPlanilha.contains("OTTCARTAO")) {
									
									if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("")) continue;
									if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && dataMovimento.equals("")) continue;
									complemento01 = tipoPlanilha;
									complemento02 = "VENDA";
									
									nomePortador = tipoPlanilha;
									
									// salva arquivo no hasmap para posterior eliminacao 
									ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
									if (ttArq          == null) {
										ttArq          = new ttArquivo();
										ttArq.arquivo  = nomeArquivo;
										
									}
									mapaArquivo.put(nomeArquivo,ttArq);
 									
								} else {
								
									// quando se mantem o arquivo, somente devem ser processados arquivos padroes
									// planilhas do rotiero movimento (principal), OFX e demais devem ficar para a rota normal
									// Trocado para validar se a planilha comeca como movimento - importante por causa da iguacu, Onnegestao, confialtiva que tinham movimento no roteiro secundario e estavam sendo bloqueados
									if (mantemArquivo.equals("SIM") && !tipoPlanilha.contains("PADRAOOTTIMIZZA") && 
									   !roteiroCRM.optString("nomeRelatorioRef").equals("PLANILHA_SIMPLES") && 
									   (tipoPlanilha.contains("SECUNDARIO") || tipoPlanilha.startsWith("MOVIMENTO"))) { //#Soares esteve aqui -> chamado referente a mudan?a: 202210-0019668
									   // Colocado este IF para dar mais performance, ou seja, se ja tiver lido mais de 15 linhas
									   // e planilha for para ser rodada na personalizada
									   // break agiliza a saida da leitura da planilha. Xavier em 19.08
									   if (contadorCabecalho < 15) continue;
									   logs = false;
									   // logger.logDebug("FB");
									   break;
									}
									
									// definido que as planilhas simples que rodam pelo template leem apenas a aba 0
									if (tipoPlanilha.equals("MOVIMENTO") && mantemArquivo.equals("SIM") && 
										porAba > 0 && roteiroCRM.optString("nomeRelatorioRef").equals("PLANILHA_SIMPLES")) { //#Soares esteve aqui -> chamado referente a mudan?a: 202210-0019668
									   
									   logs = false;
									   // logger.logDebug("SB");
									   break;
									}
									
								}
								//#FABRICA 31/08/2022 - @sergio - 202208-0017778
								//Estavamos processando as planilhas padroes sem apaga-las no processo
								//O if abaixo faz com que paguemos a planilha, ap?s processar pelo padrao
								
								// logger.logDebug("TPAQ " + tipoPlanilha);
								
								if(tipoPlanilha.contains("PADRAOOTTIMIZZA")){
									ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
									if (ttArq          == null) {
										ttArq          = new ttArquivo();
										ttArq.arquivo  = nomeArquivo;
										
									}
									mapaArquivo.put(nomeArquivo,ttArq);
									
								}
					
								// logger.logDebug("ANTES ttMov2");
								// #DOCUMENTACAO
								// insere numa tabela temporaria
								ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
								if (ttMov2 == null) {
									ttMov2 = new ttMovimentoPadrao();
									ttMov2.lote              = lote;
									ttMov2.codEmpresa        = codEmpresa;
									ttMov2.nomeEmpresa       = nomeEmpresa;
									ttMov2.dataMovimento     = dataMovimento;
									ttMov2.tipoMovimento     = "CTB";
									ttMov2.tipoLancamento    = tipoLancamento;
									ttMov2.historico         = historico;
									ttMov2.contaJuros        = contaJuros;
									ttMov2.contaMulta        = contaMulta;
									ttMov2.contaDesconto     = contaDesconto;
									ttMov2.centroCusto       = codCcOrigem;
									ttMov2.cpfCnpj           = cpfCnpj;
									ttMov2.chave             = chave + "-CTB";
									ttMov2.classificacao     = classificacao;
									ttMov2.codFilial         = codFilial;
									ttMov2.complemento07     = complemento07;
									ttMov2.complemento08     = complemento08;
									ttMov2.complemento09     = complemento09;
									ttMov2.complemento10     = complemento10;
									ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
									ttMov2.tipoPlanilha      = tipoPlanilha;
									ttMov2.chaveExtrato      = chaveExtrato;
									ttMov2.debitoCredito     = debitoCredito;
									ttMov2.contLinha         = contLinhaTexto;
									ttMov2.historicoMulta    = "";
									ttMov2.historicoJuros    = "";
									ttMov2.historicoDesconto = "";
									ttMov2.contaDebito       = "";
									ttMov2.contaCredito      = "";
									ttMov2.naturezaContabil  = "";
									ttMov2.contador 		 = 0;
									ttMov2.parcelaDoc        = parcelaDoc;
									ttMov2.abaPlanilha       = String.valueOf(abaConvertida);

									if(!lerAposPrincipal.contains("FORNECEDOR"))	ttMov2.nomeOrigem    = nomeOrigem;
									if(!lerAposPrincipal.contains("DOCUMENTO")) 	ttMov2.documento 	 = documento;
									if(!lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador;
									if(!lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01;
									if(!lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02;
									if(!lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03;
									if(!lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04;
									if(!lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05;
									if(!lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06;
									
									// logger.logDebug("TTMOVTP -> "+tipoPlanilha);


								}

								///  -------------------------------------------------------------------------------------------------------
								///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
								///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
								///  if (!complemento02.equals("")) ttMov2.complemento02 = complemento02;
								///  -------------------------------------------------------------------------------------------------------

								// #DOCUMENTACAO
								// acumula linhas secundarias ou apenas l? as secundarias
								boolean acumulaSegundaLinha = true;
								
								if(acumulaSegundaLinha){
									if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = (ttMov2.nomeOrigem    + " " + nomeOrigem).trim();
									if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = (ttMov2.documento + " " + documento).trim();
									if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = (ttMov2.nomePortador  + " " + nomePortador).trim();
									if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = (ttMov2.complemento01 + " " + complemento01).trim();
									if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = (ttMov2.complemento02 + " " + complemento02).trim();
									if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = (ttMov2.complemento03 + " " + complemento03).trim();
									if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = (ttMov2.complemento04 + " " + complemento04).trim();
									if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = (ttMov2.complemento05 + " " + complemento05).trim();
									if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = (ttMov2.complemento06 + " " + complemento06).trim();
								}
								if(!acumulaSegundaLinha){
									if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = nomeOrigem.trim();
									if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = documento.trim();
									if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador.trim();
									if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01.trim();
									if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02.trim();
									if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03.trim();
									if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04.trim();
									if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05.trim();
									if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06.trim();
								}
								
								ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
								ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
								ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
								ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

								leuFinanceiro = true;
								mapaVariavel.put(key,ttMov2);
								
								// logger.logDebug("TEPE " + tipoPlanilha + " | " + roteiroCRM.optString("Colunas_de_Valores_Extras") + " | " + ttMov2.valorDocumento + " | " + ttMov2.dataMovimento);
								
								if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {

									for (int iv =0; iv < 10; iv++) { 
										
										if (valorDocumentoArray[iv] == 0) continue;
										
										String rotuloColuna = "";
										String [] rotuloArray  = roteiroCRM.optString("Rotulos_Para_Valores_Extras").split(";"); 
										
										try {
											rotuloColuna = rotuloArray[iv];
										} 
										catch (Exception xx) {
											continue;
										}
										
										if (rotuloColuna.equals("")) continue;
										
									
										cont++; 
										contLinhaTexto = String.valueOf(cont);
										contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
										consolidaClass = StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;

										classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(abaConvertida) + rotuloColuna + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.dataMovimento = dataMovimento;
										histobj.put("dataMovimento", dataMovimento);
										
										ttTemp.complemento05 = rotuloColuna;
										histobj.put("complemento05", rotuloColuna);
										
										String modificaData2 = getModificaData(histobj);											
										
										if (modificaData2.startsWith("01"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, true);
										if (modificaData2.startsWith("02"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, true);
										if (modificaData2.startsWith("03"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, false);
										if (modificaData2.startsWith("04"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, false);
										if (modificaData2.startsWith("05"))  ttTemp.dataMovimento = "01/" + cutString(dataMovimento, "/");
										if (modificaData2.startsWith("06"))  ttTemp.dataMovimento = getLastDayOfMonth(dataMovimento, true);
										
										ttTemp.valorDocumento   = valorDocumentoArray[iv] ;
										ttTemp.valorDesconto    = 0;
										ttTemp.valorMulta       = 0;
										ttTemp.valorJuros       = 0;

										if (tipoPlanilha.contains("OTTCARTAO")) {
											ttTemp.complemento01 = tipoPlanilha;
											ttTemp.complemento02 = rotuloColuna;
										}
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, rotuloColuna, classificacao);
									}
								}
								
								// Para cartoes, criamos o modelo de gerar tafifa por regra
								if (tipoPlanilha.contains("OTTCARTAO")) {

									histobj.put("complemento02", "TARIFA");
									histobj.put("complemento03", complemento03);
									histobj.put("dataMovimento", dataMovimento);
									histobj.put("complemento05", "TARIFA");									
 									
									double taxaTarifa = getTaxaTarifa("", tipoLancamento, documento, nomeOrigem, histobj);
  									 
									
									if (taxaTarifa > 0) {
										cont++; 
										contLinhaTexto = String.valueOf(cont);
										contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
										consolidaClass = StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;

										classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(abaConvertida) + "TARIFA" + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.dataMovimento = dataMovimento;
										
										
										ttTemp.complemento05 = "TARIFA";
										String modificaData2 = getModificaData(histobj);											
										
										if (modificaData2.startsWith("01"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, true);
										if (modificaData2.startsWith("02"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, true);
										if (modificaData2.startsWith("03"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, false);
										if (modificaData2.startsWith("04"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, false);
										if (modificaData2.startsWith("05"))  ttTemp.dataMovimento = "01/" + cutString(dataMovimento, "/");
										if (modificaData2.startsWith("06"))  ttTemp.dataMovimento = getLastDayOfMonth(dataMovimento, true);
										ttTemp.valorDocumento   = ttTemp.valorDocumento * taxaTarifa;
										ttTemp.valorDesconto    = 0;
										ttTemp.valorMulta       = 0;
										ttTemp.valorJuros       = 0;

 										ttTemp.complemento01 = tipoPlanilha;
										ttTemp.complemento02 = "TARIFA";
										
 										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "TARIFA", classificacao);
									}
								}
								
								

									
								if (forcarPartidaDobrada) {
									if (partidaDobradaJuros		> 0) {
										cont++;
										contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
										consolidaClass	= StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;
										classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(abaConvertida) + "-DOBRADA_JUR-" + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.valorDocumento = partidaDobradaJuros;
										ttTemp.cpfCnpj = "";
										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "JUROS", classificacao);
									}
									
									if (partidaDobradaDesconto	> 0) {
										cont++;
										contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
										consolidaClass	= StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;
										classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

										chave	= lote + "-" + String.valueOf(abaConvertida) + "-DOBRADA_DES-" + contLinhaTexto;
										key		= chave  + "-CTB";
										ttMovimentoPadrao ttTemp	= new ttMovimentoPadrao(ttMov2);
										ttTemp.valorDocumento		= partidaDobradaDesconto;
										ttTemp.cpfCnpj = "";
										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "DESCONTO", classificacao);
									}
									
									if (partidaDobradaMulta		> 0) {
										cont++;
										contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
										consolidaClass	= StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;
										classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

										chave	= lote + "-" + String.valueOf(abaConvertida) + "-DOBRADA_MUL-" + contLinhaTexto;
										key		= chave  + "-CTB";
										ttMovimentoPadrao ttTemp	= new ttMovimentoPadrao(ttMov2);
										ttTemp.valorDocumento		= partidaDobradaMulta;
										ttTemp.cpfCnpj = "";
										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "MULTA", classificacao);
									}
								}								
							} catch (Exception e) {
							}
						} // while
					}finally {
						
						/*if (memFile != null) { //closeFile
							try {memFile.closeFile(); } 
							catch (Exception ex) { }
						}*/ //closeFile
						
					}
				}

			}
			try {
				Iterator itArquivo = mapaArquivo.keySet().iterator();
				while (itArquivo.hasNext()) { 
					String key = (String)itArquivo.next();
					ttArquivo ttArq = (ttArquivo)mapaArquivo.get(key);
					
					try {
		 
						FileUtil.moveToDir(dirName+"/"+ttArq.arquivo, backupDirName);
					} catch (Exception xx) {}
				}
			} catch (Exception xx) {} 
					
			

		}
	} catch (Exception ee) {
		putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
		logger.logError("EndpointA: ", ee);
	}
	
	
	
	try {
		Iterator itArquivo = mapaArquivo.keySet().iterator();
		while (itArquivo.hasNext()) { 
			String key = (String)itArquivo.next();
			ttArquivo ttArq = (ttArquivo)mapaArquivo.get(key);
			
			try {
 
				FileUtil.moveToDir(dirName+"/"+ttArq.arquivo, backupDirName);
			} catch (Exception xx) {}
 		}
	} catch (Exception xx) {} 
			

	if(erroShrink){
		putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
		throw new Exception();
	}
	// --------------------------------------------------------------------------------------------------------------------
	// #DOCUMENTACAO
	// BUSCA INFORMACAO DE EXTRATOS SALVOS
	if (leuFinanceiro && cruzaExtrato.contains("TRUE") || (tipoPlanilha.contains("EXTRATO") && cruzaExtrato.contains("FALSE")) ||
		(Cruza_Extrato_com_Extrato.contains("TRUE") && cruzaExtrato.contains("FALSE")) ||
		(Cruza_Extrato_com_Extrato.contains("FALSE") && cruzaExtrato.contains("FALSE"))) {
			
		   
		try {
			JSONArray extratoEmpresa = getExtratosEmpresa(codEmpresa, dbIOCont, logger);

			if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
				for (int t=0; t<extratoEmpresa.length(); t++) {

					JSONObject recMov = extratoEmpresa.optJSONObject(t);

					recMov.put("CODEMPRESA", codEmpresa);
					recMov.put("NOMEEMPRESA", nomeEmpresa);

					//QUANDO FOR CRUZAMENTO DE EXTRATO, MANTER NOME UNICO NO ARQUIVO FINAL.
					if (leuFinanceiro && cruzaExtrato.contains("TRUE")) {
						recMov.put("NOMEARQUIVO", nomeArquivo);
					}
					else {
						recMov.put("NOMEARQUIVO", "");
					}

					recMov.put("TIPOLANCAMENTO", tipoLancamento).put("CONTAMOVIMENTO", "").put("CONTAPORTADOR", "").put("CONTLINHATEXTO", String.valueOf(t));

					ttMovimentoPadrao ttMovExtrato = getMovimentoExtrato(recMov, logger);					
					if (nomeArquivo.toUpperCase().contains("FILTRO_")){
						boolean filtro = validaFiltro(nomeArquivo, ttMovExtrato.dataMovimento);
						temFiltro = true;
						if(!filtro) continue;
					}
					 
					
					String consolidaClass = StringUtil.leftPad(String.valueOf(t), 06, "0");
					ttMovExtrato.classificacao = ttMovExtrato.dataMovimento.replace("/","").trim() + "5" + consolidaClass;
					
					String leuCnpj = "";
					if (ttMovExtrato.nomeOrigem.contains(".") && ttMovExtrato.nomeOrigem.contains("-")) {
						leuCnpj = getCpfCnpj(ttMovExtrato.nomeOrigem);
						
						if (!leuCnpj.equals("")) {
							ttMovExtrato.nomeOrigem = ttMovExtrato.nomeOrigem.replaceAll(leuCnpj, leuCnpj.replaceAll("\\.","").replaceAll("/","").replaceAll(" ","").replaceAll("-",""));
						}	
					}	
					if (ttMovExtrato.complemento01.contains(".") && ttMovExtrato.complemento01.contains("-")) {
						leuCnpj = getCpfCnpj(ttMovExtrato.complemento01);
						if (!leuCnpj.equals("")) {
							ttMovExtrato.complemento01 = ttMovExtrato.complemento01.replaceAll(leuCnpj, leuCnpj.replaceAll("\\.","").replaceAll(" ","").replaceAll("/","").replaceAll("-",""));
						}
					}
					mapaVariavel.put(ttMovExtrato.chave, ttMovExtrato);
					apagaExtrato    = true;

				}
			}
		}
		catch (Exception xx) {
			// logger.logDebug("ATENCAO - PROBLEMA NA LEITURA DE EXTRATO - BANCO");
		}

	} // if tipo planilha nao igual extrato
	
	// logger.logDebug("ETAPA 03 TEMPLATE ");
	
	// --------------------------------------------------------------------------------------------------------------------
	// #DOCUMENTACAO
	// INICIO DAS ITERACOES
	StringBuilder[] txtFiscal = new StringBuilder[20];
  	for (int i= 0; i < 20; i++) {
		txtFiscal[i] = new StringBuilder("");
		loteFiscal[i] = "";		
	}

	StringBuilder txtFornecedor = new StringBuilder();
	StringBuilder txtPortador   = new StringBuilder();
	StringBuilder txtConciliacao= new StringBuilder();
	String nomePortadorAnterior = "";
	
	// if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB")) txtFiscal[0].append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // #Fabrica(2019-08-13) @Vini
	if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB") && tipoLancamento.contains("PAGAR")) txtFiscal[0].append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // JWR 01022021
	if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB") && tipoLancamento.contains("RECEBER")) txtFiscal[0].append("PGTOCLI").append(cnpjEmpresa).append("\r\n"); // JWR 01022021

	StringBuilder ResumoTxt = new StringBuilder();
	String rn = "\r\n";
	ResumoTxt = new StringBuilder();
	ResumoTxt.append("").append(rn).append(rn);

	ResumoTxt.append("STATUS;DATA;TIPO DATA;VALOR;DOCUMENTO;CLIENTE/FORNECEDOR;PORTADOR;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;COMPLEMENTO06;;CTA DEBITO ENCONTRADA;CTA CREDITO ENCONTRADA;REGRA CONTA CRM;HISTORICO;REGRA HISTORICO;;DATA;DEBITO;CLASS DEB;NOME CONTA;CREDITO;CLASS CRED;NOME CONTA;VALOR;HISTORICO;");
	ResumoTxt.append("ORIGEM");

	StringBuilder txtDePara = new StringBuilder();

	txtDePara.append("DATA;VALOR;FORNECEDOR/CLIENTE;PORTADOR;CONTA DEBITO;CONTACREDITO;DOCUMENTO;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;C.CUSTO;ARQUIVO");
	txtDePara.append("\r\n");
	
	
	// logger.logDebug("DIRNAME " + dirName);
	if (mantemArquivo.equals("SIM")) {
		File fileDepoisLista = new File(dirName);
		File [] filesDepois = fileDepoisLista.listFiles(); 
		
		if (filesDepois.length > 1) putStatus(dirName, "", jStatus, logger);
	}
	// logger.logDebug("TEMPLATE ETAPA 03 ");


	int contRegra = -1;
	
	String loteEtapaTres = "";
	
	
	try {
		Iterator itExtrato = mapaVariavel.keySet().iterator();
		while (itExtrato.hasNext()) {
			String chaveExtrato     = "";

			String key = (String)itExtrato.next();
			ttMovimentoPadrao ttMov = (ttMovimentoPadrao)mapaVariavel.get(key);

			if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
				roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
			}else{
				roteiroCRM = getRoteiro();
			}
			
 			loteEtapaTres = ttMov.lote;
 
			
			// #DOCUMENTACAO
			// TRATA LOTES (MAIUSCULO e MINUSCULO)
			
			if(ttMov.lote.lastIndexOf("__") > ttMov.lote.indexOf("__")){
				ttMov.lote = nomeEmpresa +"_"+ codEmpresa +"_"+ 
				             cutString(ttMov.lote, ttMov.lote.indexOf("__"), ttMov.lote.lastIndexOf("__")).toLowerCase() +"_"+ ttMov.lote.substring(ttMov.lote.lastIndexOf("__"));
			}
			

			// #DOCUMENTACAO
			// EVITA GERAR 2 ARQUIVOS QUANDO TEM TRATAR COMO EXTRATO
			// ajusta o ott_oud__ para poder reprocessar o arquivo automaticamnete pelo portal
			ttMov.lote = ttMov.lote.replace(ttMov.debitoCredito,"").replace("extrato-debito","").replace("extrato-credito","").replace("___","_").replace("__","_");
			if (!ttMov.lote.toLowerCase().contains("ott_oud__") && ttMov.lote.toLowerCase().contains("ott_oud_")) {
				ttMov.lote = ttMov.lote.replace("ott_oud_","ott_oud__");
			}
			
			// #DOCUMENTACAO
			// JUNCAO DOS LANCAMENTOS COM OS JUROS E DESCONTOS (TRATAR COMO JUROS OU DESCONTO)
			String chaveJuros = ttMov.dataMovimento + "-" + ttMov.documento + "-JUROS";
			ttJuros ttJ  = (ttJuros)mapaJuros.get(chaveJuros);
			if (ttJ != null && ttJ.valorLido == 0) {
				ttMov.valorJuros  = ttJ.valorJur;
				ttJ.valorLido     = 1;
				mapaJuros.put(chaveJuros,ttJ);

			}

			String chaveDesconto = ttMov.dataMovimento + "-" + ttMov.documento + "-DESCONTO";
			ttDesconto ttD  = (ttDesconto)mapaDesconto.get(chaveDesconto);
			if (ttD != null && ttD.valorLido == 0) {
				ttMov.valorDesconto  = ttD.valorDesc;
				ttD.valorLido     = 1;
				mapaDesconto.put(chaveDesconto,ttD);

			}
			contRegra++;
			int restoLinha = 0;
			restoLinha = (contRegra % 100);
			//logger.logDebug("ANTES 3 DE 4");
			
			// if (codEmpresa.contains("277")) logger.logDebug("TRESDEQUATRO " + " | " + ttMov.tipoP + ttMov.debitoCredito + " | " +  ttMov.dataMovimento + " | " + ttMov.valorDocumento);
			
 			if (restoLinha == 0) putStatus(dirName, "03--Etapa 3 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
			
			// logger.logInfo("3 de 4 = NA = "+ttMov.nomeArquivo+" | LT = "+ttMov.lote);
			
			// if (codEmpresa.contains("1722")) 
			// logger.logDebug("TPPORTTEMPLATE " + ttMov.tipoPlanilha + " | " + ttMov.lote + " | " + ttMov.dataMovimento + " | " + ttMov.tipoLancamento + " | " + ttMov.debitoCredito + " | " + ttMov.dataMovimento + " | " + ttMov.valorDocumento);
			// if (codEmpresa.contains("244")) logger.logDebug("TPPORTTEMPLATE " + ttMov.tipoPlanilha + " | " + ttMov.nomeOrigem);
			
			
			// if(codEmpresa.equals("987789")) logger.logDebug("DATA == "+ttMov.dataMovimento+" | LOTEEE == "+ttMov.lote.replace("rodaconversor", "")+" | TP === "+ttMov.tipoPlanilha);
			if (ttMov.tipoPlanilha.contains("CARTAO")) ttMov.tipoPlanilha = ttMov.tipoPlanilha.replaceAll("[0-9]", "").trim(); //JWR
			
			ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("\'","");
			ttMov.complemento01 = ttMov.complemento01.replaceAll("\'","");
			ttMov.complemento02 = ttMov.complemento02.replaceAll("\'","");
			ttMov.complemento03 = ttMov.complemento03.replaceAll("\'","");
			ttMov.complemento04 = ttMov.complemento04.replaceAll("\'","");
			ttMov.complemento05 = ttMov.complemento05.replaceAll("\'","");
			
			ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
   			ttMov.nomePortador = ttMov.nomePortador.replaceAll("\\|","");
			ttMov.complemento01 = ttMov.complemento01.replaceAll("\\|","");
			
			classificaPlano     = roteiroCRM.optString("classificaPlano");
			classificaFornec    = roteiroCRM.optString("classificaFornec");
			cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
			Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
			
			if(/*roteiroCRM.optString("empresa").toUpperCase().contains("POSTOBRAGA") && */ttMov.nomeArquivo.toUpperCase().contains(".OMC")){//yuri
				cruzaExtrato = "FALSE";
				Cruza_Extrato_com_Extrato = "FALSE";
			}
			
			String integraFiscal = roteiroCRM.optString("Integracao_fiscal").toUpperCase();
			String integraContrato = roteiroCRM.optString("Integracao_contratos").toUpperCase();
			
			// if (codEmpresa.contains("856")) logger.logDebug("PORTADOR " + ttMov.nomeOrigem);

			if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) continue;
			if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-DEBITO")) continue;
			// logger.logDebug("PORTAS1 " + cutString(ttMov.nomePortador.toUpperCase(), "_ID", "_"));
			// logger.logDebug("PORTAS2 " + ttMov.nomePortador);
			if (ttMov.nomePortador.toUpperCase().contains("OTT_OUD") && ttMov.nomePortador.toUpperCase().contains("CEF")) ttMov.nomePortador = cutString(ttMov.nomePortador.toUpperCase(), 0, "OTT_") + " " + cutString(ttMov.nomePortador.toUpperCase(), ttMov.nomePortador.toUpperCase().indexOf(cutString(ttMov.nomePortador.toUpperCase(), "_ID", "_"))+cutString(ttMov.nomePortador.toUpperCase(), "_ID", "_").length()+1);
			
			// logger.logDebug("TIPOS " + tipoPlanilha);
			
			if (ttMov.tipoPlanilha.contains("EXTRATO") || ttMov.tipoPlanilha.contains("FRANCESINHA")) {
				JSONObject histobj = new JSONObject();
				histobj.put("nomeOrigem", ttMov.nomeOrigem).put("documento", ttMov.documento).put("complemento01", ttMov.complemento01).put("complemento02", ttMov.complemento02)
					   .put("complemento03", ttMov.complemento03).put("complemento04", ttMov.complemento04).put("complemento05", ttMov.complemento05)
					   .put("complemento06", ttMov.complemento06).put("nomePortador", ttMov.nomePortador).put("dataMovimento", ttMov.dataMovimento)
					   .put("valorDocumento", ttMov.valorDocumento).put("valorJuros", ttMov.valorJuros).put("valorDesconto", ttMov.valorDesconto)
					   .put("valorMulta",ttMov.valorMulta).put("tipoPlanilha", ttMov.tipoPlanilha);
  								
				String modificaData = getModificaData(histobj);
				
				if (modificaData.startsWith("01"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 1, true);
				if (modificaData.startsWith("02"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 2, true);
				if (modificaData.startsWith("03"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 1, false);
				if (modificaData.startsWith("04"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 2, false);
				if (modificaData.startsWith("05"))  ttMov.dataMovimento = "01/" + cutString(ttMov.dataMovimento, "/");
				if (modificaData.startsWith("06"))  ttMov.dataMovimento = getLastDayOfMonth(ttMov.dataMovimento, true);
			}
 
  
			// ------------------------------------------------------------------------------------------------------------------
			// 	 		INICIA PROCESSO DE CRUZAMENTO COM EXTRATO
			// ------------------------------------------------------------------------------------------------------------------
			String DATAMOVIMENTO   = "";
			String PORTADOR        = "";
			String CHAVE           = "";
			boolean jaCruzou       = false;
			
			ttMov.valorJuros = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorJuros));
			ttMov.valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDesconto));
			ttMov.valorMulta = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorMulta));
			ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento));
			// ajuste 11/2020 @DiMaz
			if (ttMov.valorDocumento == 0) continue;
 

			// #DOCUMENTACAO
			// EXTRATO COM EXTRATO
			if (Cruza_Extrato_com_Extrato.contains("TRUE") && ttMov.tipoPlanilha.contains("EXTRATO")) {

				String tipoData = "MOVIMENTO";
				Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
				Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);
				if (ttMov.valorDocumento == 0) continue;
  

				JSONArray extratoEmpresa = new JSONArray();
				String transferencia = "NAO";

				if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-DEBITO"))  transferencia = "SIM";
				if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) transferencia = "SIM";

				if (transferencia.equals("SIM")) {
					for (int xx = 0;xx<1;xx++) {
						try {
							String dataLeitura = ttMov.dataMovimento;

							if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
							if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

							extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
							.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
							.param(chaveExtrato + "%")
							.param(0)
							.param(ttMov.nomeArquivo.toUpperCase())
							.query();

							if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
								break;
							}
						}
						catch (Exception xx) {
							break;
						}
					}
				}

				if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
					JSONObject recMov = extratoEmpresa.optJSONObject(0);

					DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
					PORTADOR        = recMov.optString("PORTADOR");
					CHAVE           = recMov.optString("CHAVE");

					ttMov.complemento04 = ttMov.nomeOrigem;
					ttMov.nomeOrigem    = PORTADOR;
					ttMov.dataMovimento = DATAMOVIMENTO;
					ttMov.tipoPlanilha  = "EXTRATO-TRANSFERENCIA";

					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(1)
					.param(CHAVE)
					.execute();
					jaCruzou = true;

				}
			}

			// #DOCUMENTACAO
			// EXTRATO COM PLANILHA
			if (cruzaExtrato.contains("TRUE")  && !jaCruzou) {

				Conta_Fixa_Cruzamento_Extrato  = roteiroCRMPrincipal.optString("Conta_Fixa_Cruzamento_Extrato");

				String tipoData = "MOVIMENTO";
				Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
				Date dataMovimentoDateMenosUm   = new Date();
				Date dataMovimentoDateMenosDois = new Date();
				Date dataMovimentoDateMenosTres = new Date();
				Date dataMovimentoDateMaisUm    = new Date();
				Date dataMovimentoDateMaisDois  = new Date();
				Date dataMovimentoDateMaisTres  = new Date();

				Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm   = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm    = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois  = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres  = cal.getTime();

				if (ttMov.valorDocumento == 0) continue;
  

				JSONArray extratoEmpresa = new JSONArray();

				String transferencia = "NAO";

				if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
					for (int xx = 0;xx<7;xx++) {
						try {
							String dataLeitura = ttMov.dataMovimento;
							if (xx ==1) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisUm, "dd/MM/yyyy");
							if (xx ==2) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosUm, "dd/MM/yyyy");
							if (xx ==3) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisDois, "dd/MM/yyyy");
							if (xx ==4) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosDois, "dd/MM/yyyy");
							if (xx ==5) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisTres, "dd/MM/yyyy");
							if (xx ==6) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosTres, "dd/MM/yyyy");


							if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
							if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

							extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
							.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
							.param(chaveExtrato + "%")
							.param(0)
							.param(ttMov.nomeArquivo.toUpperCase())
							.query();

							if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
								break;
							}
						}
						catch (Exception xx) {
							break;
						}
					}
				}

				if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
					JSONObject recMov = extratoEmpresa.optJSONObject(0);

					DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
					PORTADOR        = recMov.optString("PORTADOR");
					CHAVE           = recMov.optString("CHAVE");
					if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) ttMov.complemento02 = recMov.optString("COMPLEMENTO"); //checknum

					ttMov.nomePortador  = PORTADOR;
					ttMov.dataMovimento = DATAMOVIMENTO;

					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(1)
					.param(CHAVE)
					.execute();

				}

			}
			
			if (ttMov.lote.contains("_ancora_")) {
				ttMov.lote = ttMov.lote.replace("_ancora_", "");
			}
			
			if (ttMov.lote.contains("_ANCORA_")) {
				ttMov.lote = ttMov.lote.replace("_ANCORA_", "");
			}


			// ------------------------------------------------------------------------------------------------------------------
			// 	 		FINALO DO PROCESSO DE CRUZAMENTO COM EXTRATO
			// ------------------------------------------------------------------------------------------------------------------




			classificacao = "";

			String key2 = ttMov.chave;

			if(ttMov.dataMovimento.length() > 9){
				mesRef  = Integer.parseInt(ttMov.dataMovimento.substring(3,5));
				anoRef  = Integer.parseInt(ttMov.dataMovimento.substring(6,10));
				mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

				mesRef  = mesRef - 1;
				if (mesRef  == 0) {
					mesRef  = 12;
					anoRef  = anoRef - 1;
				}
				mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
				mesRef  = mesRef - 1;
				if (mesRef  == 0) {
					mesRef  = 12;
					anoRef  = anoRef - 1;
				}
				mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
			}

			String trimestreMesAnoAnterior	    = "";
			String trimestreMesAnoAtual   	    = "";
			String descricaoPlanoContaPortador  = "";
			String descricaoPlanoContaMovimento = "";

			// #DOCUMENTACAO
			// TRIMESTRE
			if (mesAnoAnterior.startsWith("01") || mesAnoAnterior.startsWith("02") || mesAnoAnterior.startsWith("03")) trimestreMesAnoAnterior = "1. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAnterior.startsWith("04") || mesAnoAnterior.startsWith("05") || mesAnoAnterior.startsWith("06")) trimestreMesAnoAnterior = "2. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAnterior.startsWith("07") || mesAnoAnterior.startsWith("08") || mesAnoAnterior.startsWith("09")) trimestreMesAnoAnterior = "3. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAnterior.startsWith("10") || mesAnoAnterior.startsWith("11") || mesAnoAnterior.startsWith("12")) trimestreMesAnoAnterior = "4. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAtual.startsWith("01") || mesAnoAtual.startsWith("02") || mesAnoAtual.startsWith("03")) trimestreMesAnoAtual = "1. Trimestre/" + mesAnoAtual.substring(3);
			if (mesAnoAtual.startsWith("04") || mesAnoAtual.startsWith("05") || mesAnoAtual.startsWith("06")) trimestreMesAnoAtual = "2. Trimestre/" + mesAnoAtual.substring(3);
			if (mesAnoAtual.startsWith("07") || mesAnoAtual.startsWith("08") || mesAnoAtual.startsWith("09")) trimestreMesAnoAtual = "3. Trimestre/" + mesAnoAtual.substring(3);
			if (mesAnoAtual.startsWith("10") || mesAnoAtual.startsWith("11") || mesAnoAtual.startsWith("12")) trimestreMesAnoAtual = "4. Trimestre/" + mesAnoAtual.substring(3);


			if (ttMov.nomeOrigem.equals("")) ttMov.nomeOrigem = ttMov.complemento01 + " " + ttMov.dataMovimento + " R$" + String.valueOf(ttMov.documento);
			ttMov.nomeOrigem = ttMov.nomeOrigem.trim();
			if (ttMov.nomePortador.equals("")) ttMov.nomePortador = "EM BRANCO";
			if (ttMov.nomePortador.equals("_")) ttMov.nomePortador = "EM BRANCO";
			if (ttMov.nomePortador.equals("-")) ttMov.nomePortador = "EM BRANCO";
			if (ttMov.nomePortador.replaceAll("\\$", "").equals("")) ttMov.nomePortador = "EM BRANCO";
			

			contaJuros        = roteiroCRM.optString("contaFixaJuros");
			contaFixaCredito  = roteiroCRM.optString("contaFixaCredito");
			contaFixaDebito   = roteiroCRM.optString("contaFixaDebito");
			contaDesconto     = roteiroCRM.optString("contaFixaDesconto");
			contaMulta        = roteiroCRM.optString("contaFixaMulta");

			// if(codEmpresa.equals("13")) logger.logDebug("ValorJuros -> " + ttMov.valorJuros + " |contaJuros -> " + contaJuros + " |VAlorMulta -> " + ttMov.valorMulta + " | contaMulta -> " + contaMulta + " |TTMovNO -> " + ttMov.nomeOrigem +  " | ValorDoc -> " + ttMov.valorDocumento);
			

			contaMovimento = "";
			contaPortador  = "";


			if(ttMov.tipoLancamento.contains("PAGAR")) {
				contaMovimento = contaFixaDebito;
				contaPortador  = contaFixaCredito;
			}
			if(ttMov.tipoLancamento.contains("RECEBER")) {
				contaPortador  = contaFixaDebito;
				contaMovimento = contaFixaCredito;
			}
			
			
			
			// exemplo de como vem um registro do complemento_lancaments 
			// 54999667000179-PAG-ANTONIO FLAVIO DE ARAUJO JUNIOR-2021-05-21-180.0
 			
			if (contaMovimento.equals("") && encontrouComplemento){
				try {
				
					String chaveComplemento = cnpjEmpresa.replaceAll("[^0-9]","").trim() + "-" + cutString(ttMov.tipoLancamento, 0, 3) + "-" + ttMov.nomeOrigem + "-" + 
					                          cutString(ttMov.dataMovimento, 6) + "-" + cutString(ttMov.dataMovimento, "/", "/") + "-" + cutString(ttMov.dataMovimento, 0, "/") + "-" + 
											  ttMov.valorDocumento;
											  
 																				
											  
 					ttPlano ttP  = (ttPlano)mapaDePara.get(chaveComplemento); 
					if (ttP == null) {							
						ttP  = new ttPlano(); 
						ttP.descricaoPlano = chaveComplemento;
						ttP.contaAnalitica = "";
						ttP.contaContabil     = "";
						mapaDePara.put(chaveComplemento,ttP);
							
						try{
							deParaObj = findComplementoLancamento(dbIODepara, chaveComplemento);
							}
						catch (Exception e) { 
						}
						if (deParaObj != null && !deParaObj.toString().equals("{}")) {
							if (ttMov.tipoPlanilha.contains("EXTRATO")) {
									ttMov.complemento02 = deParaObj.optString("complemento");
							} else {
								ttMov.complemento01 = deParaObj.optString("complemento");
							}
 							

						} else {
						
							//	 verifica se banco de dados possui ao menos algum lancamento de complemento
							//   se nao encontrar, joga false na encontrouComplemento para ter mais performance e nao buscar no 
							//   banco  de dados a toa
							chaveComplemento = cnpjEmpresa.replaceAll("[^0-9]","").trim() + "-" + cutString(ttMov.tipoLancamento, 0, 2);
							try{
								deParaObj = findComplementoLancamento(dbIODepara, chaveComplemento);
								}
							catch (Exception e) { 
							}
							if (deParaObj == null || deParaObj.toString().equals("{}"))  encontrouComplemento = false;
 						
						}
						

					}  
				} catch  (Exception Ee) {}
			}
			
 
			// Quando pede para cruzar extrato e nao encontra relacionamento com o extrato
			// joga conta fixa de extrato em DEBITO quando for extato e CREDITO quando for planilha
			if ((cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO")) && PORTADOR.equals("")) {
				if (ttMov.tipoPlanilha.contains("EXTRATO"))  contaMovimento  = Conta_Fixa_Cruzamento_Extrato;
				if (!ttMov.tipoPlanilha.contains("EXTRATO")) contaPortador   = Conta_Fixa_Cruzamento_Extrato;
			}


			ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

			contaMovimento    = getConta09(contaMovimento, ttMov.nomeOrigem,  ttMov.documento, "", ttMov.complemento01,  ttMov.complemento02,  ttMov.complemento03, "",  ttMov.centroCusto);
			contaPortador     = getConta09(contaPortador, "", "", ttMov.nomePortador, "", "", "", ttMov.nomeArquivo, "");
			//ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, "", ttMov.centroCusto);
			//2310-017917 - As regras de centro custo tem validacao com o nome do arquivo e n?o funcionava porque nomeArquivo nao estava sendo passado no getCentroCusto
			ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, nomeArquivo, ttMov.centroCusto); 
			ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
										  ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
										  ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);
			if (!ttMov.codFilial.equals("") && roteiroCRMPrincipal.optString("erpContabilidade").equals("CUCA-FRESCA")) ttMov.cpfCnpj = ttMov.codFilial;

			ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

			JSONObject histobj = new JSONObject();

			histobj.put("nomeOrigem", ttMov.nomeOrigem).put("documento", ttMov.documento).put("complemento01", ttMov.complemento01).put("complemento02", ttMov.complemento02)
				   .put("complemento03", ttMov.complemento03).put("complemento04", ttMov.complemento04).put("complemento05", ttMov.complemento05)
				   .put("complemento06", ttMov.complemento06).put("complemento07", ttMov.complemento07).put("complemento08", ttMov.complemento08)
				   .put("complemento09", ttMov.complemento09).put("complemento10", ttMov.complemento10).put("dataMovimento", ttMov.dataMovimento)
				   .put("mesAnoAnterior", mesAnoAnterior).put("mesAno2Anterior", mesAno2Anterior).put("mesAnoAtual", mesAnoAtual).put("nomePortador", ttMov.nomePortador)
				   .put("contaMovimento", contaMovimento).put("contaPortador", contaPortador).put("contaDebito", "").put("contaCredito", "").put("contaJuros", ttMov.contaJuros)
				   .put("contaDesconto", ttMov.contaDesconto).put("contaMulta", ttMov.contaMulta).put("centroCusto", ttMov.centroCusto)
				   .put("valorDocumento", ttMov.valorDocumento).put("valorJuros", ttMov.valorJuros).put("valorDesconto", ttMov.valorDesconto).put("valorMulta", ttMov.valorMulta)
				   .put("codFilial", ttMov.codFilial).put("tipoPlanilha", ttMov.tipoPlanilha).put("numeroAba", ttMov.abaPlanilha).put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

			ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getReplaceTermos("complemento08", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getReplaceTermos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getReplaceTermos("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getReplaceTermos("nomePortador",  ttMov.nomePortador,   histobj);

			ttMov.complemento01 = getLimpaCampos("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getLimpaCampos("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getLimpaCampos("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getLimpaCampos("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getLimpaCampos("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getLimpaCampos("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getLimpaCampos("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getLimpaCampos("complemento09", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getLimpaCampos("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getLimpaCampos("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getLimpaCampos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getLimpaCampos("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getLimpaCampos("nomePortador",  ttMov.nomePortador,   histobj);

			histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
			histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
			histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
			histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
			histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
			histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
			histobj.put("nomePortador", ttMov.nomePortador);

			ttMov.complemento01 = getLimpaCamposAvancado("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getLimpaCamposAvancado("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getLimpaCamposAvancado("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getLimpaCamposAvancado("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getLimpaCamposAvancado("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getLimpaCamposAvancado("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getLimpaCamposAvancado("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getLimpaCamposAvancado("complemento09", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getLimpaCamposAvancado("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getLimpaCamposAvancado("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getLimpaCamposAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getLimpaCamposAvancado("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getLimpaCamposAvancado("nomePortador",  ttMov.nomePortador,   histobj);

			ttMov.complemento01 = getReplaceTermosAvancado("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getReplaceTermosAvancado("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getReplaceTermosAvancado("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getReplaceTermosAvancado("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getReplaceTermosAvancado("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getReplaceTermosAvancado("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getReplaceTermosAvancado("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getReplaceTermosAvancado("complemento09", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getReplaceTermosAvancado("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getReplaceTermosAvancado("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getReplaceTermosAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getReplaceTermosAvancado("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getReplaceTermosAvancado("nomePortador",  ttMov.nomePortador,   histobj);

			histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
			histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
			histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
			histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
			histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
			histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
			histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
			histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
			histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
			histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
			histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
			histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
			histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
			histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
			histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
			histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
			histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

			
			// Quando selecionado para controlar parcela, buscar complemento apos a limpeza para poder jogar em parcela
			String parcelaString = "1";
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO01")) parcelaString = ttMov.complemento01;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO02")) parcelaString = ttMov.complemento02;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO03")) parcelaString = ttMov.complemento03;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO04")) parcelaString = ttMov.complemento04;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO05")) parcelaString = ttMov.complemento05;

			try {
				ttMov.parcelaDoc = Integer.parseInt(parcelaString);
			}
			catch (Exception xx) { ttMov.parcelaDoc = 1;}
			
			//Feito para retirar os indices apos o tipoPlanilha, estavam impactando nas regras do oud
			if(!ttMov.tipoPlanilha.equals("")){
				String sequencia = "";
				try{
					sequencia = cutString(ttMov.tipoPlanilha, ttMov.tipoPlanilha.length()-4).replaceAll("[^0-9]", "");
				}catch(Exception s1){}
				if(ttMov.tipoPlanilha.contains(sequencia)){
					try{
						ttMov.tipoPlanilha = cutString(ttMov.tipoPlanilha, 0, sequencia);
						
					}catch(Exception s2){}
				}
			}
			
			// logger.logDebug("TTMS " + ttMov.tipoPlanilha + " | " + ttMov.complemento01 + " | " + ttMov.nomeOrigem + " | " + ttMov.complemento02);
			
		
			contaMovimento = getContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			contaMovimento = getContaMovimento2(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			contaMovimento = getContaMovimento3(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			contaPortador  = getContaPortador(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			
			//#2305-004914. Carrega a chamadas das rotinas getContaMovimento e getContaPortador caso n?o tenha ainda.
			// Classe Principal SC
			Class<?> sc = this.getClass();
			// Instancia da Classe Principal
			Object scInstance = sc.newInstance();
			// Get all Methods from superclass 'SC'.
			java.lang.reflect.Method[] methods = sc.getDeclaredMethods();
			boolean methodFoundPortador = false;
			boolean methodFoundMovimento = false;			
			for(java.lang.reflect.Method method : methods) {
				String methodName = method.getName();				
				methodFoundPortador = false;
				methodFoundMovimento = false;
				if(methodName.toUpperCase().contains("GETCONTAMOVIMENTO")) {
					methodFoundMovimento = true;
				}
				if(methodName.toUpperCase().contains("GETCONTAPORTADOR")) {
					methodFoundPortador = true;
				}
				
				try {
					if(methodFoundMovimento) {					
						// Invoca metodo de getContaMovimento.
						contaMovimento = (String) method.invoke(scInstance, contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
					}
					if(methodFoundPortador) {
						// Invoca metodo de getContaPortador.					
						contaPortador = (String) method.invoke(scInstance, contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
					}
				} catch (Exception e) {}
			}
			
			if (codEmpresa.equals("00001")) logger.logInfo("Pelo getContaMovimento " + contaMovimento);
			
			// Soares - Mudanca no template referente a uma parte do chamado =>> 202208-0017982
			
			if(roteiroCRM.optString("gravaCnpjMovimento").toUpperCase().contains("TRUE")){
				if(contaMovimento.equals("")) {
					if(!ttMov.cpfCnpj.equals("")){
						contaMovimento = ttMov.cpfCnpj;
						if((roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().startsWith("SCI") || roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("PROSOFT")) && !ttMov.cpfCnpj.equals(""))
							contaMovimento = ttMov.cpfCnpj + "P";
					}
				}
				else {ttMov.cpfCnpj = "";}
			}
 			
			regraContaMovimento  = getRegraContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			
			// logger.logDebug("CONTINHA "  + contaMovimento + " | " + regraContaMovimento);
			// logger.logDebug("CONTA MOV == "+contaMovimento+" | NO == "+ttMov.nomeOrigem+" | TP = "+ttMov.tipoPlanilha);

			double valorPrincipal 	 = getValorPrincipal("", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			if (valorPrincipal> 0 && ttMov.valorDocumento > valorPrincipal) {
				ttMov.valorJuros     = ttMov.valorDocumento - valorPrincipal;
				ttMov.valorDocumento = valorPrincipal;
			}
			
			ttMov.complemento03 	= ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";
			ttMov.contaJuros        = getContaJuros(contaJuros,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			ttMov.contaDesconto     = getContaDesconto(contaDesconto,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			ttMov.contaMulta        = getContaMulta(contaMulta,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			tabelaContabil   		= getTabelaContabil("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);
			ttMov.complemento03  	= ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();
			// if(roteiroCRM.optString("empresa").toUpperCase().contains("FARMAGIL")){
				// logger.logDebug("TIPO PLANILHINHA == "+ttMov.tipoPlanilha+" | ttMov.contaDesconto - "+ttMov.contaDesconto+" - contaDesconto - "+contaDesconto+" | "+roteiroCRM.optString("contaFixaDesconto"));
			// }
			// logger.logDebug("Contabilidade - "+roteiroCRM.optString("contabilidade")+" - empresa => "+roteiroCRM.optString("empresa"));
			// logger.logDebug("TP - "+tipoPlanilha+" - conta fixa => "+roteiroCRM.optString("contaFixaJuros")+""+roteiroCRM.optString("contaFixaMulta")+""+roteiroCRM.optString("contaFixaDesconto")+"");
			// logger.logDebug("ttMov.contaJuros - "+ttMov.contaJuros+" - ttMov.contaDesconto - "+ttMov.contaDesconto+" - ttMov.contaMulta - "+ttMov.contaMulta);

			// quando for forcada partida dobrada , vamos jogar a conta de juros automaticamente na conta movimento
			if (!contaMovimento.contains("IGNORA")) { // colocado para ignorar os lancamentos de partida dobrada quando o lancamento principal eh ignorado 20122022 JWR
				if (ttMov.chave.contains("DOBRADA_JUR") && !ttMov.contaJuros.equals("")) contaMovimento = ttMov.contaJuros;//#2304-002846
				if (ttMov.chave.contains("DOBRADA_DES")) {
					// invers?o de contas em desconto.
					contaMovimento = contaPortador;
					if (!ttMov.contaDesconto.equals("")) contaPortador = ttMov.contaDesconto;
				}
				if (ttMov.chave.contains("DOBRADA_MUL") && !ttMov.contaMulta.equals("")) contaMovimento = ttMov.contaMulta;
			}
			

			boolean regraCRM = false;
			// logger.logDebug("contaMovimento F -> " + contaMovimento);
			if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;

		   	//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---

			if (!contaMovimento.equals("")){
			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {					
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";


					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresaPlanoContas)
					.param(cutString(contaMovimento,0, 20))
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresaPlanoContas)
						.param(cutString(contaMovimento,0, 20))
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}		
					ttP.contaContabil     = cutString(contaMovimento,0, 20);
					mapaPlano.put(contaMovimento,ttP);
				}
			}
			
			

			regraCRM = false;
			if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;
			
 			
			if (contaMovimento.equals("")){
				// logger.logDebug("Chegou 2");
				try {
					String classificacaoPlanoContas = getCodigoClassificacao(ttMov.nomeOrigem, histobj); // exemplo: 2.1.1.01.
					JSONObject futureObject = new JSONObject();
					//JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
					futureObject.put("codEmpresaPlano", codEmpresaPlanoContas);
					futureObject.put("fazLcdpr", fazLcdpr);
					JSONObject ret = new JSONObject();
					try {
						ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
					} catch (Exception e) {
						// logger.logDebug("XABU RET " + e.getMessage());
					}
					if (ret != null) {
						if(ttMov.tipoLancamento.contains("PAGAR") && ret.has("contaDebito")) contaMovimento = ret.optString("contaDebito");
						if(ttMov.tipoLancamento.contains("RECEBER") && ret.has("contaCredito")) contaMovimento = ret.optString("contaCredito");
					}
					if (codEmpresa.equals("00001")) logger.logInfo("Cmm " + contaMovimento);
					//JWR 30012024 
					// logger.logDebug("PEGOU PELO PARTICIPAS " + contaMovimento);
					if (roteiroCRMPrincipal.optString("erpContabilidade").equals("JBSOFTWARE") && contaMovimento.contains("P")) contaMovimento = contaMovimento.replaceAll("P", "");
					
					if (contaMovimento == null || contaMovimento.trim().length() == 0) {
						contaMovimento = "";
						
						// CASO NAO ACHOU CONTA EM REGRAS NEM NO DEPARA ATUAL
						// VERIFICA SE E A PRIMEIRA VEZ QUE BUSCA A DESCRICAO NA NUVEM
						// INSERIDO PARA TRATGAR O BUSSOLA 3.0 
						
						ttPlano ttP  = (ttPlano)mapaDePara.get(ttMov.nomeOrigem);
						if (ttP == null) {							
							ttP  = new ttPlano(); 
							ttP.descricaoPlano = ttMov.nomeOrigem;
							ttP.contaAnalitica = "";
	
							ttP.contaContabil     = "";
							mapaDePara.put(ttMov.nomeOrigem,ttP);
							
							// BUSCA DEPARA PREENCHIDO PELO CONTADOR NO BUSSOLA 3.0 
							String cnpjEmpresaRequest = cnpjEmpresa.replaceAll("[^0-9]","").trim();
							String cnpjContabilidadeRequest = roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/","");
							if (codEmpresa.equals("00001")) logger.logInfo("SUJANDO "  + cnpjEmpresaRequest + " | " + cnpjContabilidadeRequest + " | " + ttMov.nomeOrigem);
							// logger.logDebug("SUJANDO 2 = "  + ttMov.valorDocumento + " | " + ttMov.nomeOrigem);
							try{
								// logger.logDebug("ttMov.nomeOrigem -> " + ttMov.nomeOrigem);
								deParaObj = findDeParaDescricao(dbIODepara, cnpjEmpresaRequest, cnpjContabilidadeRequest, ttMov.nomeOrigem);
 								
								}
							catch (Exception e) { 
								logger.logDebug("CATCH DPR " + e.getMessage());
							}
							if (deParaObj != null ) {
								if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = deParaObj.optString("conta_debito");
								if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = deParaObj.optString("conta_credito");
								// logger.logDebug("contaMovimento -> " + contaMovimento);
								if (contaMovimento == null) contaMovimento = "";
								// logger.logDebug("CONTS " + contaMovimento);
								// Quando cliente inserir a contaT no DEpara Nuvem, vamos apagar no final da rota 
								if (contaMovimento.contains("T")) {
									apagaContaT    = true;
								}
								
								// logger.logDebug("CMM " + contaMovimento + " | " + apagaContaT);
								
								
							}else contaMovimento = "";
							
							
							// SE ENCONTROU DAPARA NA NUVEM GRAVA NO H2 PARA NA PROXIMA VEZ// ACHAR LOCALMENTE O DEPARA
							/*if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("PAGAR")) {
									if (!hasPessoaPag(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("PAGAR")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "",
															contaMovimento, "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "", contaMovimento, "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}
							if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("RECEBER")) {
									if (!hasPessoaRec(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("RECEBER")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento,
													"", "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento, "", "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}*/
							
							// RETIRA  T DA CONTA MOVIMENTO
							contaMovimento = contaMovimento.replaceAll("T", "").replaceAll("t","");
							ttP.contaContabil     = contaMovimento;
							mapaDePara.put(ttMov.nomeOrigem,ttP);
						
						} 
						else {
							contaMovimento = ttP.contaContabil;
						}
						
						
					}  
				} catch  (Exception Ee) {}
			}

			if (fazLcdpr.equals("TRUE")) {
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO") && !contaMovimento.contains("R")) {
					ObjParticipante objParticipante = (ObjParticipante)mapaParticipante.get(ttMov.nomeOrigem);
					if (objParticipante != null) {
						contaMovimento = contaMovimento + "R" + objParticipante.codigoParticipante;
					}
				}
				
		   	}
			

			
 			
			if(roteiroCRMPrincipal.optString("erpContabilidade").contains("DEXION")){
				if (contaMovimento.equals("")) {
						JSONObject descricaoPlano = dbIOCont.sql("SELECT CONTACONTABIL FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOPLANO LIKE ?")
						.fields("CONTACONTABIL")
						.param(codEmpresaPlanoContas)
						.param(ttMov.cpfCnpj + "%")
						.queryUnique();
						contaMovimento = descricaoPlano.optString("CONTACONTABIL").trim();
				}
			}

			if (contaPortador.equals("")) {
				try {
					ttFornecedor ttF  = (ttFornecedor)mapaFornecedor.get(ttMov.nomePortador+"PORT");
					if (ttF == null) {					
						ttF  = new ttFornecedor(); 

						JSONArray portadorDePara =  findPortador(dbIOCont, codEmpresa, ttMov.nomePortador);
						if (portadorDePara != null && portadorDePara.length() > 0) {
							JSONObject ret = portadorDePara.optJSONObject(0);
							contaPortador = ret.optString("CONTACONTABIL").trim();
						}

						ttF.contaMovimento = contaPortador;
						ttF.nomeOrigem     = ttMov.nomePortador + "PORT";
						mapaFornecedor.put(ttMov.nomePortador + "PORT",ttF);
					} else {
						contaPortador = ttF.contaMovimento;
					}
				}
				catch  (Exception Ee) {}
			}

			String contaTipoFornecedor = "999333";

			boolean eFornecedor = false;
			String  razaoSocial = ttMov.nomeOrigem;
			String  razaoSocialDuplicata = ttMov.nomeOrigem;
			if (contaMovimento.toUpperCase().contains("FISCAL"))  eFornecedor = true;

			if (!contaMovimento.equals("")){			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";

					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
								.fields("DESCRICAOPLANO,CONTAANALITICA")
								.param(codEmpresaPlanoContas)
								.param(contaMovimento)
								.queryUnique();

					if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO") && descricaoPlano.has("CONTAANALITICA") ) {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");						
					}
					ttP.contaContabil     = contaMovimento;
					mapaPlano.put(contaMovimento,ttP);
				}

				descricaoPlanoContaMovimento = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
					razaoSocial = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				}

				// Joga no nome do fornecedor o que esta no plano de contas
				if (!classificaPlano.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaPlano))) {
					ttMov.nomeOrigem = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				}
				if (ttP.descricaoPlano.length() < 2 || ttP.descricaoPlano.equals("") || ttP.descricaoPlano == null) {
					eFornecedor = true;
				}		

				if (razaoSocial.length() < 4) razaoSocial = ttMov.nomeOrigem;

				if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
					eFornecedor = true;
				}  
			}

			if (!contaPortador.equals("")){
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaPortador);
				if (ttP == null) {
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";
					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresaPlanoContas)
					.param(cutString(contaPortador,0, 20))
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresaPlanoContas)
						.param(cutString(contaPortador,0, 20))
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}
					ttP.contaContabil     = cutString(contaPortador,0, 20);
					mapaPlano.put(contaPortador,ttP);
				}
				descricaoPlanoContaPortador = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
			}
			
			if(ttMov.tipoLancamento.contains("PAGAR")) {
				ttMov.contaDebito  = cutString(contaMovimento,0, 20);
				ttMov.contaCredito = cutString(contaPortador,0, 20);
			}
			if(ttMov.tipoLancamento.contains("RECEBER")) {
				ttMov.contaCredito  = cutString(contaMovimento,0, 20);
				ttMov.contaDebito   = cutString(contaPortador,0, 20);
			}
			
			// logger.logDebug("CONTASTEMP " + ttMov.contaDebito + " | " + ttMov.contaCredito);
			
			if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
  				temIgnorar = true;
				ResumoTxt.append("\r\n");
				comparaRazao = true;


				ResumoTxt.append("REGRA DE IGNORAR CONTA MOVIMENTO;");
				ResumoTxt.append(ttMov.dataMovimento).append(";").append(ttMov.dataMovimento).append(";")
						 .append(ttMov.valorDocumento).append(";").append(ttMov.documento).append(";")
						 .append(ttMov.nomeOrigem).append(";").append(ttMov.nomePortador).append(";")
						 .append(ttMov.complemento01).append(";").append(ttMov.complemento02).append(";")
						 .append(ttMov.complemento03).append(";").append(ttMov.complemento04).append(";")
						 .append(ttMov.complemento05).append(";").append(ttMov.complemento06).append(";;")
						 .append(ttMov.contaDebito).append(";").append(ttMov.contaCredito).append(";")
						 .append(regraContaMovimento).append(";").append(ttMov.historico).append(";");
				
				mapaVariavel.put(key,ttMov);
  
				continue;
			}
			if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
				temIgnorar = true;
 				
				ResumoTxt.append("\r\n");
				comparaRazao = true;


				ResumoTxt.append("REGRA DE IGNORAR CONTA MOVIMENTO;").append(ttMov.dataMovimento).append(";").append(ttMov.dataMovimento).append(";")
						 .append(ttMov.valorDocumento).append(";").append(ttMov.documento).append(";").append(ttMov.nomeOrigem).append(";")
						 .append(ttMov.nomePortador).append(";").append(ttMov.complemento01).append(";").append(ttMov.complemento02).append(";")
						 .append(ttMov.complemento03).append(";").append(ttMov.complemento04).append(";").append(ttMov.complemento05).append(";")
						 .append(ttMov.complemento06).append(";;").append(ttMov.contaDebito).append(";").append(ttMov.contaCredito).append(";")
						 .append(regraContaMovimento).append(";").append(ttMov.historico).append(";");
 				
 				mapaVariavel.put(key,ttMov);
  
				continue;
			}
			String parcelaAtualeFinal = "";
			String parcelaAtual       = "";

			int parcelaBase = getParcelaBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			int totalParcelas = getTotalParcelas(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			String mesAnoBase = getMesAnoBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if (!mesAnoBase.equals("") && parcelaBase > 0) parcelaAtual       = String.valueOf(getParcelaFinanciamento(mesAnoAtual, mesAnoBase,parcelaBase, totalParcelas));
			if (!mesAnoBase.equals("")) parcelaAtualeFinal = parcelaAtual.trim() + "/" + String.valueOf(totalParcelas).trim();

			ttMov.historico = getHistorico(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.nomeOrigem,
										   ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
										   ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			
			histobj.put("contaMovimento", contaMovimento).put("contaPortador", contaPortador).put("contaDebito", ttMov.contaDebito)
				   .put("contaCredito", ttMov.contaCredito).put("contaJuros", ttMov.contaJuros).put("contaMulta", ttMov.contaMulta)
				   .put("contaDesconto", ttMov.contaDesconto).put("parcelaAtual", parcelaAtual).put("parcelaAtualeFinal", parcelaAtualeFinal)
				   .put("trimestreMesAnoAnterior", trimestreMesAnoAnterior).put("trimestreMesAnoAtual", trimestreMesAnoAtual).put("descricaoPlanoMovimento", descricaoPlanoContaMovimento.toUpperCase())
				   .put("descricaoPlanoPortador", descricaoPlanoContaPortador.toUpperCase());

			if(roteiroCRM.optString("Realizar_Busca_Plano").equals("TRUE")){

				// #Fabrica(2019-08-27) @Vini
				JSONObject fornecFilial = new JSONObject();
				String cAnalitica = "";
				String auxNomeOrig = "";
				auxNomeOrig = ttMov.nomeOrigem.replaceAll("-","").replaceAll("/","").replaceAll("\\.","").replaceAll("[0-9]*", "").replaceAll("\\s+","").replaceAll("ME","").replaceAll("EPP","").replaceAll("LTDA","").replaceAll("EIRELI","").replaceAll("SA","").trim();
				if (auxNomeOrig.length()> 11) auxNomeOrig = cutString(auxNomeOrig,0,10);
				//pesquisa no banco de dados pela descricao continua para pegar a classifica??o usada na nova regra
				fornecFilial = dbIOCont.sql("SELECT CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOCONTINUA LIKE ?")
				.fields("CONTAANALITICA")
				.param(codEmpresaPlanoContas)
				.param(auxNomeOrig+"%")
				.queryUnique();
				cAnalitica = fornecFilial.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim();                
				histobj.put("classificacao", cAnalitica); // classificacao para criacao de regra
			}

			ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

			ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			
			//yuri - 2309-016305
			boolean methodFoundHistorico = false;
			for(java.lang.reflect.Method method : methods) {
				String methodName = method.getName();				
				methodFoundHistorico = false;
				if(methodName.toUpperCase().equals("GETHISTORICOREGRA2")) {
					methodFoundHistorico = true;
				}
				
				if(methodName.toUpperCase().equals("GETHISTORICOREGRA3")) {
					methodFoundHistorico = true;
				}
				
				if(methodName.toUpperCase().equals("GETHISTORICOREGRA4")) {
					methodFoundHistorico = true;
				}
				
				if(methodFoundHistorico) {					
					// Invoca metodo de getHistoricoRegra
					ttMov.historico = (String) method.invoke(scInstance, contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
				}
			}
			// if(codEmpresa.equals("244")) logger.logDebug("HST == "+ttMov.historico+" | VLR == "+ttMov.valorDocumento);
			
			regraHistorico = getRegraHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
						
			if (!ttMov.historicoJuros.contains("JUROS")) ttMov.historicoJuros = "JUROS REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
			ttMov.historicoJuros = getHistorico(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.nomeOrigem,
												ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
												ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			ttMov.historicoJuros = getHistoricoJuros(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if (!ttMov.historicoDesconto.contains("DESCONTO")) ttMov.historicoDesconto = "DESCONTO REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
			ttMov.historicoDesconto = getHistorico(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.nomeOrigem,
												   ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
												   ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			ttMov.historicoDesconto = getHistoricoDesconto(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if (ttMov.historicoMulta.equals("")) ttMov.historicoMulta = "MULTA REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
			ttMov.historicoMulta = getHistorico(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.nomeOrigem,
												ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
												ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			ttMov.historicoMulta = getHistoricoMulta(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			// quando for forcada partida dobrada , vamos jogar o historico  de juros automaticamente no historico  movimento
			if (ttMov.chave.contains("DOBRADA_JUR")) ttMov.historico = ttMov.historicoJuros;
			if (ttMov.chave.contains("DOBRADA_DES")) ttMov.historico = ttMov.historicoDesconto;
			if (ttMov.chave.contains("DOBRADA_MUL")) ttMov.historico = ttMov.historicoMulta; 
			
			ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
										  ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
										  ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);
										  
			if(!ttMov.codFilial.equals("") && (roteiroCRMPrincipal.optString("erpContabilidade").contains("SCI") || roteiroCRMPrincipal.optString("erpContabilidade").contains("PROSOFT"))){
				ttMov.lote = ttMov.codFilial+"_"+ttMov.lote;
			}

			String codParticipante   = getParticipante("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, 
														ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, 
														ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);

			ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

			if (!ttMov.codFilial.equals("")) {
				ttMov.historico 		= ttMov.historico 			 + " Filial:" + ttMov.codFilial;
				ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Filial:" + ttMov.codFilial;
				ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Filial:" + ttMov.codFilial;
				ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Filial:" + ttMov.codFilial;
			}
						
			if (!codParticipante.equals("")) {
				ttMov.historico 		= ttMov.historico			 + " Participante:" + codParticipante;
				ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Participante:" + codParticipante;
				ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Participante:" + codParticipante;
				ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Participante:" + codParticipante;
			}

			ttMov.historico 		= ttMov.historico.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
			ttMov.historicoJuros 	= ttMov.historicoJuros.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
			ttMov.historicoDesconto = ttMov.historicoDesconto.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
			ttMov.historicoMulta 	= ttMov.historicoMulta.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
									
			if(roteiroCRMPrincipal.optString("erpContabilidade").equals("JBSOFTWARE")){
				ttMov.historico += "GPLCTO:" + ttMov.contLinha;
				ttMov.historicoJuros += "GPLCTO:" + ttMov.contLinha;
				ttMov.historicoDesconto += "GPLCTO:" + ttMov.contLinha;
				ttMov.historicoMulta += "GPLCTO:" + ttMov.contLinha;
			}

			// ------------------------------------------------
			//           GERA ARQUIVO PARA O FISCAL
			// ------------------------------------------------
			ttMov.documento = ttMov.documento.trim();
			if (ttMov.documento.startsWith("0")) {
				for (int xx=0;xx<10;xx++) {
					if (ttMov.documento.length() > 1 && ttMov.documento.startsWith("0")) ttMov.documento = ttMov.documento.substring(1);
				}
			}

			JSONObject jDescricaoDupl = new JSONObject();
			if (eFornecedor)   jDescricaoDupl.put("TIPO","FORNECEDOR");

			// Teste 64 kb
			if (fazConciliacao && ttMov.complemento06.contains("PRODUCAO")) {
				if (criaCabecalhoConciliacao) {
					txtConciliacao.append("NF;PARC;DIVERGENTE;VALOR A PAGAR;VALOR RAZAO").append("\r\n");
					criaCabecalhoConciliacao = false;
				}

				String chaveConciliacao = ttMov.documento + "-" + cutString(ttMov.complemento01, 0, "/").replaceAll("0","") + "-" + cutString(ttMov.nomeOrigem, 0, 5);
				//000014184-4-INDUS
				// logger.logDebug("CHAVINHA " + chaveConciliacao);
				ObjConciliacao ttConciliacao = (ObjConciliacao) mapaConciliacao.get(chaveConciliacao);

				if (ttConciliacao != null) {
					txtConciliacao.append(ttMov.documento).append(";").append(cutString(ttMov.complemento01, 0, "/").replaceAll("0","")).append(";")
								  .append(ttConciliacao.valorConciliacao == ttMov.valorDocumento ? "CONCILIADO" : "NAO CONCILIADO").append(";")
								  .append(ttMov.valorDocumento).append(";").append(ttConciliacao.valorConciliacao).append("\r\n");

				} else {
					txtConciliacao.append(ttMov.documento).append(";").append(cutString(ttMov.complemento01, 0, "/").replaceAll("0","")).append(";")
								  .append("NAO CONCILIADO").append(";")
								  .append(ttMov.valorDocumento).append(";").append(0).append("\r\n");
				}
				loteConciliacao = nomeEmpresa + "_" + codEmpresa + "_" + "_CONCILIACAO_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + ttMov.tipoLancamento;
			}

			if(integraFiscal.contains("TRUE") && ttMov.tipoPlanilha.contains("MOVIMENTO") && !razaoSocial.equals("") && !ttMov.documento.equals("") && !regraCRM && !contaMovimento.equals("")){
				//Atendimento: 2308-013102 -> Problema ao gerar os relatorios de PELO_FISCAL e Duplicatas nao encontradas
				// eFornecedor = true;
				temFiscal = true;
				apagaStatus = true;
				
				//JWR 02022021 - estava adicionando a parcela no documento para a busca de duplicata em roteiros secundarios.
				//Adicionada a validacao "roteiroCRM.has("usarComplementoParcela")"
				if (roteiroCRM.has("usarComplementoParcela") && !roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("NAO USAR")) {
					ttMov.documento = ttMov.documento + "-" + ttMov.parcelaDoc;
				}
				
				String dataVencimentoTTMov = "";
				
				if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) dataVencimentoTTMov = ttMov.complemento01;
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) dataVencimentoTTMov = ttMov.complemento02; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) dataVencimentoTTMov = ttMov.complemento03; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) dataVencimentoTTMov = ttMov.complemento04; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) dataVencimentoTTMov = ttMov.complemento05; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) dataVencimentoTTMov = ttMov.complemento06; 
				}	
					
				 
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("QUESTOR")) {

					JSONObject jDadosAux = new JSONObject();
					jDadosAux.put("CODEMPRESA", codEmpresa).put("DATAVENCTTMOV", dataVencimentoTTMov).put("RAZAOSOCIAL",razaoSocial)
							 .put("TABELACONTABIL", tabelaContabil);
					
					TemplateUtils templateUtil = new TemplateUtils();
					jDescricaoDupl = templateUtil.geraFiscalQuestor(roteiroCRMPrincipal, jDadosAux, jDescricaoDupl, dbIOCont, ttMov, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							
							jDescricaoDupl.put("USAFILIAL", roteiroCRMPrincipal.optString("Usa_Filial_Questor").toUpperCase());
														
							txtFiscal[0].append(TemplateUtils.geraLinhaFiscalQuestor(jDescricaoDupl).toString());

							geraFiscal = true;
							
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
				
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else { //Add dia 02/03/2021 - > Enviar dupli n encontradas p/ contabil questor
							dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
							contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");
							
							if(dupliNaoEncontContabil){
								contaMovimento = contaTemp;
								if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
								if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

								histobj.put("contaMovimento", contaMovimento);
								ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
							}else {
								if(cabecalhoNaoEncontrada){
									txtFornecedor.append("Codigo;Fornecedor/Cliente;Duplicata;Data;Valor bruto;Valor liquido;Banco;Obs:").append("\r\n");
									cabecalhoNaoEncontrada = false;
								}
								String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
								jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
								txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA")).append(";").append(razaoSocialDuplicata).append(";")
											 .append(ttMov.documento).append(";").append(ttMov.dataMovimento).append(";").append(String.format("%.2f", ttMov.valorDocumento))
											 .append(";").append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",",")).append(";").append(ttMov.nomePortador).append(";")
											 .append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2))
											 .append("\r\n");

								jDescricaoDupl.put("TIPO","FORNECEDOR");

								geraFiscal = true;
								loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
								
								if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
								
								if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
								
								ttMov.tipoPlanilha = "NAO LER";
								mapaVariavel.put(key,ttMov);
								continue;
							}
						}
					}
				}

				/*if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("MAKROWEB")) {
					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("VALORMULTA",  ttMov.valorMulta);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
						ttMov.parcelaDoc     = jDescricaoDupl.optInt("PARCELADOC");
						ttMov.valorDesconto  = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDesconto));
						ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento));
						ttMov.valorJuros 	 = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorJuros));
						
						String valorDescontoAux  = preparaDoublePrecisao(String.valueOf(ttMov.valorDesconto));
						String valorDocumentoAux = preparaDoublePrecisao(String.valueOf(ttMov.valorDocumento));
						String valorAcrecimoAux 	 = preparaDoublePrecisao(String.valueOf(ttMov.valorJuros+ttMov.valorMulta));
						
						//#2309-015394
						//double valorAux = ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta;
						//String valorCalcAux = "";
						// #Fabrica(2019-08-06) @Vini
						//valorCalcAux = preparaDoublePrecisao(String.valueOf(DecimalUtil.toDecimal(String.format("%.2f", valorAux))));
						
						// if (!String.format("%.2f", ttMov.valorDocumento).equals(jDescricaoDupl.optString("VALORPARCELA"))) { //<--- antigo
						if (ttMov.valorDocumento > jDescricaoDupl.optDouble("VALORPARCELA")) {
							jDescricaoDupl.put("TIPO", "FORNECEDOR");
						} else {													

							txtFiscal[0].append(StringUtil.leftPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 14,  "0"));
							txtFiscal[0].append(StringUtil.leftPad(cutString(ttMov.documento, 0, "-"), 8, "0"));
							txtFiscal[0].append(StringUtil.leftPad(String.valueOf(ttMov.parcelaDoc), 2, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorDocumentoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(ttMov.dataMovimento.replaceAll("/",""));
							txtFiscal[0].append(StringUtil.leftPad(valorDescontoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorAcrecimoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							//#2309-015394
							//txtFiscal[0].append(StringUtil.leftPad(valorCalcAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorDocumentoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(contaPortador, 9,  "0"));
							txtFiscal[0].append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
					}
				}*/

				/*if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) {
					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					  
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					
					 jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							
							txtFiscal[0].append(TemplateUtils.geraLinhaFiscalCordilheira(jDescricaoDupl, ttMov, geraCabecalhoCordilheira).toString());
							
							geraCabecalhoCordilheira = false;

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(razaoSocialDuplicata);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.documento);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.dataMovimento);
							txtFornecedor.append(";");
							txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
							txtFornecedor.append("\r\n");

							jDescricaoDupl.put("TIPO","FORNECEDOR");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
					}
				}*/

				// if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CUCA-FRESCA")) {

					// JSONObject jDados = new JSONObject();
					// jDados.put("CODEMPRESA",     codEmpresa);
					
					// //usando a filial do questor em duplicatas em aberto
				   
					// jDados.put("RAZAOSOCIAL",    razaoSocial);
					// jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					// jDados.put("DOCUMENTO",      ttMov.documento);
					// jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					// jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					// jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					// jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					// jDados.put("VALORJUROS",     ttMov.valorJuros);
					// jDados.put("VALORMULTA",     ttMov.valorMulta);
					// jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					// jDados.put("TABELACONTABIL", tabelaContabil);
					// jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					// Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					// dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					// double valorSaldoDuplicata2 = 0;
					// if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					// valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					// ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					// if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						// if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							// String separadorFiscal = "";
							// String dataVencimento  = "";
							// //String parcela		   = "1";
							// String duplicataParcela = jDescricaoDupl.optString("DUPLICATA")+"/"+String.valueOf(ttMov.parcelaDoc);
							
							// txtFiscal[0].append(cnpjEmpresa);
							// txtFiscal[0].append("    ");

							// if(tipoLancamento.contains("PAGAR"))	txtFiscal[0].append("E");
							// if(tipoLancamento.contains("RECEBER"))	txtFiscal[0].append("S");

							// txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("DATAVENCIMENTO"), 10, " ")); //lendo do duplicatasem aberto
							// txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("SITUACAO"), 5, " ")); //especie
							// txtFiscal[0].append(StringUtil.rightPad("", 3, " ")); //serie
							
							// txtFiscal[0].append(StringUtil.rightPad("", 2, " ")); //sub-serie
							// txtFiscal[0].append(StringUtil.leftPad(cutString(ttMov.documento, 0, "-"), 9, "0"));
							// txtFiscal[0].append(StringUtil.leftPad("", 9, "0"));
							
							// txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 18, " ")); // preciso criar a leitura do CNPJ do cliente, est? sendo usado o objeto "CODIGOFORNECEDOR" para guardar essa informa??o
							// txtFiscal[0].append(StringUtil.leftPad(duplicataParcela, 21, "0"));
							// txtFiscal[0].append(StringUtil.leftPad(dataVencimento, 10, " ")); //data do vencimento
							
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0")); //? preciso criar a leitura do valor ? baixar, est? sendo usado o objeto "VALORPARCELA" para guardar no banco
							
							// if(contaPortador.length() > 1){
								// contaPortador = contaPortador.substring(0, contaPortador.length()-1) + "-" + contaPortador.substring(contaPortador.length()-1);
								// if(contaPortador.length() > 5) contaPortador = contaPortador.substring(0, contaPortador.length()-5) + "." + contaPortador.substring(contaPortador.length()-5);
							// }
							
							// txtFiscal[0].append(StringUtil.leftPad(contaPortador, 9, "0")); //a conta do banco
							// txtFiscal[0].append(StringUtil.rightPad(ttMov.centroCusto, 4, " "));
							
							// //txtFiscal[0].append(StringUtil.rightPad(ttMov.historico, 3, ""));	
							// if(tipoLancamento.contains("PAGAR"))	txtFiscal[0].append(StringUtil.rightPad("10", 3, " ")); //10 pagamento fornecedor 
							// if(tipoLancamento.contains("RECEBER"))	txtFiscal[0].append(StringUtil.rightPad("11", 3, " ")); // 11 recebimento duplicata
							
							// txtFiscal[0].append(StringUtil.leftPad("", 15, " "));	//numero do cheque na planilha
							// txtFiscal[0].append(StringUtil.rightPad(ttMov.dataMovimento, 10, " "));
							
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0"));
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorJuros), 13, "0"));
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDesconto), 13, "0"));
							
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // correcao monetaria
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // despesas/receitas
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // Base de Calculo Retencao
							
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // IRRF Retido 
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // PIS Retido 
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido 
							
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // CSLL Retido 
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido 
							// txtFiscal[0].append("    "); //n?o encontrado o c?digo da receita
							
							// txtFiscal[0].append("\r\n");

							// geraFiscal = true;
							// loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							// if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							// ttMov.tipoPlanilha = "NAO LER";
							// mapaVariavel.put(key,ttMov);
							// continue;
						// } else {
							// if(cabecalhoNaoEncontrada){
								// txtFornecedor.append("Codigo");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Fornecedor/Cliente");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Duplicata");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Data");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Valor bruto");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Valor liquido");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Banco");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Obs:");
								// txtFornecedor.append("\r\n");
								// cabecalhoNaoEncontrada = false;
							// }
							// String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							// jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							// txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							// txtFornecedor.append(";");
							// txtFornecedor.append(razaoSocialDuplicata);
							// txtFornecedor.append(";");
							// txtFornecedor.append(ttMov.documento);
							// txtFornecedor.append(";");
							// txtFornecedor.append(ttMov.dataMovimento);
							// txtFornecedor.append(";");
							// txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							// txtFornecedor.append(";");
							// txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							// txtFornecedor.append(";");
							// txtFornecedor.append(ttMov.nomePortador);
							// txtFornecedor.append(";");
							// txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
							// txtFornecedor.append("\r\n");

							// jDescricaoDupl.put("TIPO","FORNECEDOR");

							// geraFiscal = true;
							// loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							// if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
							
							// if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							// ttMov.tipoPlanilha = "NAO LER";
							// mapaVariavel.put(key,ttMov);
							// continue;
						// }
					// }
				// }
				
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {
					JSONObject jDados = new JSONObject();
					
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("LER DA DUPLICATA MAIS ANTIGA"))  {
						
						
						if (dataVencimentoTTMov.equals("")) {
						
							JSONObject recordsDupVenc = new JSONObject();  
							try {
								String sql = "SELECT VENCIMENTO FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND IO_DUPLICATA.DUPLICATA = ? ORDER BY VENCIMENTO LIMIT 1"; 
								recordsDupVenc = dbIOCont.sql(sql)
								.setFields("VENCIMENTO")
								.param(codEmpresa)
								.param(ttMov.documento)
								.debug(logger)
								.queryUnique();	

							} catch (Exception e1) {
								// logger.logDebug("ERROR: " + e1.getMessage());
							}
						
							if(recordsDupVenc != null && recordsDupVenc.has("VENCIMENTO")){
								dataVencimentoTTMov = cutString(recordsDupVenc.optString("VENCIMENTO"), 8, 10) + "/" +cutString(recordsDupVenc.optString("VENCIMENTO"), "-", "-") + "/" + cutString(recordsDupVenc.optString("VENCIMENTO"), 0, "-") ;
							}
						}   
						
						
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}else if(!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO")){
						jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					}else if(roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO")){
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					 
					
					
					jDados.put("CODEMPRESA",     codEmpresa).put("RAZAOSOCIAL",    razaoSocial).put("NOMEORIGEM",     ttMov.nomeOrigem).put("DOCUMENTO",      ttMov.documento)
						  .put("DATAMOVIMENTO",  ttMov.dataMovimento).put("OBSERVACAO", 	 ttMov.dataMovimento).put("PARCELADOC",     99).put("VALORDOCUMENTO", ttMov.valorDocumento)
						  .put("VALORJUROS",     ttMov.valorJuros).put("VALORMULTA",     ttMov.valorMulta).put("VALORDESCONTO",  ttMov.valorDesconto)
						  .put("TABELACONTABIL", tabelaContabil).put("VALIDAFORNECEDORFISCAL", roteiroCRMPrincipal.optInt("ValidaFornecedorFiscal"));
						  
					//#2402-029579 - ValidaFornecedorFiscal
					jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);

					// Descomentar a proxima linha para testar data de vencimento  a jDescricaoDupl.optString("DATAVENCIMENTO") que vem das duplicatas em aberto! OBS: Complemento06, deve estar lendo a data de vencimento da planilha financeira
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  { 
					   if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorDataVencimento(jDescricaoDupl, dataVencimentoTTMov);
					}

					String chaveParcela = ttMov.documento + "-PARCELA";
					ttParcelaDominio ttP    = (ttParcelaDominio)mapaParcelaDominio.get(chaveParcela);
					if (ttP == null) {
						ttP  			= new ttParcelaDominio();
						ttP.documento   = ttMov.documento;
						ttP.ultimaParcela = 0;
					}
					ttP.ultimaParcela++;
					
					mapaParcelaDominio.put(chaveParcela,ttP);
					
					jDados.put("PARCELADOC", ttP.ultimaParcela);                 
					jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);	

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");
 
					String chaveDuplicata = "";
					if (jDescricaoDupl.has("CODIGOFORNECEDOR")) chaveDuplicata = ttMov.codEmpresa + "-ESPECIAL-" + jDescricaoDupl.optString("CODIGOFORNECEDOR") + "-" + ttMov.documento + "-SEG-";
					
					String serie = "";
					String subSerie = "";
					String especie = "";
					double valorSegmento = 0;

					JSONArray recordsDup = new JSONArray();

					/*
					DESCOMENTAR ESSA LINHA QUANDO TIVER DATA DE VENCIMENTO
					VAI SEPARAR QUANDO ENCONTRAR A DATA DE VENCIMENTO NO BANCO
					COLOCAR O COMPLEMENTO QUE TIVER A DATA DE VENCIMENTO : ttMov.complemento06
					*/
					// if (ttMov.tipoPlanilha.equals("MOVIMENTO")) {
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  { 

						 boolean isData = false;
						 Date dtV = new Date();
						 try{ 
							 dtV = DateUtil.stringToDate(jDescricaoDupl.optString("DATAVENCIMENTO"), "dd/MM/yyyy");
							isData = true; 
							 if(!getCampoDate(DateUtil.dateToString(dtV, "dd/MM/yyyy")).equals(getCampoDate(dataVencimentoTTMov))) isData = false; 
						 } catch(Exception ii){ 
							isData = false; 
						 }
						 if(!chaveDuplicata.equals("")){
							if(isData){
								try {
									String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND IO_DUPLICATA.CHAVE LIKE ? AND VENCIMENTO = ? "; 
									recordsDup = dbIOCont.sql(sql)
									  .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
									  .param(codEmpresa)
									  .param(chaveDuplicata + "%")
									  .param(dtV)
									  .debug(logger)
									  .query();								
								} catch (Exception e1) {
									// logger.logDebug("ERROR: " + e1.getMessage());
								}
							}
							// if(!isData){
								// try {
									// String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? "; 
									// recordsDup = dbIOCont.sql(sql)
									  // .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
									  // .param(chaveDuplicata + "%")
									  // .debug(logger)
									  // .query();								
								// } catch (Exception e1) {
									// logger.logDebug("ERROR: " + e1.getMessage());
								// }
							// }
						 }
					}

					 else  { 
						if(!chaveDuplicata.equals("")){
							try {
								// INSERIDO O WHERE CODEMPRESA = ? PARA CORRE??O DO CHAMADO 202301-0023064.
								String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND IO_DUPLICATA.CHAVE LIKE ? "; 
								recordsDup = dbIOCont.sql(sql)
								  .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
								  .param(codEmpresa)
								  .param(chaveDuplicata + "%")
								  .debug(logger)
								  .query();	

							} catch (Exception e1) {
								logger.logDebug("ERROR: " + e1.getMessage());
							}
						}
					}
					/* EXEMPLO DE COMO TEM QUE SAIR
					
					|0000|07701892000105|
					|5100|39||0|21338|15/08/2017|14/08/2017|0|||180,00|||||||||||||
					|5110|15/08/2017|3612|434|180,00|5|21338 ATLANTA ALARMES -  MONITOL MONIT. TOLEDO LTDA.||418|
					*/

					JSONObject recordsDupSeg = new JSONObject(); 
					if (recordsDup.length() > 0) recordsDupSeg = recordsDup.optJSONObject(0);
					
					if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
						serie   = recordsDupSeg.optString("SERIE");
						especie = recordsDupSeg.optString("CHAVEDUPLICATA");
					}

					double valorSaldoDuplicata = 0;
					double valorSomaSegmentos  = 0;
					
					// soma os segmentos pois eles nao sao baixados. Ou seja, se pago um valor parcial no dominio soma dos segmentos 
					// continua sendo o valor origial (total) da nota fiscal
					// utilizado para achar a proporcao do valor para cada segmento
					for (int seg =0; seg<recordsDup.length(); seg ++) {
						recordsDupSeg =  recordsDup.optJSONObject(seg);
						if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
							valorSomaSegmentos = valorSomaSegmentos + DecimalUtil.toDecimal(String.format("%.2f", recordsDupSeg.optDouble("VALORPARCELA")));
						}		
					}

					boolean leuDuplicata = false;
					
					// valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));
					
					if (jDescricaoDupl.optString("TIPO").equals("FISCAL") && !roteiroCRMPrincipal.optString("ValidaFornecedorFiscal").equals("")) {
						jDescricaoDupl.put("VALIDAFORNECEDORFISCAL", roteiroCRMPrincipal.optInt("ValidaFornecedorFiscal"));
						jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem);
					}
					
					if (valorSomaSegmentos > 0) valorSaldoDuplicata = valorSomaSegmentos;

					valorSaldoDuplicata  = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					double diferencaParcela = DecimalUtil.toDecimal(String.format("%.2f", DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento )) - valorSomaSegmentos));
					
					if (!especie.equals("") || !serie.equals("")) {
						if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) {
							double valorTotalBaixado = 0;
							for (int seg =0; seg<recordsDup.length(); seg ++) {
							
								recordsDupSeg =  recordsDup.optJSONObject(seg);
                                String segmento = "";
								
								if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
									serie   	  = recordsDupSeg.optString("SERIE");
									subSerie   	  = recordsDupSeg.optString("SITUACAO");      // GUARDA SUB SERIE 
									especie 	  = recordsDupSeg.optString("CHAVEDUPLICATA");
									valorSegmento = recordsDupSeg.optDouble("VALORPARCELA");
                                    segmento      = recordsDupSeg.optString("CHAVE");
									if (segmento.contains("-SEG-")) {
                                        segmento = cutString(segmento, "-SEG-");
                                        segmento = cutString(segmento, 0, "-");
                                    }	
								}	

                                if(segmento.equals("0")){
                                    if(seg>0) continue;
                                    valorSomaSegmentos = DecimalUtil.toDecimal(String.format("%.2f",valorSegmento));
                                    diferencaParcela = 0;
                                }

								// (zerado para validacao)
								diferencaParcela = 0;

                                //if (subSerie.equals("")) subSerie = "0";

                                String codContabil = "";
                                if(ttMov.tipoLancamento.contains("PAGAR")) {
                                    ttMov.contaDebito  = contaMovimento;
                                    ttMov.contaCredito = contaPortador;
                                    codContabil = "5100";
                                }
                                if(ttMov.tipoLancamento.contains("RECEBER")) {
									ttMov.contaDebito   = contaPortador;
									ttMov.contaCredito  = contaMovimento;
									codContabil = "5200";
									if(especie.equals("39")) codContabil = "5300";
									
									histobj.put("especie", especie);
									String codigoFiscalNovo = getCampoFiscal("", histobj);
									if (!codigoFiscalNovo.equals("")) codContabil = codigoFiscalNovo;
								}

                                String delimitador = "|";
                                String tipoSerie = delimitador + codContabil + delimitador + especie + delimitador + serie + delimitador + subSerie + delimitador;
								
								// if(ttMov.codEmpresa.contains("351")) logger.logDebug("Fiscal pelo Template");
								
                                if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                                    txtFiscal[0].append(tipoSerie);
                                    //txtFiscal[0].append(jDescricaoDupl.optString("DUPLICATA"));
									if(ttMov.tipoLancamento.contains("PAGAR")) { //2311-020947
										txtFiscal[0].append(cutString(jDescricaoDupl.optString("DUPLICATA"), 0, "-"));
									}
									if(ttMov.tipoLancamento.contains("RECEBER")) {
										txtFiscal[0].append(jDescricaoDupl.optString("DUPLICATA"));
									}
									txtFiscal[0].append(delimitador).append(jDescricaoDupl.optString("DATAVENCIMENTO")).append(delimitador)
												.append(ttMov.dataMovimento).append(delimitador);
									
									 
									
									ttDocumento ttDoc    = (ttDocumento)mapaDocumento.get(ttMov.documento+"-"+seg);
									if (ttDoc == null) {
										ttDoc  = new ttDocumento();
										ttDoc.documento  = ttMov.documento;
										ttDoc.valorDocumento  = 0;
 									}
									
									double valorBaixar = 0;
									
									ttDoc.valorDocumento   = ttDoc.valorDocumento + DecimalUtil.toDecimal(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))));
									valorBaixar = DecimalUtil.toDecimal(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))));										
									
  
									if ((valorSegmento - ttDoc.valorDocumento) <= 0.02 && (valorSegmento - ttDoc.valorDocumento) > 0) valorBaixar = valorBaixar  + (valorSegmento - ttDoc.valorDocumento);
									if ((ttDoc.valorDocumento - valorSegmento) <= 0.02 && (ttDoc.valorDocumento - valorSegmento) > 0) valorBaixar = valorBaixar  - (ttDoc.valorDocumento - valorSegmento);
									
									 valorTotalBaixado += valorBaixar; 
									 
 									 
 									
									// calcula se o valor a ser baixado somando os segmentos eh maior que o valor pago pelo cliente
									// quando isto ocorrer, deve-se ajustar no ultimo segmento o valor
									 if ((valorTotalBaixado - ttMov.valorDocumento) <= 0.02 && (valorTotalBaixado - ttMov.valorDocumento) > 0) {
										 valorBaixar = valorBaixar  - (valorTotalBaixado - ttMov.valorDocumento);
										 ttDoc.valorDocumento = ttDoc.valorDocumento  - (valorTotalBaixado - ttMov.valorDocumento);
									 }
									
									 if ((ttMov.valorDocumento - valorTotalBaixado) <= 0.02 && (ttMov.valorDocumento - valorTotalBaixado) > 0) {
										 valorBaixar = valorBaixar  - (ttMov.valorDocumento - valorTotalBaixado);
										 ttDoc.valorDocumento = ttDoc.valorDocumento  - (ttMov.valorDocumento - valorTotalBaixado);
									 }
									 
 									
									mapaDocumento.put(ttMov.documento+"-"+seg,ttDoc);									
									
									txtFiscal[0].append(String.format("%.2f", (valorBaixar)).replaceAll("\\.",","));

                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALJUROS").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALMULTA").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALDESCONTO").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    // txtFiscal[0].append("||||||||||");
                                    // if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal[0].append("||");
                                    txtFiscal[0].append("||||||||");
                                    if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal[0].append("||||");
                                    
									if(ttMov.tipoLancamento.contains("PAGAR")) {
										txtFiscal[0].append(delimitador).append(jDescricaoDupl.optString("CPFCNPJ")).append(delimitador);
									}
									txtFiscal[0].append(segmento).append(delimitador);
                                    //txtFiscal[0].append(jDescricaoDupl.optString("OBSERVACAO"));	// FEITO PARA SPEROTO VANZELLA
                                    //txtFiscal[0].append(delimitador);
                                    txtFiscal[0].append("\r\n");


                                    if (ttMov.valorDocumento > ttMov.valorDesconto) {
										codContabil = codContabil.replaceAll("00","10");

										txtFiscal[0].append(delimitador).append(codContabil).append(delimitador).append(ttMov.dataMovimento).append(delimitador)
													.append(cutString(ttMov.contaDebito.toUpperCase(), 0, "R")).append(delimitador).append(cutString(ttMov.contaCredito.toUpperCase(), 0, "R")).append(delimitador);
										 
										txtFiscal[0].append(String.format("%.2f", (valorBaixar)).replaceAll("\\.",","));

										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										if(ttMov.historico.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historico, "CodigoHistorico:", " "));
										txtFiscal[0].append(delimitador).append(cutString(cutString(ttMov.historico, 0, "Filial:"), 0 ,"Codigo"))
													.append(delimitador).append("").append(delimitador + codEmpresa + delimitador).append("\r\n");
									}

									if (ttMov.valorDesconto > 0 && seg == 0) {

										txtFiscal[0].append(delimitador).append(codContabil).append(delimitador).append(ttMov.dataMovimento)
													.append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal[0].append(ttMov.contaDebito).append(delimitador).append(contaDesconto);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal[0].append(contaDesconto).append(delimitador).append(ttMov.contaCredito);
										}
										txtFiscal[0].append(delimitador).append(String.format("%.2f", ttMov.valorDesconto).replaceAll("\\.",","))
													.append(delimitador).append("");
										if(ttMov.historicoDesconto.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoDesconto, "CodigoHistorico:", " "));
										
										txtFiscal[0].append(delimitador).append(cutString(cutString(ttMov.historicoDesconto, 0, "Filial:"), 0 ,"Codigo"))
													.append(delimitador).append("").append(delimitador + codEmpresa + delimitador).append("\r\n");
									}

									 if (ttMov.valorJuros > 0  && seg == 0) {
										txtFiscal[0].append(delimitador).append(codContabil).append(delimitador).append(ttMov.dataMovimento).append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal[0].append(contaJuros).append(delimitador).append(ttMov.contaDebito);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal[0].append(ttMov.contaCredito).append(delimitador).append(contaJuros);
										}
										txtFiscal[0].append(delimitador).append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",","))
													.append(delimitador).append("");
													
										if(ttMov.historicoJuros.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoJuros, "CodigoHistorico:", " "));
										
										txtFiscal[0].append(delimitador).append(cutString(cutString(ttMov.historicoJuros, 0, "Filial:"), 0 ,"Codigo"))
													.append(delimitador).append("").append(delimitador + codEmpresa + delimitador).append("\r\n");
									}

									 if (ttMov.valorMulta > 0 && seg == 0) {
										txtFiscal[0].append(delimitador).append(codContabil).append(delimitador).append(ttMov.dataMovimento)
													.append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal[0].append(contaMulta).append(delimitador).append(ttMov.contaDebito);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal[0].append(ttMov.contaCredito).append(delimitador).append(contaMulta);
										}
										
										txtFiscal[0].append(delimitador).append(String.format("%.2f", ttMov.valorMulta).replaceAll("\\.",","))
													.append(delimitador).append("");
													
										if(ttMov.historicoMulta.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoMulta, "CodigoHistorico:", " "));
										
										txtFiscal[0].append(delimitador).append(cutString(cutString(ttMov.historicoMulta, 0, "Filial:"), 0 ,"Codigo"))
													.append(delimitador).append("").append(delimitador + codEmpresa + delimitador).append("\r\n");
									}

                                    diferencaParcela = 0;

                                    geraFiscal = true;
                                    loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                                    
									if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
									
									eFornecedor = false;
                                    leuDuplicata = true;

                                }
                            }
                            if (leuDuplicata) continue;
                        } else {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo;Fornecedor/Cliente;Duplicata;Data;Valor bruto;Valor liquido;Banco;Obs:")
											 .append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							//#2402-029218 - Quando h? Filial mandamos o codFilial e n?o o codEmpresa
							txtFornecedor.append(ttMov.codFilial.equals("") ? jDescricaoDupl.optString("CODEMPRESA") : ttMov.codFilial).append(";").append(razaoSocialDuplicata).append(";").append(ttMov.documento).append(";")
										 .append(ttMov.dataMovimento).append(";").append(String.format("%.2f", ttMov.valorDocumento)).append(";")
										 .append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",",")).append(";").append(ttMov.nomePortador).append(";")
										 .append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata))
										 .append("\r\n");

                            geraFiscal = true;
                            loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                        }
                    }
                    else {
						if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
							jDescricaoDupl.put("TIPO","FORNECEDOR"); // se nao acha serie vai para duplicatas nao encontradas
							eFornecedor = true;
						}
					}
				}


				if (eFornecedor) {

					dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
					contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");


					if(dupliNaoEncontContabil){
						contaMovimento = contaTemp;
						if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
						if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

						histobj.put("contaMovimento", contaMovimento);
						ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


					}else{
						if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FORNECEDOR")) {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo;Fornecedor/Cliente;Duplicata;Data;Valor bruto;Valor liquido;Banco;Obs:")
											 .append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorFinal = String.format("%.2f", ttMov.valorDocumento);
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							
							
							jDescricaoDupl.put("NOMEORIGEM", ttMov.nomeOrigem).put("DOCUMENTO", ttMov.documento)
										  .put("DATAMOVIMENTO", ttMov.dataMovimento).put("VALORFINAL", valorFinal)
										  .put("VALORLIQUIDO",  valorLiquido);
							
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA")).append(";")
										 .append(jDescricaoDupl.optString("NOMEORIGEM")).append(";")
										 .append(jDescricaoDupl.optString("DOCUMENTO")).append(";")
										 .append(jDescricaoDupl.optString("DATAMOVIMENTO")).append(";")
										 .append(jDescricaoDupl.optString("VALORFINAL").replaceAll("\\.",",")).append(";")
										 .append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",",")).append(";")
										 .append(ttMov.nomePortador).append(";");
										 
							if (jDescricaoDupl.has("FORNECEDORESNAOBATEM")) {
								txtFornecedor.append("Nome do Fornecedor/Cliente nao confere com a duplicata aberta no fiscal ");
							}
							else {
								txtFornecedor.append("Duplicata nao encontrada no Fiscal ");
																
							}							
							txtFornecedor.append("\r\n");


							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
							
						}
					}
				}
			}
			
			/*	
			if (integraContrato.toUpperCase().equals("TRUE")) {
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {
					String dataVencimentoTTMov = "";
					
 				
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) dataVencimentoTTMov = ttMov.complemento01;
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) dataVencimentoTTMov = ttMov.complemento02; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) dataVencimentoTTMov = ttMov.complemento03; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) dataVencimentoTTMov = ttMov.complemento04; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) dataVencimentoTTMov = ttMov.complemento05; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) dataVencimentoTTMov = ttMov.complemento06; 
					}	
					
						
					JSONObject jDados = new JSONObject();
					
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					else {
						jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					}
					
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("OBSERVACAO", 	 ttMov.dataMovimento);
					jDados.put("PARCELADOC",     99);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
 					
 					try {
						Date dtvenc = DateUtil.stringToDate(dataVencimentoTTMov, "dd/MM/yyyy");	 
				
						jDescricaoDupl = dbIOCont.sql("SELECT CPFCNPJ,CODEMPRESA,RAZAOSOCIAL,CODIGOFORNECEDOR,CHAVE,CHAVEDUPLICATA,DUPLICATA,PARCELA,SERIE,VENCIMENTO,VALORPARCELA,SITUACAO,VALORJUROS,VALORDESCONTO,VALORMULTA,VALORPAGO,VALORTARIFA,OBSERVACAO FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND DUPLICATA = ? AND VALORPARCELA >= ? and VENCIMENTO = ? order by VENCIMENTO   limit 1 ")
						.fields("CPFCNPJ,CODEMPRESA,RAZAOSOCIAL,CODIGOFORNECEDOR,CHAVE,CHAVEDUPLICATA,DUPLICATA,PARCELA,SERIE,VENCIMENTO,VALORPARCELA,SITUACAO,VALORJUROS,VALORDESCONTO,VALORMULTA,VALORPAGO,VALORTARIFA,OBSERVACAO")
						.param(codEmpresa)
						.param(ttMov.documento)
						.param(ttMov.valorDocumento)
						.param(dtvenc)
						.queryUnique();
					} catch (Exception e2) {
						logger.logDebug("ERROR: " + e2.getMessage());
						continue;
					}
					
 					
					if (jDescricaoDupl != null && jDescricaoDupl.has("VALORPARCELA")) { 

 						Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
						dataLote = DateUtil.dateToString(dtL, "yyyy-MM");
	 
						boolean leuDuplicata = false;
						double valorSaldoDuplicata = 0;
						
						// valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
						if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));
						 
 						if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) { 
 
							String codContabil = "5700";								 							
							// |5700|1875|57593981053| | |1|25/02/2021|01/03/2021|5527,28|1649,16||||||

							String delimitador = "|";
							String tipoSerie = delimitador + codContabil + delimitador + ttMov.documento + delimitador + ttMov.complemento01 + delimitador + delimitador + delimitador + ttMov.complemento02  + delimitador;


						 try {
								String dataVencimento = jDescricaoDupl.optString("VENCIMENTO");
								Date dt        = DateUtil.stringToDate(dataVencimento, "yyyy-MM-dd HH:mm:ss");
								dataVencimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
								dataVencimentoTTMov = dataVencimento;
							} catch (Exception e4) {
 							}
								
								
							if(jDescricaoDupl.has("VALORPARCELA")) {
								txtFiscal[0].append(tipoSerie);
								txtFiscal[0].append(dataVencimentoTTMov);
								txtFiscal[0].append(delimitador);
								txtFiscal[0].append(ttMov.dataMovimento);
								txtFiscal[0].append(delimitador);
								txtFiscal[0].append(String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta)).replaceAll("\\.",","));
 								txtFiscal[0].append(delimitador);
							    txtFiscal[0].append(String.format("%.2f", (ttMov.valorJuros)).replaceAll("\\.",","));
								txtFiscal[0].append("||||||");								 
								txtFiscal[0].append("\r\n");

								geraFiscal = true;
								loteFiscal[0]= nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
								eFornecedor = false;
								leuDuplicata = true;

							}
							
 						} else { //Add dia 02/03/2021 - > Enviar dupli n encontradas p/ contabil Dominio
							 
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(razaoSocialDuplicata);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.documento);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.dataMovimento);
							txtFornecedor.append(";");
							txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Valor Contrato " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata));
							txtFornecedor.append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
 							mapaVariavel.put(key,ttMov);
							
						}
					}
					else {
						if(cabecalhoNaoEncontrada){
							txtFornecedor.append("Codigo");
							txtFornecedor.append(";");
							txtFornecedor.append("Fornecedor/Cliente");
							txtFornecedor.append(";");
							txtFornecedor.append("Duplicata");
							txtFornecedor.append(";");
							txtFornecedor.append("Data");
							txtFornecedor.append(";");
							txtFornecedor.append("Valor bruto");
							txtFornecedor.append(";");
							txtFornecedor.append("Valor liquido");
							txtFornecedor.append(";");
							txtFornecedor.append("Banco");
							txtFornecedor.append(";");
							txtFornecedor.append("Obs:");
							txtFornecedor.append("\r\n");
							cabecalhoNaoEncontrada = false;
						}
						String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
						jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
						txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
						txtFornecedor.append(";");
						txtFornecedor.append(razaoSocialDuplicata);
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.documento);
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.dataMovimento);
						txtFornecedor.append(";");
						txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
						txtFornecedor.append(";");
						txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.nomePortador);
						txtFornecedor.append(";");
						txtFornecedor.append("Contrato " + ttMov.documento + " nao encontrado no Dominio ");
						txtFornecedor.append("\r\n");

						geraFiscal = true;
						loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
						if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
 						mapaVariavel.put(key,ttMov);
					}
 				}

			}
			
			*/
			
			boolean ctFiscal = false;
			if(ttMov.tipoLancamento.contains("PAGAR")	&& ttMov.contaDebito.toUpperCase().contains("FISCAL")) ctFiscal = true;
			if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.contaCredito.toUpperCase().contains("FISCAL")) ctFiscal = true;

			dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
			contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");

			if(contaMovimento.toUpperCase().contains("FISCAL") || ctFiscal) {
				contaMovimento = contaTemp;
				if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
				if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

				histobj.put("contaMovimento", contaMovimento);
				ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			}

			if (!contaMovimento.equals("")){
			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {
					
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";
					
					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO,CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresaPlanoContas)
					.param(cutString(contaMovimento,0, 20))
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresaPlanoContas)
						.param(cutString(contaMovimento,0, 20))
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}					
					ttP.contaContabil     = cutString(contaMovimento,0, 20);
					mapaPlano.put(contaMovimento,ttP);


				}
			}
			 //Tratamento para inverter conta em lencamento simples feito para JBSOFTWARE
			if (roteiroCRMPrincipal.optString("erpContabilidade").contains("JBSOFTWARE") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("TRON") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("MICROSYSTEM")){
				if(ttMov.contaDebito.contains("INVERTE") && !ttMov.contaCredito.contains("INVERTE")) ttMov.contaCredito = ttMov.contaCredito+ "INVERTE";
				if(!ttMov.contaDebito.contains("INVERTE") && ttMov.contaCredito.contains("INVERTE")) ttMov.contaDebito = ttMov.contaDebito+ "INVERTE";
			} 

			chave = ttMov.chave;
			//chave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			String testeChave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
			if(!testeChave.toUpperCase().contains("ACUMULAANTES") && !testeChave.toUpperCase().contains("ACUMULARANTES")) chave = testeChave;
			
			if(chave.length() > 180) chave = cutString(chave, 0, 179);
			
			chave = chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";
			ttMov.chave = ttMov.chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";

			apagaStatus = true;
			String keyAc = chave;
			
			// logger.logDebug("EMPR " + nomeEmpresa + " | " + tipoProduto + " | " + mantemArquivo + " | " + processaOud);
			
			if (((!tipoProduto.equals("OIC_PACOTE") && mantemArquivo.equals("SIM"))  || processaOud.equals("TRUE")) && !ttMov.lote.toUpperCase().contains("_OUD_")) {
				ttMov.lote = ttMov.lote.replace(codEmpresa +"_",codEmpresa +"_oud_");
			}
			else {
				if (ttMov.nomeArquivo.contains(".omc")) {
					ttMov.lote = ttMov.lote.replace(codEmpresa +"_",codEmpresa +"_oud_");
				}
			}
			
			// logger.logDebug("LOTEE " + ttMov.lote);
 
 			
			
			ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
			if (ttLot       == null) {
				ttLot       = new ttLote();
				ttLot.lote  = ttMov.lote;
				ttLot.tipoPlanilha  = ttMov.tipoPlanilha;
 			}
			mapaLote.put(ttMov.lote,ttLot);		
			

			ttMovimentoPadrao ttMov3       = (ttMovimentoPadrao)mapaOficial.get(keyAc);
			if (ttMov3  == null) {
				ttMov3                = new ttMovimentoPadrao(ttMov);
				ttMov3.valorDesconto   = 0;
				ttMov3.valorJuros      = 0;
				ttMov3.valorDocumento  = 0;
				ttMov3.valorMulta      = 0;
				ttMov3.documento       = "";
			}
			if (ttMov3.documento.equals("")) {
				ttMov3.documento         = ttMov.documento;
			} else { if (!ttMov3.documento.contains(ttMov.documento)) ttMov3.documento = ttMov3.documento + ", " + ttMov.documento; }


			ttMov3.valorDesconto     = ttMov3.valorDesconto   + ttMov.valorDesconto;
			ttMov3.valorDocumento    = ttMov3.valorDocumento  + ttMov.valorDocumento;
			ttMov3.valorMulta        = ttMov3.valorMulta      + ttMov.valorMulta;
			ttMov3.valorJuros        = ttMov3.valorJuros      + ttMov.valorJuros;
			ttMov3.chave = chave;


			// logger.logDebug("ERP =>> "+roteiroCRM.optString("erpContabilidade")+" - ttMov3.contador =>> "+ttMov3.contador);
			String testeChavePortador = getRegrasParaAcumularPortador("", "", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
 			if (!testeChavePortador.equals("")) ttMov3.contador = 3;
			
			if (!ttMov.chave.equals(chave)) ttMov3.contador = 3;

			// for?a lancamento aberto no FB software
			if (roteiroCRMPrincipal.optString("erpContabilidade").contains("JBSOFTWARE") || 
				roteiroCRMPrincipal.optString("erpContabilidade").contains("TRON") || 
				roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET") || 
				roteiroCRMPrincipal.optString("erpContabilidade").contains("DYAD") ||//removido o erp FORTES dessa valida??o - 202301-0023113
				roteiroCRMPrincipal.optString("erpContabilidade").contains("MICROSYSTEM") ||
				roteiroCRMPrincipal.optString("erpContabilidade").contains("PROSYST")) ttMov3.contador = 3;
				
			//logger.logDebug("ERP =>> "+roteiroCRM.optString("erpContabilidade")+" - ttMov3.contador =>> "+ttMov3.contador+" - AGORA E AGORA -> "+roteiroCRMPrincipal.optString("erpContabilidade"));

			mapaVariavel.put(key,ttMov);
			mapaOficial.put(keyAc,ttMov3);			 			
 
			if(ttMov.tipoPlanilha.contains("EXTRATO") || ttMov.tipoPlanilha.contains("CARTAO")){
				if(roteiroCRMPrincipal.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;
			}else if(roteiroCRM.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;
			
			//#2305-005880
			//if (ttMov.tipoPlanilha.contains("OTTCARTAO")) ttMov3.contador = 0;
			if (ttMov.tipoPlanilha.contains("OTTCARTAO") && !roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET")) ttMov3.contador = 0;
			
			// if(ttMov.codEmpresa.contains("68345")) logger.logDebug("VALOR = "+ttMov.valorDocumento+" | DT == "+ttMov.dataMovimento+" | CONT = "+ttMov3.contador+" | CHAVE == "+chave);
 
			
			if  ((ttMov.valorJuros > 0 || ttMov.valorDesconto > 0 || ttMov.valorMulta > 0 || ttMov3.contador == 3) && !ttMov.tipoPlanilha.equals("NAO LER")) {
				chave = chave.replaceAll("CTB","CTBPORT");
				if (!testeChavePortador.equals("")) chave = testeChavePortador;

				key = chave;
				ttMovimentoPadrao ttMov2       = (ttMovimentoPadrao)mapaOficial.get(key);
				if (ttMov2  == null) {
					ttMov2                = new ttMovimentoPadrao(ttMov);
					ttMov2.contador        = 0;
					ttMov2.valorDesconto   = 0;
					ttMov2.valorJuros      = 0;
					ttMov2.valorDocumento  = 0;
					ttMov2.valorMulta      = 0;
					ttMov2.classificacao     = ttMov.classificacao;

				}
				ttMov2.tipoMovimento     = "CTBPORT";
				ttMov2.valorDesconto     = ttMov2.valorDesconto   + ttMov.valorDesconto;
				ttMov2.valorMulta        = ttMov2.valorMulta      + ttMov.valorMulta;
				ttMov2.valorJuros        = ttMov2.valorJuros      + ttMov.valorJuros;
				ttMov2.chave             = chave;
				ttMov2.chaveExtrato      = "";
				ttMov2.documento         = ttMov3.documento;
				ttMov2.valorDocumento    = ttMov2.valorDocumento + ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta;
				ttMov2.contador          = ttMov2.contador + ttMov3.contador;
				if(tipoLancamento.contains("PAGAR") && !ttMov2.tipoPlanilha.contains("OTTCARTAO")) {
					ttMov2.naturezaContabil  = "C";
					ttMov2.contaDebito       = "";
					ttMov2.contaCredito      = ttMov.contaCredito;
				}
				if(tipoLancamento.contains("RECEBER") && !ttMov2.tipoPlanilha.contains("OTTCARTAO")){
					ttMov2.naturezaContabil  = "D";
					ttMov2.contaDebito       = ttMov.contaDebito;
					ttMov2.contaCredito      = "";
				}
				if (ttMov2.valorDocumento == 0) continue; //JWR
				ttMov2.historico = getHistoricoPortador(contaPortador, ttMov2.historico, ttMov2.tipoLancamento, ttMov2.documento, ttMov2.nomeOrigem, histobj);
				
				//Descomentar caso haja problema com a perna de portador do lancamento
				if (!ttMov2.codFilial.equals("") && !ttMov2.historico.contains("Filial:")) ttMov2.historico = ttMov2.historico + " Filial:" + ttMov2.codFilial;
				
				String tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV FORNECEDOR", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("FORNECEDOR"))    ttMov3.historico = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
					if(tratarDiv.contains("PORTADOR"))      ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
  					ttMov3.historicoJuros	 = cutString(ttMov3.historicoJuros,0," Filial:") + " Filial:"+filial;
					ttMov3.historicoMulta 	 = cutString(ttMov3.historicoMulta,0," Filial:") + " Filial:"+filial;
					ttMov3.historicoDesconto = cutString(ttMov3.historicoDesconto,0," Filial:") + " Filial:"+filial;
				}
				
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV DESCONTO", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("DESCONTO"))    ttMov3.historicoDesconto = cutString(ttMov3.historicoDesconto,0," Filial:") + " Filial:"+filial;
				}
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV JUROS", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("JUROS"))    ttMov3.historicoJuros = cutString(ttMov3.historicoJuros,0," Filial:") + " Filial:"+filial;
				}
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV MULTA", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("MULTA"))    ttMov3.historicoMulta = cutString(ttMov3.historicoMulta,0," Filial:") + " Filial:"+filial;
				}
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV PORTADOR", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("PORTADOR"))    ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
				}

				mapaOficial.put(key,ttMov2);
				ttMov3.classificacao = ttMov2.classificacao;
				mapaOficial.put(keyAc,ttMov3);
			}
		}
		if(contRegra == -1){
			String codEmp = props.get(empresa + "_COD_EMPRESA");
			String nomeEmp = props.get(empresa + "_NOME_EMPRESA");
			
			String info = tipoPlanilha + ";" + roteiroCRM.optString("codigo");
			compDirName = nomeEmp + "_#" + codEmp;
			String tipoPlanilhaDirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/" + compDirName + "/DePara/Processado/";
			String tipoPlanilhaPath = tipoPlanilhaDirName + "TIPOPLANILHA" + ".txt";
			// inout/contabil/Depaula/vektor_#123/Depara/TIPOPLANILHA.txt
			FileWriter 	arquivoTp = new FileWriter(tipoPlanilhaPath);
			arquivoTp.writeNewFile(info);
			//sssssss
		}


		//-------------------------------------------------------------------------
		// GERA OS ARQUICOS PARA BAIXA DE DUPLICATAS -- FISCAL
		//-------------------------------------------------------------------------
		if (geraFiscal) {

			String auxExtencao = ".txt";
			if(roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) auxExtencao = ".csv";
			String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[0] + auxExtencao;
			FileWriter writer = new FileWriter(filename);
			writer.writeNewFile(txtFiscal[0].toString());
			
			if (nomeArquivo.toUpperCase().contains("_ID") && !loteFiscal[0].contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + tipoLancamento;

			loteFiscal[0] = loteFiscal[0].replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");
			
			filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[0] + ".csv";
			writer = new FileWriter(filename);
			writer.writeNewFile(txtFornecedor.toString());
			
			//JWR 2303-000613 Descomentar para quando utilizar arquivos fiscais separados por filial
			/*if (!loteFiscal[i].equals("") && geraNaoEncontradas) {
				loteFiscal[i] = loteFiscal[i].replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");
				filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[i] + ".csv";
				writer = new FileWriter(filename);
				writer.writeNewFile(txtFornecedor.toString());
				geraNaoEncontradas = false;
			}*/
			
			
		}
		
		// Teste 64 kb
		if (fazConciliacao) {
			String auxExtencao = ".csv";
			String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteConciliacao+auxExtencao;
			FileWriter writer = new FileWriter(filename);
			writer.writeNewFile(txtConciliacao.toString());
		}


		//-------------------------------------------------------------------------
		//--- DESABILITAR AQUI SOMENTE SE O BANCO DE DADOS CONTIVER TABELA IO_RAZAO
		//-------------------------------------------------------------------------


		
		mapaVariavel		= new HashMap();

		if (apagaStatus) {
			jStatus = new JSONObject();
			// logger.logDebug("PUTSTATUS 4745");
			putStatus(dirName, "", jStatus, logger);
		}
		
		// =======================================================================================
		// * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base
		// =======================================================================================
  	   
		
		Iterator itLote = mapaLote.keySet().iterator();
		while (itLote.hasNext()) {

			String key = (String)itLote.next();
			ttLote ttLot = (ttLote)mapaLote.get(key);
			lote = ttLot.lote;

			try {
				if (dbIOCont != null) {
					dbIOCont.closeConnection();
					dbIOCont = null;
				}
				if (dbIOCont == null) {
					dbIOCont = connectIOContabil(props, logger);
				}
				dbIOCont.delete("IO_MOVIMENTO")
				.where("LOTE=?")
				.param(lote)
				.execute();
				
 				if (mantemArquivo.equals("SIM")) {
					 
					dbIOCont.delete("IO_MOVIMENTO")
					.where("LOTE LIKE ? AND LOTE LIKE ? ")
					.param("%" + tipoLancamento + "%")
					.param(nomeEmpresa + "_" + "%")
					
					.execute();
					
				}
				
				if (mantemArquivo.equals("SIM")) {
					 
					dbIOCont.delete("IO_ARQUIVOS")
					.where("LOTE LIKE ? AND LOTE LIKE ? ")
					.param(cutString(lote, 0, "_") + "%")
					.param("%" + tipoLancamento + "%")
					.execute();
					
				}
				
				
			} catch (Exception eDel) {
				logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
			}
		}
		// logger.logDebug("ETAPA 04 TEMPLATE ");
	
	
		contRegra = -1;
		Iterator it = mapaOficial.keySet().iterator();
		while (it.hasNext()) {
			
			String chaveExtrato     = "";

			String key = (String)it.next();
			ttMovimentoPadrao ttMov = new ttMovimentoPadrao();
			try {
				ttMov = (ttMovimentoPadrao)mapaOficial.get(key);
			}
			catch (Exception xx) { continue;}

  
			if (ttMov.tipoPlanilha.equals("NAO LER")) continue;


			if (ttMov.tipoPlanilha.contains("EXTRATO")) {
				if(tipoLancamento.contains("PAGAR") && ttMov.debitoCredito.equals("EXTRATO-CREDITO")) continue;
				if(tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.equals("EXTRATO-DEBITO"))  continue;

			}
			if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
				temIgnorar = true;
				continue;
			}
			if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
				temIgnorar = true;
				continue;
			}
			ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();

			contRegra++;
			int restoLinha = 0;
			restoLinha = (contRegra % 100);
			if (restoLinha == 0) putStatus(dirName, "04--Etapa 4 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
			// quando cliente escolhe para agrupar tudo em um unico lote, mudamos o nome do arquivo.
			
			if (ttMov.valorDocumento == 0) continue;
			
			// logger.logDebug("TPPORTTEMPLATE " + ttMov.tipoPlanilha + " | " + ttMov.lote + " | " + ttMov.dataMovimento + " | " + ttMov.tipoLancamento + " | " + ttMov.debitoCredito);
			// logger.logDebug("PORTAS2 " + ttMov.nomePortador);
			String idLote = cutString(ttMov.lote, "ott_oud", ttMov.lote.indexOf("ott_oud") + 16);//202302-0025707
			
			if (ttMov.lote.contains("ott_oud__id")) idLote = cutString(ttMov.lote, "ott_oud__id", "_");//2308-011361
			if (ttMov.lote.contains("ott_oud_id")) idLote = cutString(ttMov.lote, "ott_oud_id", "_");//2308-011361

			if (roteiroCRMPrincipal.optString("agrupaArquivos").toUpperCase().contains("TRUE")) {
				if (ttMov.lote.contains("_CORA_")) {
					ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_CORA_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
				} 
				
				else {
					if (ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) {

						ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_OTTIMIZZA_PROJETO_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
					}
					else {
						if (ttMov.lote.toUpperCase().contains("_OUD_")) {
	
							ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_ott_oud__id" + idLote + "_" + arquivoAgora  + "_OUD_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
						}
					
						else {
							ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
						
						}
					}
				}
				
				
			}
			
			if (ttMov.lote.toLowerCase().contains("ott_oud_")) ttMov.lote = ttMov.lote.replaceAll("__", "_");
  			
			// logger.logDebug("LOTIZIN " + nomeEmpresa + " | " + ttMov.lote);
			
			ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
			if (ttLot       == null) {
				ttLot       = new ttLote();
				ttLot.lote  = ttMov.lote;
				ttLot.tipoPlanilha  = ttMov.tipoPlanilha;
 			}
			mapaLote.put(ttMov.lote,ttLot);
			

			if(tipoLancamento.contains("PAGAR")){
				ttMov.naturezaContabil = "D";
				if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "C";
			}
			if(tipoLancamento.contains("RECEBER")){
				ttMov.naturezaContabil = "C";
				if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "D";
			}

			JSONObject extratoEmpresa = new JSONObject();

			// CASO A LINHA DO EXTATO JA TENHA SIDO LIDA PELA PLANILHA DE PAGAMENTOS, DEVE SER IGNORADA
			if (ttMov.tipoPlanilha.contains("EXTRATO")) {
				chaveExtrato = ttMov.chaveExtrato;

				extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? ")
				.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
				.param(chaveExtrato + "%")
				.queryUnique();

				if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
					if (extratoEmpresa.has("EXTRATOLIDO")) {

						double extratoLido = extratoEmpresa.optDouble("EXTRATOLIDO");

						if (extratoLido == 1) continue;

						dbIOCont.update("IO_EXTRATO")
						.fields("EXTRATOLIDO")
						.where("CHAVE = ? ")
						.param(1)
						.param(chaveExtrato)
						.execute();

					}
				}

			}


			// -----------------------------------------------------------------------------------------------------------
			// COMPARA COM RAZAO APENAS QUANDO O NOME DO ARQUIVO CONTIVER OTTIMIZZA, ASSIM FICA MAIS RAPIDA A INTEGRACAO
			// QUANDO O CLIENTE FINAL ESTIVER RODANDO.
			// -----------------------------------------------------------------------------------------------------------

			if (!ttMov.tipoMovimento.equals("CTBPORT") && ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) {

				String tipoData = "MOVIMENTO";

				comparaRazao = true;


				Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
				Date dataMovimentoDateMenosUm= new Date();
				Date dataMovimentoDateMenosDois= new Date();
				Date dataMovimentoDateMenosTres= new Date();
				Date dataMovimentoDateMaisUm= new Date();
				Date dataMovimentoDateMaisDois= new Date();
				Date dataMovimentoDateMaisTres= new Date();

				Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres = cal.getTime();

				if (ttMov.valorDocumento == 0) continue;

				String valorFinal = String.format("%.2f", ttMov.valorDocumento);
				valorFinal = valorFinal.replaceAll("\\.",",");

				JSONArray registro = new JSONArray();

				

				JSONObject histobj = new JSONObject();
				ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01, histobj);
				ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02, histobj);
				ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03, histobj);
				ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04, histobj);
				ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05, histobj);
				ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06, histobj);
				ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07, histobj);
				ttMov.complemento08 = getReplaceTermos("complemento09", ttMov.complemento08, histobj);
				ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09, histobj);
				ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10, histobj);
				ttMov.nomeOrigem = getReplaceTermos("nomeOrigem", ttMov.nomeOrigem, histobj);
				ttMov.documento = getReplaceTermos("documento", ttMov.documento, histobj);
				ttMov.nomePortador = getReplaceTermos("nomePortador", ttMov.nomePortador, histobj);

				histobj.put("nomeOrigem", ttMov.nomeOrigem); histobj.put("documento", ttMov.documento);
				histobj.put("complemento01", ttMov.complemento01); histobj.put("complemento02", ttMov.complemento02);
				histobj.put("complemento03", ttMov.complemento03); histobj.put("complemento04", ttMov.complemento04);
				histobj.put("complemento05", ttMov.complemento05); histobj.put("complemento06", ttMov.complemento06);
				histobj.put("complemento07", ttMov.complemento07); histobj.put("complemento08", ttMov.complemento08);
				histobj.put("complemento09", ttMov.complemento09); histobj.put("complemento10", ttMov.complemento10);
				histobj.put("dataMovimento", ttMov.dataMovimento); histobj.put("mesAnoAnterior", mesAnoAnterior);
				histobj.put("mesAno2Anterior", mesAno2Anterior); histobj.put("mesAnoAtual", mesAnoAtual);
				histobj.put("nomePortador", ttMov.nomePortador); histobj.put("contaMovimento", contaMovimento);
				histobj.put("contaPortador", contaPortador); histobj.put("contaDebito", "");
				histobj.put("contaCredito", ""); histobj.put("contaJuros", ttMov.contaJuros);
				histobj.put("contaDesconto", ttMov.contaDesconto); histobj.put("contaMulta", ttMov.contaMulta);
				histobj.put("centroCusto", ttMov.centroCusto); histobj.put("valorDocumento", ttMov.valorDocumento);
				histobj.put("valorJuros", ttMov.valorJuros); histobj.put("valorDesconto", ttMov.valorDesconto);
				histobj.put("valorMulta", ttMov.valorMulta); histobj.put("codFilial", ttMov.codFilial);
				histobj.put("tipoPlanilha", ttMov.tipoPlanilha); histobj.put("numeroAba", ttMov.abaPlanilha);

				String contaPrincipal = "";
				String contraSecundaria = "";

				if (tipoLancamento.contains("PAGAR")) {
					contaPrincipal = ttMov.contaDebito;
					contraSecundaria = ttMov.contaCredito;

				}
				if (tipoLancamento.contains("RECEBER")) {
					contaPrincipal = ttMov.contaCredito;
					contraSecundaria = ttMov.contaDebito;
				}

				regraContaMovimento = getRegraContaMovimento(contaPrincipal, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
				regraHistorico = getRegraHistoricoRegra(contaPrincipal, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

				 
				ResumoTxt.append("\r\n").append("NAO ENCONTRADO;").append(ttMov.dataMovimento).append(";").append(tipoData).append(";")
						 .append(valorFinal).append(";").append(ttMov.documento).append(";").append(ttMov.nomeOrigem).append(";")
						 .append(ttMov.nomePortador).append(";").append(ttMov.complemento01).append(";").append(ttMov.complemento02).append(";")
						 .append(ttMov.complemento03).append(";").append(ttMov.complemento04).append(";").append(ttMov.complemento05).append(";")
						 .append(ttMov.complemento06).append(";;").append(ttMov.contaDebito).append(";").append(ttMov.contaCredito).append(";")
						 .append(regraContaMovimento).append(";").append(ttMov.historico).append(";").append(regraHistorico).append(";;")
						 .append(ttMov.nomeArquivo).append(";");
				 
			}			
 
			if(tipoLancamento.contains("PAGAR")){

				if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
				if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "C";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "D";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

				if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "C";
				if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
			}
			if(tipoLancamento.contains("RECEBER")){
				if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
				if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "D";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "C";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

				if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "D";
				if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
			}

			if (roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO")) {
				if(tipoLancamento.contains("PAGAR")){

					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

					if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
					if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
				}
				if(tipoLancamento.contains("RECEBER")){
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

					if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
					if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
				}
			}

			String classificacaoFinal = classificacao + ttMov.classificacao + "01";
			 

			if ((classificacao.startsWith("X") || roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) && ttMov.tipoMovimento.equals("CTBPORT")) { continue;}
			
			if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
				roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
			}else{
				roteiroCRM = getRoteiro();
			}
			// if(ttMov.codEmpresa.contains("68345")) logger.logDebug("QUATRO " + ttMov.valorDocumento + " | " + ttMov.dataMovimento + " | " + ttMov.tipoPlanilha + " | " + ttMov.tipoMovimento + " | " + roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase());
			// logger.logDebug("AQQQQ " + roteiroCRM.optString("erpContabilidade") + " | " + roteiroCRMPrincipal.optString("erpContabilidade") + " | " + ttMov.complemento05 + " | " + roteiroCRM.optString("Forcar_Partida_Dobrada").toUpperCase() + " | " + roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase() + " | " + ttMov.contaJuros + " | " + ttMov.contaDebito + " | " + ttMov.contaCredito + " | " + classificacao);
			
			if (classificacao.startsWith("X")) {
				JSONObject js = new JSONObject();
				js.put("LOTE", ttMov.lote);
				js.put("CNPJEMPRESA", cnpjEmpresa);
				js.put("DOCUMENTO", ttMov.documento);
				js.put("CODEMPRESA", ttMov.codEmpresa);
				js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
				js.put("DATAMOVIMENTO", ttMov.dataMovimento);
				js.put("TIPOMOVIMENTO", ttMov.tipoMovimento);
				js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
				js.put("CONTADEBITO", ttMov.contaDebito);
				js.put("CONTACREDITO", ttMov.contaCredito);
				js.put("HISTORICO", ttMov.historico);
				js.put("VALORDOCUMENTO", ttMov.valorDocumento);
				js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
				js.put("VALORDESCONTO", ttMov.valorDesconto);
				js.put("VALORJUROS", ttMov.valorJuros);
				js.put("VALORMULTA", ttMov.valorMulta);
				js.put("NOMEPORTADOR", ttMov.nomePortador);
				js.put("CENTROCUSTO", ttMov.centroCusto);
				js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
				js.put("NOMEORIGEM", ttMov.nomeOrigem);
				js.put("CPFCNPJ", ttMov.cpfCnpj);
				js.put("SERIE", ttMov.serie);
				js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
				js.put("CHAVE", ttMov.chave  + "-CTB");
				js.put("CLASSIFICACAO", classificacaoFinal);

 
				if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
					ttMov.lote.toUpperCase().contains("_OUD") ||
				    (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					// 2307-010554
					if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
						js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
						js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
						js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
						js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
						js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
					}
				}
					
  				 

				js.put("COMPLEMENTO01", ttMov.complemento01);
				js.put("COMPLEMENTO02", ttMov.complemento02);
				js.put("COMPLEMENTO03", ttMov.complemento03);
				js.put("COMPLEMENTO04", ttMov.complemento04);
				js.put("COMPLEMENTO05", ttMov.complemento05);
				js.put("COMPLEMENTO06", ttMov.complemento06);
				js.put("COMPLEMENTO07", ttMov.complemento07);
				js.put("COMPLEMENTO08", ttMov.complemento08);
				js.put("COMPLEMENTO09", ttMov.complemento09);
				js.put("COMPLEMENTO10", ttMov.complemento10);
				js.put("NOMEARQUIVO", ttMov.nomeArquivo);
				
				if(tipoLancamento.contains("PAGAR")){
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) {
						if (roteiroCRMPrincipal.optString("erpContabilidade").equals("LEDWARE") 
							|| roteiroCRMPrincipal.optString("erpContabilidade").equals("ALTERDATA")
							|| roteiroCRMPrincipal.optString("erpContabilidade").equals("CONTMATIC")) {
							if (ttMov.complemento05.equals("JUROS") && !ttMov.contaJuros.equals("")) {
								js.put("CONTADEBITO", ttMov.contaJuros);
								//#2303-000922
								//js.put("CONTACREDITO", ttMov.contaDebito);
								js.put("CONTACREDITO", ttMov.contaCredito);
							}
							if (ttMov.complemento05.equals("MULTA") && !ttMov.contaMulta.equals("")) {
								js.put("CONTADEBITO", ttMov.contaMulta);
								//#2303-000922
								//js.put("CONTACREDITO", ttMov.contaDebito);
								js.put("CONTACREDITO", ttMov.contaCredito);
							}
							if (ttMov.complemento05.equals("DESCONTO") && !ttMov.contaDesconto.equals("")) {
								js.put("CONTADEBITO", ttMov.contaDebito);
								js.put("CONTACREDITO", ttMov.contaDesconto);
							}
						}
					
					}
				}
				if(tipoLancamento.contains("RECEBER")){
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) {
						if (roteiroCRMPrincipal.optString("erpContabilidade").equals("LEDWARE") 
							|| roteiroCRMPrincipal.optString("erpContabilidade").equals("ALTERDATA")
							|| roteiroCRMPrincipal.optString("erpContabilidade").equals("CONTMATIC")) {
							if (ttMov.complemento05.equals("JUROS") && !ttMov.contaJuros.equals("")) {
								js.put("CONTADEBITO", ttMov.contaDebito);
								js.put("CONTACREDITO", ttMov.contaJuros);
							}
							if (ttMov.complemento05.equals("MULTA") && !ttMov.contaMulta.equals("")) {
								js.put("CONTADEBITO", ttMov.contaDebito);
								js.put("CONTACREDITO", ttMov.contaMulta);
							}
							if (ttMov.complemento05.equals("DESCONTO") && !ttMov.contaDesconto.equals("")) {
								js.put("CONTADEBITO", ttMov.contaDesconto);
								//#2303-000922
								//js.put("CONTACREDITO", ttMov.contaCredito);
								js.put("CONTACREDITO", ttMov.contaDebito);
							}
						}
					}
				}
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");
				
				if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);
 				

				//records.put(js);
				if (!ttMov.centroCusto.equals("")) {
					
					JSONObject rec3 = new JSONObject(js.toString());
					rec3.put("CONTADEBITO", ttMov.contaDebito);
					rec3.put("CONTACREDITO", ttMov.contaCredito);
					rec3.put("TIPOMOVIMENTO", "CTBCC");
					rec3.put("CHAVE", ttMov.chave + "-CTBCC");
					rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);

					//records.put(rec3);
				}
				continue;
			}

			String classJur = "";
			String classDes = "";
			String classMul = "";

			if(tipoLancamento.contains("PAGAR")){
				if(roteiroCRMPrincipal.optString("erpContabilidade").equals("DYAD")){
					if(classificacao.startsWith("C") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "03";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("D")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}
				}else{
					if(classificacao.startsWith("C") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("D")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}
				}
			}
			
			
			if(tipoLancamento.contains("RECEBER")){
				if(roteiroCRMPrincipal.optString("erpContabilidade").equals("DYAD")){
					if(classificacao.startsWith("D") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "03";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("C")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}
				}else{
					if(classificacao.startsWith("D") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("C")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}

				}
			}
			  


			if (ttMov.tipoMovimento.equals("CTBPORT")) {
				JSONObject js = new JSONObject();
				js.put("LOTE", ttMov.lote);
				js.put("CNPJEMPRESA", cnpjEmpresa);
				js.put("DOCUMENTO", ttMov.documento);
				js.put("CODEMPRESA", ttMov.codEmpresa);
				js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
				js.put("DATAMOVIMENTO", ttMov.dataMovimento);
				js.put("TIPOMOVIMENTO", "CTBPORT");
				js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
				js.put("HISTORICO", ttMov.historico);
				js.put("VALORDOCUMENTO", ttMov.valorDocumento);
				js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
				js.put("VALORDESCONTO", ttMov.valorDesconto);
				js.put("VALORJUROS", ttMov.valorJuros);
				js.put("VALORMULTA", ttMov.valorMulta);
				js.put("NOMEPORTADOR", ttMov.nomePortador);
				js.put("CENTROCUSTO", ttMov.centroCusto);
				js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
				js.put("NOMEORIGEM", ttMov.nomeOrigem);
				js.put("CPFCNPJ", ttMov.cpfCnpj);
				js.put("SERIE", ttMov.serie);
				js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
				js.put("CHAVE", ttMov.chave + "-CTBPORT");
				js.put("CLASSIFICACAO", classificacaoFinal);

				if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
					ttMov.lote.toUpperCase().contains("_OUD") ||
				    (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					// 2307-010554
					if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
						js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
						js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
						js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
						js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
						js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
					}
				}

				js.put("COMPLEMENTO01", ttMov.complemento01);
				js.put("COMPLEMENTO02", ttMov.complemento02);
				js.put("COMPLEMENTO03", ttMov.complemento03);
				js.put("COMPLEMENTO04", ttMov.complemento04);
				js.put("COMPLEMENTO05", ttMov.complemento05);
				js.put("COMPLEMENTO06", ttMov.complemento06);
				js.put("COMPLEMENTO07", ttMov.complemento07);
				js.put("COMPLEMENTO08", ttMov.complemento08);
				js.put("COMPLEMENTO09", ttMov.complemento09);
				js.put("COMPLEMENTO10", ttMov.complemento10);
				js.put("NOMEARQUIVO", ttMov.nomeArquivo);

				if(tipoLancamento.contains("PAGAR")){
					js.put("CONTADEBITO", "");
					js.put("CONTACREDITO", ttMov.contaCredito);
				}
				if(tipoLancamento.contains("RECEBER")){
					js.put("CONTADEBITO", ttMov.contaDebito);
					js.put("CONTACREDITO", "");
				}
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBPORT");				
				if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");				
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBPORT", js);
			 
				//records.put(js);
			}
			if (ttMov.tipoMovimento.equals("CTB")) {
				JSONObject js = new JSONObject();
				js.put("LOTE", ttMov.lote);
				js.put("CNPJEMPRESA", cnpjEmpresa);
				js.put("DOCUMENTO", ttMov.documento);
				js.put("CODEMPRESA", ttMov.codEmpresa);
				js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
				js.put("DATAMOVIMENTO", ttMov.dataMovimento);
				js.put("TIPOMOVIMENTO", "CTB");
				js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
				js.put("HISTORICO", ttMov.historico);
				js.put("VALORDOCUMENTO", ttMov.valorDocumento);
				js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
				js.put("VALORDESCONTO", ttMov.valorDesconto);
				js.put("VALORJUROS", ttMov.valorJuros);
				js.put("VALORMULTA", ttMov.valorMulta);
				js.put("NOMEPORTADOR", ttMov.nomePortador);
				js.put("CENTROCUSTO", ttMov.centroCusto);
				js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
				js.put("NOMEORIGEM", ttMov.nomeOrigem);
				js.put("CPFCNPJ", ttMov.cpfCnpj);
				js.put("SERIE", ttMov.serie);
				js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
				js.put("CHAVE", ttMov.chave + "-CTB");
				js.put("CLASSIFICACAO", classificacaoFinal);

				if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
					ttMov.lote.toUpperCase().contains("_OUD") ||
				    (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					// 2307-010554
					if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
						js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
						js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
						js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
						js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
						js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
					}
				}

				js.put("COMPLEMENTO01", ttMov.complemento01);
				js.put("COMPLEMENTO02", ttMov.complemento02);
				js.put("COMPLEMENTO03", ttMov.complemento03);
				js.put("COMPLEMENTO04", ttMov.complemento04);
				js.put("COMPLEMENTO05", ttMov.complemento05);
				js.put("COMPLEMENTO06", ttMov.complemento06);
				js.put("COMPLEMENTO07", ttMov.complemento07);
				js.put("COMPLEMENTO08", ttMov.complemento08);
				js.put("COMPLEMENTO09", ttMov.complemento09);
				js.put("COMPLEMENTO10", ttMov.complemento10);
				js.put("NOMEARQUIVO", ttMov.nomeArquivo);

				if(tipoLancamento.contains("PAGAR")){
					js.put("CONTADEBITO", ttMov.contaDebito);
					js.put("CONTACREDITO", "");
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTACREDITO", ttMov.contaCredito);
				}
				if(tipoLancamento.contains("RECEBER")){
					js.put("CONTADEBITO", "");
					js.put("CONTACREDITO", ttMov.contaCredito);
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTADEBITO", ttMov.contaDebito);
				}
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");				
				if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");				
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);
				
				//records.put(js);
				if (!ttMov.centroCusto.equals("")) {
					JSONObject rec3 = new JSONObject(js.toString());
					rec3.put("CONTADEBITO", ttMov.contaDebito);
					rec3.put("CONTACREDITO", ttMov.contaCredito);
					rec3.put("TIPOMOVIMENTO", "CTBCC");
					rec3.put("CHAVE", ttMov.chave + "-CTBCC");
					rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);
					//records.put(rec3);
				}

				 
				if (ttMov.valorJuros > 0)  {
					classificacaoFinal = classJur;
					JSONObject jsJUR = new JSONObject(js.toString());
					jsJUR.put("LOTE", ttMov.lote);
					jsJUR.put("CNPJEMPRESA", cnpjEmpresa);
					jsJUR.put("DOCUMENTO", ttMov.documento);
					jsJUR.put("CODEMPRESA", ttMov.codEmpresa);
					jsJUR.put("NOMEEMPRESA", ttMov.nomeEmpresa);
					jsJUR.put("DATAMOVIMENTO", ttMov.dataMovimento);
					jsJUR.put("TIPOMOVIMENTO", "CTBJUR");
					jsJUR.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
					jsJUR.put("HISTORICO", ttMov.historicoJuros);
					jsJUR.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jsJUR.put("VALORLIQUIDACAO", ttMov.valorDocumento);
					jsJUR.put("VALORDESCONTO", ttMov.valorDesconto);
					jsJUR.put("VALORJUROS", ttMov.valorJuros);
					jsJUR.put("VALORMULTA", ttMov.valorMulta);
					jsJUR.put("NOMEPORTADOR", ttMov.nomePortador);
					jsJUR.put("CENTROCUSTO", ttMov.centroCusto);
					jsJUR.put("NATUREZACONTABIL", "D");
					jsJUR.put("NOMEORIGEM", ttMov.nomeOrigem);
					jsJUR.put("CPFCNPJ", ttMov.cpfCnpj);
					jsJUR.put("SERIE", ttMov.serie);
					jsJUR.put("STATUSMOVIMENTO", ttMov.statusMovimento);
					jsJUR.put("CHAVE", ttMov.chave + "-CTBJUR");
					jsJUR.put("CLASSIFICACAO", classificacaoFinal);

					jsJUR.put("COMPLEMENTO01", ttMov.complemento01);
					jsJUR.put("COMPLEMENTO02", ttMov.complemento02);
					jsJUR.put("COMPLEMENTO03", ttMov.complemento03);
					jsJUR.put("COMPLEMENTO04", ttMov.complemento04);
					jsJUR.put("COMPLEMENTO05", ttMov.complemento05);
					jsJUR.put("COMPLEMENTO06", ttMov.complemento06);
					jsJUR.put("COMPLEMENTO07", ttMov.complemento07);
					jsJUR.put("COMPLEMENTO08", ttMov.complemento08);
					jsJUR.put("COMPLEMENTO09", ttMov.complemento09);
					jsJUR.put("COMPLEMENTO10", ttMov.complemento10);
					jsJUR.put("NOMEARQUIVO", ttMov.nomeArquivo);

					if(tipoLancamento.contains("PAGAR")){
						jsJUR.put("CONTADEBITO",  ttMov.contaJuros);
						jsJUR.put("CONTACREDITO", "");
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTACREDITO", ttMov.contaCredito);

					}
					if(tipoLancamento.contains("RECEBER")){
						jsJUR.put("CONTADEBITO",  "");
						jsJUR.put("CONTACREDITO", ttMov.contaJuros);
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTADEBITO", ttMov.contaDebito);

					}
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJUR");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJUR", jsJUR);
				
				
					//records.put(jsJUR);
					if (!ttMov.centroCusto.equals("")) {
						JSONObject rec3 = new JSONObject(jsJUR.toString());
						 rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBJURCC");
						rec3.put("CHAVE", ttMov.chave + "-CTBJURCC");
						rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBJURCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJURCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJURCC", rec3);
					   // records.put(rec3);
					}
				}
				if (ttMov.valorDesconto > 0)  {
					classificacaoFinal = classDes;
					JSONObject jsDES = new JSONObject(js.toString());
					jsDES.put("LOTE", ttMov.lote);
					jsDES.put("CNPJEMPRESA", cnpjEmpresa);
					jsDES.put("DOCUMENTO", ttMov.documento);
					jsDES.put("CODEMPRESA", ttMov.codEmpresa);
					jsDES.put("NOMEEMPRESA", ttMov.nomeEmpresa);
					jsDES.put("DATAMOVIMENTO", ttMov.dataMovimento);
					jsDES.put("TIPOMOVIMENTO", "CTBDES");
					jsDES.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
					jsDES.put("HISTORICO", ttMov.historicoDesconto);
					jsDES.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jsDES.put("VALORLIQUIDACAO", ttMov.valorDocumento);
					jsDES.put("VALORDESCONTO", ttMov.valorDesconto);
					jsDES.put("VALORJUROS", ttMov.valorJuros);
					jsDES.put("VALORMULTA", ttMov.valorMulta);
					jsDES.put("NOMEPORTADOR", ttMov.nomePortador);
					jsDES.put("CENTROCUSTO", ttMov.centroCusto);
					jsDES.put("NATUREZACONTABIL", "C");
					jsDES.put("NOMEORIGEM", ttMov.nomeOrigem);
					jsDES.put("CPFCNPJ", ttMov.cpfCnpj);
					jsDES.put("SERIE", ttMov.serie);
					jsDES.put("STATUSMOVIMENTO", ttMov.statusMovimento);
					jsDES.put("CHAVE", ttMov.chave + "-CTBDES");
					jsDES.put("CLASSIFICACAO", classificacaoFinal);

					jsDES.put("COMPLEMENTO01", ttMov.complemento01);
					jsDES.put("COMPLEMENTO02", ttMov.complemento02);
					jsDES.put("COMPLEMENTO03", ttMov.complemento03);
					jsDES.put("COMPLEMENTO04", ttMov.complemento04);
					jsDES.put("COMPLEMENTO05", ttMov.complemento05);
					jsDES.put("COMPLEMENTO06", ttMov.complemento06);
					jsDES.put("COMPLEMENTO07", ttMov.complemento07);
					jsDES.put("COMPLEMENTO08", ttMov.complemento08);
					jsDES.put("COMPLEMENTO09", ttMov.complemento09);
					jsDES.put("COMPLEMENTO10", ttMov.complemento10);
					jsDES.put("NOMEARQUIVO", ttMov.nomeArquivo);

					if(tipoLancamento.contains("PAGAR")){
						jsDES.put("CONTADEBITO", "");
						jsDES.put("CONTACREDITO", ttMov.contaDesconto);
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTADEBITO", ttMov.contaCredito);

					}
					if(tipoLancamento.contains("RECEBER")){
						jsDES.put("CONTADEBITO",  ttMov.contaDesconto);
						jsDES.put("CONTACREDITO", "");
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTACREDITO", ttMov.contaDebito);

					}
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDES");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDES", jsDES);
				 
					//records.put(jsDES);
					if (!ttMov.centroCusto.equals("")) {
						JSONObject rec3 = new JSONObject(jsDES.toString());
						rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBDESCC");
						rec3.put("CHAVE", ttMov.chave + "-CTBDESCC");
						rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBDESCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDESCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDESCC", rec3);
					   // records.put(rec3);
					}
				}
				if (ttMov.valorMulta > 0)  {
					classificacaoFinal = classMul;
					JSONObject jsMUL = new JSONObject(js.toString());
					jsMUL.put("LOTE", ttMov.lote);
					jsMUL.put("CNPJEMPRESA", cnpjEmpresa);
					jsMUL.put("DOCUMENTO", ttMov.documento);
					jsMUL.put("CODEMPRESA", ttMov.codEmpresa);
					jsMUL.put("NOMEEMPRESA", ttMov.nomeEmpresa);
					jsMUL.put("DATAMOVIMENTO", ttMov.dataMovimento);
					jsMUL.put("TIPOMOVIMENTO", "CTBMUL");
					jsMUL.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
					jsMUL.put("HISTORICO", ttMov.historicoMulta);
					jsMUL.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jsMUL.put("VALORLIQUIDACAO", ttMov.valorDocumento);
					jsMUL.put("VALORDESCONTO", ttMov.valorDesconto);
					jsMUL.put("VALORJUROS", ttMov.valorJuros);
					jsMUL.put("VALORMULTA", ttMov.valorMulta);
					jsMUL.put("NOMEPORTADOR", ttMov.nomePortador);
					jsMUL.put("CENTROCUSTO", ttMov.centroCusto);
					jsMUL.put("NATUREZACONTABIL", "D");
					jsMUL.put("NOMEORIGEM", ttMov.nomeOrigem);
					jsMUL.put("CPFCNPJ", ttMov.cpfCnpj);
					jsMUL.put("SERIE", ttMov.serie);
					jsMUL.put("STATUSMOVIMENTO", ttMov.statusMovimento);
					jsMUL.put("CHAVE", ttMov.chave + "-CTBMUL");
					jsMUL.put("CLASSIFICACAO", classificacaoFinal);

					jsMUL.put("COMPLEMENTO01", ttMov.complemento01);
					jsMUL.put("COMPLEMENTO02", ttMov.complemento02);
					jsMUL.put("COMPLEMENTO03", ttMov.complemento03);
					jsMUL.put("COMPLEMENTO04", ttMov.complemento04);
					jsMUL.put("COMPLEMENTO05", ttMov.complemento05);
					jsMUL.put("COMPLEMENTO06", ttMov.complemento06);
					jsMUL.put("COMPLEMENTO07", ttMov.complemento07);
					jsMUL.put("COMPLEMENTO08", ttMov.complemento08);
					jsMUL.put("COMPLEMENTO09", ttMov.complemento09);
					jsMUL.put("COMPLEMENTO10", ttMov.complemento10);
					jsMUL.put("NOMEARQUIVO", ttMov.nomeArquivo);

					if(tipoLancamento.contains("PAGAR")){
						jsMUL.put("CONTADEBITO",  ttMov.contaMulta);
						jsMUL.put("CONTACREDITO", "");
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTACREDITO", ttMov.contaCredito);

					}
					if(tipoLancamento.contains("RECEBER")){
						jsMUL.put("CONTADEBITO",  "");
						jsMUL.put("CONTACREDITO", ttMov.contaMulta);
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTADEBITO", ttMov.contaDebito);

					}
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMUL");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMUL", jsMUL);				 
					
					//records.put(jsMUL);
					if (!ttMov.centroCusto.equals("")) {
						JSONObject rec3 = new JSONObject(jsMUL.toString());
						rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBMULCC");
						rec3.put("CHAVE", ttMov.chave + "-CTBMULCC");
						rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBMULCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMULCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMULCC", rec3);
					   //records.put(rec3);
					}
				}
			}
		}
		// JWR adicionamos essa parte para mandar uma mensagem personalizada para o cliente, no caso de apenas nao conseguir ler os movimentos e nao um erro de layout
		// vamos descomentar depois de adicionar todas as validacoes sobre fiscal e afins
		// logger.logDebug("contRegra -> " + contRegra + " | temFiltro -> " + temFiltro);
		
		/*if (roteiroCRMPrincipal.optString("contabilidade").toUpperCase().contains("MICALI")) */
 		
		/*if (contRegra > 0 && nomeArquivo.toUpperCase().contains("_ID") && nomeArquivo.toUpperCase().contains(".PDF")) {
			// logger.logDebug("ENTROU 34");
			putStatus(dirName, "03--Etapa 3 de 4 LEUCONVERSORANTIGO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
		}*/
		
		//#2304-002843. Melhorias no feedback
		if (contRegra < 0 && nomeArquivo.toUpperCase().contains("_ID") && !nomeArquivo.toUpperCase().startsWith("OK_DEPARACONTA") && ((roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && !temFiscal && !mantemArquivo.equals("SIM")) || !roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE"))) {
			if (temFiltro) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUFILTRO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUFILTRO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			} else if (temIgnorar) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUIGNORAR- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUIGNORAR- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
			 	}
			} else if (temLinhas) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEULINHAS- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEULINHAS- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			} else if (temOFX || retornaPadroes.equals("break")) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEU- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEU- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			} else {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUMOVIMENTO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUMOVIMENTO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			}
			
		}
		
		if (apagaExtrato) {
			try {
			
				if (dbIOCont != null) {
					dbIOCont.closeConnection();
					dbIOCont = null;
				}
				if (dbIOCont == null) {
					dbIOCont = connectIOContabil(props, logger);
				}
				dbIOCont.delete("IO_EXTRATO")
				.where("CODEMPRESA=?")
				.param(codEmpresa)
				.execute();
			} catch (Exception e) {
				logger.logDebug("PROBLEMA APAGAR EXTRATO " + e.getMessage());
			}
		}
		
		// Apaga as Contas T quando sao informadas pelos contadore no Conf. REfras 
		if (apagaContaT) {
			try {
			
				if (dbIOCont != null) {
					dbIOCont.closeConnection();
					dbIOCont = null;
				}
				if (dbIOCont == null) {
					dbIOCont = connectIOContabil(props, logger);
				}
				
				if (tipoLancamento.contains("PAGAR")) {
					dbIOCont.delete("IO_PESSOA")
					.where("CODEMPRESA = ? 	AND CONTACTBFOR LIKE '%T%'")
					.param(codEmpresa)
					.execute();
					}
				else {
					dbIOCont.delete("IO_PESSOA")
					.where("CODEMPRESA = ? 	AND CONTACTBCLI LIKE '%T%'")
					.param(codEmpresa)
					.execute();
					}
			} catch (Exception e) {
				logger.logDebug("PROBLEMA APAGAR IO_PESSOA  " + e.getMessage());
			}
		}
		// resumo comparativo com razao
		String idLoteResumo = "";
		if (comparaRazao) {
			if(loteEtapaTres.toUpperCase().contains("_ID") && fornecedorUnico.contains("EXIBE_RESUMO")){
				idLoteResumo = "_ID"+cutString(loteEtapaTres.toUpperCase(), "_ID", "_")+"_";
			}
			String filenameRazao = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_APOS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +idLoteResumo+".csv";
			FileWriter writerRazao = new FileWriter(filenameRazao);
			// writerRazao.writeNewFile(ResumoTxt.toString());
			writerRazao.writeNewFile(ResumoTxt.toString());
		}
		
		if(logs){
			String filenameLogs = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_LOGS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +idLoteResumo+".csv";
			FileWriter writerLogs = new FileWriter(filenameLogs);
			// writerRazao.writeNewFile(ResumoTxt.toString());
			writerLogs.writeNewFile(logsTxt.toString());
		}

		//-------------------------------------------------------------------------------------
		// GERA ARQUIVO COM CONTAS NAO ENCONTRADAS
		//-------------------------------------------------------------------------------------
		String filename = backupDirName + "/ARQUIVO_APOIO_" + tipoLancamento + ".csv";
		// Cria o arquivo de DE-PARA FORNECEDOR
		FileWriter writer = new FileWriter(filename);
		writer.writeNewFile(txtDePara.toString());

		Iterator ite = mapaLote.keySet().iterator();
		while (ite.hasNext()) {
			String key = (String)ite.next();
			ttLote ttLot = (ttLote)mapaLote.get(key);
			// =======================================================================================
			// * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base *
			// =======================================================================================
			lote = ttLot.lote;     

  			
			ultimoJS = new JSONObject();
			ultimoJS.put("LOTE", lote);
			ultimoJS.put("DOCUMENTO", "");
			ultimoJS.put("CODEMPRESA", codEmpresa);
			ultimoJS.put("NOMEEMPRESA", nomeEmpresa);
			ultimoJS.put("DATAMOVIMENTO", "");
			ultimoJS.put("TIPOMOVIMENTO", "");
			ultimoJS.put("TIPOLANCAMENTO", "");
			ultimoJS.put("CONTADEBITO", "LOTE_ENCERRADO");
			ultimoJS.put("CONTACREDITO", "LOTE_ENCERRADO");
			ultimoJS.put("HISTORICO", ttLot.tipoPlanilha);
			ultimoJS.put("VALORLIQUIDACAO", 0);
			ultimoJS.put("VALORDOCUMENTO", 0);
			ultimoJS.put("VALORDESCONTO", 0);
			ultimoJS.put("VALORJUROS", 0);
			ultimoJS.put("VALORMULTA", 0);
			ultimoJS.put("NOMEPORTADOR", "");
			ultimoJS.put("CENTROCUSTO", "");
			ultimoJS.put("NATUREZACONTABIL", "");
			ultimoJS.put("NOMEORIGEM", "");
			ultimoJS.put("CPFCNPJ", "");
			ultimoJS.put("SERIE", "");
			ultimoJS.put("STATUSMOVIMENTO", 0);
			ultimoJS.put("CHAVE","LOTE_ENCERRADO " + lote );
			ultimoJS.put("CLASSIFICACAO", "LOTE_ENCERRADO");
			ultimoJS.put("STATUSMOVIMENTO", 1);
			records.put(ultimoJS);
			// Resumo Planilha
			try {
				String dirName1 = dirName.substring(0, dirName.lastIndexOf("/"))+"/DePara/";
				File file = new File(dirName1);
				try {
					String diretorio = dirName1;
					File file2 = new File(diretorio);
					File[] files = file2.listFiles();
					if (FileUtil.dirHasFiles(diretorio)) {
						for (File fl: files) {
							if (fl.isFile()){
								if(fl.getName().contains(lote) && fl.getName().toLowerCase().endsWith(".csv") && !fl.getName().startsWith("OK_") ){
									// ELIMINA ARQUIVO IMPORTADO
									file = new File(dirName1);
									if (file.exists()){
										FileUtil.deleteFile(dirName1+fl.getName());
									}
								}
							}
						}
					}
				} catch (Exception ee) {
					logger.logError(ee);
				}
			}catch (Exception e) {
				logger.logError(e);
			}
		}
	} catch (Exception ee) {
		logger.logError("EndpointA: ", ee);
	} finally {
	
		try {
			if (dbIOCont != null) {
				dbIOCont.closeConnection();
			}
			if (dbIODepara != null) {
				dbIODepara.closeConnection();
			}
		} catch (Exception ee) {}
	}
	return records;
}

class ttLote {
	public String lote;
	public String tipoPlanilha;
	public ttLote(){}
	public ttLote(ttLote tt){
		lote=tt.lote;
		tipoPlanilha=tt.tipoPlanilha;		
	}
}

class ttArquivo {
	public String arquivo;
	public String abas;
	public ttArquivo(){}
	public ttArquivo(ttArquivo tt){
		arquivo=tt.arquivo;
		abas=tt.abas;
	}
}

class ttDocumento {
    public String documento;
	public double valorDocumento;
     public ttDocumento(){}
    public ttDocumento(ttDocumento ttD){
        documento = ttD.documento;
 		valorDocumento  = ttD.valorDocumento;
    }
}
class ttJuros {
	public String documento;
	public double valorJur;
	public int valorLido;
	public ttJuros(){}
	public ttJuros(ttJuros ttJ){
		documento = ttJ.documento;
		valorLido = ttJ.valorLido;
		valorJur  = ttJ.valorJur;
	}
}

class ttDesconto {
	public String documento;
	public double valorDesc;
	public int valorLido;
	public ttDesconto(){}
	public ttDesconto(ttDesconto ttD){
		documento  = ttD.documento;
		valorDesc  = ttD.valorDesc;
		valorLido  = ttD.valorLido;
	}
}

class ttPlano {
	public String contaContabil;
	public String descricaoPlano;
	public String contaAnalitica;
	public ttPlano(){}
	public ttPlano(ttPlano ttP){
		contaContabil = ttP.contaContabil;
		descricaoPlano = ttP.descricaoPlano;
		contaAnalitica = ttP.contaAnalitica;
	}
}

class ttFornecedor {
	public String nomeOrigem;
	public String contaMovimento;
	public ttFornecedor(){}
	public ttFornecedor(ttFornecedor ttF){
		nomeOrigem 	 = ttF.nomeOrigem;
		contaMovimento = ttF.contaMovimento;
	}
}



public String verificaSeparador(String separadorCsv, String dirName, String extensao, SysProperties props, InoutLogger logger) {

	try {
		if(extensao.contains("CSV")) {

			FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
			fileLoader2.loadFiles();
			for (MemoryFile memFile: fileLoader2.getMemFiles()) {
				if(memFile.getFilename().startsWith("OK_DeParaConta__")) importaDePara(memFile, dirName, extensao, logger, props);
				if (memFile.getFilename().toUpperCase().contains("CSV")) {
					while (memFile.hasNextLine()) {
						try {
							String line = memFile.nextLine();
							line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
							if (line.length() < 10) return separadorCsv;
							String [] fields1 = line.split(";");
							String [] fields2 = line.split(",");
							if(fields1.length > 0 && fields2.length > 0){
								if(fields1.length < fields2.length) { separadorCsv = ","; break; }
								if(fields1.length > fields2.length) { separadorCsv = ";"; break; }
							}
						}
						catch(Exception xx) {}
					}
					return separadorCsv;
				}
			}
		}
		
		
		
		if(extensao.contains("TXT")) {
			FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
			fileLoader2.loadFiles();
			for (MemoryFile memFile: fileLoader2.getMemFiles()) {
				if (memFile.getFilename().toUpperCase().endsWith(".TXT")) {
					while (memFile.hasNextLine()) {
						try {
							String line = memFile.nextLine();
							line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
							if (line.length() < 10) return separadorCsv;
							String [] fields1 = line.split(";");
							String [] fields2 = line.split(",");
							String [] fields3 = line.split("\t");
							if(fields1.length > 0 && fields2.length > 0){
								if(fields1.length > fields2.length && fields1.length > fields3.length) { separadorCsv = ";"; break; }
								if(fields2.length > fields1.length && fields2.length > fields3.length) { separadorCsv = ","; break; }
								if(fields3.length > fields1.length && fields3.length > fields2.length) { separadorCsv = "\t"; break; }
							}
						}
						catch(Exception xx) {}
					}
					return separadorCsv;
				}
			}
		}
	
	}
	 catch(Exception xx) {}
	
	return separadorCsv;


}

public void criaMovimento(DataBase dbIO, JSONObject recordRec, String chave, JSONObject js) {
	if (recordRec != null)  {
		try {
			updateMovimento(dbIO, js);
			/*if (js.has("idRoteiro")) {
				try {
					updateArquivo(dbIO, js);
				} catch(Exception ex){}
			}*/
		} catch (Exception eUpdateMovimento) {						 
			logger.logError("EndpointB: Erro ao Atualizar Movimento", eUpdateMovimento);
		}
	} else {
		try {
			insertMovimento(dbIO, js); 
			/*if (js.has("idRoteiro")) {
				try {
					insertArquivo(dbIO, js);
				} catch(Exception ex) {}
			}*/
				
		} catch (Exception eInsertMovimento) { 						 
			logger.logError("EndpointB: Erro ao fazer insert no Movimento", eInsertMovimento);
		}
	}
}

public int getIndiceRoteiro(String nomeCampo, JSONObject roteiroIndice) {
	int validaCampo = -1;
	try {
		if (!roteiroIndice.optString(nomeCampo).equals("")) {
			try {
				validaCampo = Integer.parseInt(roteiroIndice.optString(nomeCampo).replaceAll("@","").trim());
			}
			catch (Exception xx) { validaCampo = -1;}
		}
	}
	catch (Exception xx) {validaCampo = -1;}
	return  validaCampo;
}


public HashMap geralancamentoExtraInterno(HashMap mapaVariavel, ttMovimentoPadrao ttMov2, String chave,boolean gerarApenasValorDocumento, int complemento , String textoComplemento, String classificacao){
	ttMovimentoPadrao ttMov4      = (ttMovimentoPadrao)mapaVariavel.get(chave);
	if (ttMov4 == null) {
		ttMov4 = new ttMovimentoPadrao(ttMov2);
		ttMov4.chave                    = chave;
		if(gerarApenasValorDocumento){
			ttMov4.valorDesconto            = 0;
			ttMov4.valorMulta               = 0;
			ttMov4.valorJuros               = 0;
		}
		ttMov4.classificacao            = classificacao;
		switch(complemento){
			case 1: ttMov4.complemento01 = textoComplemento; break;
			case 2: ttMov4.complemento02 = textoComplemento; break;
			case 3: ttMov4.complemento03 = textoComplemento; break;
			case 4: ttMov4.complemento04 = textoComplemento; break;
			case 5: ttMov4.complemento05 = textoComplemento; break;
			case 6: ttMov4.complemento06 = textoComplemento; break;
		}
		mapaVariavel.put(chave, ttMov4);
	}
	return mapaVariavel;
}


public JSONObject getAlternativeDataInt (JSONObject objIn, MemoryFile memFile) throws Exception {
	JSONObject response	= new JSONObject();
	String validar		= objIn.optString("validar");
	String [] validaArr	= validar.split(";");
	String changeIt		= "";
	String changeText	= "nomeOrigem;documento;complemento01;complemento02;complemento03;complemento04;complemento05;complemento06;complemento07;complemento08;complemento09;complemento10;nomePortador";
	String changeDate	= "dataMovimento";
	String changeValue	= "valorDocumento;valorPagamento;valorJuros;valorDesconto;valorMulta";

	for (String parameter : validaArr) {
		response.put(parameter,	"");

		// String indiceAux = "";
		String indiceAux = getColunaAlternativa(parameter,	objIn);
		if (!indiceAux.equals("")) {
			if (changeDate.contains(parameter)) {
				if(!indiceAux.contains(";")) {
					try { 
						int iAux = Integer.parseInt(indiceAux);
						String dataStrAux = memFile.getStringFieldRemoveEspCharsUpper(iAux);
						if (!dataStrAux.equals("")) {
							String dataMovAux = getCampoDate(dataStrAux);
							if (dataMovAux.contains("/")) {
								String dataAlternativa = getCampoDate(dataStrAux);
								response.put(parameter,	dataAlternativa);
								response.put("dataLote", dataAlternativa);
								changeIt = changeIt+";"+parameter;
								
								//feito pra que as proximas iteracoes ja tenham o dado atualizado
								objIn.put(parameter, dataAlternativa);
							}
						}
					} catch (Exception ee) { logger.logDebug("Erro getColunaAlternativa 'Data'! "+ee.getMessage()); }
				}
				
			} else if (changeValue.contains(parameter)) {
				if(!indiceAux.contains(";")) {
					try {
						int iAux  = Integer.parseInt(indiceAux);
						if(iAux >=0){
							double valorAlternativo = memFile.getDoubleField(iAux);
							response.put(parameter, valorAlternativo);
							changeIt = changeIt+";"+parameter;
							
							//feito pra que as proximas iteracoes ja tenham o dado atualizado
							objIn.put(parameter, valorAlternativo);
						}
					} catch (Exception ee) { logger.logDebug("Erro getColunaAlternativa 'Valor'! "+ee.getMessage()); }

				}
				if (indiceAux.contains(";")) {
					double valorAlternativo = 0;
					try {
						String [] izis = indiceAux.split(";");
						for (String k : izis) {
							int iAux = Integer.parseInt(k);
							valorAlternativo = valorAlternativo + memFile.getDoubleField(iAux);
						}
					} catch (Exception ee) {logger.logDebug("Erro getColunaAlternativa 'Valor 02'! "+ee.getMessage());  }
					
					if (valorAlternativo != 0) {
						response.put(parameter, valorAlternativo);
						changeIt = changeIt+";"+parameter;
						
						//feito pra que as proximas iteracoes ja tenham o dado atualizado
						objIn.put(parameter, valorAlternativo);
					}
				}
			} else if (changeText.contains(parameter)) {
				if(!indiceAux.contains(";")) {
					try { 
						int iAux = Integer.parseInt(indiceAux);
						String textoAlternativo = memFile.getStringFieldRemoveEspCharsUpper(iAux);
						response.put(parameter, textoAlternativo);
						changeIt = changeIt+";"+parameter;
						
						//feito pra que as proximas iteracoes ja tenham o dado atualizado
						objIn.put(parameter, textoAlternativo);
					} catch (Exception ee) { logger.logDebug("Erro getColunaAlternativa 'Texto'! "+ee.getMessage()); }
				}
				if (indiceAux.contains(";")) {
					String textoAlternativo = "";
					
					try {
						String [] izis = indiceAux.split(";");
						for (String k : izis) {
							int iAux	 = Integer.parseInt(k);
							textoAlternativo = textoAlternativo+" - "+memFile.getStringFieldRemoveEspCharsUpper(iAux).trim();
							textoAlternativo = textoAlternativo.trim();
						}
						if (textoAlternativo.startsWith("-")) textoAlternativo = cutString(textoAlternativo, 1).trim();
						
					} catch (Exception ee) {logger.logDebug("Erro getColunaAlternativa 'Texto 02'! "+ee.getMessage());  }
					
					if (!textoAlternativo.equals("")) {
						response.put(parameter, textoAlternativo);
						changeIt = changeIt+";"+parameter;
						
						//feito pra que as proximas iteracoes ja tenham o dado atualizado
						objIn.put(parameter, textoAlternativo);
					}
				}
			} else {
				response.put(parameter, "");
				objIn.put(parameter, "");
			}
		}
	}
	
	response.put("changeIt",	changeIt);
	return response;
}




public String getRefatoraCampo(String valorOriginal, String conteudoRoteiro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String line            = objHistorico.optString("line");
    String cabecalhoRegra  = objHistorico.optString("cabecalhoRegra");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
	
	nomeArquivo = StringUtil.removeSpecialCharsToUC(nomeArquivo);


	if (conteudoRoteiro.toUpperCase().contains("#CABECALHO"))      return cabecalhoRegra;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO01"))  return complemento01;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO02"))  return complemento02;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO03"))  return complemento03;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO04"))  return complemento04;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO05"))  return complemento05;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO06"))  return complemento06;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO07"))  return complemento07;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO08"))  return complemento08;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO09"))  return complemento09;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO10"))  return complemento10;
	if (conteudoRoteiro.toUpperCase().contains("#TIPOPLANILHA"))   return tipoPlanilha;
	if (conteudoRoteiro.toUpperCase().contains("#NOMEDOARQUIVO"))   return nomeArquivo;
	if (conteudoRoteiro.toUpperCase().contains("#LINE"))  		   return line;
	if (conteudoRoteiro.toUpperCase().contains("#NUMEROABA"))      return ("ABA:" + String.valueOf(numeroAba));


    return valorOriginal;
}

public boolean buscaProtocoloConversor(String protocolo_id, LancamentosApi apiWeb, String tipoLancamento, String nomeArquivo, InoutLogger logger) throws Exception {
	// logger.logInfo("ENTROU PROTOCOLOCONV");
	String diretorio = "C:/Conversor/Pdf";
	File file2 = new File(diretorio);
	
	File [] files = file2.listFiles();
	nomeArquivo = cutString(nomeArquivo, 0, ".pdf");
	
	if (FileUtil.dirHasFiles(diretorio)) {
		
		boolean notificouProtocolo = false;
			for (File fl: files) {
				// logger.logDebug("FL " + fl.getAbsolutePath()+ " | " + nomeArquivo + " | " + tipoLancamento);
				if (fl.getAbsolutePath().contains(tipoLancamento) && fl.getAbsolutePath().contains(nomeArquivo)) {
					// logger.logInfo("AQ FOI " + fl.getAbsolutePath() + " | FL LENGHT = " + fl.length());
					if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().toUpperCase().contains(".CSV") && fl.getAbsolutePath().contains("_ancora_") && fl.length() > 0){
						String diretorioArquivoCsv = "C:/inout/contabil/";
						String testeCsv = "";									
						String contabilidadeCsv = "";
						String empresaCsv = "";
						
						// logger.logInfo("ENTROU NOS PDFFFFFF");
						
						if (fl.getAbsolutePath().contains("pagar_")) {
							try {											
								testeCsv = cutString(fl.getAbsolutePath(), "pagar_");
								contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
								empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
								empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
								diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/APagar";
							} catch (Exception e) {
								logger.logInfo("ERRO AO CORTAR ARQUIVO " + e.getMessage());
							}
						}
						else if (fl.getAbsolutePath().contains("receber_")) {
							try {											
								testeCsv = cutString(fl.getAbsolutePath(), "receber_");
								contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
								empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
								empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
								diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/AReceber";
							} catch (Exception e) {
								logger.logInfo("ERRO AO CORTAR ARQUIVO2 " + e.getMessage());
							}
						}
						String arquivoDeployStr = "";
						try {
							// mantivemos o ancora no nome do arquivo para saber que foi convertido e usado nos extratos
							arquivoDeployStr = fl.getAbsolutePath().substring(fl.getAbsolutePath().indexOf("_ancora_"));
						} catch (Exception e) {
							logger.logInfo("NAOCRIOURODACONVERSOR " + e.getMessage());
						}
						// logger.logInfo("DIRETORIOS " + diretorioArquivoCsv + " | " + arquivoDeployStr);
						if (!arquivoDeployStr.equals("")) {
							File arquivoDeploy  = new File(diretorioArquivoCsv + "/" + arquivoDeployStr);
							//logger.logDebug("COPIOUARQUIVO " + arquivoDeploy.getName());
							FileUtil.copyFolder(fl, arquivoDeploy);
							
							try { 
								FileUtil.deleteFile(fl);
							} catch (Exception XX) {}
						}
						if (!notificouProtocolo) {
							notificouProtocolo = true;
							String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "0", "Estamos convertendo os PDFs.",  logger);
						}
						continue;
					}
				}
			}
		if (notificouProtocolo) return true;
	}
	return false;
}

public String atualizaStatusProtocoloOic(LancamentosApi apiWeb, File fl,  String statusProtocolo, String mensagem, InoutLogger logger) throws Exception {

    try {
		 String protocolo_id = cutString(fl.getName().toUpperCase(), fl.getName().toUpperCase().lastIndexOf("_ID")+3, "_");
		 if (fl.getName().toUpperCase().contains("OUD_ID"))  protocolo_id = cutString(fl.getName().toUpperCase(), "OUD_ID", "_");
		 if (fl.getName().toUpperCase().contains("OUD__ID")) protocolo_id = cutString(fl.getName().toUpperCase(), "OUD__ID", "_");
		// roda requisicao para atualizar o satus do protocolo
		JSONObject bodyProtocolo = new JSONObject();
		bodyProtocolo.put("status", statusProtocolo).put("mensagem", mensagem);
		String atualizaStatus = apiWeb.atualizaStatusProtocolo("https://integrador-contabil.herokuapp.com", protocolo_id, bodyProtocolo);
		return atualizaStatus;
	} catch (Exception xx) {
		logger.logDebug(" Erro ao Atualizar Status " + xx);
		return "";
	}
 
}




















































































































































































































































































































//## CODIGO GERADO A PARTIR DAS REGRAS NO SALESFORCE ##
//## NAO ALTERAR DAQUI ATE O FINAL DO SCRIPT!!!!     ##
public JSONObject getRoteiro() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2018-012373");
    js.put("idRoteiro", "a0A1C00000iWMEs");
    js.put("idEmpresa", "a0q1C000005EsVXQA0");
    js.put("idContabilidade", "a09150000151oun");
    js.put("CnpjContabilidade", "82.863.259/0001-20");
    js.put("CnpjEmpresa", "00.310.006/0001-65");
    js.put("fornecedor", "1");
    js.put("dataMovimento", "6");
    js.put("portador", "19");
    js.put("documentoNF", "2");
    js.put("valorDocumento", "7");
    js.put("valorJuros", "-1");
    js.put("valorDesconto", "-1");
    js.put("valorMulta", "-1");
    js.put("valorPagamento", "9");
    js.put("complemento01", "0");
    js.put("complemento02", "17");
    js.put("complemento03", "18");
    js.put("complemento04", "22");
    js.put("complemento05", "-1");
    js.put("complemento06", "-1");
    js.put("centroCusto", "-1");
    js.put("valorAlternativo", "");
    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("dataFake", "-1");

    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "3790");
    js.put("contaFixaJuros", "113696");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Escolbe");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "FALSE");
    js.put("cruzaExtrato", "FALSE");
    js.put("empresa", "Agrosul");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "FALSE");
    js.put("ValidaFornecedorFiscal", "0");
    js.put("Integracao_contratos", "false");
    js.put("Usa_Filial_Questor", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "CPAG_000027.TXT");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".TXT - ARQUIVO TEXTO");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");

    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("especiaisBaixaFiscal", "");
    js.put("Arredonda", "false");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");
    js.put("Coluna_Valor_Duplicata_Dominio", "9");
    js.put("delimitadorDoArquivo", "");
    js.put("agrupaArquivos", "FALSE");

    js.put("X001_ROB", "");
    js.put("X002_Despesas", "");
    js.put("X003_Despesas_Detalhe", "");
    js.put("X004_Geracao_Caixa_Mes", "");
    js.put("X005_Geracao_Caixa_Acumulado", "");
    js.put("X006_Despesas_sobre_Faturamento", "");
    js.put("X007_Lucro", "");
    js.put("X008_Deducoes_Receitas", "");
    js.put("X009_CMV", "");
    js.put("X010_CPV", "");
    js.put("X011_CSP", "");
    js.put("X012_Indicador", "");
    js.put("X013_Indicador", "");
    js.put("X014_Indicador", "");
    js.put("X015_Indicador", "");
    js.put("X016_Indicador", "");
    js.put("X017_Indicador", "");
    js.put("X018_Indicador", "");
    js.put("X019_Indicador", "");
    js.put("X020_Indicador", "");
    js.put("X021_Indicador", "");

    js.put("X015_Label", "");
    js.put("X016_Label", "");
    js.put("X017_Label", "");
    js.put("X018_Label", "");
    js.put("X019_Label", "");
    js.put("X020_Label", "");
    js.put("Email_Logo", "");
    js.put("BuscaCnpjCRM", "FALSE");
    js.put("Idioma", "PORTUGUES");
    js.put("Ordem_dos_Indicadores", "");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Gera_LOG", "false");
    js.put("Gera_LOG_PARAMETROS", "");

    return js;
}

public JSONObject getRoteiroENTRADA_CONTABILIDADE1() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2024-03127760");
    js.put("idRoteiro", "a0A1C00000iWMEs");
    js.put("idEmpresa", "a0q1C000005EsVXQA0");
    js.put("idContabilidade", "a09150000151oun");
    js.put("CnpjContabilidade", "82.863.259/0001-20");
    js.put("CnpjEmpresa", "00.310.006/0001-65");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "6");
    js.put("dataMovimento", "0");
    js.put("portador", "-1");
    js.put("documentoNF", "8");
    js.put("valorDocumento", "7");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "RAZAO SOCIAL");
    js.put("complemento02", "PARCEIRO");
    js.put("complemento03", "CONTA CONTABIL");
    js.put("complemento04", "3");
    js.put("complemento05", "");
    js.put("complemento06", "0");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "3790");
    js.put("contaFixaJuros", "113696");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Escolbe");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agrosul");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "SECUNDARIO");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "6");
    js.put("Rotulo_Complemento_02", "5");
    js.put("Rotulo_Complemento_03", "4");
    js.put("Rotulo_Complemento_04", "CODCTACTB");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroNOTAS_ENTRADA2() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2019-025015");
    js.put("idRoteiro", "a0A1C00000iWMEs");
    js.put("idEmpresa", "a0q1C000005EsVXQA0");
    js.put("idContabilidade", "a09150000151oun");
    js.put("CnpjContabilidade", "82.863.259/0001-20");
    js.put("CnpjEmpresa", "00.310.006/0001-65");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "1");
    js.put("dataMovimento", "0");
    js.put("portador", "7");
    js.put("documentoNF", "2");
    js.put("valorDocumento", "3");
    js.put("valorJuros", "4");
    js.put("valorDesconto", "5");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "CODIGO_CONTABIL");
    js.put("complemento02", "CODIGO_CONTA_CONTAB_PAI");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "0");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "3790");
    js.put("contaFixaJuros", "113696");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Escolbe");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agrosul");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "CONTAS PAGAS");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "8");
    js.put("Rotulo_Complemento_02", "10");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public String getTipoPlanilha(String line, String tipoPlanilha, String nomeArquivo, JSONObject jDadosObj) {
    boolean achouTipo = true;
    String [] campos1 = "DATA ENTRADA;RAZAO SOCIAL;VALOR;NRO.NOTA".split(";");
    for (int x=0;x<campos1.length;x++) {
        if (!line.contains(campos1[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "ENTRADA_CONTABILIDADE1";
    achouTipo = true;
    String [] campos2 = "CODIGO;CONTA;CONTAB;PAI;DESCONTOS;BANCO".split(";");
    for (int x=0;x<campos2.length;x++) {
        if (!line.contains(campos2[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "NOTAS_ENTRADA2";
    achouTipo = true;
    return tipoPlanilha;
}
public String getConta(String nomeOrigem, String documento, String nomePortador,
                       String complemento01, String complemento02, String complemento03, 
                       String nomeArquivo, String codCentroCusto) {
    String conta = "";
    String complemento04 = "";
    String complemento05 = "";
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getConta09(String contaMovimento, String nomeOrigem, String documento, 
                       String nomePortador, String complemento01, String complemento02, 
                       String complemento03, String nomeArquivo, String codCentroCusto) {
    String conta = contaMovimento;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) { //ROT-2023-1093778
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) { //ROT-2023-1097268
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAS_ENTRADA") &&
        StringUtil.removeSpecialCharsToUC(complemento06).equals("")) { //ROT-2018-012373
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ENTRADA_CONTABILIDADE") &&
        StringUtil.removeSpecialCharsToUC(complemento06).equals("")) { //ROT-2018-012373
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ADIANTAMENT") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ADIANTAMENT")) { //ROT-2018-012373
        conta = "115891";
        contaMovimento = "115891";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2023-0140950
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("TESTE")) {
        conta = "complemento04";
        contaMovimento = "complemento04";
    }
    if (complemento02.contains("KPI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "90018";
        contaMovimento = "90018";
    }
    if (complemento02.startsWith("VT") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "14297";
        contaMovimento = "14297";
    }
    if (complemento02.contains("DIVERSOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "14311";
        contaMovimento = "14311";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("XXXXX")) {
        conta = "XXXXX";
        contaMovimento = "XXXXX";
    }
    if (nomeOrigem.contains("XXXXX") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "XXXXX";
        contaMovimento = "XXXXX";
    }
    if (complemento02.contains("MINIMEETING") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "90003";
        contaMovimento = "90003";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("PUGNIC")) {
        conta = "115420";
        contaMovimento = "115420";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("EXPOLAGES")) {
        conta = "115420";
        contaMovimento = "115420";
    }
    if (nomeOrigem.contains("DESPACHANTE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113510";
        contaMovimento = "113510";
    }
    if (nomePortador.startsWith("1020") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "75112";
        contaMovimento = "75112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomePortador.startsWith("1030")) {
        conta = "75112";
        contaMovimento = "75112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("JURO")) {
        conta = "3694";
        contaMovimento = "3694";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("CAPACITARH")) {
        conta = "114268";
        contaMovimento = "114268";
    }
    if (nomeOrigem.contains("DUNAMIS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "90012";
        contaMovimento = "90012";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SAMAE")) {
        conta = "113524";
        contaMovimento = "113524";
    }
    if (complemento02.contains("PATROC") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "14334";
        contaMovimento = "14334";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BOEHRING")) {
        conta = "114609";
        contaMovimento = "114609";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("INFOHARD")) {
        conta = "9904222";
        contaMovimento = "9904222";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("HEUSSER") && nomeOrigem.contains("BIANCA")) {
        conta = "46732";
        contaMovimento = "46732";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("DEPOS") && complemento02.contains("TAR")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.contains("ANUIDADE") && complemento02.contains("CARTAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento03.contains("ADIANTAMENT") && complemento02.contains("ADIANTAMENT") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "115891";
        contaMovimento = "115891";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TAR") && complemento02.contains("CTA")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TAR") && complemento02.contains("EXTRATO")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.contains("TAR") && complemento02.contains("MANUT") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.contains("TAR") && complemento02.contains("BAIXA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.contains("FORNEC") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("ADTO")) {
        conta = "115891";
        contaMovimento = "115891";
    }
    if (complemento02.contains("30H") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TAR")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("6912") && complemento03.contains("DARF")) {
        conta = "19851";
        contaMovimento = "19851";
    }
    if (nomeOrigem.contains("SCREM") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("ADIANT")) {
        conta = "115891";
        contaMovimento = "115891";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FINANC") && nomeOrigem.contains("BRADES")) {
        conta = "111148";
        contaMovimento = "111148";
    }
    if (nomeOrigem.contains("ELDER") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("PREMI")) {
        conta = "90102";
        contaMovimento = "90102";
    }
    if (documento.contains("10477") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VOLKSWAGEN")) {
        conta = "111131";
        contaMovimento = "111131";
    }
    if (nomeOrigem.contains("BRASIL") && complemento02.contains("GIRO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "111146";
        contaMovimento = "111146";
    }
    if (documento.contains("8964") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ITAUCARD")) {
        conta = "111147";
        contaMovimento = "111147";
    }
    if (nomeOrigem.contains("WILTON") && complemento03.contains("ADIANT") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "80095";
        contaMovimento = "80095";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("DARF") && complemento03.contains("2809")) {
        conta = "90012";
        contaMovimento = "90012";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("2172") && complemento03.contains("DARF")) {
        conta = "30411";
        contaMovimento = "30411";
    }
    if (complemento03.contains("DARF") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("5856")) {
        conta = "115003";
        contaMovimento = "115003";
    }
    if (complemento03.contains("8045") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("DARF")) {
        conta = "90012";
        contaMovimento = "90012";
    }
    if (complemento02.contains("SIMPLES") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("NACIONAL")) {
        conta = "10010";
        contaMovimento = "10010";
    }
    if (complemento03.contains("DARF") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("3280")) {
        conta = "113487";
        contaMovimento = "113487";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("DARF") && complemento03.contains("8109")) {
        conta = "30411";
        contaMovimento = "30411";
    }
    if (complemento03.contains("DARF") && complemento03.contains("2484") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113644";
        contaMovimento = "113644";
    }
    if (complemento02.contains("TAR") && complemento02.contains("CUSTODIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.contains("ABONO") && complemento02.contains("PECUN") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113458";
        contaMovimento = "113458";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("2089") && complemento03.contains("DARF")) {
        conta = "90012";
        contaMovimento = "90012";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("DARF") && complemento03.contains("3208")) {
        conta = "19561";
        contaMovimento = "19561";
    }
    if (complemento03.contains("DARF") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("2372")) {
        conta = "30411";
        contaMovimento = "30411";
    }
    if (complemento03.contains("5993") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("DARF")) {
        conta = "3645";
        contaMovimento = "3645";
    }
    if (complemento03.contains("CREDITO") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("CLIENTE")) {
        conta = "21083";
        contaMovimento = "21083";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("QUITACAO") && nomeOrigem.contains("WESCHENFELDER")) {
        conta = "114080";
        contaMovimento = "114080";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LABORAL") && nomeOrigem.contains("SERVICE")) {
        conta = "9908741";
        contaMovimento = "9908741";
    }
    if (complemento02.contains("PREMI") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SILVIA")) {
        conta = "90116";
        contaMovimento = "90116";
    }
    if (complemento02.contains("DEBITO") && complemento02.contains("COBRANCA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (nomeOrigem.contains("LEONARDO") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("PREMI")) {
        conta = "90108";
        contaMovimento = "90108";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LUCAS") && complemento02.contains("PREMI")) {
        conta = "90122";
        contaMovimento = "90122";
    }
    if (nomeOrigem.contains("ANDRE") && complemento02.contains("PREMI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "90027";
        contaMovimento = "90027";
    }
    if (nomeOrigem.contains("RENATA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("PREMI")) {
        conta = "90095";
        contaMovimento = "90095";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("PREMI") && nomeOrigem.contains("MOISES")) {
        conta = "90114";
        contaMovimento = "90114";
    }
    if (nomeOrigem.contains("CAMILA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("PREMI")) {
        conta = "90115";
        contaMovimento = "90115";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DOROTEA") && complemento02.contains("PREMI")) {
        conta = "90121";
        contaMovimento = "90121";
    }
    if (complemento02.contains("PREMI") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("AMANDA")) {
        conta = "90119";
        contaMovimento = "90119";
    }
    if (complemento02.contains("PREMI") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CAROLINE")) {
        conta = "90110";
        contaMovimento = "90110";
    }
    if (complemento02.contains("1") && complemento02.contains("VERBA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "115420";
        contaMovimento = "115420";
    }
    if (complemento02.startsWith("COMCOB") && nomeOrigem.contains("SBRUZZI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "80072";
        contaMovimento = "80072";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.startsWith("COM") && nomeOrigem.contains("SAMARONE")) {
        conta = "80067";
        contaMovimento = "80067";
    }
    if (complemento02.startsWith("COMCOB") && nomeOrigem.contains("MERROY") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "80070";
        contaMovimento = "80070";
    }
    if (nomeOrigem.contains("GREZZANA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.startsWith("COMCOB")) {
        conta = "80069";
        contaMovimento = "80069";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("LICEN") && nomeOrigem.contains("ITACU")) {
        conta = "50300";
        contaMovimento = "50300";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && documento.contains("50747849") && nomeOrigem.contains("UNIBANCO")) {
        conta = "111145";
        contaMovimento = "111145";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COMCOB") && nomeOrigem.contains("ULLYSSES")) {
        conta = "80059";
        contaMovimento = "80059";
    }
    if (nomeOrigem.contains("DIVERSOS") && tipoPlanilha.contains("MOVIMENTO") && complemento02.startsWith("VERBA")) {
        conta = "115420";
        contaMovimento = "115420";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("NEWTEC") && complemento03.contains("ADIANT")) {
        conta = "115891";
        contaMovimento = "115891";
    }
    if (complemento02.contains("DOACAO") && nomeOrigem.contains("DIVERSOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "14334";
        contaMovimento = "14334";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DIVERSOS") && complemento02.contains("FENATIB")) {
        conta = "113292";
        contaMovimento = "113292";
    }
    if (complemento02.contains("LIMPEZA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DIVERSOS")) {
        conta = "113501";
        contaMovimento = "113501";
    }
    if (nomeOrigem.contains("VOLKSWAGEN") && tipoPlanilha.contains("MOVIMENTO") && documento.contains("43887")) {
        conta = "111131";
        contaMovimento = "111131";
    }
    if (nomeOrigem.contains("VOLKSWAGEN") && tipoPlanilha.contains("MOVIMENTO") && documento.contains("50856")) {
        conta = "111131";
        contaMovimento = "111131";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && documento.contains("50857") && nomeOrigem.contains("VOLKSWAGEN")) {
        conta = "111131";
        contaMovimento = "111131";
    }
    if (documento.contains("10476") && nomeOrigem.contains("VOLKSWAGEN") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "111131";
        contaMovimento = "111131";
    }
    if (complemento02.contains("PENSAO") && complemento02.contains("ALIMEN") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "33611";
        contaMovimento = "33611";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DUARTE") && nomeOrigem.contains("ANDREAXXX")) {
        conta = "70002";
        contaMovimento = "70002";
    }
    if (nomeOrigem.contains("KETIEME") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("PREMI")) {
        conta = "90098";
        contaMovimento = "90098";
    }
    if (complemento02.contains("TELEF") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("REEMB")) {
        conta = "113531";
        contaMovimento = "113531";
    }
    if (nomeOrigem.contains("ITAUCARD") && tipoPlanilha.contains("MOVIMENTO") && documento.contains("4192")) {
        conta = "111147";
        contaMovimento = "111147";
    }
    if (complemento02.contains("ADIANT") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("WILTON")) {
        conta = "80095";
        contaMovimento = "80095";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ANACLETO") && nomeOrigem.contains("EVENTO")) {
        conta = "115420";
        contaMovimento = "115420";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ESCOLBEXXX") && complemento02.contains("AGROSUL")) {
        conta = "14329";
        contaMovimento = "14329";
    }
    if (complemento02.contains("PATROC") && complemento02.contains("UNIFORME") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "115420";
        contaMovimento = "115420";
    }
    if (complemento02.contains("CESTA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("CLIENTE")) {
        conta = "115410";
        contaMovimento = "115410";
    }
    if (complemento02.contains("DESPESA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("EVENTO")) {
        conta = "115420";
        contaMovimento = "115420";
    }
    if (complemento02.contains("REEMB") && complemento02.contains("CURSO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "90006";
        contaMovimento = "90006";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BANCO") && nomeOrigem.contains("ITAUCARD")) {
        conta = "90009";
        contaMovimento = "90009";
    }
    if (complemento02.contains("COPA") && nomeOrigem.contains("DIVERSOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "14311";
        contaMovimento = "14311";
    }
    if (nomeOrigem.contains("ADREAN") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("REEMB")) {
        conta = "80003";
        contaMovimento = "80003";
    }
    if (complemento02.contains("REEMB") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("HOTEL")) {
        conta = "90009";
        contaMovimento = "90009";
    }
    if (complemento02.contains("REEMB") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("ALMOCO")) {
        conta = "113607";
        contaMovimento = "113607";
    }
    if (complemento02.contains("FINAME") && complemento02.contains("43887") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "111131";
        contaMovimento = "111131";
    }
    if (complemento02.contains("ADIANT") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COLABOR")) {
        conta = "33611";
        contaMovimento = "33611";
    }
    if (complemento02.contains("PASSAG") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("AEREA")) {
        conta = "90009";
        contaMovimento = "90009";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("CUSTAS") && complemento02.contains("TAR")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.contains("FARMACIA") && complemento02.contains("CONVENIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113471";
        contaMovimento = "113471";
    }
    if (complemento02.contains("BANER") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("REEMB")) {
        conta = "14305";
        contaMovimento = "14305";
    }
    if (nomeOrigem.contains("NATANAEL") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("SERVICOS")) {
        conta = "112743";
        contaMovimento = "112743";
    }
    if (complemento02.contains("PUBLI") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("REVISTA")) {
        conta = "113286";
        contaMovimento = "113286";
    }
    if (complemento02.contains("ANUNC") && complemento02.contains("REVISTA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113286";
        contaMovimento = "113286";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ASSOC") && complemento02.contains("DOACAO")) {
        conta = "14334";
        contaMovimento = "14334";
    }
    if (complemento02.contains("ADIANT") && complemento02.contains("FUNC") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113421";
        contaMovimento = "113421";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DIVERSOS") && complemento02.contains("CLAUDINE")) {
        conta = "14311";
        contaMovimento = "14311";
    }
    if (nomeOrigem.contains("GILBRAM") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COM")) {
        conta = "80090";
        contaMovimento = "80090";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("GILBRAM") && complemento02.contains("SUBSIDIO")) {
        conta = "90009";
        contaMovimento = "90009";
    }
    if (complemento02.contains("ANUIDADE") && complemento02.contains("MERROY") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "90012";
        contaMovimento = "90012";
    }
    if (complemento02.contains("CARMO") && nomeOrigem.contains("CONDOMINIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113487";
        contaMovimento = "113487";
    }
    if (complemento02.startsWith("COM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("AJI")) {
        conta = "80085";
        contaMovimento = "80085";
    }
    if (complemento02.contains("ALUG") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("ANDREA")) {
        conta = "70002";
        contaMovimento = "70002";
    }
    if (nomeOrigem.contains("MARCHETTI") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("COMER")) {
        conta = "9906089";
        contaMovimento = "9906089";
    }
    if (complemento02.contains("TAR") && complemento02.contains("RETIRADA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (nomeOrigem.contains("DUNAMIS") && complemento02.contains("QUITACAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "114080";
        contaMovimento = "114080";
    }
    if (complemento02.contains("EVENTO") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("REEMB")) {
        conta = "115420";
        contaMovimento = "115420";
    }
    if (complemento03.contains("ADTO") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("FORNEC")) {
        conta = "115891";
        contaMovimento = "115891";
    }
    if (complemento02.contains("ADTO") && complemento02.contains("PENSAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113421";
        contaMovimento = "113421";
    }
    if (nomeOrigem.contains("TRANSP") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("RED")) {
        conta = "115010";
        contaMovimento = "115010";
    }
    if (nomeOrigem.contains("MIGUEL") && nomeOrigem.contains("EXPRESSO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "114999";
        contaMovimento = "114999";
    }
    if (nomeOrigem.contains("TRANSP") && nomeOrigem.contains("WIRTH") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "115000";
        contaMovimento = "115000";
    }
    if (nomeOrigem.contains("ESCOLBE") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("OUSAR")) {
        conta = "10010";
        contaMovimento = "10010";
    }
    if (nomeOrigem.contains("ESCOLBE") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("AGROSUL")) {
        conta = "14329";
        contaMovimento = "14329";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("INFORMES") && complemento02.contains("TX")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VALCIR") && complemento02.contains("COMCOB")) {
        conta = "80020";
        contaMovimento = "80020";
    }
    if (complemento02.contains("COMCOB") && nomeOrigem.contains("VELOSO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "80081";
        contaMovimento = "80081";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("RELAT") && complemento02.contains("DESP")) {
        conta = "90009";
        contaMovimento = "90009";
    }
    if (complemento02.contains("BOLET") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("OCOR")) {
        conta = "3725";
        contaMovimento = "3725";
    }
    if (complemento02.contains("VACINA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("GRIPE")) {
        conta = "14251";
        contaMovimento = "14251";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("ADIANTAMEN") && nomeOrigem.contains("ADREAN")) {
        conta = "115891";
        contaMovimento = "115891";
    }
    if (complemento02.contains("PATROC") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("SIMPOSIO")) {
        conta = "115420";
        contaMovimento = "115420";
    }
    if (complemento02.contains("METLIFE") && complemento02.contains("DEVOL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "14251";
        contaMovimento = "14251";
    }
    if (nomeOrigem.contains("DIVERSOS") && complemento02.contains("EVENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "115420";
        contaMovimento = "115420";
    }
    if (complemento02.contains("BOLETO") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TAR")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.contains("TAR") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("GARANTIA")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.contains("AUX") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("EDUCACAO")) {
        conta = "114268";
        contaMovimento = "114268";
    }
    if (complemento02.contains("REEMB") && complemento02.contains("ALIMENT") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "115405";
        contaMovimento = "115405";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ABC") && nomeOrigem.contains("GUINDASTE")) {
        conta = "9908955";
        contaMovimento = "9908955";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("WILSON") && nomeOrigem.contains("GAZANIGA")) {
        conta = "9908584";
        contaMovimento = "9908584";
    }
    if (nomeOrigem.contains("OUSAR") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EMPRESARIAL")) {
        conta = "9900059";
        contaMovimento = "9900059";
    }
    if (nomeOrigem.contains("REPRESENTAC") && nomeOrigem.contains("RP") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "80093";
        contaMovimento = "80093";
    }
    if (nomeOrigem.contains("DUARTE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ANDREA")) {
        conta = "80002";
        contaMovimento = "80002";
    }
    if (nomeOrigem.contains("ANDREA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DUARTE")) {
        conta = "80002";
        contaMovimento = "80002";
    }
    if (nomeOrigem.contains("SERVICE") && nomeOrigem.contains("LABORAL") && tipoPlanilha.contains("ENTRADA_CONTABILIDADE")) {
        conta = "9908741";
        contaMovimento = "9908741";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("QUALITY") && nomeOrigem.contains("PRESS")) {
        conta = "42095";
        contaMovimento = "42095";
    }
    if (tipoPlanilha.contains("ENTRADA_CONTABILIDADE") && nomeOrigem.contains("QUALITY") && nomeOrigem.contains("PRESS")) {
        conta = "115420";
        contaMovimento = "115420";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("NEGOCIOS") && nomeOrigem.contains("GESTAO") && nomeOrigem.contains("ARTHA")) {
        conta = "118104";
        contaMovimento = "118104";
    }
    if (nomeOrigem.contains("NETO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FIORAVANTE") && nomeOrigem.contains("DECOL")) {
        conta = "112654";
        contaMovimento = "112654";
    }
    if (nomeOrigem.contains("LOCACAO") && nomeOrigem.contains("AMERICAS") && nomeOrigem.contains("COMPANHIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("AGROSUL") && nomeOrigem.contains("CONTABILIDADE") && nomeOrigem.contains("ESCOLBE")) {
        conta = "82863";
        contaMovimento = "82863";
    }
    if (nomeOrigem.contains("IRMAOS") && nomeOrigem.contains("FLORICULTURA") && nomeOrigem.contains("MEYER") && tipoPlanilha.contains("ENTRADA_CONTABILIDADE")) {
        conta = "115420";
        contaMovimento = "115420";
    }
    if (complemento02.contains("TED") && complemento02.contains("SISPAG") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TAR")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COBR") && complemento02.contains("SERV") && complemento02.contains("TAR")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.contains("COM") && nomeOrigem.contains("JANAINA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COB")) {
        conta = "80077";
        contaMovimento = "80077";
    }
    if (documento.contains("1059223") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BNDES") && nomeOrigem.contains("BRASIL")) {
        conta = "111139";
        contaMovimento = "111139";
    }
    if (nomeOrigem.contains("BRASIL") && tipoPlanilha.contains("MOVIMENTO") && documento.contains("7322766") && nomeOrigem.contains("BNDES")) {
        conta = "111139";
        contaMovimento = "111139";
    }
    if (documento.contains("7361294") && nomeOrigem.contains("BNDES") && nomeOrigem.contains("BRASIL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "111139";
        contaMovimento = "111139";
    }
    if (nomeOrigem.contains("BRASIL") && tipoPlanilha.contains("MOVIMENTO") && documento.contains("7427935") && nomeOrigem.contains("BNDES")) {
        conta = "111139";
        contaMovimento = "111139";
    }
    if (documento.contains("194929") && nomeOrigem.contains("BNDES") && nomeOrigem.contains("BRASIL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "111139";
        contaMovimento = "111139";
    }
    if (nomeOrigem.contains("HOSPITAL") && complemento02.contains("PROJETO") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("FIA")) {
        conta = "14334";
        contaMovimento = "14334";
    }
    if (nomeOrigem.contains("VALDIR") && nomeOrigem.contains("CORRENTE") && complemento02.contains("GALPAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113487";
        contaMovimento = "113487";
    }
    if (nomeOrigem.contains("PAULA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COMCOB") && nomeOrigem.contains("MACIEL")) {
        conta = "80045";
        contaMovimento = "80045";
    }
    if (complemento02.contains("ADIANT") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("DIARIA") && complemento02.contains("DESP")) {
        conta = "90009";
        contaMovimento = "90009";
    }
    if (nomeOrigem.contains("PREVID") && nomeOrigem.contains("MINIST") && complemento02.contains("RETENCAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24112";
        contaMovimento = "24112";
    }
    if (complemento03.contains("1449") && nomeOrigem.contains("SECRETARIA") && complemento03.contains("DARE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "19331";
        contaMovimento = "19331";
    }
    if (nomeOrigem.contains("AJI") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COB") && complemento02.contains("COM")) {
        conta = "80085";
        contaMovimento = "80085";
    }
    if (complemento02.contains("COB") && complemento02.contains("COM") && nomeOrigem.contains("DUNAMIS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "80065";
        contaMovimento = "80065";
    }
    if (nomeOrigem.contains("BIGUACU") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COB") && complemento02.contains("COM")) {
        conta = "80080";
        contaMovimento = "80080";
    }
    if (nomeOrigem.contains("COLERAUS") && complemento02.contains("COMCOB") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VICTOR")) {
        conta = "80088";
        contaMovimento = "80088";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COMCOB") && nomeOrigem.contains("FERNAN") && nomeOrigem.contains("VICTOR")) {
        conta = "80053";
        contaMovimento = "80053";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COMCOB") && nomeOrigem.contains("SARDA") && nomeOrigem.contains("PAULO")) {
        conta = "80089";
        contaMovimento = "80089";
    }
    if (complemento02.contains("COMCOB") && nomeOrigem.contains("REGINAL") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JUNIOR")) {
        conta = "80075";
        contaMovimento = "80075";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("983") && complemento02.contains("324") && nomeOrigem.contains("UNIBANCO")) {
        conta = "111141";
        contaMovimento = "111141";
    }
    if (complemento02.contains("324") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("984") && nomeOrigem.contains("UNIBANCO")) {
        conta = "111141";
        contaMovimento = "111141";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BNDES") && nomeOrigem.contains("BRASIL") && documento.contains("321782")) {
        conta = "111139";
        contaMovimento = "111139";
    }
    if (documento.contains("194929") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BRASIL") && nomeOrigem.contains("BNDES")) {
        conta = "111139";
        contaMovimento = "111139";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && documento.contains("56506") && nomeOrigem.contains("BNDES") && nomeOrigem.contains("BRASIL")) {
        conta = "111139";
        contaMovimento = "111139";
    }
    if (documento.contains("33199") && nomeOrigem.contains("BNDES") && nomeOrigem.contains("BRASIL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "111139";
        contaMovimento = "111139";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BRASIL") && nomeOrigem.contains("BNDES") && documento.contains("204822")) {
        conta = "111139";
        contaMovimento = "111139";
    }
    if (nomeOrigem.contains("BRASIL") && nomeOrigem.contains("BNDES") && documento.contains("17761") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "111139";
        contaMovimento = "111139";
    }
    if (documento.contains("6905") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BNDES") && nomeOrigem.contains("BRASIL")) {
        conta = "111139";
        contaMovimento = "111139";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BRASIL") && nomeOrigem.contains("BNDES") && documento.contains("41501")) {
        conta = "111139";
        contaMovimento = "111139";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BNDES") && documento.contains("7438098") && nomeOrigem.contains("BRASIL")) {
        conta = "111139";
        contaMovimento = "111139";
    }
    if (nomeOrigem.contains("ITAUCARD") && complemento03.contains("CARTAO") && complemento03.contains("CORPORATIVO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "90009";
        contaMovimento = "90009";
    }
    if (nomeOrigem.contains("HOSPITAL") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("LEI") && complemento02.contains("DOACAO")) {
        conta = "113292";
        contaMovimento = "113292";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("INTEGR") && nomeOrigem.contains("EMPR") && nomeOrigem.contains("ESCOLA")) {
        conta = "14328";
        contaMovimento = "14328";
    }
    if (nomeOrigem.contains("PAULA") && tipoPlanilha.contains("MOVIMENTO") && documento.contains("62017") && nomeOrigem.contains("MACIEL")) {
        conta = "114080";
        contaMovimento = "114080";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PAULA") && nomeOrigem.contains("MACIEL") && complemento02.contains("QUITACAO")) {
        conta = "114080";
        contaMovimento = "114080";
    }
    if (complemento02.contains("COND") && nomeOrigem.contains("RESID") && nomeOrigem.contains("OLIMPO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "80002";
        contaMovimento = "80002";
    }
    if (complemento02.contains("484227") && nomeOrigem.contains("VOLKSWAGEN") && complemento02.contains("FINANC") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "111131";
        contaMovimento = "111131";
    }
    if (nomeOrigem.contains("VOLKSWAGEN") && complemento02.contains("FINANC") && complemento02.contains("484234") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "111131";
        contaMovimento = "111131";
    }
    if (nomeOrigem.contains("VALTER") && nomeOrigem.contains("MESSA") && complemento02.contains("COMCOB") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "80004";
        contaMovimento = "80004";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TAR") && complemento02.contains("ALTERACAO") && complemento02.contains("DADOS")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (nomeOrigem.contains("BRADESCO") && nomeOrigem.contains("AUTO") && nomeOrigem.contains("RE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "116261";
        contaMovimento = "116261";
    }
    if (complemento02.contains("HDMI") && complemento02.contains("REEMB") && complemento02.contains("CABO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113599";
        contaMovimento = "113599";
    }
    if (complemento02.contains("CONTRATO") && nomeOrigem.contains("UNIBANCO") && complemento02.contains("REGISTRO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.contains("TED") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("DOC") && complemento02.contains("TAR")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("CREDITO") && complemento02.contains("CARTAO") && nomeOrigem.contains("BANCO")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (nomeOrigem.contains("ITAU") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("162792") && complemento02.contains("FINAME")) {
        conta = "111141";
        contaMovimento = "111141";
    }
    if (nomeOrigem.contains("BORBA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("ALUG") && nomeOrigem.contains("SILVIO")) {
        conta = "113487";
        contaMovimento = "113487";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ANDREA") && nomeOrigem.contains("DUARTE") && documento.equals("5000")) {
        conta = "80002";
        contaMovimento = "80002";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("COMER") && nomeOrigem.contains("SARDA") && complemento02.contains("COMCOB")) {
        conta = "80091";
        contaMovimento = "80091";
    }
    if (complemento03.contains("ADIANTAMEN") && nomeOrigem.contains("DUARTE") && nomeOrigem.contains("ALESS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "115891";
        contaMovimento = "115891";
    }
    if (complemento02.contains("TAR") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COBRANCA") && complemento02.contains("CUSTAS")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (nomeOrigem.contains("SBRUZZI") && complemento02.contains("COM") && complemento02.contains("COB") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "80072";
        contaMovimento = "80072";
    }
    if (complemento02.contains("COM") && complemento02.contains("COB") && nomeOrigem.contains("MERROY") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "80070";
        contaMovimento = "80070";
    }
    if (nomeOrigem.contains("ULLYSSES") && complemento02.contains("COM") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COB")) {
        conta = "80059";
        contaMovimento = "80059";
    }
    if (nomeOrigem.contains("AMERICA") && nomeOrigem.contains("SEGUR") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SUL")) {
        conta = "17711";
        contaMovimento = "17711";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("DEVOL") && complemento02.contains("EDUARDO") && complemento02.contains("OLSSO")) {
        conta = "9726";
        contaMovimento = "9726";
    }
    if (nomeOrigem.contains("SECRETARIA") && complemento02.contains("PRESTADOR") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FEDERAL")) {
        conta = "30411";
        contaMovimento = "30411";
    }
    if (complemento02.contains("MERROY") && nomeOrigem.contains("SECRETARIA") && nomeOrigem.contains("FEDERAL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "30411";
        contaMovimento = "30411";
    }
    if (nomeOrigem.contains("AUTO") && nomeOrigem.contains("POSTO") && nomeOrigem.contains("BIRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "9902843";
        contaMovimento = "9902843";
    }
    if (complemento02.contains("HOSPED") && nomeOrigem.contains("HOTEL") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JDB")) {
        conta = "9909314";
        contaMovimento = "9909314";
    }
    if (complemento02.contains("ESTAGIO") && complemento02.contains("BOLSA") && complemento02.contains("HORAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113436";
        contaMovimento = "113436";
    }
    if (nomeOrigem.contains("TECNOLOGIA") && tipoPlanilha.startsWith("MOVIMENTO") && nomeOrigem.contains("SANKHYA") && nomeOrigem.contains("JIVA") && nomeOrigem.contains("INOVACAO")) {
        conta = "26314";
        contaMovimento = "26314";
    }
    if (complemento02.contains("LOCACAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("OLIANI") && complemento02.contains("CONTRATO") && nomeOrigem.contains("ELDER")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (nomeOrigem.contains("BLUMENAU") && nomeOrigem.contains("DE") && nomeOrigem.contains("MUNICIPIO") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("ALVARA")) {
        conta = "3642";
        contaMovimento = "3642";
    }
    if (nomeOrigem.contains("FEDERAL") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("0651") && nomeOrigem.contains("SECRETARIA") && complemento03.contains("DARF")) {
        conta = "112611";
        contaMovimento = "112611";
    }
    if (complemento02.contains("BONUS") && nomeOrigem.contains("CLAUDINE") && nomeOrigem.contains("SORAYA") && nomeOrigem.contains("KIRSTEN") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113435";
        contaMovimento = "113435";
    }
    if (nomeOrigem.contains("INVALIDADA") && nomeOrigem.contains("REGRA") && complemento02.contains("PREMI") && nomeOrigem.contains("KATIEME") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "90098";
        contaMovimento = "90098";
    }
    if (complemento02.startsWith("COM") && nomeOrigem.contains("BREMER") && nomeOrigem.contains("LUIZ") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COB")) {
        conta = "80008";
        contaMovimento = "80008";
    }
    if (nomeOrigem.contains("VALTER") && complemento02.contains("COB") && complemento02.contains("COM") && nomeOrigem.contains("M") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "80004";
        contaMovimento = "80004";
    }
    if (complemento02.contains("COM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("F") && nomeOrigem.contains("VICTOR") && complemento02.contains("COB")) {
        conta = "80053";
        contaMovimento = "80053";
    }
    if (complemento02.contains("COB") && complemento02.contains("COM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TADEU") && nomeOrigem.contains("REGINALDO")) {
        conta = "80075";
        contaMovimento = "80075";
    }
    if (complemento02.contains("COM") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("COM") && nomeOrigem.contains("SARDA") && complemento02.contains("COB")) {
        conta = "80091";
        contaMovimento = "80091";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("F") && complemento02.contains("O") && complemento02.contains("I") && nomeOrigem.contains("BRASIL")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.contains("PARA") && nomeOrigem.contains("DIVERSOS") && complemento02.contains("FLOR") && complemento02.contains("CLIENTE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "115420";
        contaMovimento = "115420";
    }
    if (nomeOrigem.contains("FEDERAL") && nomeOrigem.contains("SECRETARIA") && complemento02.contains("AJR") && complemento02.contains("ADM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "115891";
        contaMovimento = "115891";
    }
    if (complemento02.contains("LOCACAO") && complemento02.contains("VEIC") && nomeOrigem.contains("MARIA") && nomeOrigem.contains("DOROTEA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "5000";
        contaMovimento = "5000";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("ESCOLAR") && complemento02.contains("RECESSO") && nomeOrigem.contains("OLIVEIRA") && nomeOrigem.contains("GILMAR")) {
        conta = "112111";
        contaMovimento = "112111";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("GILMAR") && complemento02.contains("TRANSPORTE") && complemento02.contains("AUXILIO") && nomeOrigem.contains("OLIVEIRA")) {
        conta = "112111";
        contaMovimento = "112111";
    }
    if (nomeOrigem.contains("ANDRE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SCHNEIDER") && complemento02.contains("CONTRATO") && complemento02.contains("LOCACAO")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (complemento02.contains("CONTRATO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LEAL") && nomeOrigem.contains("CARDOSO") && nomeOrigem.contains("HORTENCIA")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MARTENDAL") && nomeOrigem.contains("SANTOS") && nomeOrigem.contains("JESSICA") && complemento02.contains("LOCACAO")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("LOCACAO") && nomeOrigem.contains("MENDONCA") && nomeOrigem.contains("ANDRE") && nomeOrigem.contains("RODRIGO")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (nomeOrigem.contains("MENESTRINA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("THIAGO") && complemento02.contains("LOCACAO") && nomeOrigem.contains("RICARDO")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("RUBYA") && nomeOrigem.contains("FABRE") && nomeOrigem.contains("AMARANTE") && complemento02.contains("LOCACAO")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (complemento02.contains("CONTRATO") && nomeOrigem.contains("MAILA") && nomeOrigem.contains("PALMEIRA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("LOCACAO")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (nomeOrigem.contains("STECKERT") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("LOCACAO") && nomeOrigem.contains("LILIAN") && nomeOrigem.contains("DORDETE")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (complemento02.contains("LOCACAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LOPES") && nomeOrigem.contains("ESPOSITO") && nomeOrigem.contains("BRUNO")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (nomeOrigem.contains("BRUNA") && nomeOrigem.contains("RAQUEL") && nomeOrigem.contains("DICKEL") && complemento02.contains("LOCACAO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (nomeOrigem.contains("BRUNA") && nomeOrigem.contains("PANZARDI") && complemento02.contains("LOCACAO") && complemento02.contains("VEICULO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (complemento02.contains("LOCACAO") && nomeOrigem.contains("GHIZZO") && nomeOrigem.contains("JAIENE") && complemento02.contains("VEICULO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("CONTRATO") && nomeOrigem.contains("KAUVA") && complemento02.contains("LOCACAO") && nomeOrigem.contains("ALEX")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (nomeOrigem.contains("SOAVE") && nomeOrigem.contains("TATIANA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("LOCACAO") && complemento02.contains("CONTRATO")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (nomeOrigem.contains("TERESA") && nomeOrigem.contains("MARIA") && complemento02.contains("LOCACAO") && complemento02.contains("CONTRATO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "90117";
        contaMovimento = "90117";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("UNIMED") && nomeOrigem.contains("BLUMENAU") && nomeOrigem.contains("COOPERATIVA") && nomeOrigem.contains("TRABALHO")) {
        conta = "82624";
        contaMovimento = "82624";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("RESCISAO")) {
        conta = "12111";
        contaMovimento = "12111";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.equals("IOF")) {
        conta = "3730";
        contaMovimento = "3730";
    }
    if (complemento02.contains("FERIAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3651";
        contaMovimento = "3651";
    }
    if (complemento02.contains("REEMBOLSO") && complemento02.contains("DESPESA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "90009";
        contaMovimento = "90009";
    }
    if (complemento02.contains("TARIFA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TRANSF")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento03.contains("0561") && complemento03.contains("DARF") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112611";
        contaMovimento = "112611";
    }
    if (complemento03.contains("DARF") && complemento03.contains("1708") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "19561";
        contaMovimento = "19561";
    }
    if (nomeOrigem.contains("CELULAR") && nomeOrigem.contains("TIM") && tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113531";
        contaMovimento = "113531";
    }
    if (nomeOrigem.contains("UNIDAS") && complemento02.contains("MULTA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3725";
        contaMovimento = "3725";
    }
    if (complemento02.contains("COMISS") && nomeOrigem.contains("ADREAN") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "80003";
        contaMovimento = "80003";
    }
    if (nomeOrigem.contains("ALLAN") && tipoPlanilha.contains("MOVIMENTO") && complemento02.startsWith("COMISS")) {
        conta = "80039";
        contaMovimento = "80039";
    }
    if (nomeOrigem.contains("WILTON") && tipoPlanilha.contains("MOVIMENTO") && complemento02.startsWith("COMISS")) {
        conta = "10010";
        contaMovimento = "10010";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("HDI") && nomeOrigem.contains("SEGUROS")) {
        conta = "17711";
        contaMovimento = "17711";
    }
    if (complemento02.startsWith("COMISS") && nomeOrigem.contains("ITANA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "60002";
        contaMovimento = "60002";
    }
    if (nomeOrigem.contains("SEGURO") && nomeOrigem.contains("ITAU") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112714";
        contaMovimento = "112714";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("LABORE") && nomeOrigem.contains("WILTON")) {
        conta = "113472";
        contaMovimento = "113472";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ODONT") && nomeOrigem.contains("PLANOS")) {
        conta = "14251";
        contaMovimento = "14251";
    }
    if (nomeOrigem.contains("CIELO") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TAXA")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (nomeOrigem.contains("ITAU") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("JUROS")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (nomeOrigem.contains("BRASIL") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("JUROS")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.contains("DESP") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("CARTORIO")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.contains("MULTA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DPRF")) {
        conta = "3725";
        contaMovimento = "3725";
    }
    if (nomeOrigem.contains("TRABALHO") && tipoPlanilha.contains("MOVIMENTO") && complemento03.contains("FGTS")) {
        conta = "123111";
        contaMovimento = "123111";
    }
    if (nomeOrigem.contains("AJI") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COMISS")) {
        conta = "80085";
        contaMovimento = "80085";
    }
    if (nomeOrigem.contains("MUNIC") && complemento02.contains("IPTU") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113620";
        contaMovimento = "113620";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("TAXA") && complemento02.contains("BOMBEIRO")) {
        conta = "3642";
        contaMovimento = "3642";
    }
    if (complemento02.contains("MULTA") && complemento02.contains("INFRATOR") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3725";
        contaMovimento = "3725";
    }
    if (complemento02.contains("IOF") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ITAU")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.contains("IOF") && nomeOrigem.contains("BRASIL") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.contains("VIAGEM") && complemento02.contains("DESP") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "90009";
        contaMovimento = "90009";
    }
    if (nomeOrigem.contains("INFORMATICA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SERVCONSUL")) {
        conta = "15791";
        contaMovimento = "15791";
    }
    if (nomeOrigem.contains("ALESSANDRO") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COMISS") && nomeOrigem.contains("DUARTE")) {
        conta = "80001";
        contaMovimento = "80001";
    }
    if (nomeOrigem.contains("PAULA") && complemento02.contains("COMISS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MACIEL")) {
        conta = "80045";
        contaMovimento = "80045";
    }
    if (nomeOrigem.contains("FEDERAL") && nomeOrigem.contains("SECRETARIA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("GPS")) {
        conta = "421111";
        contaMovimento = "421111";
    }
    if (complemento02.contains("FOLHA") && nomeOrigem.contains("FEDERAL") && nomeOrigem.contains("SECRETARIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112611";
        contaMovimento = "112611";
    }
    if (complemento02.startsWith("ISS") && nomeOrigem.contains("MUNICIPIO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BLUMENAU")) {
        conta = "30411";
        contaMovimento = "30411";
    }
    if (nomeOrigem.contains("COLERAUS") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COMISS") && nomeOrigem.contains("VICTOR")) {
        conta = "80088";
        contaMovimento = "80088";
    }
    if (nomeOrigem.contains("VALTER") && nomeOrigem.contains("MESSA") && complemento02.contains("COMISS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "80004";
        contaMovimento = "80004";
    }
    if (nomeOrigem.contains("BANCO") && nomeOrigem.contains("BRASIL") && complemento02.contains("TARIFA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ITAU") && nomeOrigem.contains("UNIBANCO") && complemento02.contains("TARIFA")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COMISS") && nomeOrigem.contains("MARTENDAL") && nomeOrigem.contains("ANDRE")) {
        conta = "80060";
        contaMovimento = "80060";
    }
    if (nomeOrigem.contains("ANDRE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BERT") && complemento02.startsWith("COMISS")) {
        conta = "60004";
        contaMovimento = "60004";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("REEMBOLSO") && complemento02.contains("DESPESA") && complemento02.contains("BRUNO")) {
        conta = "50008";
        contaMovimento = "50008";
    }
    if (nomeOrigem.contains("MUNICIPIO") && complemento02.startsWith("ISSQ") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BLUMENAU")) {
        conta = "19791";
        contaMovimento = "19791";
    }
    if (complemento02.contains("TARIFA") && complemento02.contains("INSTR") && complemento02.contains("BAIXA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento02.startsWith("ISSQN") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SECRETARIA") && nomeOrigem.contains("FEDERAL")) {
        conta = "19791";
        contaMovimento = "19791";
    }
    if (nomeOrigem.contains("METLIFE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ODONT") && nomeOrigem.contains("PLANOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "9903273";
        contaMovimento = "9903273";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.startsWith("ALEXSANDRA") && complemento02.contains("COMISSOES") && nomeOrigem.contains("MELLO")) {
        conta = "80049";
        contaMovimento = "80049";
    }
    if (complemento02.contains("COMISSOES") && nomeOrigem.contains("VALCIR") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("GREZZANA") && nomeOrigem.contains("CARLOS")) {
        conta = "9929196";
        contaMovimento = "9929196";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("THIAGO") && nomeOrigem.contains("MENESTRINA") && nomeOrigem.contains("RICARDO") && complemento02.contains("COMISSOES")) {
        conta = "30088";
        contaMovimento = "30088";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("REPRESENTACOES") && nomeOrigem.contains("WESCHENFELDER") && complemento02.contains("COMISSOES") && nomeOrigem.contains("COMERCIAIS")) {
        conta = "9913486";
        contaMovimento = "9913486";
    }
    if (complemento02.contains("COMISSOES") && complemento02.contains("AVOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.startsWith("FRITZEN") && nomeOrigem.contains("REPRESENTACAO")) {
        conta = "46628";
        contaMovimento = "46628";
    }
    if (complemento02.contains("COBR") && nomeOrigem.contains("REPRESENTACAO") && nomeOrigem.startsWith("FRITZEN") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("COMISSAO")) {
        conta = "46628";
        contaMovimento = "46628";
    }
    if (complemento02.contains("COMISSOES") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.startsWith("GASALI") && nomeOrigem.contains("REPRESENTACOES") && complemento02.contains("COMERCIAIS")) {
        conta = "48025";
        contaMovimento = "48025";
    }
    if (nomeOrigem.startsWith("FAENZA") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("PICCINI") && complemento02.contains("COMISSOES") && nomeOrigem.contains("LAVELLE")) {
        conta = "47368";
        contaMovimento = "47368";
    }
    if (complemento02.contains("FERIAS") && complemento02.contains("S") && complemento02.contains("3") && complemento02.contains("1") && complemento02.contains("PROP") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4245";
        contaMovimento = "4245";
    }
    if (nomeOrigem.contains("SECRETARIA") && nomeOrigem.contains("FEDERAL") && complemento02.startsWith("FOLHA") && complemento02.contains("DE") && complemento02.contains("PAGAMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "112611";
        contaMovimento = "112611";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("CHEQUE") && complemento02.contains("TARIFA")) {
        conta = "113719";
        contaMovimento = "113719";
    }
    if (complemento03.contains("DARF") && complemento03.contains("5952") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "80000";
        contaMovimento = "80000";
    }
    if (complemento02.contains("LUCRO") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("DISTRIB") && nomeOrigem.contains("ALESSANDRO")) {
        conta = "54921";
        contaMovimento = "54921";
    }
    if (complemento02.contains("DISTRIB") && complemento02.contains("LUCRO") && nomeOrigem.contains("ADREAN") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "54924";
        contaMovimento = "54924";
    }
    if (nomeOrigem.contains("WILTON") && complemento02.contains("DISTR") && tipoPlanilha.contains("MOVIMENTO") && complemento02.contains("LUCRO")) {
        conta = "54923";
        contaMovimento = "54923";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).startsWith("VT")) { //ROT-2018-012373
        conta = "14297";
        contaMovimento = "14297";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ADIANT") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("SALAR") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2018-012373
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CLIENTE")) { //ROT-2018-012373
        conta = "21083";
        contaMovimento = "21083";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("HORAS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("BOLSA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTAGIO")) { //ROT-2018-012373
        conta = "113436";
        contaMovimento = "113436";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("DIVERSOS")) { //ROT-2018-012373
        conta = "14311";
        contaMovimento = "14311";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLUMENAU") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("ISS")) { //ROT-2018-012373
        conta = "30411";
        contaMovimento = "30411";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPIO DE BLUMENAU") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ALVARA")) { //ROT-2018-012373
        conta = "3642";
        contaMovimento = "3642";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SECRETARIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DARE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("1449")) { //ROT-2018-012373
        conta = "19331";
        contaMovimento = "19331";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("BONUS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLAUDINE SORAYA KIRSTEN")) { //ROT-2018-012373
        conta = "113435";
        contaMovimento = "113435";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CELULAR") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2018-012373
        conta = "113531";
        contaMovimento = "113531";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIDAS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("MULTA")) { //ROT-2018-012373
        conta = "3725";
        contaMovimento = "3725";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AJI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COB")) { //ROT-2018-012373
        conta = "80085";
        contaMovimento = "80085";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WESCHENFELDER") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("QUITACAO")) { //ROT-2018-012373
        conta = "114080";
        contaMovimento = "114080";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADREAN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS")) { //ROT-2018-012373
        conta = "80003";
        contaMovimento = "80003";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALESSANDRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUARTE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS")) { //ROT-2018-012373
        conta = "80001";
        contaMovimento = "80001";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALESSANDRO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DISTRIB") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("LUCRO")) { //ROT-2018-012373
        conta = "54921";
        contaMovimento = "54921";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADREAN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DISTRIB") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("LUCRO")) { //ROT-2018-012373
        conta = "54924";
        contaMovimento = "54924";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUNAMIS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COB")) { //ROT-2018-012373
        conta = "80065";
        contaMovimento = "80065";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALLAN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) { //ROT-2018-012373
        conta = "80039";
        contaMovimento = "80039";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VICTOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COLERAUS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS")) { //ROT-2018-012373
        conta = "80088";
        contaMovimento = "80088";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILTON") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) { //ROT-2018-012373
        conta = "10010";
        contaMovimento = "10010";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALTER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MESSA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS")) { //ROT-2018-012373
        conta = "80004";
        contaMovimento = "80004";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SBRUZZI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMCOB")) { //ROT-2018-012373
        conta = "80072";
        contaMovimento = "80072";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MERROY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMCOB")) { //ROT-2018-012373
        conta = "80070";
        contaMovimento = "80070";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GREZZANA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMCOB")) { //ROT-2018-012373
        conta = "80069";
        contaMovimento = "80069";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAMARONE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COM")) { //ROT-2018-012373
        conta = "80067";
        contaMovimento = "80067";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VICTOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COLERAUS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) { //ROT-2018-012373
        conta = "80088";
        contaMovimento = "80088";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VICTOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNAN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) { //ROT-2018-012373
        conta = "80053";
        contaMovimento = "80053";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SARDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) { //ROT-2018-012373
        conta = "80089";
        contaMovimento = "80089";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGINAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUNIOR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) { //ROT-2018-012373
        conta = "80075";
        contaMovimento = "80075";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEXSANDRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MELLO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ADICIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSAO")) { //ROT-2018-012373
        conta = "80049";
        contaMovimento = "80049";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTENDAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS")) { //ROT-2018-012373
        conta = "80060";
        contaMovimento = "80060";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BERTOLDI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) { //ROT-2018-012373
        conta = "60004";
        contaMovimento = "60004";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MACIEL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) { //ROT-2018-012373
        conta = "80045";
        contaMovimento = "80045";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MACIEL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS")) { //ROT-2018-012373
        conta = "80045";
        contaMovimento = "80045";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALTER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MESSA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) { //ROT-2018-012373
        conta = "80004";
        contaMovimento = "80004";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AJI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS")) { //ROT-2018-012373
        conta = "80085";
        contaMovimento = "80085";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WESCHENFELDER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "9913486";
        contaMovimento = "9913486";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAS_ENTRADA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("")) { //ROT-2018-012373
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).equals("IOF")) { //ROT-2018-012373
        conta = "3730";
        contaMovimento = "3730";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) { //ROT-2020-058689
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) { //ROT-2021-0311455
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) { //ROT-2021-0512280
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) { //ROT-2021-0612672
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) { //ROT-2020-079383
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) { //ROT-2021-0612733
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    return conta;
}
public String getContaMovimento2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) { //ROT-2022-0421802
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) { //ROT-2022-1033321
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) { //ROT-2024-03128218
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILMAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("AUXILIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TRANSPORTE")) { //ROT-2018-012373
        conta = "112111";
        contaMovimento = "112111";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILMAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RECESSO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESCOLAR")) { //ROT-2018-012373
        conta = "112111";
        contaMovimento = "112111";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KAUVA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CONTRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("LOCACAO")) { //ROT-2018-012373
        conta = "90117";
        contaMovimento = "90117";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEXSANDRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MELLO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "80049";
        contaMovimento = "80049";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEREIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) { //ROT-2018-012373
        conta = "60002";
        contaMovimento = "60002";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVCONSUL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INFORMATICA")) { //ROT-2018-012373
        conta = "15791";
        contaMovimento = "15791";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELDER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIAN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CONTRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("LOCACAO")) { //ROT-2018-012373
        conta = "90117";
        contaMovimento = "90117";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESCOLBE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTABILIDADE")) { //ROT-2018-012373
        conta = "82863";
        contaMovimento = "82863";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRITZEN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSAO")) { //ROT-2018-012373
        conta = "46628";
        contaMovimento = "46628";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VELOSO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "15370";
        contaMovimento = "15370";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FAENZA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAVELLE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PICCINI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "47368";
        contaMovimento = "47368";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GASALI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "48025";
        contaMovimento = "48025";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TERESA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BONATTI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "26218";
        contaMovimento = "26218";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MENDONCA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "44088";
        contaMovimento = "44088";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMILA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CECCATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERREIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "51062";
        contaMovimento = "51062";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAILA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PALMEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "42109";
        contaMovimento = "42109";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HENRIQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KAUVA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "50141";
        contaMovimento = "50141";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUSTAVO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILIAN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DELLAGOSTIN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "45459";
        contaMovimento = "45459";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TATIANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOAVE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "47805";
        contaMovimento = "47805";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOMES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BORBA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "22273";
        contaMovimento = "22273";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KEHL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "32319";
        contaMovimento = "32319";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRUNA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAQUEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DICKEL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "45043";
        contaMovimento = "45043";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HORTENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARDOSO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "12729";
        contaMovimento = "12729";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RUBYA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FABRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMARANTE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "27580";
        contaMovimento = "27580";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRITZEN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "46628";
        contaMovimento = "46628";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FSO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "41405";
        contaMovimento = "41405";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) { //ROT-2023-1093778
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) { //ROT-2023-1097268
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAS_ENTRADA") &&
        StringUtil.removeSpecialCharsToUC(complemento06).equals("")) { //ROT-2018-012373
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ENTRADA_CONTABILIDADE") &&
        StringUtil.removeSpecialCharsToUC(complemento06).equals("")) { //ROT-2018-012373
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2023-0140950
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento04).equals("21083") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2018-012373
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("HORAS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("BOLSA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTAGIO")) { //ROT-2018-012373
        conta = "113436";
        contaMovimento = "113436";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("TITULO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2018-012373
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEXSANDRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MELLO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ADICIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSAO")) { //ROT-2018-012373
        conta = "80049";
        contaMovimento = "80049";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CLIENTE") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2018-012373
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("DEVOL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) { //ROT-2018-012373
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) { //ROT-2020-058689
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) { //ROT-2021-0311455
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) { //ROT-2021-0311491
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) { //ROT-2021-0512280
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) { //ROT-2021-0612672
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) { //ROT-2020-079383
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) { //ROT-2021-0612733
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) { //ROT-2022-0421802
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) { //ROT-2022-1033321
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) { //ROT-2024-03128218
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILMAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("AUXILIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TRANSPORTE")) { //ROT-2018-012373
        conta = "112111";
        contaMovimento = "112111";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILMAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RECESSO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESCOLAR")) { //ROT-2018-012373
        conta = "112111";
        contaMovimento = "112111";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KAUVA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CONTRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("LOCACAO")) { //ROT-2018-012373
        conta = "90117";
        contaMovimento = "90117";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEXSANDRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MELLO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "80049";
        contaMovimento = "80049";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEREIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) { //ROT-2018-012373
        conta = "60002";
        contaMovimento = "60002";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELDER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIAN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CONTRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("LOCACAO")) { //ROT-2018-012373
        conta = "90117";
        contaMovimento = "90117";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRITZEN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSAO")) { //ROT-2018-012373
        conta = "46628";
        contaMovimento = "46628";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VELOSO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "15370";
        contaMovimento = "15370";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FAENZA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAVELLE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PICCINI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "47368";
        contaMovimento = "47368";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GASALI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "48025";
        contaMovimento = "48025";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TERESA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BONATTI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "26218";
        contaMovimento = "26218";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MENDONCA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "44088";
        contaMovimento = "44088";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMILA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CECCATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERREIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "51062";
        contaMovimento = "51062";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAILA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PALMEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "42109";
        contaMovimento = "42109";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HENRIQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KAUVA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "50141";
        contaMovimento = "50141";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUSTAVO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILIAN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DELLAGOSTIN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "45459";
        contaMovimento = "45459";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TATIANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOAVE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "47805";
        contaMovimento = "47805";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOMES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BORBA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "22273";
        contaMovimento = "22273";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KEHL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "32319";
        contaMovimento = "32319";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRUNA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAQUEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DICKEL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "45043";
        contaMovimento = "45043";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HORTENCIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARDOSO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "12729";
        contaMovimento = "12729";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RUBYA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FABRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMARANTE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "27580";
        contaMovimento = "27580";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRITZEN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "46628";
        contaMovimento = "46628";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FSO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) { //ROT-2018-012373
        conta = "41405";
        contaMovimento = "41405";
        return conta;
    }
    return conta;
}
public String getContaMovimento3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getRegraContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'PIX ENVIADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGARME2', Complemento (06) nao contem 'PAGA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PUNTO2', Complemento (06) nao contem 'PAGO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'VALOR', Fornecedor/Cliente contem 'LIQUIDADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAS_ENTRADA") &&
        StringUtil.removeSpecialCharsToUC(complemento06).equals("")) {
        conta = "Quando Tipo Planilha contem 'NOTAS_ENTRADA', Complemento (06) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ENTRADA_CONTABILIDADE") &&
        StringUtil.removeSpecialCharsToUC(complemento06).equals("")) {
        conta = "Quando Tipo Planilha contem 'ENTRADA_CONTABILIDADE', Complemento (06) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ADIANTAMENT") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ADIANTAMENT")) {
        conta = "Quando Complemento (02) contem 'ADIANTAMENT', Complemento (03) contem 'ADIANTAMENT', CONTA MOVIMENTO SERA = '115891'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AME1', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (04) nao contem 'PAGAMENTO', Complemento (04) nao contem 'ASSINATURA', Complemento (04) nao contem 'SAQUE', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (03) nao contem 'APROVAD', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMBOLSO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DESPESA")) {
        conta = "Quando Complemento (02) contem 'REEMBOLSO', Complemento (02) contem 'DESPESA', CONTA MOVIMENTO SERA = '90009'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CTA")) {
        conta = "Quando Complemento (02) contem 'TAR', Complemento (02) contem 'CTA', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CHEQUE")) {
        conta = "Quando Complemento (02) contem 'TARIFA', Complemento (02) contem 'CHEQUE', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TRANSF")) {
        conta = "Quando Complemento (02) contem 'TARIFA', Complemento (02) contem 'TRANSF', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("EXTRATO")) {
        conta = "Quando Complemento (02) contem 'TAR', Complemento (02) contem 'EXTRATO', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("KPI")) {
        conta = "Quando Complemento (02) contem 'KPI', CONTA MOVIMENTO SERA = '90018'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEPOS")) {
        conta = "Quando Complemento (02) contem 'TAR', Complemento (02) contem 'DEPOS', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("MANUT")) {
        conta = "Quando Complemento (02) contem 'TAR', Complemento (02) contem 'MANUT', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("SERV") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COBR")) {
        conta = "Quando Complemento (02) contem 'TAR', Complemento (02) contem 'SERV', Complemento (02) contem 'COBR', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("BAIXA")) {
        conta = "Quando Complemento (02) contem 'TAR', Complemento (02) contem 'BAIXA', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ADTO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FORNEC")) {
        conta = "Quando Complemento (02) contem 'ADTO', Complemento (02) contem 'FORNEC', CONTA MOVIMENTO SERA = '115891'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("SISPAG")) {
        conta = "Quando Complemento (02) contem 'TAR', Complemento (02) contem 'TED', Complemento (02) contem 'SISPAG', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("30H")) {
        conta = "Quando Complemento (02) contem 'TAR', Complemento (02) contem '30H', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("0561")) {
        conta = "Quando Complemento (03) contem 'DARF', Complemento (03) contem '0561', CONTA MOVIMENTO SERA = '112611'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ANUIDADE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CARTAO")) {
        conta = "Quando Complemento (02) contem 'ANUIDADE', Complemento (02) contem 'CARTAO', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SECRETARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("GPS")) {
        conta = "Quando Fornecedor/Cliente contem 'SECRETARIA', Fornecedor/Cliente contem 'FEDERAL', Complemento (02) contem 'GPS', CONTA MOVIMENTO SERA = '421111'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINIST") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVID") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RETENCAO")) {
        conta = "Quando Fornecedor/Cliente contem 'MINIST', Fornecedor/Cliente contem 'PREVID', Complemento (02) contem 'RETENCAO', CONTA MOVIMENTO SERA = '24112'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SECRETARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FOLHA")) {
        conta = "Quando Fornecedor/Cliente contem 'SECRETARIA', Fornecedor/Cliente contem 'FEDERAL', Complemento (02) contem 'FOLHA', CONTA MOVIMENTO SERA = '112611'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SECRETARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("0651")) {
        conta = "Quando Fornecedor/Cliente contem 'SECRETARIA', Fornecedor/Cliente contem 'FEDERAL', Complemento (03) contem 'DARF', Complemento (03) contem '0651', CONTA MOVIMENTO SERA = '112611'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("1708")) {
        conta = "Quando Complemento (03) contem 'DARF', Complemento (03) contem '1708', CONTA MOVIMENTO SERA = '19561'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2809")) {
        conta = "Quando Complemento (03) contem 'DARF', Complemento (03) contem '2809', CONTA MOVIMENTO SERA = '90012'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2172")) {
        conta = "Quando Complemento (03) contem 'DARF', Complemento (03) contem '2172', CONTA MOVIMENTO SERA = '30411'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5856")) {
        conta = "Quando Complemento (03) contem 'DARF', Complemento (03) contem '5856', CONTA MOVIMENTO SERA = '115003'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8045")) {
        conta = "Quando Complemento (03) contem 'DARF', Complemento (03) contem '8045', CONTA MOVIMENTO SERA = '90012'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3280")) {
        conta = "Quando Complemento (03) contem 'DARF', Complemento (03) contem '3280', CONTA MOVIMENTO SERA = '113487'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6912")) {
        conta = "Quando Complemento (03) contem 'DARF', Complemento (03) contem '6912', CONTA MOVIMENTO SERA = '19851'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8109")) {
        conta = "Quando Complemento (03) contem 'DARF', Complemento (03) contem '8109', CONTA MOVIMENTO SERA = '30411'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2484")) {
        conta = "Quando Complemento (03) contem 'DARF', Complemento (03) contem '2484', CONTA MOVIMENTO SERA = '113644'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CUSTODIA")) {
        conta = "Quando Complemento (02) contem 'TAR', Complemento (02) contem 'CUSTODIA', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("SIMPLES") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("NACIONAL")) {
        conta = "Quando Complemento (02) contem 'SIMPLES', Complemento (02) contem 'NACIONAL', CONTA MOVIMENTO SERA = '10010'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ABONO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PECUN")) {
        conta = "Quando Complemento (02) contem 'ABONO', Complemento (02) contem 'PECUN', CONTA MOVIMENTO SERA = '113458'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).startsWith("FERIAS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF")) {
        conta = "Quando Complemento (02) comeca com 'FERIAS', Complemento (03) nao contem 'DARF', CONTA MOVIMENTO SERA = '3651'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("1/3 S/FERIAS PROP")) {
        conta = "Quando Complemento (02) contem '1/3 S/FERIAS PROP', CONTA MOVIMENTO SERA = '4245'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2089")) {
        conta = "Quando Complemento (03) contem 'DARF', Complemento (03) contem '2089', CONTA MOVIMENTO SERA = '90012'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3208")) {
        conta = "Quando Complemento (03) contem 'DARF', Complemento (03) contem '3208', CONTA MOVIMENTO SERA = '19561'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento04).equals("21083") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Complemento (04) igual a '21083', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5952")) {
        conta = "Quando Complemento (03) contem 'DARF', Complemento (03) contem '5952', CONTA MOVIMENTO SERA = '80000'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2372")) {
        conta = "Quando Complemento (03) contem 'DARF', Complemento (03) contem '2372', CONTA MOVIMENTO SERA = '30411'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5993")) {
        conta = "Quando Complemento (03) contem 'DARF', Complemento (03) contem '5993', CONTA MOVIMENTO SERA = '3645'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).startsWith("VT")) {
        conta = "Quando Complemento (02) comeca com 'VT', CONTA MOVIMENTO SERA = '14297'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ADIANT") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("SALAR") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Complemento (02) contem 'ADIANT', Complemento (02) contem 'SALAR', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CLIENTE")) {
        conta = "Quando Complemento (03) contem 'CREDITO', Complemento (03) contem 'CLIENTE', CONTA MOVIMENTO SERA = '21083'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("HORAS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("BOLSA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTAGIO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (02) contem 'HORAS', Complemento (02) contem 'BOLSA', Complemento (02) contem 'ESTAGIO', CONTA MOVIMENTO SERA = '113436'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("DIVERSOS")) {
        conta = "Quando Complemento (02) contem 'DIVERSOS', CONTA MOVIMENTO SERA = '14311'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLUMENAU") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("ISS")) {
        conta = "Quando Fornecedor/Cliente contem 'MUNICIPIO', Fornecedor/Cliente contem 'BLUMENAU', Complemento (02) comeca com 'ISS', CONTA MOVIMENTO SERA = '30411'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPIO DE BLUMENAU") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ALVARA")) {
        conta = "Quando Fornecedor/Cliente contem 'MUNICIPIO DE BLUMENAU', Complemento (02) contem 'ALVARA', CONTA MOVIMENTO SERA = '3642'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SECRETARIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DARE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("1449")) {
        conta = "Quando Fornecedor/Cliente contem 'SECRETARIA', Complemento (03) contem 'DARE', Complemento (03) contem '1449', CONTA MOVIMENTO SERA = '19331'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("BONUS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLAUDINE SORAYA KIRSTEN")) {
        conta = "Quando Complemento (02) contem 'BONUS', Fornecedor/Cliente contem 'CLAUDINE SORAYA KIRSTEN', CONTA MOVIMENTO SERA = '113435'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TIM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CELULAR") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'TIM', Fornecedor/Cliente contem 'CELULAR', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '113531'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIDAS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("MULTA")) {
        conta = "Quando Fornecedor/Cliente contem 'UNIDAS', Complemento (02) contem 'MULTA', CONTA MOVIMENTO SERA = '3725'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AJI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COB")) {
        conta = "Quando Fornecedor/Cliente contem 'AJI', Complemento (02) contem 'COM', Complemento (02) contem 'COB', CONTA MOVIMENTO SERA = '80085'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WESCHENFELDER") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("QUITACAO")) {
        conta = "Quando Fornecedor/Cliente contem 'WESCHENFELDER', Complemento (02) contem 'QUITACAO', CONTA MOVIMENTO SERA = '114080'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SCREM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ADIANT")) {
        conta = "Quando Fornecedor/Cliente contem 'SCREM', Complemento (02) contem 'ADIANT', CONTA MOVIMENTO SERA = '115891'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANC")) {
        conta = "Quando Fornecedor/Cliente contem 'BRADES', Fornecedor/Cliente contem 'FINANC', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADREAN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS")) {
        conta = "Quando Fornecedor/Cliente contem 'ADREAN', Complemento (02) contem 'COMISS', CONTA MOVIMENTO SERA = '80003'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALESSANDRO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUARTE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS")) {
        conta = "Quando Fornecedor/Cliente contem 'ALESSANDRO', Fornecedor/Cliente contem 'DUARTE', Complemento (02) contem 'COMISS', CONTA MOVIMENTO SERA = '80001'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALESSANDRO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DISTRIB") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("LUCRO")) {
        conta = "Quando Fornecedor/Cliente contem 'ALESSANDRO', Complemento (02) contem 'DISTRIB', Complemento (02) contem 'LUCRO', CONTA MOVIMENTO SERA = '54921'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADREAN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DISTRIB") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("LUCRO")) {
        conta = "Quando Fornecedor/Cliente contem 'ADREAN', Complemento (02) contem 'DISTRIB', Complemento (02) contem 'LUCRO', CONTA MOVIMENTO SERA = '54924'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COBRANCA")) {
        conta = "Quando Complemento (02) contem 'DEBITO', Complemento (02) contem 'COBRANCA', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEONARDO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PREMI")) {
        conta = "Quando Fornecedor/Cliente contem 'LEONARDO', Complemento (02) contem 'PREMI', CONTA MOVIMENTO SERA = '90108'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCAS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PREMI")) {
        conta = "Quando Fornecedor/Cliente contem 'LUCAS', Complemento (02) contem 'PREMI', CONTA MOVIMENTO SERA = '90122'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVIA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PREMI")) {
        conta = "Quando Fornecedor/Cliente contem 'SILVIA', Complemento (02) contem 'PREMI', CONTA MOVIMENTO SERA = '90116'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELDER") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PREMI")) {
        conta = "Quando Fornecedor/Cliente contem 'ELDER', Complemento (02) contem 'PREMI', CONTA MOVIMENTO SERA = '90102'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDRE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PREMI")) {
        conta = "Quando Fornecedor/Cliente contem 'ANDRE', Complemento (02) contem 'PREMI', CONTA MOVIMENTO SERA = '90027'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENATA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PREMI")) {
        conta = "Quando Fornecedor/Cliente contem 'RENATA', Complemento (02) contem 'PREMI', CONTA MOVIMENTO SERA = '90095'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOISES") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PREMI")) {
        conta = "Quando Fornecedor/Cliente contem 'MOISES', Complemento (02) contem 'PREMI', CONTA MOVIMENTO SERA = '90114'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KATIEME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PREMI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGRA INVALIDADA")) {
        conta = "Quando Fornecedor/Cliente contem 'KATIEME', Complemento (02) contem 'PREMI', Fornecedor/Cliente contem 'REGRA INVALIDADA', CONTA MOVIMENTO SERA = '90098'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMILA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PREMI")) {
        conta = "Quando Fornecedor/Cliente contem 'CAMILA', Complemento (02) contem 'PREMI', CONTA MOVIMENTO SERA = '90115'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOROTEA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PREMI")) {
        conta = "Quando Fornecedor/Cliente contem 'DOROTEA', Complemento (02) contem 'PREMI', CONTA MOVIMENTO SERA = '90121'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMANDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PREMI")) {
        conta = "Quando Fornecedor/Cliente contem 'AMANDA', Complemento (02) contem 'PREMI', CONTA MOVIMENTO SERA = '90119'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAROLINE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PREMI")) {
        conta = "Quando Fornecedor/Cliente contem 'CAROLINE', Complemento (02) contem 'PREMI', CONTA MOVIMENTO SERA = '90110'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUNAMIS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COB")) {
        conta = "Quando Fornecedor/Cliente contem 'DUNAMIS', Complemento (02) contem 'COM', Complemento (02) contem 'COB', CONTA MOVIMENTO SERA = '80065'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("TITULO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FOLHA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Complemento (03) contem 'TITULO', Complemento (03) contem 'FOLHA', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("VERBA 1")) {
        conta = "Quando Complemento (02) contem 'VERBA 1', CONTA MOVIMENTO SERA = '115420'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("XXXXX")) {
        conta = "Quando Fornecedor/Cliente contem 'XXXXX', CONTA MOVIMENTO SERA = 'XXXXX'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("XXXXX")) {
        conta = "Quando Fornecedor/Cliente contem 'XXXXX', CONTA MOVIMENTO SERA = 'XXXXX'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALLAN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) {
        conta = "Quando Fornecedor/Cliente contem 'ALLAN', Complemento (02) comeca com 'COMISS', CONTA MOVIMENTO SERA = '80039'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VICTOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COLERAUS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS")) {
        conta = "Quando Fornecedor/Cliente contem 'VICTOR', Fornecedor/Cliente contem 'COLERAUS', Complemento (02) contem 'COMISS', CONTA MOVIMENTO SERA = '80088'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILTON") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) {
        conta = "Quando Fornecedor/Cliente contem 'WILTON', Complemento (02) comeca com 'COMISS', CONTA MOVIMENTO SERA = '10010'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALTER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MESSA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS")) {
        conta = "Quando Fornecedor/Cliente contem 'VALTER', Fornecedor/Cliente contem 'MESSA', Complemento (02) contem 'COMISS', CONTA MOVIMENTO SERA = '80004'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIGUACU") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COB")) {
        conta = "Quando Fornecedor/Cliente contem 'BIGUACU', Complemento (02) contem 'COM', Complemento (02) contem 'COB', CONTA MOVIMENTO SERA = '80080'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SBRUZZI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMCOB")) {
        conta = "Quando Fornecedor/Cliente contem 'SBRUZZI', Complemento (02) comeca com 'COMCOB', CONTA MOVIMENTO SERA = '80072'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MERROY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMCOB")) {
        conta = "Quando Fornecedor/Cliente contem 'MERROY', Complemento (02) comeca com 'COMCOB', CONTA MOVIMENTO SERA = '80070'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GREZZANA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMCOB")) {
        conta = "Quando Fornecedor/Cliente contem 'GREZZANA', Complemento (02) comeca com 'COMCOB', CONTA MOVIMENTO SERA = '80069'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JANAINA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COB")) {
        conta = "Quando Fornecedor/Cliente contem 'JANAINA', Complemento (02) contem 'COM', Complemento (02) contem 'COB', CONTA MOVIMENTO SERA = '80077'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BREMER") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COB")) {
        conta = "Quando Fornecedor/Cliente contem 'LUIZ', Fornecedor/Cliente contem 'BREMER', Complemento (02) comeca com 'COM', Complemento (02) contem 'COB', CONTA MOVIMENTO SERA = '80008'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAMARONE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COM")) {
        conta = "Quando Fornecedor/Cliente contem 'SAMARONE', Complemento (02) comeca com 'COM', CONTA MOVIMENTO SERA = '80067'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VICTOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COLERAUS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) {
        conta = "Quando Fornecedor/Cliente contem 'VICTOR', Fornecedor/Cliente contem 'COLERAUS', Complemento (02) contem 'COMCOB', CONTA MOVIMENTO SERA = '80088'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VICTOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNAN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) {
        conta = "Quando Fornecedor/Cliente contem 'VICTOR', Fornecedor/Cliente contem 'FERNAN', Complemento (02) contem 'COMCOB', CONTA MOVIMENTO SERA = '80053'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SARDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) {
        conta = "Quando Fornecedor/Cliente contem 'PAULO', Fornecedor/Cliente contem 'SARDA', Complemento (02) contem 'COMCOB', CONTA MOVIMENTO SERA = '80089'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGINAL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUNIOR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) {
        conta = "Quando Fornecedor/Cliente contem 'REGINAL', Fornecedor/Cliente contem 'JUNIOR', Complemento (02) contem 'COMCOB', CONTA MOVIMENTO SERA = '80075'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEXSANDRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MELLO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ADICIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALEXSANDRA', Fornecedor/Cliente contem 'MELLO', Complemento (02) contem 'ADICIONAL', Complemento (02) contem 'COMISSAO', CONTA MOVIMENTO SERA = '80049'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Fornecedor/Cliente contem 'BANCO', Fornecedor/Cliente contem 'BRASIL', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAU") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Fornecedor/Cliente contem 'ITAU', Fornecedor/Cliente contem 'UNIBANCO', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITACU") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("LICEN")) {
        conta = "Quando Fornecedor/Cliente contem 'ITACU', Complemento (02) contem 'LICEN', CONTA MOVIMENTO SERA = '50300'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("50747849")) {
        conta = "Quando Fornecedor/Cliente contem 'UNIBANCO', Documento/NF contem '50747849', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("324.983")) {
        conta = "Quando Fornecedor/Cliente contem 'UNIBANCO', Complemento (02) contem '324.983', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("324.984")) {
        conta = "Quando Fornecedor/Cliente contem 'UNIBANCO', Complemento (02) contem '324.984', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTENDAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS")) {
        conta = "Quando Fornecedor/Cliente contem 'ANDRE', Fornecedor/Cliente contem 'MARTENDAL', Complemento (02) contem 'COMISS', CONTA MOVIMENTO SERA = '80060'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ULLYSSES") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) {
        conta = "Quando Fornecedor/Cliente contem 'ULLYSSES', Complemento (02) contem 'COMCOB', CONTA MOVIMENTO SERA = '80059'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NEWTEC") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ADIANT")) {
        conta = "Quando Fornecedor/Cliente contem 'NEWTEC', Complemento (03) contem 'ADIANT', CONTA MOVIMENTO SERA = '115891'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIVERSOS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("VERBA")) {
        conta = "Quando Fornecedor/Cliente contem 'DIVERSOS', Complemento (02) comeca com 'VERBA', CONTA MOVIMENTO SERA = '115420'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIVERSOS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DOACAO")) {
        conta = "Quando Fornecedor/Cliente contem 'DIVERSOS', Complemento (02) contem 'DOACAO', CONTA MOVIMENTO SERA = '14334'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIVERSOS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FENATIB")) {
        conta = "Quando Fornecedor/Cliente contem 'DIVERSOS', Complemento (02) contem 'FENATIB', CONTA MOVIMENTO SERA = '113292'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIVERSOS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("LIMPEZA")) {
        conta = "Quando Fornecedor/Cliente contem 'DIVERSOS', Complemento (02) contem 'LIMPEZA', CONTA MOVIMENTO SERA = '113501'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("1059223")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Fornecedor/Cliente contem 'BNDES', Documento/NF contem '1059223', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("321782")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Fornecedor/Cliente contem 'BNDES', Documento/NF contem '321782', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("194929")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Fornecedor/Cliente contem 'BNDES', Documento/NF contem '194929', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("56506")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Fornecedor/Cliente contem 'BNDES', Documento/NF contem '56506', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("33199")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Fornecedor/Cliente contem 'BNDES', Documento/NF contem '33199', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("204822")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Fornecedor/Cliente contem 'BNDES', Documento/NF contem '204822', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("17761")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Fornecedor/Cliente contem 'BNDES', Documento/NF contem '17761', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("6905")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Fornecedor/Cliente contem 'BNDES', Documento/NF contem '6905', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7322766")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Fornecedor/Cliente contem 'BNDES', Documento/NF contem '7322766', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7361294")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Fornecedor/Cliente contem 'BNDES', Documento/NF contem '7361294', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("41501")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Fornecedor/Cliente contem 'BNDES', Documento/NF contem '41501', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7427935")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Fornecedor/Cliente contem 'BNDES', Documento/NF contem '7427935', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7438098")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Fornecedor/Cliente contem 'BNDES', Documento/NF contem '7438098', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("194929")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Fornecedor/Cliente contem 'BNDES', Documento/NF contem '194929', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("43887")) {
        conta = "Quando Fornecedor/Cliente contem 'VOLKSWAGEN', Documento/NF contem '43887', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("50856")) {
        conta = "Quando Fornecedor/Cliente contem 'VOLKSWAGEN', Documento/NF contem '50856', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("50857")) {
        conta = "Quando Fornecedor/Cliente contem 'VOLKSWAGEN', Documento/NF contem '50857', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("10477")) {
        conta = "Quando Fornecedor/Cliente contem 'VOLKSWAGEN', Documento/NF contem '10477', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("10476")) {
        conta = "Quando Fornecedor/Cliente contem 'VOLKSWAGEN', Documento/NF contem '10476', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HDI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGUROS")) {
        conta = "Quando Fornecedor/Cliente contem 'HDI', Fornecedor/Cliente contem 'SEGUROS', CONTA MOVIMENTO SERA = '17711'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAUCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CARTAO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CORPORATIVO")) {
        conta = "Quando Fornecedor/Cliente contem 'ITAUCARD', Complemento (03) contem 'CARTAO', Complemento (03) contem 'CORPORATIVO', CONTA MOVIMENTO SERA = '90009'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("GIRO")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Complemento (02) contem 'GIRO', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("DEVOLUC") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CHEQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEPOSITADO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Complemento (02) contem 'DEVOLUC', Complemento (02) contem 'CHEQUE', Complemento (02) contem 'DEPOSITADO', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("PENSAO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ALIMEN")) {
        conta = "Quando Complemento (02) contem 'PENSAO', Complemento (02) contem 'ALIMEN', CONTA MOVIMENTO SERA = '33611'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BERTOLDI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ANDRE', Fornecedor/Cliente contem 'LUIZ', Fornecedor/Cliente contem 'BERTOLDI', Complemento (02) comeca com 'COMISS', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("MINIMEETING")) {
        conta = "Quando Complemento (02) contem 'MINIMEETING', CONTA MOVIMENTO SERA = '90003'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDREAXXX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUARTE")) {
        conta = "Quando Fornecedor/Cliente contem 'ANDREAXXX', Fornecedor/Cliente contem 'DUARTE', CONTA MOVIMENTO SERA = '70002'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HOSPITAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DOACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("LEI")) {
        conta = "Quando Fornecedor/Cliente contem 'HOSPITAL', Complemento (02) contem 'DOACAO', Complemento (02) contem 'LEI', CONTA MOVIMENTO SERA = '113292'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HOSPITAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PROJETO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FIA")) {
        conta = "Quando Fornecedor/Cliente contem 'HOSPITAL', Complemento (02) contem 'PROJETO', Complemento (02) contem 'FIA', CONTA MOVIMENTO SERA = '14334'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTEGR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESCOLA")) {
        conta = "Quando Fornecedor/Cliente contem 'INTEGR', Fornecedor/Cliente contem 'EMPR', Fornecedor/Cliente contem 'ESCOLA', CONTA MOVIMENTO SERA = '14328'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAU") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGURO")) {
        conta = "Quando Fornecedor/Cliente contem 'ITAU', Fornecedor/Cliente contem 'SEGURO', CONTA MOVIMENTO SERA = '112714'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KETIEME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PREMI")) {
        conta = "Quando Fornecedor/Cliente contem 'KETIEME', Complemento (02) contem 'PREMI', CONTA MOVIMENTO SERA = '90098'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMB") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TELEF")) {
        conta = "Quando Complemento (02) contem 'REEMB', Complemento (02) contem 'TELEF', CONTA MOVIMENTO SERA = '113531'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAUCARD") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("4192")) {
        conta = "Quando Fornecedor/Cliente contem 'ITAUCARD', Documento/NF contem '4192', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAUCARD") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("8964")) {
        conta = "Quando Fornecedor/Cliente contem 'ITAUCARD', Documento/NF contem '8964', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILTON") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ADIANT")) {
        conta = "Quando Fornecedor/Cliente contem 'WILTON', Complemento (02) contem 'ADIANT', CONTA MOVIMENTO SERA = '80095'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANACLETO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EVENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'ANACLETO', Fornecedor/Cliente contem 'EVENTO', CONTA MOVIMENTO SERA = '115420'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MACIEL") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("62017")) {
        conta = "Quando Fornecedor/Cliente contem 'PAULA', Fornecedor/Cliente contem 'MACIEL', Documento/NF contem '62017', CONTA MOVIMENTO SERA = '114080'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESCOLBEXXX") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("AGROSUL")) {
        conta = "Quando Fornecedor/Cliente contem 'ESCOLBEXXX', Complemento (02) contem 'AGROSUL', CONTA MOVIMENTO SERA = '14329'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("PATROC") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("UNIFORME")) {
        conta = "Quando Complemento (02) contem 'PATROC', Complemento (02) contem 'UNIFORME', CONTA MOVIMENTO SERA = '115420'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("CESTA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CLIENTE")) {
        conta = "Quando Complemento (02) contem 'CESTA', Complemento (02) contem 'CLIENTE', CONTA MOVIMENTO SERA = '115410'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("PUGNIC")) {
        conta = "Quando Complemento (02) contem 'PUGNIC', CONTA MOVIMENTO SERA = '115420'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALDIR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CORRENTE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("GALPAO")) {
        conta = "Quando Fornecedor/Cliente contem 'VALDIR', Fornecedor/Cliente contem 'CORRENTE', Complemento (02) contem 'GALPAO', CONTA MOVIMENTO SERA = '113487'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("DESPESA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("EVENTO")) {
        conta = "Quando Complemento (02) contem 'DESPESA', Complemento (02) contem 'EVENTO', CONTA MOVIMENTO SERA = '115420'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMB") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CURSO")) {
        conta = "Quando Complemento (02) contem 'REEMB', Complemento (02) contem 'CURSO', CONTA MOVIMENTO SERA = '90006'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MACIEL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) {
        conta = "Quando Fornecedor/Cliente contem 'PAULA', Fornecedor/Cliente contem 'MACIEL', Complemento (02) contem 'COMCOB', CONTA MOVIMENTO SERA = '80045'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MACIEL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS")) {
        conta = "Quando Fornecedor/Cliente contem 'PAULA', Fornecedor/Cliente contem 'MACIEL', Complemento (02) contem 'COMISS', CONTA MOVIMENTO SERA = '80045'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MACIEL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("QUITACAO")) {
        conta = "Quando Fornecedor/Cliente contem 'PAULA', Fornecedor/Cliente contem 'MACIEL', Complemento (02) contem 'QUITACAO', CONTA MOVIMENTO SERA = '114080'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAUCARD")) {
        conta = "Quando Fornecedor/Cliente contem 'BANCO', Fornecedor/Cliente contem 'ITAUCARD', CONTA MOVIMENTO SERA = '90009' PORT: '11711'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIVERSOS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COPA")) {
        conta = "Quando Fornecedor/Cliente contem 'DIVERSOS', Complemento (02) contem 'COPA', CONTA MOVIMENTO SERA = '14311'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RESID") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIMPO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COND")) {
        conta = "Quando Fornecedor/Cliente contem 'RESID', Fornecedor/Cliente contem 'OLIMPO', Complemento (02) contem 'COND', CONTA MOVIMENTO SERA = '80002'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ADIANT") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COLABOR")) {
        conta = "Quando Complemento (02) contem 'ADIANT', Complemento (02) contem 'COLABOR', CONTA MOVIMENTO SERA = '33611'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALTER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MESSA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) {
        conta = "Quando Fornecedor/Cliente contem 'VALTER', Fornecedor/Cliente contem 'MESSA', Complemento (02) contem 'COMCOB', CONTA MOVIMENTO SERA = '80004'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILTON") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ADIANT")) {
        conta = "Quando Fornecedor/Cliente contem 'WILTON', Complemento (03) contem 'ADIANT', CONTA MOVIMENTO SERA = '80095'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILTON") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("LABORE")) {
        conta = "Quando Fornecedor/Cliente contem 'WILTON', Complemento (02) contem 'LABORE', CONTA MOVIMENTO SERA = '113472'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILTON") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DISTR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("LUCRO")) {
        conta = "Quando Fornecedor/Cliente contem 'WILTON', Complemento (02) contem 'DISTR', Complemento (02) contem 'LUCRO', CONTA MOVIMENTO SERA = '54923'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADREAN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMB")) {
        conta = "Quando Fornecedor/Cliente contem 'ADREAN', Complemento (02) contem 'REEMB', CONTA MOVIMENTO SERA = '80003'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ADIANT") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DESP") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DIARIA")) {
        conta = "Quando Complemento (02) contem 'ADIANT', Complemento (02) contem 'DESP', Complemento (02) contem 'DIARIA', CONTA MOVIMENTO SERA = '90009'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("PASSAG") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("AEREA")) {
        conta = "Quando Complemento (02) contem 'PASSAG', Complemento (02) contem 'AEREA', CONTA MOVIMENTO SERA = '90009'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ADTO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("SALAR") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Complemento (02) contem 'ADTO', Complemento (02) contem 'SALAR', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR/CUSTAS")) {
        conta = "Quando Complemento (02) contem 'TAR/CUSTAS', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ALTERACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DADOS")) {
        conta = "Quando Complemento (02) contem 'TAR', Complemento (02) contem 'ALTERACAO', Complemento (02) contem 'DADOS', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMB")) {
        conta = "Quando Fornecedor/Cliente contem 'HOTEL', Complemento (02) contem 'REEMB', CONTA MOVIMENTO SERA = '90009'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("HOSPED")) {
        conta = "Quando Fornecedor/Cliente contem 'HOTEL', Complemento (02) contem 'HOSPED', CONTA MOVIMENTO SERA = '90009'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTACIONAMENTO")) {
        conta = "Quando Complemento (02) contem 'ESTACIONAMENTO', CONTA MOVIMENTO SERA = '113607'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADESCO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO/RE")) {
        conta = "Quando Fornecedor/Cliente contem 'BRADESCO', Fornecedor/Cliente contem 'AUTO/RE', CONTA MOVIMENTO SERA = '116261'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("EXPOLAGES")) {
        conta = "Quando Complemento (02) contem 'EXPOLAGES', CONTA MOVIMENTO SERA = '115420'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("CURSO") &&
        !StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMB")) {
        conta = "Quando Complemento (02) contem 'CURSO', Complemento (02) nao contem 'REEMB', CONTA MOVIMENTO SERA = '9901577'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("CONVENIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FARMACIA")) {
        conta = "Quando Complemento (02) contem 'CONVENIO', Complemento (02) contem 'FARMACIA', CONTA MOVIMENTO SERA = '113471'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMB") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CABO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("HDMI")) {
        conta = "Quando Complemento (02) contem 'REEMB', Complemento (02) contem 'CABO', Complemento (02) contem 'HDMI', CONTA MOVIMENTO SERA = '113599'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMB") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("BANER")) {
        conta = "Quando Complemento (02) contem 'REEMB', Complemento (02) contem 'BANER', CONTA MOVIMENTO SERA = '14305'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NATANAEL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("SERVICOS")) {
        conta = "Quando Fornecedor/Cliente contem 'NATANAEL', Complemento (02) contem 'SERVICOS', CONTA MOVIMENTO SERA = '112743'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PLANOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ODONT") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'PLANOS', Fornecedor/Cliente contem 'ODONT', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = '14251'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("REGISTRO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CONTRATO")) {
        conta = "Quando Fornecedor/Cliente contem 'UNIBANCO', Complemento (02) contem 'REGISTRO', Complemento (02) contem 'CONTRATO', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("PUBLI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("REVISTA")) {
        conta = "Quando Complemento (02) contem 'PUBLI', Complemento (02) contem 'REVISTA', CONTA MOVIMENTO SERA = '113286'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ANUNC") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("REVISTA")) {
        conta = "Quando Complemento (02) contem 'ANUNC', Complemento (02) contem 'REVISTA', CONTA MOVIMENTO SERA = '113286'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("DESPESA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VEICULO") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLU")) {
        conta = "Quando Complemento (02) contem 'DESPESA', Complemento (02) contem 'VEICULO', Fornecedor/Cliente nao contem 'BLU', CONTA MOVIMENTO SERA = '113510'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESPACHANTE")) {
        conta = "Quando Fornecedor/Cliente contem 'DESPACHANTE', CONTA MOVIMENTO SERA = '113510'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPANHIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOLUCOES") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("ADIANT") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'COMPANHIA', Fornecedor/Cliente contem 'SOLUCOES', Complemento (03) nao contem 'ADIANT', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DOC/TED")) {
        conta = "Quando Complemento (02) contem 'TAR', Complemento (02) contem 'DOC/TED', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ASSOC") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DOACAO")) {
        conta = "Quando Fornecedor/Cliente contem 'ASSOC', Complemento (02) contem 'DOACAO', CONTA MOVIMENTO SERA = '14334'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ADIANT") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FUNC")) {
        conta = "Quando Complemento (02) contem 'ADIANT', Complemento (02) contem 'FUNC', CONTA MOVIMENTO SERA = '113421'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DPRF") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("MULTA")) {
        conta = "Quando Fornecedor/Cliente contem 'DPRF', Complemento (02) contem 'MULTA', CONTA MOVIMENTO SERA = '3725'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUNAMIS")) {
        conta = "Quando Fornecedor/Cliente contem 'DUNAMIS', CONTA MOVIMENTO SERA = '90012'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUNAMIS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("QUITACAO")) {
        conta = "Quando Fornecedor/Cliente contem 'DUNAMIS', Complemento (02) contem 'QUITACAO', CONTA MOVIMENTO SERA = '114080'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMB") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("EVENTO")) {
        conta = "Quando Complemento (02) contem 'REEMB', Complemento (02) contem 'EVENTO', CONTA MOVIMENTO SERA = '115420'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIVERSOS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CLAUDINE")) {
        conta = "Quando Fornecedor/Cliente contem 'DIVERSOS', Complemento (02) contem 'CLAUDINE', CONTA MOVIMENTO SERA = '14311'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILBRAM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COM")) {
        conta = "Quando Fornecedor/Cliente contem 'GILBRAM', Complemento (02) contem 'COM', CONTA MOVIMENTO SERA = '80090'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILBRAM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("SUBSIDIO")) {
        conta = "Quando Fornecedor/Cliente contem 'GILBRAM', Complemento (02) contem 'SUBSIDIO', CONTA MOVIMENTO SERA = '90009'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMB") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ALMOCO")) {
        conta = "Quando Complemento (02) contem 'REEMB', Complemento (02) contem 'ALMOCO', CONTA MOVIMENTO SERA = '113607'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("CARTAO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANCO")) {
        conta = "Quando Complemento (02) contem 'CARTAO', Complemento (02) contem 'CREDITO', Fornecedor/Cliente contem 'BANCO', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ANUIDADE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("MERROY")) {
        conta = "Quando Complemento (02) contem 'ANUIDADE', Complemento (02) contem 'MERROY', CONTA MOVIMENTO SERA = '90012'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CIELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TAXA")) {
        conta = "Quando Fornecedor/Cliente contem 'CIELO', Complemento (02) contem 'TAXA', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINAME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("162792")) {
        conta = "Quando Fornecedor/Cliente contem 'ITAU', Complemento (02) contem 'FINAME', Complemento (02) contem '162792', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).startsWith("1020")) {
        conta = "Quando Portador comeca com '1020', CONTA MOVIMENTO SERA = '75112'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).startsWith("1030")) {
        conta = "Quando Portador comeca com '1030', CONTA MOVIMENTO SERA = '75112'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("FINAME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("43887")) {
        conta = "Quando Complemento (02) contem 'FINAME', Complemento (02) contem '43887', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("484227")) {
        conta = "Quando Fornecedor/Cliente contem 'VOLKSWAGEN', Complemento (02) contem 'FINANC', Complemento (02) contem '484227', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("484234")) {
        conta = "Quando Fornecedor/Cliente contem 'VOLKSWAGEN', Complemento (02) contem 'FINANC', Complemento (02) contem '484234', REGRA DE FINANCIAMENTOS";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("ADTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FORNEC")) {
        conta = "Quando Complemento (03) contem 'ADTO', Complemento (03) contem 'FORNEC', CONTA MOVIMENTO SERA = '115891'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRABALHO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FGTS")) {
        conta = "Quando Fornecedor/Cliente contem 'TRABALHO', Complemento (03) contem 'FGTS', CONTA MOVIMENTO SERA = '123111'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BORBA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ALUG")) {
        conta = "Quando Fornecedor/Cliente contem 'SILVIO', Fornecedor/Cliente contem 'BORBA', Complemento (02) contem 'ALUG', CONTA MOVIMENTO SERA = '113487'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ADTO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PENSAO")) {
        conta = "Quando Complemento (02) contem 'ADTO', Complemento (02) contem 'PENSAO', CONTA MOVIMENTO SERA = '113421'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXPRESSO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MIGUEL")) {
        conta = "Quando Fornecedor/Cliente contem 'EXPRESSO', Fornecedor/Cliente contem 'MIGUEL', CONTA MOVIMENTO SERA = '114999'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WIRTH")) {
        conta = "Quando Fornecedor/Cliente contem 'TRANSP', Fornecedor/Cliente contem 'WIRTH', CONTA MOVIMENTO SERA = '115000'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RED")) {
        conta = "Quando Fornecedor/Cliente contem 'TRANSP', Fornecedor/Cliente contem 'RED', CONTA MOVIMENTO SERA = '115010'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("S.K")) {
        conta = "Quando Fornecedor/Cliente comeca com 'S.K', CONTA MOVIMENTO SERA = '11066'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CLIENTE") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Complemento (03) contem 'CREDITO', Complemento (03) contem 'CLIENTE', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("DEVOL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "Quando Complemento (02) contem 'DEVOL', Complemento (02) contem 'VENDA', Tipo Planilha contem 'MOVIMENTO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESCOLBE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("OUSAR")) {
        conta = "Quando Fornecedor/Cliente contem 'ESCOLBE', Complemento (02) contem 'OUSAR', CONTA MOVIMENTO SERA = '10010'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESCOLBE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("AGROSUL")) {
        conta = "Quando Fornecedor/Cliente contem 'ESCOLBE', Complemento (02) contem 'AGROSUL', CONTA MOVIMENTO SERA = '14329'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDREA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUARTE") &&
        valorDocumento >= 5000) {
        conta = "Quando Fornecedor/Cliente contem 'ANDREA', Fornecedor/Cliente contem 'DUARTE', Valor Documento maior ou igual a '5000', CONTA MOVIMENTO SERA = '80002'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TX") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("INFORMES")) {
        conta = "Quando Complemento (02) contem 'TX', Complemento (02) contem 'INFORMES', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("CAPACITARH")) {
        conta = "Quando Complemento (02) contem 'CAPACITARH', CONTA MOVIMENTO SERA = '114268'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AJI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS")) {
        conta = "Quando Fornecedor/Cliente contem 'AJI', Complemento (02) contem 'COMISS', CONTA MOVIMENTO SERA = '80085'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SARDA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMER") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) {
        conta = "Quando Fornecedor/Cliente contem 'SARDA', Fornecedor/Cliente contem 'COMER', Complemento (02) contem 'COMCOB', CONTA MOVIMENTO SERA = '80091'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALCIR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) {
        conta = "Quando Fornecedor/Cliente contem 'VALCIR', Complemento (02) contem 'COMCOB', CONTA MOVIMENTO SERA = '80020'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VELOSO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB")) {
        conta = "Quando Fornecedor/Cliente contem 'VELOSO', Complemento (02) contem 'COMCOB', CONTA MOVIMENTO SERA = '80081'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WESCHENFELDER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'WESCHENFELDER', Fornecedor/Cliente contem 'REPRESENTACOES', Fornecedor/Cliente contem 'COMERCIAIS', Complemento (02) contem 'COMISSOES', CONTA MOVIMENTO SERA = '9913486'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("RELAT") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DESP")) {
        conta = "Quando Complemento (02) contem 'RELAT', Complemento (02) contem 'DESP', CONTA MOVIMENTO SERA = '90009'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("BOLET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("OCOR")) {
        conta = "Quando Complemento (02) contem 'BOLET', Complemento (02) contem 'OCOR', CONTA MOVIMENTO SERA = '3725'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAMAE")) {
        conta = "Quando Fornecedor/Cliente contem 'SAMAE', CONTA MOVIMENTO SERA = '113524'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNIC") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("IPTU")) {
        conta = "Quando Fornecedor/Cliente contem 'MUNIC', Complemento (02) contem 'IPTU', CONTA MOVIMENTO SERA = '113620'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("VACINA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("GRIPE")) {
        conta = "Quando Complemento (02) contem 'VACINA', Complemento (02) contem 'GRIPE', CONTA MOVIMENTO SERA = '14251'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADREAN") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ADIANTAMEN")) {
        conta = "Quando Fornecedor/Cliente contem 'ADREAN', Complemento (03) contem 'ADIANTAMEN', CONTA MOVIMENTO SERA = '115891'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALESS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUARTE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ADIANTAMEN")) {
        conta = "Quando Fornecedor/Cliente contem 'ALESS', Fornecedor/Cliente contem 'DUARTE', Complemento (03) contem 'ADIANTAMEN', CONTA MOVIMENTO SERA = '115891'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("PATROC")) {
        conta = "Quando Complemento (02) contem 'PATROC', CONTA MOVIMENTO SERA = '14334'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("PATROC") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("SIMPOSIO")) {
        conta = "Quando Complemento (02) contem 'PATROC', Complemento (02) contem 'SIMPOSIO', CONTA MOVIMENTO SERA = '115420'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COM") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AJI")) {
        conta = "Quando Complemento (02) comeca com 'COM', Fornecedor/Cliente contem 'AJI', CONTA MOVIMENTO SERA = '80085'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR/CUSTAS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COBRANCA")) {
        conta = "Quando Complemento (02) contem 'TAR/CUSTAS', Complemento (02) contem 'COBRANCA', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("INSTR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("BAIXA")) {
        conta = "Quando Complemento (02) contem 'TARIFA', Complemento (02) contem 'INSTR', Complemento (02) contem 'BAIXA', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAXA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("BOMBEIRO")) {
        conta = "Quando Complemento (02) contem 'TAXA', Complemento (02) contem 'BOMBEIRO', CONTA MOVIMENTO SERA = '3642'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("COM COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGINALDO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TADEU")) {
        conta = "Quando Complemento (02) contem 'COM COB', Fornecedor/Cliente contem 'REGINALDO', Fornecedor/Cliente contem 'TADEU', CONTA MOVIMENTO SERA = '80075'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("MULTA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("INFRATOR")) {
        conta = "Quando Complemento (02) contem 'MULTA', Complemento (02) contem 'INFRATOR', CONTA MOVIMENTO SERA = '3725'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("DEVOL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("METLIFE")) {
        conta = "Quando Complemento (02) contem 'DEVOL', Complemento (02) contem 'METLIFE', CONTA MOVIMENTO SERA = '14251'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SARDA COM")) {
        conta = "Quando Complemento (02) contem 'COM', Complemento (02) contem 'COB', Fornecedor/Cliente contem 'SARDA COM', CONTA MOVIMENTO SERA = '80091'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SBRUZZI")) {
        conta = "Quando Complemento (02) contem 'COM', Complemento (02) contem 'COB', Fornecedor/Cliente contem 'SBRUZZI', CONTA MOVIMENTO SERA = '80072'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MERROY")) {
        conta = "Quando Complemento (02) contem 'COM', Complemento (02) contem 'COB', Fornecedor/Cliente contem 'MERROY', CONTA MOVIMENTO SERA = '80070'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ULLYSSES")) {
        conta = "Quando Complemento (02) contem 'COM', Complemento (02) contem 'COB', Fornecedor/Cliente contem 'ULLYSSES', CONTA MOVIMENTO SERA = '80059'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALTER M")) {
        conta = "Quando Complemento (02) contem 'COM', Complemento (02) contem 'COB', Fornecedor/Cliente contem 'VALTER M', CONTA MOVIMENTO SERA = '80004'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("COM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COB") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VICTOR F")) {
        conta = "Quando Complemento (02) contem 'COM', Complemento (02) contem 'COB', Fornecedor/Cliente contem 'VICTOR F', CONTA MOVIMENTO SERA = '80053'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("JUROS")) {
        conta = "Quando Fornecedor/Cliente contem 'ITAU', Complemento (02) contem 'JUROS', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("IOF")) {
        conta = "Quando Fornecedor/Cliente contem 'ITAU', Complemento (02) contem 'IOF', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIVERSOS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("EVENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'DIVERSOS', Complemento (02) contem 'EVENTO', CONTA MOVIMENTO SERA = '115420'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIVERSOS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FLOR PARA CLIENTE")) {
        conta = "Quando Fornecedor/Cliente contem 'DIVERSOS', Complemento (02) contem 'FLOR PARA CLIENTE', CONTA MOVIMENTO SERA = '115420'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("JUROS")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Complemento (02) contem 'JUROS', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("IOF")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Complemento (02) contem 'IOF', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("I.O.F")) {
        conta = "Quando Fornecedor/Cliente contem 'BRASIL', Complemento (02) contem 'I.O.F', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("ALUG") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ANDREA")) {
        conta = "Quando Complemento (02) contem 'ALUG', Complemento (02) contem 'ANDREA', CONTA MOVIMENTO SERA = '70002'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOEHRING")) {
        conta = "Quando Fornecedor/Cliente contem 'BOEHRING', CONTA MOVIMENTO SERA = '114609'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCHETTI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMER")) {
        conta = "Quando Fornecedor/Cliente contem 'MARCHETTI', Fornecedor/Cliente contem 'COMER', CONTA MOVIMENTO SERA = '9906089'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMERICA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGUR")) {
        conta = "Quando Fornecedor/Cliente contem 'SUL', Fornecedor/Cliente contem 'AMERICA', Fornecedor/Cliente contem 'SEGUR', CONTA MOVIMENTO SERA = '17711'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("DESP") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VIAGEM")) {
        conta = "Quando Complemento (02) contem 'DESP', Complemento (02) contem 'VIAGEM', CONTA MOVIMENTO SERA = '90009'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("DEVOL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("EDUARDO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("OLSSO")) {
        conta = "Quando Complemento (02) contem 'DEVOL', Complemento (02) contem 'EDUARDO', Complemento (02) contem 'OLSSO', CONTA MOVIMENTO SERA = '9726'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("FERIAS")) {
        conta = "Quando Complemento (02) contem 'FERIAS', CONTA MOVIMENTO SERA = '113458'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("DESP") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CARTORIO")) {
        conta = "Quando Complemento (02) contem 'DESP', Complemento (02) contem 'CARTORIO', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RETIRADA")) {
        conta = "Quando Complemento (02) contem 'TAR', Complemento (02) contem 'RETIRADA', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("BOLETO")) {
        conta = "Quando Complemento (02) contem 'TAR', Complemento (02) contem 'BOLETO', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("GARANTIA")) {
        conta = "Quando Complemento (02) contem 'TAR', Complemento (02) contem 'GARANTIA', CONTA MOVIMENTO SERA = '113719'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("AUX") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("EDUCACAO")) {
        conta = "Quando Complemento (02) contem 'AUX', Complemento (02) contem 'EDUCACAO', CONTA MOVIMENTO SERA = '114268'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMB") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ALIMENT")) {
        conta = "Quando Complemento (02) contem 'REEMB', Complemento (02) contem 'ALIMENT', CONTA MOVIMENTO SERA = '115405'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ABC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUINDASTE")) {
        conta = "Quando Fornecedor/Cliente contem 'ABC', Fornecedor/Cliente contem 'GUINDASTE', CONTA MOVIMENTO SERA = '9908955'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INFOHARD")) {
        conta = "Quando Fornecedor/Cliente contem 'INFOHARD', CONTA MOVIMENTO SERA = '9904222'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUSAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESARIAL")) {
        conta = "Quando Fornecedor/Cliente contem 'OUSAR', Fornecedor/Cliente contem 'EMPRESARIAL', CONTA MOVIMENTO SERA = '9900059'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILSON") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GAZANIGA")) {
        conta = "Quando Fornecedor/Cliente contem 'WILSON', Fornecedor/Cliente contem 'GAZANIGA', CONTA MOVIMENTO SERA = '9908584'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAS_ENTRADA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).equals("")) {
        conta = "Quando Tipo Planilha contem 'NOTAS_ENTRADA', Complemento (01) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SECRETARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("PRESTADOR")) {
        conta = "Quando Fornecedor/Cliente contem 'SECRETARIA', Fornecedor/Cliente contem 'FEDERAL', Complemento (02) contem 'PRESTADOR', CONTA MOVIMENTO SERA = '30411'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SECRETARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("FOLHA DE PAGAMENTO")) {
        conta = "Quando Fornecedor/Cliente contem 'SECRETARIA', Fornecedor/Cliente contem 'FEDERAL', Complemento (02) comeca com 'FOLHA DE PAGAMENTO', CONTA MOVIMENTO SERA = '112611'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SECRETARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("ISSQN")) {
        conta = "Quando Fornecedor/Cliente contem 'SECRETARIA', Fornecedor/Cliente contem 'FEDERAL', Complemento (02) comeca com 'ISSQN', CONTA MOVIMENTO SERA = '19791'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SECRETARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("MERROY")) {
        conta = "Quando Fornecedor/Cliente contem 'SECRETARIA', Fornecedor/Cliente contem 'FEDERAL', Complemento (02) contem 'MERROY', CONTA MOVIMENTO SERA = '30411'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SECRETARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FEDERAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("AJR ADM")) {
        conta = "Quando Fornecedor/Cliente contem 'SECRETARIA', Fornecedor/Cliente contem 'FEDERAL', Complemento (02) contem 'AJR ADM', CONTA MOVIMENTO SERA = '115891'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO POSTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIRA")) {
        conta = "Quando Fornecedor/Cliente contem 'AUTO POSTO', Fornecedor/Cliente contem 'BIRA', CONTA MOVIMENTO SERA = '9902843'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTAC")) {
        conta = "Quando Fornecedor/Cliente contem 'RP', Fornecedor/Cliente contem 'REPRESENTAC', CONTA MOVIMENTO SERA = '80093'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PLANOS") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ODONT") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("METLIFE")) {
        conta = "Quando Fornecedor/Cliente contem 'PLANOS', Fornecedor/Cliente contem 'ODONT', Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'METLIFE', CONTA MOVIMENTO SERA = '9903273'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDREA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUARTE")) {
        conta = "Quando Fornecedor/Cliente contem 'ANDREA', Fornecedor/Cliente contem 'DUARTE', CONTA MOVIMENTO SERA = '80002'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HOTEL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("HOSPED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JDB")) {
        conta = "Quando Fornecedor/Cliente contem 'HOTEL', Complemento (02) contem 'HOSPED', Fornecedor/Cliente contem 'JDB', CONTA MOVIMENTO SERA = '9909314'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("LOCACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VEIC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA DOROTEA")) {
        conta = "Quando Complemento (02) contem 'LOCACAO', Complemento (02) contem 'VEIC', Fornecedor/Cliente contem 'MARIA DOROTEA', CONTA MOVIMENTO SERA = '5000'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).equals("IOF")) {
        conta = "Quando Complemento (03) igual a 'IOF', CONTA MOVIMENTO SERA = '3730'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("JURO")) {
        conta = "Quando Complemento (02) contem 'JURO', CONTA MOVIMENTO SERA = '3694'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("I.O.F.")) {
        conta = "Quando Complemento (02) contem 'I.O.F.', CONTA MOVIMENTO SERA = '3730'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMBOLSO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DESPESA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("BRUNO")) {
        conta = "Quando Complemento (02) contem 'REEMBOLSO', Complemento (02) contem 'DESPESA', Complemento (02) contem 'BRUNO', CONTA MOVIMENTO SERA = '50008'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLUMENAU") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("ISSQ")) {
        conta = "Quando Fornecedor/Cliente contem 'MUNICIPIO', Fornecedor/Cliente contem 'BLUMENAU', Complemento (02) comeca com 'ISSQ', CONTA MOVIMENTO SERA = '19791'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONDOMINIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CARMO")) {
        conta = "Quando Fornecedor/Cliente contem 'CONDOMINIO', Complemento (02) contem 'CARMO', CONTA MOVIMENTO SERA = '113487'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUIMARAES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA") &&
        !StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMBOLSO")) {
        conta = "Quando Fornecedor/Cliente contem 'GUIMARAES', Fornecedor/Cliente contem 'COSTA', Complemento (02) nao contem 'REEMBOLSO', CONTA MOVIMENTO SERA = '50006'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO1', Complemento (04) nao contem 'CONFIRMED', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO2', Complemento (04) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_DETODOS', Complemento (03) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (04) nao contem 'COMPLETO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) {
        conta = "Quando Complemento (01) contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'REEMBOLSO', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'DINHEIRO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'VIA LOJA', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (04) nao contem 'EM BRANCO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (05) contem 'NAO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) {
        conta = "Quando Tipo Planilha contem 'PRATO', Complemento (01) contem 'PRATO', Complemento (03) nao contem 'CART', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_POLICARD', Complemento (03) contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '2', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '3', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '4', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '5', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '6', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '7', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '8', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '9', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AIQFOME1', Fornecedor/Cliente contem 'CANCELADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_STONE2', Complemento (04) contem 'CANCELAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '10', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '11', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '12', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '13', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '14', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '15', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '16', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '17', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '18', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_BMGCARD', Complemento (04) contem 'NAO', Complemento (04) contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_REDECARD3', Complemento (06) nao contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_DOM1', Complemento (04) nao contem 'ENTRADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILMAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("AUXILIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TRANSPORTE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'GILMAR', Fornecedor/Cliente contem 'OLIVEIRA', Complemento (02) contem 'AUXILIO', Complemento (02) contem 'TRANSPORTE', CONTA MOVIMENTO SERA = '112111'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILMAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RECESSO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESCOLAR")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'GILMAR', Fornecedor/Cliente contem 'OLIVEIRA', Complemento (02) contem 'RECESSO', Complemento (02) contem 'ESCOLAR', CONTA MOVIMENTO SERA = '112111'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KAUVA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CONTRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("LOCACAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALEX', Fornecedor/Cliente contem 'KAUVA', Complemento (02) contem 'CONTRATO', Complemento (02) contem 'LOCACAO', CONTA MOVIMENTO SERA = '90117'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEXSANDRA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MELLO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALEXSANDRA', Fornecedor/Cliente contem 'MELLO', Complemento (02) contem 'COMISSOES', CONTA MOVIMENTO SERA = '80049'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEREIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ITANA', Fornecedor/Cliente contem 'FERNANDES', Fornecedor/Cliente contem 'PEREIRA', Complemento (02) comeca com 'COMISS', REGRA DE FINANCIAMENTOS";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVCONSUL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INFORMATICA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'SERVCONSUL', Fornecedor/Cliente contem 'INFORMATICA', CONTA MOVIMENTO SERA = '15791'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELDER") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIAN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CONTRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("LOCACAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ELDER', Fornecedor/Cliente contem 'OLIAN', Complemento (02) contem 'CONTRATO', Complemento (02) contem 'LOCACAO', CONTA MOVIMENTO SERA = '90117'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESCOLBE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTABILIDADE")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ESCOLBE', Fornecedor/Cliente contem 'CONTABILIDADE', CONTA MOVIMENTO SERA = '82863'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRITZEN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSAO")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FRITZEN', Fornecedor/Cliente contem 'REPRESENTACAO', Complemento (02) contem 'COMISSAO', CONTA MOVIMENTO SERA = '46628'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VELOSO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'VELOSO', Fornecedor/Cliente contem 'REPRESENTACOES', Complemento (02) contem 'COMISSOES', CONTA MOVIMENTO SERA = '15370'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FAENZA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAVELLE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PICCINI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'FAENZA', Fornecedor/Cliente contem 'LAVELLE', Fornecedor/Cliente contem 'PICCINI', Complemento (02) contem 'COMISSOES', CONTA MOVIMENTO SERA = '47368'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GASALI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'GASALI', Fornecedor/Cliente contem 'REPRESENTACOES', Fornecedor/Cliente contem 'COMERCIAIS', Complemento (02) contem 'COMISSOES', CONTA MOVIMENTO SERA = '48025'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TERESA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BONATTI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'MARIA', Fornecedor/Cliente contem 'TERESA', Fornecedor/Cliente contem 'BONATTI', Complemento (02) contem 'COMISSOES', CONTA MOVIMENTO SERA = '26218'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MENDONCA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'RODRIGO', Fornecedor/Cliente contem 'ANDRE', Fornecedor/Cliente contem 'MENDONCA', Complemento (02) contem 'COMISSOES', CONTA MOVIMENTO SERA = '44088'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMILA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CECCATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERREIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'CAMILA', Fornecedor/Cliente contem 'CECCATO', Fornecedor/Cliente contem 'FERREIRA', Complemento (02) contem 'COMISSOES', CONTA MOVIMENTO SERA = '51062'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAILA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PALMEIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'MAILA', Fornecedor/Cliente contem 'PALMEIRA', Complemento (02) contem 'COMISSOES', CONTA MOVIMENTO SERA = '42109'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HENRIQUE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KAUVA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'ALEX', Fornecedor/Cliente contem 'HENRIQUE', Fornecedor/Cliente contem 'KAUVA', Complemento (02) contem 'COMISSOES', CONTA MOVIMENTO SERA = '50141'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUSTAVO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILIAN") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DELLAGOSTIN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'GUSTAVO', Fornecedor/Cliente contem 'WILIAN', Fornecedor/Cliente contem 'DELLAGOSTIN', Complemento (02) contem 'COMISSOES', CONTA MOVIMENTO SERA = '45459'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TATIANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOAVE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'TATIANA', Fornecedor/Cliente contem 'SOAVE', Complemento (02) contem 'COMISSOES', CONTA MOVIMENTO SERA = '47805'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOMES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BORBA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'GOMES', Fornecedor/Cliente contem 'BORBA', Fornecedor/Cliente contem 'REPRESENTACOES', Complemento (02) contem 'COMISSOES', CONTA MOVIMENTO SERA = '22273'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KEHL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRODUTOS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'KEHL', Fornecedor/Cliente contem 'REPRESENTACOES', Fornecedor/Cliente contem 'PRODUTOS', Complemento (02) contem 'COMISSOES', CONTA MOVIMENTO SERA = '32319'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRUNA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAQUEL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DICKEL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'BRUNA', Fornecedor/Cliente contem 'RAQUEL', Fornecedor/Cliente contem 'DICKEL', Complemento (02) contem 'COMISSOES', CONTA MOVIMENTO SERA = '45043'";
        return conta;
    }
    return conta;
}
public String getContaPortador(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAS_ENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO DO BRASIL S.A.")) {
        conta = "11211";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAS_ENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO ITAU S.A.")) {
        conta = "11711";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAS_ENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO SAFRA S.A.")) {
        conta = "11415";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAS_ENTRADA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("BANCO SAFRA S.A.")) {
        conta = "11415";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ENTRADA_CONTABILIDADE")) {
        conta = complemento04;
        return conta;
    }
    if (nomePortador.contains("001030305")) {
        conta = "11211";
        contaMovimento = "11211";
    }
    if (nomePortador.contains("001030402")) {
        conta = "11415";
        contaMovimento = "11415";
    }
    if (nomePortador.contains("SAFRA")) {
        conta = "11415";
        contaMovimento = "11415";
    }
    if (nomePortador.contains("001030412")) {
        conta = "11711";
        contaMovimento = "11711";
    }
    if (nomePortador.contains("ITAU")) {
        conta = "11711";
        contaMovimento = "11711";
    }
    if (nomePortador.contains("1030403")) {
        conta = "11211";
        contaMovimento = "11211";
    }
    if (nomePortador.contains("001030601")) {
        conta = "11211";
        contaMovimento = "11211";
    }
    if (nomePortador.contains("RH") && nomePortador.contains("CONTA") && nomePortador.contains("BB")) {
        conta = "119911";
        contaMovimento = "119911";
    }
    if (nomePortador.contains("CARTEIRA") && nomePortador.contains("17") && nomePortador.contains("BB")) {
        conta = "11211";
        contaMovimento = "11211";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BERTOLDI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) {
        conta = "9811";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAS_ENTRADA")) {
        conta = complemento01;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("NOTAS_ENTRADA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("COZINHA")) {
        conta = "14311";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ENTRADA_CONTABILIDADE")) {
        conta = complemento04;
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("EM BRANCO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO")) {
        conta = "IGNORAR";
        return conta;
    }
    return conta;
}
public String getContaPortador2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BERTOLDI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) {
        conta = "80015";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEREIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) {
        conta = "80012";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEREIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) {
        conta = "80012";
        return conta;
    }
    return conta;
}
public String getContaJuros2(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros3(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros4(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros5(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros6(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaDesconto(String contaDesconto, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaDesconto;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMulta(String contaMulta, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("cntaJuros");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMulta;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public boolean getTratarComoExtrato(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoExtrato = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoExtrato;
}
public boolean getTratarComoDesconto(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoDesconto = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoDesconto;
}
public boolean getTratarComoJuros(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoJuros = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoJuros;
}
public boolean getTratarLinhaIgnorar(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarIgnoraLinha = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarIgnoraLinha;
}
public String getTratarValorAlternativo(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoAlternativo  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoAlternativo;
}
public String getTratarComoDiv(String documento, String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoDiv  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoDiv;
}
public String getCodigoClassificacao(String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String documento   = objHistorico.optString("documento");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoClassificacao  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGRA DE CLASSIFICACAO FORNEC")) {
        retornoClassificacao = "2103";
    }
    return retornoClassificacao;
}
public String getModificaData(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoData  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoData;
}
public String getCampoFiscal(String parametro, JSONObject objHistorico) {
    String especie         = objHistorico.optString("especie");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String returnaCodigo  = "";

    return returnaCodigo.trim();
}
public int getContadorCabecalho(int contador, String line) {
    return contador;
}
public double getValorPrincipal(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorPrincipal = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("324.983")) {
        valorPrincipal = 2929.82;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("324.984")) {
        valorPrincipal = 459.65;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("1059223")) {
        valorPrincipal = 874.16;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("321782")) {
        valorPrincipal = 218.62;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("194929")) {
        valorPrincipal = 268.13;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("56506")) {
        valorPrincipal = 1312.5;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("33199")) {
        valorPrincipal = 7624.53;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("204822")) {
        valorPrincipal = 3054.42;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("17761")) {
        valorPrincipal = 1174.92;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("6905")) {
        valorPrincipal = 1124.02;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7322766")) {
        valorPrincipal = 1229.16;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7361294")) {
        valorPrincipal = 229.97;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("41501")) {
        valorPrincipal = 441.66;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7427935")) {
        valorPrincipal = 417.41;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7438098")) {
        valorPrincipal = 375.0;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("194929")) {
        valorPrincipal = 268.13;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("43887")) {
        valorPrincipal = 1347.82;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDRE") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZ") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BERTOLDI") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) {
        valorPrincipal = 1200.0;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITANA") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEREIRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) {
        valorPrincipal = 1200.0;
        return valorPrincipal;
    }
    return valorPrincipal;
}
public String getHistorico(String conta, String histParam, String tipoLancamento, String nomeOrigem, String documento, 
                           String nomePortador, String complemento01, String complemento02, String complemento03, 
                           String nomeArquivo, String codCentroCusto) {
    String historico = "";
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    historico = "" + " " + documento + " " + "_|_" + " " + nomeOrigem + " " + ""  + " " + "  CodigoHistorico:123";
    if(conta.equals("24112") || conta.equals("90012") || conta.equals("19561") || conta.equals("113644") || conta.equals("14297") || conta.equals("113437") || conta.equals("33611") || conta.equals("3651") || conta.equals("19561") || conta.equals("80000") || conta.equals("80002") || conta.equals("30411")) historico = "" + " " + complemento02 + " " + ""  + " " + ""  + " " + "  CodigoHistorico:22";
    if(conta.equals("24112") || conta.equals("90012") || conta.equals("19561") || conta.equals("113644") || conta.equals("14297") || conta.equals("113437") || conta.equals("33611") || conta.equals("3651") || conta.equals("19561") || conta.equals("80000") || conta.equals("80002") || conta.equals("30411") || conta.equals("112611") || conta.equals("19791") || conta.equals("115891")) historico = "" + " " + complemento02 + " " + ""  + " " + ""  + " " + "  CodigoHistorico:22";
    if(conta.equals("80059") || conta.equals("80060")) historico = "COMISSAO -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "  CodigoHistorico:195";
    if(conta.equals("80072") || conta.equals("80076") || conta.equals("80065") || conta.equals("80080") || conta.equals("80085") || conta.equals("80070") || conta.equals("80045") || conta.equals("80069") || conta.equals("80077") || conta.equals("80067") || conta.equals("80053") || conta.equals("80089") || conta.equals("80075") || conta.equals("80049")) historico = "COMISSAO -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "  CodigoHistorico:22";
    if(conta.equals("90108") || conta.equals("90122") || conta.equals("90116") || conta.equals("90102") || conta.equals("90027") || conta.equals("90095") || conta.equals("90114") || conta.equals("90098") || conta.equals("90115") || conta.equals("90121") || conta.equals("90119") || conta.equals("90110")) historico = "PREMIO VENDAS -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "  CodigoHistorico:195";

    return historico.replaceAll("  "," ").trim();
}
public String getRegraHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("112111"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 112111, HISTORICO = RESCISAO - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("FERIAS") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))  historico = "HISTORICO POR REGRA = Quando Complemento (02) contem FERIAS, Tipo Planilha contem MOVIMENTO, HISTORICO = FERIAS - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ENTRADA_CONTABILIDADE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LABORAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ENTRADA_CONTABILIDADE, Fornecedor/Cliente contem LABORAL, Fornecedor/Cliente contem SERVICE, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ENTRADA_CONTABILIDADE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLORICULTURA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRMAOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEYER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ENTRADA_CONTABILIDADE, Fornecedor/Cliente contem FLORICULTURA, Fornecedor/Cliente contem IRMAOS, Fornecedor/Cliente contem MEYER, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    historico = "HISTORICO POR CONTA = Quando Conta =";
    
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("ADIANTAMENTO"))  historico = "HISTORICO POR REGRA = Quando Complemento (03) contem ADIANTAMENTO, HISTORICO = ADIANTAMENTO - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB"))  historico = "HISTORICO POR REGRA = Quando Complemento (02) contem COMCOB, HISTORICO = COMISSAO - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("123111") && StringUtil.removeSpecialCharsToUC(complemento02).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 123111, Complemento (02) contem FOLHA, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("115003"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 115003, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("115420"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 115420, HISTORICO = Complemento (02) - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("19851"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 19851, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("19561"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 19561, HISTORICO = IRRF NF Documento/NF - Fornecedor/Cliente";
    
    if(conta.equals("24112") || conta.equals("90012") || conta.equals("19561") || conta.equals("113644") || conta.equals("14297") || conta.equals("113437") || conta.equals("33611") || conta.equals("3651") || conta.equals("19561") || conta.equals("80000") || conta.equals("80002") || conta.equals("30411"))  historico = "HISTORICO POR CONTA = Quando Conta = 24112;90012;19561;113644;14297;113437;33611;3651;19561;80000;80002;30411";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113458"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 113458, HISTORICO = Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4245"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4245, HISTORICO = Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(complemento02).startsWith("VT"))  historico = "HISTORICO POR REGRA = Quando Complemento (02) comeca com VT, HISTORICO = VALE TRANSPORTE - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("33611"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 33611, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("BOLSA") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTAGIO"))  historico = "HISTORICO POR REGRA = Quando Complemento (02) contem BOLSA, Complemento (02) contem ESTAGIO, HISTORICO = ESTAGIARIO Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("BOLSA") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTAGIO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("MV"))  historico = "HISTORICO POR REGRA = Quando Complemento (02) contem BOLSA, Complemento (02) contem ESTAGIO, Complemento (02) contem MV, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLUMENAU") && StringUtil.removeSpecialCharsToUC(complemento02).startsWith("ISS"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem MUNICIPIO, Fornecedor/Cliente contem BLUMENAU, Complemento (02) comeca com ISS, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNICIPIO DE BLUMENAU") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ALVARA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem MUNICIPIO DE BLUMENAU, Complemento (02) contem ALVARA, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SECRETARIA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("DARE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("1449"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem SECRETARIA, Complemento (03) contem DARE, Complemento (03) contem 1449, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113435"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 113435, HISTORICO = Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14334"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 14334, HISTORICO = Fornecedor/Cliente Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113518"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 113518, HISTORICO = Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIDAS") && StringUtil.removeSpecialCharsToUC(complemento02).contains("MULTA"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem UNIDAS, Complemento (02) contem MULTA, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AJI") && StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem AJI, Complemento (02) contem COMCOB, HISTORICO = COMISSAO - AJI COM.";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WESCHENFELDER") && StringUtil.removeSpecialCharsToUC(complemento02).contains("QUITACAO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem WESCHENFELDER, Complemento (02) contem QUITACAO, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WESCHENFELDER") && StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem WESCHENFELDER, Complemento (02) contem COMCOB, HISTORICO = COMISSAO - WESCHENFELDER";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("111148"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 111148, HISTORICO = Fornecedor/Cliente - Parcela Atual-Final";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90009") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAIXA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBSON"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 90009, Fornecedor/Cliente contem CAIXA, Fornecedor/Cliente contem ROBSON, HISTORICO = REEMBOLSO DESPESAS - ROBSON";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADREAN") && StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ADREAN, Complemento (02) contem COMISS, HISTORICO = COMISSAO - ADREAN";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALESSANDRO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DUARTE") && StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISS"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ALESSANDRO, Fornecedor/Cliente contem DUARTE, Complemento (02) contem COMISS, HISTORICO = COMISSAO - ALESSANDRO";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALESSANDRO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("DISTRIB") && StringUtil.removeSpecialCharsToUC(complemento02).contains("LUCRO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ALESSANDRO, Complemento (02) contem DISTRIB, Complemento (02) contem LUCRO, HISTORICO = DISTR. LUCROS - ALESSANDRO";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADREAN") && StringUtil.removeSpecialCharsToUC(complemento02).contains("DISTRIB") && StringUtil.removeSpecialCharsToUC(complemento02).contains("LUCRO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ADREAN, Complemento (02) contem DISTRIB, Complemento (02) contem LUCRO, HISTORICO = DISTR. LUCROS - ADREAN";
    
    if(conta.equals("90108") || conta.equals("90122") || conta.equals("90116") || conta.equals("90102") || conta.equals("90027") || conta.equals("90095") || conta.equals("90114") || conta.equals("90098") || conta.equals("90115") || conta.equals("90121") || conta.equals("90119") || conta.equals("90110"))  historico = "HISTORICO POR CONTA = Quando Conta = 90108;90122;90116;90102;90027;90095;90114;90098;90115;90121;90119;90110";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113510"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 113510, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") && StringUtil.removeSpecialCharsToUC(documento).contains("50747849"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem UNIBANCO, Documento/NF contem 50747849, HISTORICO = ARREND. MERCANTIL BCO. ITAUCARD CONTR. 5074784-9 PARCELAS DE R$ 2.981,46 TAXA 1,39% PARCELA Parcela Atual-Final";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("324.983"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem UNIBANCO, Complemento (02) contem 324.983, HISTORICO = FINAME BCO. ITAU - PARCELA Parcela Atual-Final";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("324.984"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem UNIBANCO, Complemento (02) contem 324.984, HISTORICO = FINAME BCO. ITAU - PARCELA Parcela Atual-Final";
    
    if(conta.equals("80072") || conta.equals("80076") || conta.equals("80065") || conta.equals("80080") || conta.equals("80085") || conta.equals("80070") || conta.equals("80045") || conta.equals("80069") || conta.equals("80077") || conta.equals("80067") || conta.equals("80053") || conta.equals("80089") || conta.equals("80075") || conta.equals("80049"))  historico = "HISTORICO POR CONTA = Quando Conta = 80072;80076;80065;80080;80085;80070;80045;80069;80077;80067;80053;80089;80075;80049";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14251"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 14251, HISTORICO = Documento/NF _|_ Fornecedor/Cliente";
    
    if(conta.equals("80059") || conta.equals("80060"))  historico = "HISTORICO POR CONTA = Quando Conta = 80059;80060;";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("115420") && StringUtil.removeSpecialCharsToUC(complemento02).startsWith("VERBA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 115420, Complemento (02) comeca com VERBA, HISTORICO = TITULO - PROMOCAO C/ CLIENTES";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14334"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 14334, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113292"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 113292, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("111139") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 111139, Fornecedor/Cliente contem BRASIL, Fornecedor/Cliente contem BNDES, HISTORICO = FINANCIAMENTO NF Documento/NF Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("17711"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 17711, HISTORICO = Fornecedor/Cliente Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90009") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CORPORATIVO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 90009, Fornecedor/Cliente contem CARTAO, Complemento (03) contem CORPORATIVO, HISTORICO = DESPESAS CARTAO CREDITO - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("111131") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 111131, Fornecedor/Cliente contem VOLKSWAGEN, HISTORICO = FINANCIAMENTO BCO. VOLKSWAGEN - PARCELA Parcela Atual";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("111146"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 111146, HISTORICO = DEBITO CONTA EMPRESTIMO - BCO. BRASIL";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("33611"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 33611, HISTORICO = PENSAO ALIMENTICIA - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113435"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 113435, HISTORICO = Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90003"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 90003, HISTORICO = REEMBOLSO DESPESAS - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IBAGY") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ANDREA") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ALUGUEL"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem IBAGY, Complemento (02) contem ANDREA, Complemento (02) contem ALUGUEL, HISTORICO = IBAGY IMOVEIS - ANDREA";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("114329") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ROUANET"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 114329, Complemento (02) contem ROUANET, HISTORICO = INCENTIVO A CULTURA PROJETO LIVROS DE VALOR ARTISTICO IGUAPE MARIANA MARQUEZ CARNEIRO REF. PRONAC/MECENATO REF. PRONAC 164492";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14334") && StringUtil.removeSpecialCharsToUC(complemento02).contains("PROJETO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("FIA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 14334, Complemento (02) contem PROJETO, Complemento (02) contem FIA, HISTORICO = FUNDO MUNICIPAL PARA CRIANCA E ADOLESCENTE - DEDUZIDO DO IRPJ A PAGAR - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14281") && StringUtil.removeSpecialCharsToUC(complemento02).contains("VIDA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 14281, Complemento (02) contem VIDA, HISTORICO = SEGURO VIDA - FUNCIONARIOS";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113531") && StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMB"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 113531, Complemento (02) contem REEMB, HISTORICO = REEMBOLSO TELEFONE - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("111147") && StringUtil.removeSpecialCharsToUC(documento).contains("4192"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 111147, Documento/NF contem 4192, HISTORICO = FINANCIAMENTO NF 4192 - DINAMICA MAQUINAS - PARC. Parcela Atual-Final";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("111147") && StringUtil.removeSpecialCharsToUC(documento).contains("8964"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 111147, Documento/NF contem 8964, HISTORICO = FINANCIAMENTO NFS Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("10010"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 10010, HISTORICO = ADIANTAMENTO - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14329"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 14329, HISTORICO = Fornecedor/Cliente REC. Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90014") && StringUtil.removeSpecialCharsToUC(complemento02).contains("MERROY"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 90014, Complemento (02) contem MERROY, HISTORICO = Fornecedor/Cliente - MERROY";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90014") && StringUtil.removeSpecialCharsToUC(complemento02).contains("OUSAR"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 90014, Complemento (02) contem OUSAR, HISTORICO = Fornecedor/Cliente - OUSAR";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90014") && StringUtil.removeSpecialCharsToUC(complemento02).contains("MALYBU"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 90014, Complemento (02) contem MALYBU, HISTORICO = Fornecedor/Cliente - MALYBU";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("115420") && StringUtil.removeSpecialCharsToUC(complemento02).contains("PATROCINIO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 115420, Complemento (02) contem PATROCINIO, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("115410"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 115410, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("115420") && StringUtil.removeSpecialCharsToUC(complemento02).contains("PUGNIC"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 115420, Complemento (02) contem PUGNIC, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("12111") && StringUtil.removeSpecialCharsToUC(complemento02).contains("RESCISAO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 12111, Complemento (02) contem RESCISAO, HISTORICO = RESCISAO - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113487"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 113487, HISTORICO = Complemento (02) - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90006"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 90006, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14328"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 14328, HISTORICO = Complemento (02) - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113472"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 113472, HISTORICO = PRO-LABORE - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("114080"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 114080, HISTORICO = Complemento (02) - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("114080") && StringUtil.removeSpecialCharsToUC(complemento02).contains("QUITACAO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 114080, Complemento (02) contem QUITACAO, HISTORICO = TERMO DE QUITACAO - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90009") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAUCARD"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 90009, Fornecedor/Cliente contem ITAUCARD, HISTORICO = DESPESAS CARTAO CREDITO - Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14311"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 14311, HISTORICO = Fornecedor/Cliente - Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("70002") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIMPO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COND"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 70002, Fornecedor/Cliente contem OLIMPO, Fornecedor/Cliente contem COND, HISTORICO = COND. RES. OLIMPO - ANDREA";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("31811"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 31811, HISTORICO = Fornecedor/Cliente Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("54923"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 54923, HISTORICO = DISTR. LUCROS - WILTON";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90009") && StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMB"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 90009, Complemento (02) contem REEMB, HISTORICO = REEMBOLSO DESPESAS - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90009") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIVERSOS"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 90009, Fornecedor/Cliente contem DIVERSOS, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113599"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 113599, HISTORICO = Documento/NF _|_ Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14305"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 14305, HISTORICO = Documento/NF _|_ Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90018"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 90018, HISTORICO = PREMIO - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113286"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 113286, HISTORICO = Fornecedor/Cliente Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113719"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 113719, HISTORICO = TARIFAS - CFE. EXTRATO";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAU") && StringUtil.removeSpecialCharsToUC(complemento02).contains("162792"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem ITAU, Complemento (02) contem 162792, HISTORICO = FINAME BCO. ITAU - PARCELA Parcela Atual-Final";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("123111") && StringUtil.removeSpecialCharsToUC(complemento02).contains("RESCISAO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 123111, Complemento (02) contem RESCISAO, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("70002") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ALUG") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ANDREA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 70002, Complemento (02) contem ALUG, Complemento (02) contem ANDREA, HISTORICO = COND. RES. OLIMPO - ALUGUEL ANDREA";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("80002") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDREA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 80002, Fornecedor/Cliente contem ANDREA, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("10010") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESCOLBE"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 10010, Fornecedor/Cliente contem ESCOLBE, HISTORICO = ADIANTAMENTO - WILTON NERY DUARTE";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("17711") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMERICA"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 17711, Fornecedor/Cliente contem AMERICA, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("114268"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 114268, HISTORICO = AUX EDUCACAO - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("115405"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 115405, HISTORICO = ALIMENTACAO - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9726"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 9726, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ENTRADA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ENTRADA, HISTORICO = Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4392") && StringUtil.removeSpecialCharsToUC(complemento02).contains("MERROY"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4392, Complemento (02) contem MERROY, HISTORICO = Fornecedor/Cliente - MERROY";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4392") && StringUtil.removeSpecialCharsToUC(complemento02).contains("OUSAR"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4392, Complemento (02) contem OUSAR, HISTORICO = Fornecedor/Cliente - OUSAR";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4392") && StringUtil.removeSpecialCharsToUC(complemento02).contains("MALYBU"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4392, Complemento (02) contem MALYBU, HISTORICO = Fornecedor/Cliente - MALYBU";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14328"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 14328, HISTORICO = Fornecedor/Cliente REC. Documento/NF";
    
    if(conta.equals("24112") || conta.equals("90012") || conta.equals("19561") || conta.equals("113644") || conta.equals("14297") || conta.equals("113437") || conta.equals("33611") || conta.equals("3651") || conta.equals("19561") || conta.equals("80000") || conta.equals("80002") || conta.equals("30411") || conta.equals("112611") || conta.equals("19791") || conta.equals("115891"))  historico = "HISTORICO POR CONTA = Quando Conta = 24112;90012;19561;113644;14297;113437;33611;3651;19561;80000;80002;30411;112611;19791;115891";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9903273"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 9903273, HISTORICO = Documento/NF _|_ Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5000"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5000, HISTORICO = LOCACAO VEICULO - Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("ENTRADA"))  historico = "HISTORICO POR REGRA = Quando Nome do Arquivo contem ENTRADA, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("HORAS") && StringUtil.removeSpecialCharsToUC(complemento02).contains("BOLSA") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTAGIO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("RESCISAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (02) contem HORAS, Complemento (02) contem BOLSA, Complemento (02) contem ESTAGIO, Complemento (02) contem RESCISAO, HISTORICO = Complemento (02)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TATIANA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOAVE") && StringUtil.removeSpecialCharsToUC(complemento02).contains("CONTRATO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("LOCACAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem TATIANA, Fornecedor/Cliente contem SOAVE, Complemento (02) contem CONTRATO, Complemento (02) contem LOCACAO, HISTORICO = Documento/NF | Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("THIAGO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MENESTRINA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RICARDO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem THIAGO, Fornecedor/Cliente contem MENESTRINA, Fornecedor/Cliente contem RICARDO, Complemento (02) contem COMISSOES, HISTORICO = Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("GASALI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") && StringUtil.removeSpecialCharsToUC(complemento02).contains("COMERCIAIS") && StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente comeca com GASALI, Fornecedor/Cliente contem REPRESENTACOES, Complemento (02) contem COMERCIAIS, Complemento (02) contem COMISSOES, HISTORICO = Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ENTRADA_CONTABILIDADE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem ENTRADA_CONTABILIDADE, HISTORICO = Documento/NF | Fornecedor/Cliente   INVERTECONTA";
    

    return historico.replaceAll("  "," ").trim();
}
public int getParcelaBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANC")) {
        parcelaBase = 12;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("50747849")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("324.983")) {
        parcelaBase = 47;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("324.984")) {
        parcelaBase = 47;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("1059223")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("321782")) {
        parcelaBase = 23;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("194929")) {
        parcelaBase = 23;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("56506")) {
        parcelaBase = 22;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("33199")) {
        parcelaBase = 19;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("204822")) {
        parcelaBase = 17;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("17761")) {
        parcelaBase = 15;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("6905")) {
        parcelaBase = 10;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7322766")) {
        parcelaBase = 12;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7361294")) {
        parcelaBase = 11;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("41501")) {
        parcelaBase = 10;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7427935")) {
        parcelaBase = 10;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7438098")) {
        parcelaBase = 10;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("194929")) {
        parcelaBase = 23;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("43887")) {
        parcelaBase = 31;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("50856")) {
        parcelaBase = 13;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("50857")) {
        parcelaBase = 13;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("10477")) {
        parcelaBase = 13;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("10476")) {
        parcelaBase = 13;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAUCARD") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("4192")) {
        parcelaBase = 18;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINAME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("162792")) {
        parcelaBase = 6;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("FINAME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("43887")) {
        parcelaBase = 42;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("484227")) {
        parcelaBase = 23;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("484234")) {
        parcelaBase = 23;
    }
    return parcelaBase;
}
public int getTotalParcelas(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANC")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("50747849")) {
        parcelaBase = 36;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("324.983")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("324.984")) {
        parcelaBase = 57;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("1059223")) {
        parcelaBase = 24;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("321782")) {
        parcelaBase = 48;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("194929")) {
        parcelaBase = 48;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("56506")) {
        parcelaBase = 48;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("33199")) {
        parcelaBase = 48;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("204822")) {
        parcelaBase = 48;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("17761")) {
        parcelaBase = 48;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("6905")) {
        parcelaBase = 48;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7322766")) {
        parcelaBase = 48;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7361294")) {
        parcelaBase = 48;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("41501")) {
        parcelaBase = 12;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7427935")) {
        parcelaBase = 48;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7438098")) {
        parcelaBase = 48;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("194929")) {
        parcelaBase = 48;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("43887")) {
        parcelaBase = 46;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("50856")) {
        parcelaBase = 58;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("50857")) {
        parcelaBase = 58;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("10477")) {
        parcelaBase = 58;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("10476")) {
        parcelaBase = 58;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAUCARD") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("4192")) {
        parcelaBase = 48;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINAME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("162792")) {
        parcelaBase = 60;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("FINAME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("43887")) {
        parcelaBase = 46;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("484227")) {
        parcelaBase = 58;
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("484234")) {
        parcelaBase = 58;
    }
    return parcelaBase;
}
public String getMesAnoBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String mesAnoBase = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADES") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FINANC")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("50747849")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("324.983")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("324.984")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("1059223")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("321782")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("194929")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("56506")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("33199")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("204822")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("17761")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("6905")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7322766")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7361294")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("41501")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7427935")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("7438098")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("194929")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("43887")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("50856")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("50857")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("10477")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("10476")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAUCARD") &&
        StringUtil.removeSpecialCharsToUC(documento).contains("4192")) {
        mesAnoBase = "07/2017";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAU") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINAME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("162792")) {
        mesAnoBase = "01/2018";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("FINAME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("43887")) {
        mesAnoBase = "05/2018";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("484227")) {
        mesAnoBase = "05/2018";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("FINANC") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("484234")) {
        mesAnoBase = "05/2018";
    }
    return mesAnoBase;
}
public double getTaxaTarifa(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorTaxaTarifa = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("VISTA")) {
        valorTaxaTarifa = 0.0319;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PARC")) {
        valorTaxaTarifa = 0.0379;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_VRALIMENTACAO1")) {
        valorTaxaTarifa = 0.063;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SENFF")) {
        valorTaxaTarifa = 0.04;
    }
    return valorTaxaTarifa;
}
public String getHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ENTRADA_CONTABILIDADE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LABORAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICE"))    historico = "" + documento + " | " + nomeOrigem + "   CodigoHistorico:744";  //id -> 2009122.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ENTRADA_CONTABILIDADE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLORICULTURA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRMAOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEYER"))    historico = "" + documento + " | " + nomeOrigem + "   CodigoHistorico:744";  //id -> 2009404.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TATIANA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOAVE") && StringUtil.removeSpecialCharsToUC(complemento02).contains("CONTRATO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("LOCACAO"))    historico = "" + documento + " | " + nomeOrigem + "   CodigoHistorico:123";  //id -> 2054016.00
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESCOLBE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTABILIDADE") && StringUtil.removeSpecialCharsToUC(complemento02).contains("AGROSUL") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))    historico = "" + nomeOrigem + " REC. " + documento + "   CodigoHistorico:22";  //id -> 2221665.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("QUALITY") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRESS"))    historico = "" + documento + " | " + nomeOrigem + "   CodigoHistorico:123";  //id -> 2221689.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).startsWith("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANKHYA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JIVA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INOVACAO"))    historico = "" + documento + " | " + nomeOrigem + "   CodigoHistorico:123";  //id -> 2221758.00
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVCONSUL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INFORMATICA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))    historico = "" + documento + " | " + nomeOrigem + "   CodigoHistorico:123";  //id -> 2221776.00
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("FERIAS") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO"))    historico = "FERIAS - " + nomeOrigem + "";  //id -> 2029692.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("HORAS") && StringUtil.removeSpecialCharsToUC(complemento02).contains("BOLSA") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTAGIO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("RESCISAO"))    historico = "" + complemento02 + "    CodigoHistorico:22";  //id -> 2032676.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("THIAGO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MENESTRINA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RICARDO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES"))    historico = "" + mesAnoAtual + "    CodigoHistorico:370";  //id -> 2059172.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).startsWith("GASALI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES") && StringUtil.removeSpecialCharsToUC(complemento02).contains("COMERCIAIS") && StringUtil.removeSpecialCharsToUC(complemento02).contains("COMISSOES"))    historico = "" + mesAnoAtual + "    CodigoHistorico:370";  //id -> 2059386.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPANHIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOCACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMERICAS"))    historico = "" + documento + " | " + nomeOrigem + "   CodigoHistorico:123";  //id -> 2221713.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIMED") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLUMENAU") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COOPERATIVA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRABALHO"))    historico = "" + documento + " | " + nomeOrigem + "   CodigoHistorico:123";  //id -> 2221813.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIANCA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HEUSSER"))    historico = "" + documento + " | " + nomeOrigem + "   CodigoHistorico:123";  //id -> 2221920.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FIORAVANTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DECOL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NETO"))    historico = "" + documento + " | " + nomeOrigem + "   CodigoHistorico:123";  //id -> 2222006.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARTHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GESTAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NEGOCIOS"))    historico = "" + documento + " | " + nomeOrigem + "   CodigoHistorico:123";  //id -> 2221961.00
    historico = "" + " " + documento + " " + "_|_" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:123";
    
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("ADIANTAMENTO"))  historico = "ADIANTAMENTO -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("COMCOB"))  historico = "COMISSAO -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("123111") && StringUtil.removeSpecialCharsToUC(complemento02).contains("FOLHA"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:12";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("115003"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:11";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("115420"))  historico = "" + " " + complemento02 + " " + "-" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("19851"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:10";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("19561"))  historico = "IRRF NF" + " " + documento + " " + "-" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if(conta.equals("24112") || conta.equals("90012") || conta.equals("19561") || conta.equals("113644") || conta.equals("14297") || conta.equals("113437") || conta.equals("33611") || conta.equals("3651") || conta.equals("19561") || conta.equals("80000") || conta.equals("80002") || conta.equals("30411"))  historico = "" + " " + complemento02 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113458"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:370";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4245"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:370";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("33611"))  historico = "" + " " + complemento02 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113435"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:370";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14334"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento02 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113518"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:58";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("111148"))  historico = "" + " " + nomeOrigem + " " + "-" + " " + parcelaAtualeFinal + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90009") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAIXA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBSON"))  historico = "REEMBOLSO DESPESAS - ROBSON"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if(conta.equals("90108") || conta.equals("90122") || conta.equals("90116") || conta.equals("90102") || conta.equals("90027") || conta.equals("90095") || conta.equals("90114") || conta.equals("90098") || conta.equals("90115") || conta.equals("90121") || conta.equals("90119") || conta.equals("90110"))  historico = "PREMIO VENDAS -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113510"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") && StringUtil.removeSpecialCharsToUC(documento).contains("50747849"))  historico = "ARREND. MERCANTIL BCO. ITAUCARD CONTR. 5074784-9 PARCELAS DE R$ 2.981,46 TAXA 1,39% PARCELA" + " " + parcelaAtualeFinal + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("324.983"))  historico = "FINAME BCO. ITAU - PARCELA" + " " + parcelaAtualeFinal + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIBANCO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("324.984"))  historico = "FINAME BCO. ITAU - PARCELA" + " " + parcelaAtualeFinal + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if(conta.equals("80072") || conta.equals("80076") || conta.equals("80065") || conta.equals("80080") || conta.equals("80085") || conta.equals("80070") || conta.equals("80045") || conta.equals("80069") || conta.equals("80077") || conta.equals("80067") || conta.equals("80053") || conta.equals("80089") || conta.equals("80075") || conta.equals("80049"))  historico = "COMISSAO -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14251"))  historico = "" + " " + documento + " " + "_|_" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:123";
    
    if(conta.equals("80059") || conta.equals("80060"))  historico = "COMISSAO -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("115420") && StringUtil.removeSpecialCharsToUC(complemento02).startsWith("VERBA"))  historico = "TITULO - PROMOCAO C/ CLIENTES"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14334"))  historico = "" + " " + complemento02 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113292"))  historico = "" + " " + complemento02 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("111139") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES"))  historico = "FINANCIAMENTO NF" + " " + documento + " " + "" + " " + complemento02 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("17711"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento02 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90009") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CORPORATIVO"))  historico = "DESPESAS CARTAO CREDITO -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("111131") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN"))  historico = "FINANCIAMENTO BCO. VOLKSWAGEN - PARCELA" + " " + parcelaAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("111146"))  historico = "DEBITO CONTA EMPRESTIMO - BCO. BRASIL"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("33611"))  historico = "PENSAO ALIMENTICIA -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113435"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:370";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90003"))  historico = "REEMBOLSO DESPESAS -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IBAGY") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ANDREA") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ALUGUEL"))  historico = "IBAGY IMOVEIS - ANDREA"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("114329") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ROUANET"))  historico = "INCENTIVO A CULTURA PROJETO LIVROS DE VALOR ARTISTICO IGUAPE MARIANA MARQUEZ CARNEIRO REF. PRONAC/MECENATO REF. PRONAC 164492"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14334") && StringUtil.removeSpecialCharsToUC(complemento02).contains("PROJETO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("FIA"))  historico = "FUNDO MUNICIPAL PARA CRIANCA E ADOLESCENTE - DEDUZIDO DO IRPJ A PAGAR -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14281") && StringUtil.removeSpecialCharsToUC(complemento02).contains("VIDA"))  historico = "SEGURO VIDA - FUNCIONARIOS"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113531") && StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMB"))  historico = "REEMBOLSO TELEFONE -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("111147") && StringUtil.removeSpecialCharsToUC(documento).contains("4192"))  historico = "FINANCIAMENTO NF 4192 - DINAMICA MAQUINAS - PARC." + " " + parcelaAtualeFinal + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("111147") && StringUtil.removeSpecialCharsToUC(documento).contains("8964"))  historico = "FINANCIAMENTO NFS" + " " + documento + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("10010"))  historico = "ADIANTAMENTO -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14329"))  historico = "" + " " + nomeOrigem + " " + "REC." + " " + documento + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90014") && StringUtil.removeSpecialCharsToUC(complemento02).contains("MERROY"))  historico = "" + " " + nomeOrigem + " " + "- MERROY"  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90014") && StringUtil.removeSpecialCharsToUC(complemento02).contains("OUSAR"))  historico = "" + " " + nomeOrigem + " " + "- OUSAR"  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90014") && StringUtil.removeSpecialCharsToUC(complemento02).contains("MALYBU"))  historico = "" + " " + nomeOrigem + " " + "- MALYBU"  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("115420") && StringUtil.removeSpecialCharsToUC(complemento02).contains("PATROCINIO"))  historico = "" + " " + complemento02 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("115410"))  historico = "" + " " + complemento02 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("115420") && StringUtil.removeSpecialCharsToUC(complemento02).contains("PUGNIC"))  historico = "" + " " + complemento02 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("12111") && StringUtil.removeSpecialCharsToUC(complemento02).contains("RESCISAO"))  historico = "RESCISAO -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113487"))  historico = "" + " " + complemento02 + " " + "-" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90006"))  historico = "" + " " + complemento02 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14328"))  historico = "" + " " + complemento02 + " " + "-" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113472"))  historico = "PRO-LABORE -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("114080"))  historico = "" + " " + complemento02 + " " + "-" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("114080") && StringUtil.removeSpecialCharsToUC(complemento02).contains("QUITACAO"))  historico = "TERMO DE QUITACAO -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90009") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAUCARD"))  historico = "DESPESAS CARTAO CREDITO -" + " " + complemento02 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14311"))  historico = "" + " " + nomeOrigem + " " + "-" + " " + complemento02 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("70002") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIMPO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COND"))  historico = "COND. RES. OLIMPO - ANDREA"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("31811"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento02 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:370";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("54923"))  historico = "DISTR. LUCROS - WILTON"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90009") && StringUtil.removeSpecialCharsToUC(complemento02).contains("REEMB"))  historico = "REEMBOLSO DESPESAS -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90009") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIVERSOS"))  historico = "" + " " + complemento02 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113599"))  historico = "" + " " + documento + " " + "_|_" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:123";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14305"))  historico = "" + " " + documento + " " + "_|_" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:123";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90018"))  historico = "PREMIO -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113286"))  historico = "" + " " + nomeOrigem + " " + "" + " " + complemento02 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113719"))  historico = "TARIFAS - CFE. EXTRATO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ITAU") && StringUtil.removeSpecialCharsToUC(complemento02).contains("162792"))  historico = "FINAME BCO. ITAU - PARCELA" + " " + parcelaAtualeFinal + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("123111") && StringUtil.removeSpecialCharsToUC(complemento02).contains("RESCISAO"))  historico = "" + " " + complemento02 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("70002") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ALUG") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ANDREA"))  historico = "COND. RES. OLIMPO - ALUGUEL ANDREA"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("80002") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDREA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("10010") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESCOLBE"))  historico = "ADIANTAMENTO - WILTON NERY DUARTE"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("17711") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMERICA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("114268"))  historico = "AUX EDUCACAO -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("115405"))  historico = "ALIMENTACAO -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9726"))  historico = "" + " " + complemento02 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ENTRADA"))  historico = "" + " " + documento + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:350";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4392") && StringUtil.removeSpecialCharsToUC(complemento02).contains("MERROY"))  historico = "" + " " + nomeOrigem + " " + "- MERROY"  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4392") && StringUtil.removeSpecialCharsToUC(complemento02).contains("OUSAR"))  historico = "" + " " + nomeOrigem + " " + "- OUSAR"  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4392") && StringUtil.removeSpecialCharsToUC(complemento02).contains("MALYBU"))  historico = "" + " " + nomeOrigem + " " + "- MALYBU"  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("14328"))  historico = "" + " " + nomeOrigem + " " + "REC." + " " + documento + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if(conta.equals("24112") || conta.equals("90012") || conta.equals("19561") || conta.equals("113644") || conta.equals("14297") || conta.equals("113437") || conta.equals("33611") || conta.equals("3651") || conta.equals("19561") || conta.equals("80000") || conta.equals("80002") || conta.equals("30411") || conta.equals("112611") || conta.equals("19791") || conta.equals("115891"))  historico = "" + " " + complemento02 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9903273"))  historico = "" + " " + documento + " " + "_|_" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:123";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5000"))  historico = "LOCACAO VEICULO -" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(nomeArquivo).contains("ENTRADA"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:744";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ENTRADA_CONTABILIDADE"))  historico = "" + " " + documento + " " + "|" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "INVERTECONTA" + "  CodigoHistorico:744";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra3(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra4(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra5(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra6(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (StringUtil.removeSpecialCharsToUC(contaJuros).equals("3694"))  historico = "JUROS S/" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaJuros).equals("3694") && StringUtil.removeSpecialCharsToUC(complemento02).contains("324.984"))  historico = "JUROS FINAME BCO. ITAU - PARCELA" + " " + parcelaAtualeFinal + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaJuros).equals("3694") && StringUtil.removeSpecialCharsToUC(complemento02).contains("324.983"))  historico = "JUROS FINAME BCO. ITAU - PARCELA" + " " + parcelaAtualeFinal + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:22";
    
    if (StringUtil.removeSpecialCharsToUC(contaJuros).equals("3694") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRASIL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BNDES"))  historico = "JUROS FINANCIAMENTO NF" + " " + documento + " " + "" + " " + complemento02 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    
    if (StringUtil.removeSpecialCharsToUC(contaJuros).equals("3694") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKSWAGEN"))  historico = "JUROS FINANCIAMENTO BCO. VOLKSWAGEN - PARCELA" + " " + parcelaAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getCentroCusto(String CentroCusto, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto) {
          String retornaCentroCusto = CentroCusto;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaCentroCusto;
}
public String getTabelaContabil(String TabelaContabil, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaTabelaContabil = TabelaContabil;
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaTabelaContabil;
}
public String getParticipante(String participante, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaParticipantePai = participante;
    complemento04 = "";
    complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaParticipantePai;
}
public String getFilial(String codFilial, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto, String filial) {
          String retornaFilial = codFilial;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaFilial;
}
public String getRegrasParaAcumular(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;


if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("90009") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CARTAO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CORPORATIVO")) lote = loteParam + "Cartao-Corporativo"+dataMovimento+"-"+nomeOrigem;
    
if (StringUtil.removeSpecialCharsToUC(complemento02).startsWith("COMISS")) lote = loteParam + "ACUMULO-COMISSAO"+dataMovimento+"-"+nomeOrigem;
    
if (StringUtil.removeSpecialCharsToUC(complemento03).contains("TITULO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("FOLHA")) lote = loteParam + "EVENTOS-FOLHA"+dataMovimento+"-"+nomeOrigem;
    
if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("113719")) lote = loteParam + "TARIFAS"+dataMovimento+"-"+nomePortador;
    
if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("12111")) lote = loteParam + "RESCISAO"+dataMovimento+"-"+nomeOrigem;
    
if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BLUMENAU")) lote = loteParam + "POSTO-BLUMENAU"+dataMovimento+"-"+nomePortador;
    

    return lote.trim();
}
public String getRegrasParaAcumularPortador(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String  getReplaceTermos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = "";
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (parametro.equals("complemento02")) parametro2 = parametro2.replace("|","");

    return parametro2.trim();
}
public String  getReplaceTermosAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double numeroAba  		= objHistorico.optDouble("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String  getLimpaCampos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");

    return lote.trim();
}
public String  getLimpaCamposAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String getTipoGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String graph = "";

    //feito para manter o legado sem problemas, sera sobreposto por regras! ;-)
    //tipos esperados: Column, Multiple_Column_Stacked, Multiple_Columns, Line, Multiple_Lines, Pie, Donut
    //Card refere-se ao Lucro/Prejuizo
    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    if (complemento01.startsWith("07") || complemento01.startsWith("12")) graph = "CardChart";

    if (complemento01.startsWith("01") || complemento01.startsWith("02") || complemento01.startsWith("04") || 
    	complemento01.startsWith("08") || complemento01.startsWith("09") || complemento01.startsWith("10") || 
    	complemento01.startsWith("11") || complemento01.startsWith("21"))  graph = "ColumnChart";

    if (complemento01.startsWith("15") || complemento01.startsWith("16") || complemento01.startsWith("17")) 
    	graph = "ColumnChartStacked";

    if (complemento01.startsWith("05") || complemento01.startsWith("06")) graph = "LineChart";

    if (complemento01.startsWith("18") || complemento01.startsWith("19") || complemento01.startsWith("20")) 
    	graph = "LineChartMultiple";

    if (complemento01.startsWith("03") || complemento01.startsWith("13") || complemento01.startsWith("14")) 
    	graph = "DonutChart";

    return graph;
}
public String getSimboloValor(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String simboloValor = "R$";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return simboloValor.replaceAll("Nenhum","");
}
public String getSeriesGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String series = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return series;
}
public String getTituloGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String Titulo_Grafico = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return Titulo_Grafico;
}
public String getColunaAlternativa(String parametro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String retornaColunas  = "";

    return retornaColunas.replace(",",";").trim();
}
//FINALPARAMETRIZACAOREGRAS

/*#############################################@ EXTRATO-BOTICARIO-EXCEL @##############################################*/
public HashMap readBoticario(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ ERP-BYSOFT @##############################################*/
public HashMap readBysoftIBroker(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoAbrapetite(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}


/*     Leitura de Planilha Padrao - EXTRATO AIQUEFOME

## ################################################################################################################## */
public HashMap readExtratoAiquefome(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
        
          
	return mapaVariavel;
}						
           
        


//##############################################**CARTAO ALELO CSV**#######################
public HashMap readAleloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExpressDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExtratoDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-TRIOCARD-EXCEL @##############################################*/
public HashMap readCartaoAme(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-BENVISA-EXCEL @##############################################*/
public HashMap readCartaoBenVisaExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-BIN-EXCEL @##############################################*/
public HashMap readCartaoBinExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


/*#############################################@ CARTAO-BONUS-EXCEL @##############################################*/
public HashMap readExtratoBonus(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ EXTRATO-CABAL-EXCEL @##############################################*/
public HashMap readCartaoCabal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}

/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcardExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


/*#############################################@ CARTAO-CARREFOUR-EXCEL @##############################################*/
public HashMap readCartaoCarrefour(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCielo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   
    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

 
    return mapaVariavel;
}

public HashMap readCartaoCieloRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

 
    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartao_Cielo_Simples_Sem_Bandeira(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoCooper(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
      
    return mapaVariavel;
}


/*#############################################@ CARTAO-SANTANDERCREDITO-EXCEL @##############################################*/
public HashMap readCartaoCreditoSantander(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ CARTAO-ELAVON-EXCEL @##############################################*/
public HashMap readExtratoElavon(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ CARTAO-FIDELIDADE-EXCEL @##############################################*/
public HashMap readCartaoFidelidade(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  

    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   
    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNetRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
	
    return mapaVariavel;
}



/*#############################################@ CARTAO-GOODCARD-EXCEL @##############################################*/
public HashMap readExtratoGoodcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   return mapaVariavel;
}



/*#############################################@ CARTAO-GREENCARD-EXCEL @##############################################*/
public HashMap readCartaoGreenCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-IFOOD-EXCEL @##############################################*/
public HashMap readExtratoIFood(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}



/*#############################################@ EXTRATO-LIV-PDF @##############################################*/
public HashMap readCartaoLivPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public HashMap readExtratoMagaLU(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-MASTERFARMA-EXCEL @##############################################*/
public HashMap readCartaoMasterFarma(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-MERCADOLIVRE-EXCEL @##############################################*/
public HashMap readCartaoMercadoLivre(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-MOOZ-EXCEL @##############################################*/
public HashMap readCartaoMoozCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public HashMap readExtratoNetshoes(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoNutricard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readCartaoNutricardPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public HashMap readExtratoPagarME(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	return mapaVariavel;
}


/*#############################################@ CARTAO-PAGSEGURO-EXCEL @##############################################*/
public HashMap readExtratoPagSeguro(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-PAGUECOM-EXCEL @##############################################*/
public HashMap readPaguecomCSV(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}


/*#############################################@ CARTAO-POLICARD-EXCEL @##############################################*/
public HashMap readCartaoPoliCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardNovoPadrao(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDeb(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardCred(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	

    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
	return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefaultNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}

/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardTxt(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
			   
   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-SAFRA-CSV @##############################################*/
public HashMap readCartaocSafraCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}


/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenff(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenffLayout2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagFluxoCaixa(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}

/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipag(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  
    return mapaVariavel;
}
/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  
    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoSodexo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ EXTRATO-STELO-EXCEL @##############################################*/
public HashMap readCartaoSteloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

	return mapaVariavel;
}


/*#############################################@ CARTAO-STONE-EXCEL @##############################################*/
public HashMap readExtratoStone(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-SUMUP-EXCEL @##############################################*/
public HashMap readCartaoSumup(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

    return mapaVariavel;
}


/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicketNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicket(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-TRIOCARD-EXCEL @##############################################*/
public HashMap readCartaoTrioCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   

   return mapaVariavel;
}


 /*     Leitura de Planilha Padrao - EXTRATO UBEREATS

        ## ################################################################################################################## */
        public HashMap readExtratoUbereats(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
        
           
				 return mapaVariavel;
            }


/*#############################################@ EXTRATO-VALECARD-PDF @##############################################*/
public HashMap readExtratoValeCardPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

   return mapaVariavel;
}


/*#############################################@ CARTAO-VRALIMENTACAO-TXT @##############################################*/
public HashMap readExtratoVRAlimentacao(String lineParam, MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}



/*#############################################@ ERP-CITEL @##############################################*/
public HashMap readCitelSoftwareFrmRelCtrTit(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

   return mapaVariavel;
}


public HashMap readErpDetalhamentoSispagItau(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readErpFolhaAlterdataProgresso(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readErpFolhaDominio(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readErpFolhaWk(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoAbcExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    
    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoABCPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoAilosCiviaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public HashMap readExtrato_ApliBB_PDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
	return mapaVariavel;
}


public boolean readExtratoArbiExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
 }


/*#############################################@ EXTRATO-ASAAS-EXCEL @##############################################*/
public boolean readExtratoAsaasExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoAsaasPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBancoDaycovalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


/*#############################################@ EXTRATO-BANCONORDESTE-EXCEL @##############################################*/
public boolean readExtratoBancoNordesteExcel(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBancoPaulistaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBanesePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BANESTE-EXCEL @##############################################*/
public boolean readExtratoBanesteDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   


   return true;
}


/*#############################################@ EXTRATO-BANPARA-EXCEL @##############################################*/
public boolean readExtratoBanpara(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoBanparaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

	return true;
}


public boolean readExtratoBanrisulPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   
    return true;
}


/*#############################################@ EXTRATO-BANRISUL-TXT @##############################################*/
public boolean readExtratoBANRISULDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


//####################################################################################################################################
//									EXTRATO BBM PDF
//####################################################################################################################################

public boolean readExtratoBBMPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    
    return true;
}


	
/*#############################################@ EXTRATO-BBM-TXT @##############################################*/
public boolean readExtratoBBMTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBancoBrasilExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BBFINANCIAMENTOS-EXCEL @##############################################*/
public boolean readExtratoBancoDoBrasilFinanciamentos(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	
    return true;
}


public boolean readExtratoBancoDoBrasilPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

  

  return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
    return true;
}


public boolean readExtratoBIBPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBKBankPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBMGExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoBMGPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



/*#############################################@ EXTRATO-BMPMONEYPLUS-EXCEL @##############################################*/
public boolean readExtratoBMPMoneyPlusExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratBradesco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();

     
    return true;
}


/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBRADESCODefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}

/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBradescoDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   

    return true;
}


public boolean readExtratBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BRADESCO-TXT @##############################################*/
public boolean readExtratoBradescoTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	return true;
}


/*#############################################@ EXTRATO-BRASILIA-EXCEL @##############################################*/
public boolean readExtratoBrasiliaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


//####################################################################################################################################
//									EXTRATO BRB PDF
//####################################################################################################################################

public boolean readExtratoBRBPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBS2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBSCashPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoBTGExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoBtgPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoC6BankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-TOPAZIO-EXCEL @##############################################*/
public boolean readExtratoC6Excel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


/*#############################################@ EXTRATO-CEF-EXCEL @##############################################*/
public boolean readExtratoCEFExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}
 


/*#############################################@ EXTRATO-CEF-HTML @##############################################*/
public boolean readExtratoCEFHtml(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



public boolean readExtratoCaixaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}

/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


//CONVERSOR ANTIGO

public boolean readExtratoCiviaPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}



/*#############################################@ EXTRATO-CONTASIMPLES-EXCEL @##############################################*/
public boolean readExtratoContaSimplesExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}



/*#############################################@ EXTRATO-CONTASIMPLES-PDF @##############################################*/
public boolean readExtratoContaSimplesPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}


public boolean readExtratoCoraExcel(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoCoraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-CREDISAN-EXCEL @##############################################*/
public boolean readExtratoCredisanExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
    return true;
	
}


public boolean readExtratoCredisanPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   
    return true;
}


public boolean readExtratoCredisisPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoCrehnorPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


/*#############################################@ EXTRATO-CRESOL-EXCEL @##############################################*/
public boolean readExtratoCresolExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoCresolPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
	return true;
}


/*#############################################@ EXTRATO-DAYCOVAL-EXCEL @##############################################*/
public boolean readExtratoDaycoval(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

	return true;
}


public boolean readExtratoEfiExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoEfiPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	  return true;
}


/*#############################################@ EXTRATO-EWALLY-EXCEL @##############################################*/
public boolean readExtratoEwallyExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


		
		/*#############################################@ EXTRATO-Fibra-EXCEL @##############################################*/
public boolean readExtratoFibraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
    return true;
}


public boolean readExtratoFibraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}



public HashMap readExtratoFolhaSageExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
     

    return mapaVariavel;
}

public HashMap readExtratoFolhaSageExcelv2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
     

    return mapaVariavel;
}








public boolean readExtratoGrafenoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
 }


public boolean readExtratoGrafenoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoGuanabaraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-HDT-EXCEL @##############################################*/


//#2312-024479 By Leal

public boolean readExtratoHDTExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoHSBCExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	

    return true;
}


public boolean readExtratoHSBCPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


		
		/*#############################################@ EXTRATO-INDUSTRIAL-EXCEL @##############################################*/
public boolean readExtratoIndustrialExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoInfinitePayPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoInterPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
 
     
    return true;
}


public boolean readExtratoItauConsolidadoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
    return true;
}


/*#############################################@ EXTRATO-ITAU-EXCEL @##############################################*/
public boolean readExtratoItauDefault(MemoryFile memFile, String anoData, String tipoExtrato, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


public boolean readExtratoItauPdfInterno(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}

public boolean readExtratoItauPdfInterno2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-ITAU-TXT @##############################################*/
public boolean readExtratoItauTXT(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


/*#############################################@ EXTRATO-JUNO-EXCEL @##############################################*/
public boolean readExtratoJunoDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoLinkerPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoMercadoPagoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratoMercadoPagoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoMercantilPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoMovilepayPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoNBCPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoNextPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


public boolean readExtratoNordestePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoNubankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoOmieCashPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

	return true;
}


//#############################################@ EXTRATO-ORIGINAL-EXCEL @##############################################/

public boolean readExtratoOriginalExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}



/*#############################################@ EXTRATO-ORIGINAL-PDF @##############################################*/
public boolean readExtratoOriginalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}


public boolean readExtratoOteroBankExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoPagbankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoPagPixBankPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoPagseguroExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


				
		/*#############################################@ EXTRATO-PAULISTA-EXCEL @##############################################*/
public boolean readExtratoPaulistaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoPaybrokersPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


public boolean readExtratoPinkPayPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoPlannerPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoPoupeCrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-SAFRA-EXCEL @##############################################*/
public boolean readExtratoSafraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

  
  return true;
}



public boolean readExtratoSafraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
 
    return true;
}


/*#############################################@ EXTRATO-SANTANDER-EXCEL @##############################################*/
public boolean readExtratoSantanderDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratSantanderPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	
    return true;
}


/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
   
    return true;
}

/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


public boolean readExtratoSicoobCapitalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public HashMap readExtratoSicoobConveniosPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public boolean readExtratSicoobPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	
    return true;
}


/*#############################################@ EXTRATO-SICOOB-TXT @##############################################*/
public boolean readExtratoSicoobTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	return true;
}


/*#############################################@ EXTRATO-SICREDI-EXCEL @##############################################*/

public boolean readExtratoSicrediDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

    return true;
}


public boolean readExtratoSicrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-SICREDI-TXT @##############################################*/
public boolean readExtratoSicrediTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


/*#############################################@ EXTRATO-SISPRIME-EXCEL @##############################################*/
public boolean readExtratoSisprimeXLSX(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}



public boolean readExtratoSisprimePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - SOFISA
## ################################################################################################################## */
public boolean readExtratoSofisaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    
    return true;
}


//####################################################################################################################################
//									EXTRATO BBM PDF
//####################################################################################################################################

public boolean readExtratoSofisaPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
  
    return true;
}


public boolean readExtratoSquidExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoSquidPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-STONE-EXCEL @##############################################*/
public boolean readExtratoStoneExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoStonePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoSulcrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


/*#############################################@ EXTRATO-target-EXCEL @##############################################*/
public boolean readExtratoTargetExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}



public boolean readExtratoTargetPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-TOPAZIO-EXCEL @##############################################*/
public boolean readExtratoTopazioExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


public boolean readExtratoTransfeeraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


/*#############################################@ EXTRATO-TRIBANCO2-PDF @##############################################*/
public boolean readExtratoTribanco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

	return true;
}


/*#############################################@ EXTRATO-TRIBANCO-EXCEL @##############################################*/
public boolean readExtratoTribancoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


/*#############################################@ EXTRATO-TRIBANCO-PDF @##############################################*/
public boolean readExtratoTribancoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


public boolean readExtratoUBPPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


//####################################################################################################################################
//									EXTRATO UNICRED2 PDF
//####################################################################################################################################

public boolean readExtratoUnicred2PDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}


/*#############################################@ EXTRATO-UNICRED-EXCEL @##############################################*/
public boolean readExtratoUnicredDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

 

	return true;
}


//####################################################################################################################################
//									EXTRATO UNICRED PDF
//####################################################################################################################################

public boolean readExtratoUnicredPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}

public boolean readExtratoUnicred3PDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}


/*#############################################@ EXTRATO-UNICRED-TXT @##############################################*/
public boolean readExtratoUNICREDTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


/*#############################################@ EXTRATO-UNIPRIME-EXCEL @##############################################*/
public boolean readExtratoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

    return true;
}



//####################################################################################################################################
//									EXTRATO UNIPRIME PDF
//####################################################################################################################################

public boolean readExtratoUniprimePDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}


/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoBancoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}

/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoUniprimeTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoViacredi(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratoViacrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



public boolean readExtratoVotorantim2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


		
/*#############################################@ EXTRATO-Votorantim-EXCEL @##############################################*/
public boolean readExtratoVotorantimExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoVotorantimPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}

public boolean readExtratoVotorantim3PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoXPInvestimentosExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratoXPInvestimentosPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}

public boolean readExtratoXPInvestimentos2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BRADESCO-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BanrisulPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

	return mapaVariavel;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BB-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BBPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BRADESCO-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BradescoPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public HashMap readFaturaCartaoCredito_Itau_Excel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

	
	return mapaVariavel;
}


public HashMap readFaturaCartaoCredito_ItauPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

	
	return mapaVariavel;
}


public HashMap readFaturaCartaoCredito_SicoobPDFF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}



//#2307-009642 - Leal

public HashMap readFrancesinhaBradescoPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}




public HashMap readFrancesinhaCresolPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public HashMap readFrancesinhagrupoAilosPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readExtratoItauCsvFrancesinha(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}



public HashMap readExtratoItauPdfFrancesinha(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}

public HashMap readExtratItauPdfFrancesinha2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readFrancesinhaSafraPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


public HashMap readFrancesinhaSantanderPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}



public HashMap readFrancesinhaSicoobPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}



public HashMap readFrancesinhaSicrediExcel (MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public HashMap readFrancesinhaSicrediPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readFrancesinhaSisprimeExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


//2312-024960
public HashMap readFrancesinhaUnicrediPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


public HashMap readFrancesinhaBanrisulTXT(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readFrancesinha_BBPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


public HashMap readFrancesinha_BradescoXLSX (MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readFrancesinha_BradescoExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public HashMap readFrancesinha_CefPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ ERP-INTERFOC @##############################################*/
public HashMap readInterfocGenesysMCP002(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

	return mapaVariavel;
}


public boolean readInvestimentoBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public HashMap readPosto_Ravanello(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ ERP-LINX @##############################################*/

public HashMap readLinx_AutoSystem_ExtratoBancario(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ ERP-LINX @##############################################*/
public HashMap readLinx_AutoSystem_ContasPagas(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ ERP-LINX @##############################################*/
public HashMap readLinx_AutoSystem_MovimentacaoContas(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}

/*#############################################@ ERP-LINX @##############################################*/
public HashMap readLinx_AutoSystem_Recebimentos(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ ERP-SOFTPHARMA @##############################################*/
public HashMap readLinxSoftpharmaFCPA200(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}


public HashMap readNotasCorretagemXP(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ ERP-PROSYST @##############################################*/
public HashMap readProsystPR00308(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}

/*#############################################@ ERP-PROSYST @##############################################*/
public HashMap readProsystPR00428(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}

/*#############################################@ ERP-PROSYST @##############################################*/
public HashMap readProsystPRX004815(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}




/*#############################################@ EXTRATO-UNICRED-EXCEL @##############################################*/
public boolean readExtratoUnicredDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

    return true;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readSantanderRET(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readSicoobComprovantesPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ ERP-SINDISOFT @##############################################*/
public HashMap readSindiSoft(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}


/*#############################################@ ERP-SISJURIS @##############################################*/
public HashMap readSisjuriBCSFinanceiro(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ ERP-SISPLAN @##############################################*/
public HashMap readSisplanSistemaPlanejamento(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
	
    return mapaVariavel;
}


/*#############################################@ ERP-SYSTEXTIL @##############################################*/
public HashMap readSystextil(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

	return mapaVariavel;
}


public boolean readExtratoValoriBankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public HashMap readFaturaCartaoCredito_InterPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
	return mapaVariavel;
}


public boolean readExtratoPinBankPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoStarBankPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public HashMap readFaturaCartaoCredito_SantanderPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
	return mapaVariavel;
}

