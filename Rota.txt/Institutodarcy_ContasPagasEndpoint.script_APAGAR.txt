{import: io_contabil.Database};
{import: io_contabil.RegrasSemCartoes};
{import: io_contabil.Duplicatas};
{import: io_contabil.Util};

// TEMPLATE 20.07.2020
public JSONArray run(InoutLogger logger) throws Exception {

    JSONArray  records  = new JSONArray();
    JSONObject ultimoJS = new JSONObject();

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    JSONObject roteiroCRMPrincipal = getRoteiro();
    JSONObject roteiroCRM = getRoteiro();
    JSONObject jStatus = new JSONObject();

    JSONObject objetoRoteiro = new JSONObject();
    objetoRoteiro.put("contabilidade", roteiroCRM.optString("contabilidade"));
    props.load("contabil/" + roteiroCRM.optString("contabilidade") + "/contabil.properties");

    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;
	DBPostgreSQL dbIODepara = null;

    String empresa = getNomeEmpresa();
    String codEmpresa = props.get(empresa + "_COD_EMPRESA");
    String ERPContabil = props.get("ERP_CONTABILIDADE");
    String nomeEmpresa = props.get(empresa + "_NOME_EMPRESA");
    String cnpjEmpresa = props.get(empresa + "_CNPJ_EMPRESA");
    String emailResponsavel = props.get(empresa + "_EMAIL_RESPONSAVEL");
    String emailCanal = props.get("EMAIL_CANAL");
	String statusCRM = props.get(empresa + "_STATUS_CRM"); 
	
    String tipoLancamento = getNomeRota();
    if (tipoLancamento.toUpperCase().contains("PAGAS"))    tipoLancamento = "PAGAR";
    if (tipoLancamento.toUpperCase().contains("RECEBIDA")) tipoLancamento = "RECEBER";


    String compDirName = nomeEmpresa + "_#" + codEmpresa;
    String dirName = "";
    if (tipoLancamento.contains("PAGAR"))   dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/APagar";
    if (tipoLancamento.contains("RECEBER")) dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/AReceber";


    String backupDirName = dirName + "/Processado";

    boolean erroShrink = false;
    boolean geraCabecalhoCordilheira = true;
    boolean cabecalhoNaoEncontrada        = true;
    boolean apagaExtrato        = false;
    boolean geraRegraPortador   = false;
    boolean comparaRazao        = false;
    String tipoEmail            = "";

    HashMap mapaVariavel		= new HashMap();
    HashMap mapaLote			= new HashMap();
    HashMap mapaDePara			= new HashMap();
    HashMap mapaOficial			= new HashMap();
	HashMap mapaDesconto		= new HashMap();
	HashMap mapaJuros   		= new HashMap();
	HashMap mapaPlano   		= new HashMap();
	HashMap mapaParcelaDominio	= new HashMap();
	HashMap mapaFornecedor 		= new HashMap();
	HashMap mapaPartPlano 		= new HashMap();

	JSONObject recordF = new JSONObject();


    String cruzaExtrato			= "";
    String Cruza_Extrato_com_Extrato = "";
    String mesAnoAnterior		= "";
    String mesAno2Anterior		= "";
    String mesAnoAtual			= "";
    int mesRef					= 0;
    int anoRef					= 0;
    String contaJuros			= "";
    String contaDesconto		= "";
    String contaMulta			= "";
    String contaTransitoria		= "";
    String contaEmpresaBranco	= "";
    String movimentoPortador	= "";
    String contaFixaDebito		= "";
    String contaFixaCredito		= "";
    String contaPortador		= "";		//pg - cred | rec - deb
    String contaMovimento		= "";		//pg - deb | rec - cred
    String tabelaContabil       = "";
    String dataMovimento        = "";
    String classificaPlano      = "";
    String classificaFornec     = "";

    boolean geraFiscal			= false;
    String loteFiscal			= "";
	boolean apagaStatus         = false;

    String Conta_Fixa_Cruzamento_Extrato = "";
    String contaInvertida	= "";
    String contaBuscaPlano	= "";
    String nomeArquivo      = "";
    String chave			= "";
    String classificacao	= "";
    String dataLote			= DateUtil.dateToString(new Date(),"yyyy-MM");
    String lote				= "";
    boolean enviouEmail 	= false;
    String regraContaMovimento 		= "";
    String regraHistorico 			= "";
    String separadorCsv				= "";
    String tipoPlanilha				= "";
	String contaTemp				= "";
    boolean primeiroArquivo 		= true;
    boolean primeiraVezDuplicata	= true;
	boolean acumulouAntes			= false;
	boolean leuFinanceiro			= false;
	boolean dupliNaoEncontContabil	= false;
	
	JSONObject deParaObj = new JSONObject();

    try {

		// #DOCUMENTACAO
		// FOR leitura dos arquivos das extensoes abaixo
		// altera-se aqui para NAO LER xlsx por exemplo
		
        String extensao = "";
        for(int extArquivo = 0; extArquivo < 40; extArquivo++){
            if(extArquivo == 0) extensao = ".ofx,.OFX";
            if(extArquivo == 1) extensao = ".ofx,.OFX";
            if(extArquivo == 3) extensao = ".ofx,.OFX";
            if(extArquivo == 4) extensao = ".ofx,.OFX";
            if(extArquivo == 5) extensao = ".ofx,.OFX";
            if(extArquivo == 6) extensao = ".ofx,.OFX";
            if(extArquivo == 7) extensao = ".ofx,.OFX";
            if(extArquivo == 8) extensao = ".ofx,.OFX";
            if(extArquivo == 9) extensao = ".ofx,.OFX";
            if(extArquivo == 10) extensao = ".ofx,.OFX";
            if(extArquivo == 11) extensao = ".ofx,.OFX";
            if(extArquivo == 12) extensao = ".ofx,.OFX";
            if(extArquivo == 13) extensao = ".ofx,.OFX";
            if(extArquivo == 14) extensao = ".ofx,.OFX";
            if(extArquivo == 15) extensao = ".ofx,.OFX";
            if(extArquivo == 16) extensao = ".ofx,.OFX";
            if(extArquivo == 17) extensao = ".ofx,.OFX";
            if(extArquivo == 18) extensao = ".ofx,.OFX";
            if(extArquivo == 19) extensao = ".ofx,.OFX";
            if(extArquivo == 20) extensao = ".csv,.CSV";
            if(extArquivo == 21) extensao = ".csv,.CSV";
            if(extArquivo == 22) extensao = ".csv,.CSV";
            if(extArquivo == 23) extensao = ".xlsx,.XLSX";
            if(extArquivo == 24) extensao = ".xlsx,.XLSX";
            if(extArquivo == 25) extensao = ".xlsx,.XLSX";
            if(extArquivo == 26) extensao = ".xlsx,.XLSX";
            if(extArquivo == 27) extensao = ".xlsx,.XLSX";
            if(extArquivo == 28) extensao = ".xlsx,.XLSX";
            if(extArquivo == 29) extensao = ".xlsx,.XLSX";
            if(extArquivo == 30) extensao = ".xlsx,.XLSX";
            if(extArquivo == 31) extensao = ".xlsx,.XLSX";
            if(extArquivo == 32) extensao = ".xlsx,.XLSX";
            if(extArquivo == 33) extensao = ".xlsx,.XLSX";
            if(extArquivo == 34) extensao = ".txt,.TXT";
            if(extArquivo == 35) extensao = ".txt,.TXT";
            if(extArquivo == 36) extensao = ".txt,.TXT";
            if(extArquivo == 37) extensao = ".pdf,.PDF";
            if(extArquivo == 38) extensao = ".pdf,.PDF";
            if(extArquivo == 39) extensao = ".pdf,.PDF";


            for (int porAba = 0; porAba < 60; porAba++) {



				// #DOCUMENTACAO
				// tratamento de abas vindas do CRM
                String apagaArquivo		= backupDirName;
                String abasEspecificas	= roteiroCRMPrincipal.optString("Abas_Especificas");
                abasEspecificas 		= abasEspecificas.replace(",",";");
				
				// tratar js.put("Abas_Especificas", "0-60");
				// grande numero de abas pode travar o nosso sistema
				//String abasFor			= "";
				//if (abasEspecificas.contains("-") && abasEspecificas.length() <= 7) {
				//	try {
				//		int a = Integer.parseInt(abasEspecificas.substring(0,abasEspecificas.indexOf("-")));
				//		int b = Integer.parseInt(abasEspecificas.substring(abasEspecificas.indexOf("-")+1));
				//		for (int k = a; k <= b; k++){
				//			if (k < b) abasFor += k+";";
				//			else abasFor += k;
				//		}
				//	} catch (Exception fr) {}
				//	if(!abasFor.equals("")) abasEspecificas = abasFor;
				//}

				
                if (abasEspecificas.equals("")) {
                    if (porAba > 0) break;
                }
                if (!abasEspecificas.equals("")) {
                    if (!abasEspecificas.contains(String.valueOf(porAba))) {
                        continue;
                    }

                    String ultimaAba = abasEspecificas;
                    if (ultimaAba.contains(";")) ultimaAba = ultimaAba.substring(ultimaAba.lastIndexOf(";")+1).trim();
                    if (!ultimaAba.equals(String.valueOf(porAba)) && extensao.contains(".XLSX")) apagaArquivo = null;
                }

				// #DOCUMENTACAO
				// auto ajuste do separador de CSV
                if(extensao.contains("CSV")){
                    FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
                    fileLoader2.loadFiles();
                    for (MemoryFile memFile: fileLoader2.getMemFiles()) {
                        if(memFile.getFilename().startsWith("OK_DeParaConta__")) importaDePara(memFile, dirName, extensao, logger);
                        if (memFile.getFilename().toUpperCase().contains("CSV")) {
                            while (memFile.hasNextLine()) {
                                try {
                                    String line = memFile.nextLine();
                                    line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
                                    if (line.length() < 10) continue;
                                    String [] fields1 = line.split(";");
                                    String [] fields2 = line.split(",");
                                    if(fields1.length > 0 && fields2.length > 0){
                                        if(fields1.length < fields2.length) { separadorCsv = ","; break; }
                                        if(fields1.length > fields2.length) { separadorCsv = ";"; break; }
                                    }
                                }
                                catch(Exception xx) {}
                            }
                            break;
                        }
                    }
                }

				// #DOCUMENTACAO
				// carregamento do arquivo
                FilesLoader fileLoader = new FilesLoader(dirName, extensao, apagaArquivo, true, logger);
                int[] abas = {porAba};
                fileLoader.setSheetsToRead(abas);
                fileLoader.loadFiles();

                for (MemoryFile memFile: fileLoader.getMemFiles()) {

                    putStatus(dirName, "01--Etapa 1 de 4--" + tipoLancamento + ".status", jStatus, logger);

                    // =======================  =================   =======================
                    // =======================  VARIAVEIS PADROES   =======================
                    // =======================  =================   =======================
                    String historico      = "";

                    String codCcOrigem    = "";
                    String cpfCnpj        = "";
                    String nomeOrigem     = "";
                    String nomePortador   = "";
                    String nomePortador2  = "";
                    String documento      = "";
                    int    parcelaDoc     = 1;
                    double valorDocumento = 0.00;
                    double valorPagamento = 0.00;
                    double valorDesconto  = 0.00;
                    double valorJuros     = 0.00;
                    double valorMulta     = 0.00;
					double valorAlternativo = 0;
					
                    int icodCcOrigem    = -1;
                    int icpfCnpj        = -1;
                    int inomeOrigem     = -1;
                    int inomePortador   = -1;
                    int idocumento      = -1;
                    int idataMovimento  = -1;
                    int ivalorDocumento = -1;
                    int ivalorAlternativo = -1;
                    int ivalorPagamento = -1;
                    int ivalorDesconto  = -1;
                    int ivalorJuros     = -1;
                    int ivalorMulta     = -1;
                    int icomplemento01  = -1;
                    int icomplemento02  = -1;
                    int icomplemento03	= -1;
                    int icomplemento04  = -1;
                    int icomplemento05	= -1;
                    int icomplemento06	= -1;
                    int icomplemento07	= -1;
                    int icomplemento08	= -1;
                    int icomplemento09	= -1;
                    int icomplemento10	= -1;
                    int idataFake		= -1;

                    String contaGetConta	= "";
                    contaPortador	= "";		//pg - cred | rec - deb
                    contaMovimento	= "";		//pg - deb | rec - cred


                    String complemento01	= "";
                    String complemento02	= "";
                    String complemento03	= "";
                    String complemento04	= "";
                    String complemento05	= "";
                    String complemento06	= "";
                    String complemento07	= "";
                    String complemento08	= "";
                    String complemento09	= "";
                    String complemento10	= "";
                    String codCentroCusto	= "";
                    String codFilial        = "";

                    double valorTotalDoc	= 0.0;
                    double valorTotalJuros	= 0.0;
                    double valorTotalDesc	= 0.0;

                    String classJur			= "";
                    String classDes			= "";
                    String classMul			= "";

                    String codErroString	= "";
                    int cont				= 0;
                    String linhasProblema	= "";
                    String idEmpresa        = "";
                    String idRoteiro  	    = "";

                    String histAux			= "";
                    String anoData			= "";
                    boolean zerar			= true;
					boolean filtro			= true;

                    String lerAposPrincipal   = "";
                    boolean isLinhaPrincipal  = false;
                    boolean ignorarAntes	  = false;
                    boolean tratarComoExtrato = false;
					boolean tratarComoDesconto = false;
					boolean tratarComoJuros = false;

					dataMovimento        = "";


					// #DOCUMENTACAO
					// definicao de separador do arquivo
					// se ouver separador em TXT deve ser tratado caso a caso
					// evitar usar tabulacao como separador 
                    if(extensao.contains(".xlsx,.XLSX")) memFile.setFieldSeparator("\\|");
                    if(extensao.contains(".pdf,.PDF"))   memFile.setFieldSeparator("\\|");
                    if(extensao.contains(".csv,.CSV"))	 memFile.setFieldSeparator(separadorCsv);
					
					//nao pode usar o line contem  ';' pois nao existe line neste ponto ainda.
					if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && roteiroCRM.optString("erpContabilidade").contains("DOMINIO")) {
						if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(";");
					}
					
                    nomeArquivo = memFile.getFilename().replace("%","");


					// #DOCUMENTACAO
					// conecta ao BANCO DE DADOS
                    if (dbIOCont == null) {
                        dbIOCont = connectIOContabil(props, logger);
                    }

					if (dbIODepara == null) {
                        dbIODepara = connectDeParaDb(logger);
                    }
					
                    if(primeiroArquivo) {
                        limparIORoteiro(codEmpresa, tipoLancamento, dbIOCont, logger);
                        primeiroArquivo = false;
                    }

                    //########################################################################

                    contaJuros		    = roteiroCRM.optString("contaFixaJuros");
                    contaFixaCredito    = roteiroCRM.optString("contaFixaCredito");
                    contaFixaDebito     = roteiroCRM.optString("contaFixaDebito");
                    contaDesconto 	    = roteiroCRM.optString("contaFixaDesconto");
                    contaMulta		    = roteiroCRM.optString("contaFixaMulta");
                    idEmpresa      	    = roteiroCRM.optString("idEmpresa");
                    idRoteiro   	    = roteiroCRM.optString("idRoteiro");
                    movimentoPortador   = roteiroCRM.optString("movimentoPortador");
                    classificaPlano     = roteiroCRM.optString("classificaPlano");
                    classificaFornec    = roteiroCRM.optString("classificaFornec");
                    cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
                    Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo

                    tipoPlanilha = "MOVIMENTO";
                    boolean enviaEmailExtrato = false;
                    boolean naoLeMais = false;

                    tipoEmail = "CLIENTE";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZA"))  tipoEmail = "CANAL";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZAF")) tipoEmail = "SUPORTE";

                    String debitoCredito   		 = "";
                    String chaveExtrato    		 = "";


                    //if(roteiroCRM.has("contaBuscaPlano"))contaBuscaPlano = roteiroCRM.optString("contaBuscaPlano");

                    //########################################################################

                    // COLOCAR AQUI funcao para carregar variaveis do cliente
                    // CNPJ, EMAIL, contas fixas, etc.


                    // =======================  ========================   =======================
                    // =======================  VARIAVEIS PERSONALIZADAS   =======================
                    // =======================  ========================   =======================


                    JSONObject objetoParametro = new JSONObject();

					// #DOCUMENTACAO
					// busca de indices da planilha principal
                    if (tipoPlanilha.equals("MOVIMENTO")) {
                        roteiroCRM = getRoteiro();

                        inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
						idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
						inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
						idocumento      = getIndice("documento", idocumento, roteiroCRM);
						ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
						ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
						ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
						ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
						icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
						ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
						ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
						icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
						icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
						icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
						icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
						icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
						icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
						icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
						icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
						icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
						icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
						idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
						icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);
						
						zerar 			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
                    }

					jStatus = new JSONObject();
					putStatus(dirName, "", jStatus, logger);
					try{
						// #DOCUMENTACAO
						// leitura linha a linha
						while (memFile.hasNextLine()) {

							try {
								String line = memFile.nextLine();
								line = StringUtil.removeSpecialCharsToUC(line);

								if (cont < 10)  putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", jStatus, logger);    



								////////////////////////////////////////////////////////////////////////////////
								///////////////////////////////////////////////////////////// INICIO DOS PADROES
								////////////////////////////////////////////////////////////////////////////////


								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
								//LEITURA PADRAO ARQUIVOS .OFX
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								if (nomeArquivo.toUpperCase().contains(".OFX")) {
									tipoPlanilha = "EXTRATO-OFX";     putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", new JSONObject(), logger);
									JSONObject jDados = new JSONObject();
									jDados.put("CODEMPRESA", codEmpresa);
									jDados.put("TIPOLANCAMENTO", tipoLancamento);
									jDados.put("NOMEEMPRESA",    nomeEmpresa);
									jDados.put("NOMEARQUIVO",    nomeArquivo);
									if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) jDados.put("CHECKNUM", "CHECKNUM");	//usar para retornar o documento do OFX no complemento02
									readOFXDefault(memFile, jDados, dbIOCont, logger);
									jStatus = new JSONObject();
									putStatus(dirName, "", jStatus, logger);
									break;
								} // Fim  -> Captura de Dados quando Tipo Planilha -> ".OFX"
								// ----------------------------------------------------------------------------------------------------------

								if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null) {
                                // if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && porAba == 0) { // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

                                       // ----------------------------------------------------------------------------------------------------------
									JSONObject variaveis = new JSONObject();
									variaveis.put("line", 			line);
									variaveis.put("anoData", 		anoData); 
									variaveis.put("dirName", 		dirName);
									variaveis.put("jStatus", 		jStatus);
									variaveis.put("extensao", 		extensao);
									variaveis.put("codEmpresa", 	codEmpresa);
									variaveis.put("nomeArquivo", 	nomeArquivo);
									variaveis.put("nomeEmpresa", 	nomeEmpresa);
									variaveis.put("nomePortador", 	nomePortador);
									variaveis.put("tipoPlanilha", 	tipoPlanilha);
									variaveis.put("complemento01", 	complemento01);
									variaveis.put("complemento02", 	complemento02);
									variaveis.put("nomePortador2", 	nomePortador2);
									variaveis.put("tipoLancamento", tipoLancamento);
									
									String retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);
                                    JSONObject objRetorno = new JSONObject(retornaPadroes);
                                    if (objRetorno.has("tipoRetorno")) {
                                        anoData        = objRetorno.optString("anoData");
                                        retornaPadroes = objRetorno.optString("tipoRetorno");
                                        nomePortador   = objRetorno.optString("nomePortador").trim();
                                        complemento01  = objRetorno.optString("complemento01").trim();
                                        nomePortador2  = objRetorno.optString("nomePortador2").trim();
                                    } 
									if (retornaPadroes.equals("continue")) continue;
									if (retornaPadroes.equals("break"))   {
										jStatus = new JSONObject();
										putStatus(dirName, "", jStatus, logger);
										break;
									}
                                }

								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
								//                      LEITURA PADRAO DE DUPLICATAS
								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
								if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE")){

                                    JSONObject jDados               = new JSONObject();

                                    jDados.put("erpContabilidade",  roteiroCRM.optString("erpContabilidade"));
                                    jDados.put("CODEMPRESA",        codEmpresa);
                                    jDados.put("NOMEARQUIVO",       nomeArquivo);
                                    jDados.put("LINE",              line);
                                    jDados.put("PRIMEIRAVEZ",       primeiraVezDuplicata);   jDados.put("DIRNAME",      		dirName);
                                    jDados.put("TIPOPLANILHA",      tipoPlanilha);
                                    jDados.put("TIPOLANCAMENTO",    tipoLancamento);
                                    
                                    primeiraVezDuplicata = leituraDuplicataPadrao(jDados, memFile, mapaVariavel, dbIOCont, logger);

                                    if(!primeiraVezDuplicata){
                                        jStatus = new JSONObject();
									    putStatus(dirName, "", jStatus, logger);
                                        break;
                                    }
								} 
								// ----------------------------------------------------------------------------------------------------------

								////////////////////////////////////////////////////////////////////////////////
								//////////////////////////////////////////////////////////////// FIM DOS PADROES
								////////////////////////////////////////////////////////////////////////////////
								
								// #DOCUMENTACAO
								// lipeza de variaveis e de indices ao mudar de TIPOPLANILHA
								JSONObject jDadosObj = new JSONObject();
								if(!tipoPlanilha.equals(getTipoPlanilha(line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj))){
									inomeOrigem			= -1;		nomeOrigem		= "";
									idataMovimento		= -1;		dataMovimento	= "";
									inomePortador		= -1;		nomePortador	= "";
									idocumento			= -1;		documento		= "";
									icpfCnpj			= -1;		cpfCnpj			= "";
									icodCcOrigem		= -1;       codCcOrigem		= "";
									icomplemento01		= -1;      	complemento01	= "";
									icomplemento02		= -1;      	complemento02	= "";
									icomplemento03		= -1;      	complemento03	= "";
									icomplemento04		= -1;      	complemento04	= "";
									icomplemento05		= -1;      	complemento05	= "";
									icomplemento06		= -1;      	complemento06	= "";
									ivalorDocumento		= -1;		complemento07	= "";
									ivalorAlternativo	= -1;		complemento08	= "";
									ivalorJuros			= -1;		complemento09	= "";
									ivalorDesconto		= -1;		complemento10	= "";
									ivalorMulta			= -1;
									ivalorPagamento		= -1;
									idataFake			= -1;
								}
								// #DOCUMENTACAO
								// busca tipoplanilha e indices da planilhas secundarias
								tipoPlanilha = getTipoPlanilha(line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj);
								if(!tipoPlanilha.equals("MOVIMENTO")){
									roteiroCRM = buscaRoteiro("getRoteiro"+tipoPlanilha, logger);
									inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
									idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
									inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
									idocumento      = getIndice("documento", idocumento, roteiroCRM);
									ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
									ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
									ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
									ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
									icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
									ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
									ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
									icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
									icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
									icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
									icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
									icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
									icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
									icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
									icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
									icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
									icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
									idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
									icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);
									
									zerar			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
                                    
                                    // Em casos onde a planilha secund?ria precisa de uma aba espec?fica descomentar essa linha
                                    // if(!roteiroCRM.optString("Abas_Especificas").contains(String.valueOf(porAba))) continue;

								}


								// #DOCUMENTACAO
								// tratamento de "Agrupar Colunas Excel" e "Agrupar a partir da coluna"
								 
                                try {
                                    fazerShrinkDelimitandoPosicoes(roteiroCRM, memFile);
                                } catch (IllegalArgumentException e) {
                                    //TODO: handle exception
                                    erroShrink = true;
                                    logger.logError("Deu ruim no shrink \n"+e);
                                    break;
                                }
								/////////////////////////////
								// VALIDACAO POR CABECALHO //
								/////////////////////////////

								inomeOrigem		= getIndiceCabecalho("nomeOrigem", inomeOrigem, memFile, roteiroCRM);
								idataMovimento	= getIndiceCabecalho("dataMovimento", idataMovimento, memFile, roteiroCRM);
								inomePortador	= getIndiceCabecalho("nomePortador", inomePortador, memFile, roteiroCRM);
								idocumento		= getIndiceCabecalho("documento", idocumento, memFile, roteiroCRM);
								ivalorDocumento	= getIndiceCabecalho("valorDocumento", ivalorDocumento, memFile, roteiroCRM);
								ivalorJuros		= getIndiceCabecalho("valorJuros", ivalorJuros, memFile, roteiroCRM);
								ivalorDesconto	= getIndiceCabecalho("valorDesconto", ivalorDesconto, memFile, roteiroCRM);
								ivalorMulta		= getIndiceCabecalho("valorMulta", ivalorMulta, memFile, roteiroCRM);
								ivalorAlternativo = getIndiceCabecalho("valorAlternativo", ivalorAlternativo, memFile, roteiroCRM);
								ivalorPagamento	= getIndiceCabecalho("valorPagamento", ivalorPagamento, memFile, roteiroCRM);
								icodCcOrigem	= getIndiceCabecalho("codCcOrigem", icodCcOrigem, memFile, roteiroCRM);
								
								icomplemento01	= getIndiceCabecalho("complemento01", icomplemento01, memFile, roteiroCRM);
								icomplemento02	= getIndiceCabecalho("complemento02", icomplemento02, memFile, roteiroCRM);
								icomplemento03	= getIndiceCabecalho("complemento03", icomplemento03, memFile, roteiroCRM);
								icomplemento04	= getIndiceCabecalho("complemento04", icomplemento04, memFile, roteiroCRM);
								icomplemento05	= getIndiceCabecalho("complemento05", icomplemento05, memFile, roteiroCRM);
								icomplemento06	= getIndiceCabecalho("complemento06", icomplemento06, memFile, roteiroCRM);
								icomplemento07	= getIndiceCabecalho("complemento07", icomplemento07, memFile, roteiroCRM);
								icomplemento08	= getIndiceCabecalho("complemento08", icomplemento08, memFile, roteiroCRM);
								icomplemento09	= getIndiceCabecalho("complemento09", icomplemento09, memFile, roteiroCRM);
								icomplemento10	= getIndiceCabecalho("complemento10", icomplemento10, memFile, roteiroCRM);
								idataFake		= getIndiceCabecalho("dataFake", idataFake, memFile, roteiroCRM);
								icpfCnpj		= getIndiceCabecalho("cpfCnpj", icpfCnpj, memFile, roteiroCRM);
								
								isLinhaPrincipal = false;
								ignorarAntes = false;

								JSONObject histobj = new JSONObject();
								lerAposPrincipal = roteiroCRM.optString("lerAposPrincipal").toUpperCase();

								// #DOCUMENTACAO
								// ignorar antes
								if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO")) {

									histobj.put("nomeOrigem", getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger));
									histobj.put("documento", getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger));
									histobj.put("complemento01", getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger));
									histobj.put("complemento02", getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger));
									histobj.put("complemento03", getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger));
									histobj.put("complemento04", getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger));
									histobj.put("complemento05", getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger));
									histobj.put("complemento06", getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger));
									histobj.put("nomePortador", getCampoString(nomePortador,	inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger));
									histobj.put("dataMovimento", "");
									histobj.put("mesAnoAnterior", "");
									histobj.put("mesAno2Anterior", "");
									histobj.put("mesAnoAtual", "");
									histobj.put("contaMovimento", "");
									histobj.put("contaPortador", "");
									histobj.put("contaDebito", "");
									histobj.put("contaCredito", "");
									histobj.put("contaJuros", contaJuros);
									histobj.put("contaDesconto", contaDesconto);
									histobj.put("contaMulta", contaMulta);
									histobj.put("valorDocumento", "");
									histobj.put("valorJuros", "");
									histobj.put("valorDesconto", "");
									histobj.put("valorMulta","");
									histobj.put("codFilial", "");
									histobj.put("numeroAba", String.valueOf(porAba));
									histobj.put("tipoPlanilha", tipoPlanilha);
									histobj.put("nomeArquivo", nomeArquivo.toUpperCase());

									ignorarAntes = getTratarLinhaIgnorar(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento,
																		 getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger),
																		 getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger), histobj);

									if (ignorarAntes) continue;

									double valorValido = 0;
									try{valorValido = Math.abs(memFile.getDoubleField(ivalorDocumento));}
									catch (Exception vlrd) { valorValido = 0; }

									if(ivalorDocumento < 0 && ivalorPagamento >= 0){
										try{valorValido = Math.abs(memFile.getDoubleField(ivalorPagamento));}
										catch (Exception vlrd) { valorValido = 0; }
									}


									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&  valorValido > 0) isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !histobj.optString("nomeOrigem").equals("")) isLinhaPrincipal = true;

								}

								if (naoLeMais) continue;
								if (tipoPlanilha.equals("")) continue;


								// #DOCUMENTACAO
								// leitura de xlsx e csv
								if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || (!roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA ("))) {
									zerar 			  = !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());

                                    // #Fabrica(2019-05-20)
                                    try{
                                        dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
                                        dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                    }catch(Exception e){
                                        // dataMovimento   = "";
                                        // dataLote        = "";
                                    }
                                   
                                    // leitura de data mantida por seguranca
									// String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger).trim();
									// if (!dataString.equals("")) {
									// 	String dataMovimentoAux	  = getCampoDate(dataString);
									// 	if (dataMovimentoAux.contains("/")) {
									// 		dataMovimento     = getCampoDate(dataString);
									// 		dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
											
									// 	}
									// }

									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals("")) isLinhaPrincipal = true;
									if (tipoPlanilha.equals("MOVIMENTO")) {
                                        if (line.contains("TRANSACOES") && line.contains("CONTA")) continue;
                                        if (nomePortador.equals(""))
									        nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger);
                                    }
									if (!tipoPlanilha.equals("MOVIMENTO")) {
									    nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger);
                                    }
									nomeOrigem = "";
									
									nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger);
									
									if (tipoPlanilha.equals("MOVIMENTO")) nomeOrigem = nomeOrigem + " - " + nomePortador;
									
									documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger);

									complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);
									complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, logger);
									cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, logger);
									codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, logger);

									historico		= "";
									parcelaDoc      = 1;

									valorDocumento	= 0;
									valorJuros		= 0;
									valorDesconto	= 0;
									valorMulta		= 0;
									valorPagamento	= 0;
									
									debitoCredito 	= "";
									valorAlternativo = 0;
									
									if(ivalorJuros >=0){
										try{valorJuros = Math.abs(memFile.getDoubleField(ivalorJuros));}
										catch (Exception vlrj) { valorJuros = 0;}
									}
									if(ivalorDesconto >=0){
										try{valorDesconto = Math.abs(memFile.getDoubleField(ivalorDesconto));}
										catch(Exception vlrd) {valorDesconto = 0;}
									}
									if(ivalorMulta >=0){
										try{valorMulta = Math.abs(memFile.getDoubleField(ivalorMulta));}
										catch(Exception vlrm) {valorMulta = 0;}
									}
									
									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if(ivalorDocumento >=0){
										try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
										catch (Exception vlrd) { valorDocumento = 0; }
									}
									
									if(ivalorPagamento >=0){
										try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
										catch(Exception vlrp) {valorPagamento = 0;}
									}
									
									if(ivalorAlternativo >= 0){
										try{valorAlternativo = memFile.getDoubleField(ivalorAlternativo);}
										catch (Exception vlrd) { valorAlternativo = 0; }
									}
                                    
                                    if (tipoLancamento.equals("PAGAR"))
                                        debitoCredito = "EXTRATO-DEBITO";
                                    
                                    if (tipoLancamento.equals("RECEBER"))
                                        debitoCredito = "EXTRATO-CREDITO";
                                

                                    // fazer regra quando tiver valor documento e alternativo na mesma coluna
									String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
									if (!tratarComoValorAlternativo.equals("")) {											
										if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
										if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                        if(ivalorAlternativo >= 0) valorDocumento = valorAlternativo;
									}else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes	
										if(valorDocumento == 0 && ivalorAlternativo >= 0){		
											if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
											if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
											valorDocumento = valorAlternativo;
										}
									}

									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if(ivalorDocumento < 0 && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}
									if(valorDocumento>0 && ivalorJuros < 0 && ivalorDesconto < 0 && valorPagamento > 0){
										if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
										if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
									}

									valorDocumento = Math.abs(valorDocumento);
									
									// ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&  valorDocumento > 0) isLinhaPrincipal = true;
									
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&
										lerAposPrincipal.equals("") && valorDocumento == 0) {
										continue;
									}
								}

								// #DOCUMENTACAO
								// leitura de TXT
								if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && roteiroCRM.optString("dataMovimento").endsWith(")")) {
									
									String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, roteiroCRM, logger).trim();
									if (!dataString.equals("") && dataString.contains("/")) {
										String dataMovimentoAux	  = getCampoDate(dataString);
										if (dataMovimentoAux.contains("/")) {
											dataMovimento     = getCampoDate(dataString);
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
											// continue;
										}
									}

									nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, roteiroCRM, logger);
									nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, roteiroCRM, logger);
									documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, roteiroCRM, logger);

									complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, roteiroCRM, logger);
									complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, roteiroCRM, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, roteiroCRM, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, roteiroCRM, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, roteiroCRM, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, roteiroCRM, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, roteiroCRM, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, roteiroCRM, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, roteiroCRM, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, roteiroCRM, logger);
									cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, roteiroCRM, logger);
									codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, 	line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, roteiroCRM, logger);

									// // comentado em 20200603
									// String dataString = getStringTXT(roteiroCRM.optString("dataMovimento").toUpperCase(), line, objetoParametro).trim();
									// dataMovimento	  = getCampoDate(dataString);
									// dataLote		  = getCampoDate(dataString, "", "yyyy-MM");

									// complemento01 = getStringTXT(roteiroCRM.optString("complemento01").toUpperCase(), line, objetoParametro);
									// complemento02 = getStringTXT(roteiroCRM.optString("complemento02").toUpperCase(), line, objetoParametro);
									// complemento03 = getStringTXT(roteiroCRM.optString("complemento03").toUpperCase(), line, objetoParametro);
									// complemento04 = getStringTXT(roteiroCRM.optString("complemento04").toUpperCase(), line, objetoParametro);
									// complemento05 = getStringTXT(roteiroCRM.optString("complemento05").toUpperCase(), line, objetoParametro);
									// complemento06 = getStringTXT(roteiroCRM.optString("complemento06").toUpperCase(), line, objetoParametro);
									// complemento07 = getStringTXT(roteiroCRM.optString("complemento07").toUpperCase(), line, objetoParametro);
									// complemento08 = getStringTXT(roteiroCRM.optString("complemento08").toUpperCase(), line, objetoParametro);
									// complemento09 = getStringTXT(roteiroCRM.optString("complemento09").toUpperCase(), line, objetoParametro);
									// complemento10 = getStringTXT(roteiroCRM.optString("complemento10").toUpperCase(), line, objetoParametro);
									// cpfCnpj		  = getStringTXT(roteiroCRM.optString("cpfCnpj").toUpperCase(), line, objetoParametro);

									// nomePortador  = getStringTXT(roteiroCRM.optString("portador").toUpperCase(), line, objetoParametro);
									// documento     = getStringTXT(roteiroCRM.optString("documentoNF").toUpperCase(), line, objetoParametro);
									// codCcOrigem   = getStringTXT(roteiroCRM.optString("centroCusto").toUpperCase(), line, objetoParametro);
									// nomeOrigem    = getStringTXT(roteiroCRM.optString("fornecedor").toUpperCase(), line, objetoParametro);

									valorDocumento = getDoubleTXT2020(roteiroCRM.optString("valorDocumento").toUpperCase(), line, objetoParametro);
									valorJuros	   = getDoubleTXT2020(roteiroCRM.optString("valorJuros").toUpperCase(), line, objetoParametro);
									valorDesconto  = getDoubleTXT2020(roteiroCRM.optString("valorDesconto").toUpperCase(), line, objetoParametro);
									valorMulta 	   = getDoubleTXT2020(roteiroCRM.optString("valorMulta").toUpperCase(), line, objetoParametro);
									valorPagamento = getDoubleTXT2020(roteiroCRM.optString("valorPagamento").toUpperCase(), line, objetoParametro);

                                    if (tipoLancamento.equals("PAGAR")) 
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
                                            debitoCredito = "EXTRATO-DEBITO";
                                    
                                    if (tipoLancamento.equals("RECEBER")) 
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
                                            debitoCredito = "EXTRATO-CREDITO";

                                    // fazer regra quando tiver valor documento e alternativo na mesma coluna
                                    String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
                                    if (!tratarComoValorAlternativo.equals("")) {											
                                        if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                        if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")) valorDocumento = valorAlternativo;
                                    }else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes	
                                        if(valorDocumento == 0 && roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")){		
                                            if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                            if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                            valorDocumento = valorAlternativo;
                                        }
                                    }

                                    if(!roteiroCRM.optString("valorDocumento").toUpperCase().contains("COLUNA") && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}
									if(valorDocumento > 0 && !roteiroCRM.optString("valorJuros").toUpperCase().contains("COLUNA") && !roteiroCRM.optString("valorDesconto").toUpperCase().contains("COLUNA") && valorPagamento > 0){
										if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
										if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
									}

									valorDocumento = Math.abs(valorDocumento);

									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals(""))  isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && valorDocumento > 0)		  isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !nomeOrigem.equals("")) isLinhaPrincipal = true;
								}


								// #DOCUMENTACAO
								// mes ano anterior 
								if(dataMovimento.length() > 9){
									mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
									anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
									mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
								}
								//---~---~---~---~---~---~-


								//##########################################################

								// #DOCUMENTACAO
								// filtro de datas (parametro definido por integracao no CRM, e informado a cada processamento de arquivos)
								if (nomeArquivo.toUpperCase().contains("FILTRO_")) filtro = validaFiltro(nomeArquivo, dataMovimento);
								if (!filtro) continue;

								valorTotalDoc   += valorDocumento;
								valorTotalJuros += valorJuros;
								valorTotalDesc  += valorDesconto;

								if (documento.contains(".") && documento.contains("E")) {
									documento = removerNotacaoCientificaExcel(documento);
								}
								
								// #DOCUMENTACAO
								// cpfCnpj
								boolean aceitaCpf			= true;
								boolean cnpjSomenteNumeros	= Boolean.parseBoolean(roteiroCRM.optString("cnpjSomenteNumeros").toLowerCase().trim());

								if(!cpfCnpj.equals("")) cpfCnpj = trataCpfCnpj(cpfCnpj, cnpjSomenteNumeros, aceitaCpf);
								
								// if(!cpfCnpj.equals("")){	//20200528 #codigopavoroso
									// if(Boolean.parseBoolean(roteiroCRM.optString("cnpjSomenteNumeros").toLowerCase().trim())){
										// if(!aceitaCpf)	cpfCnpj = trataCpfCnpj(cpfCnpj, true, false);
										// else			cpfCnpj = trataCpfCnpj(cpfCnpj);
									// }
									// if(!Boolean.parseBoolean(roteiroCRM.optString("cnpjSomenteNumeros").toLowerCase().trim())){
										// if(!aceitaCpf)	cpfCnpj = trataCpfCnpj(cpfCnpj, false, false);
										// else			cpfCnpj = trataCpfCnpj(cpfCnpj, false, true);
									// }
								// }

								// #DOCUMENTACAO
								// ajustes fornecedor/cliente e portador
								if (nomeOrigem.equals("") && !roteiroCRM.optString("lerAposPrincipal").toUpperCase().contains("FORNECEDOR")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
								nomeOrigem = nomeOrigem.trim();
								nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").trim();
								nomeOrigem = stringNormalizer(nomeOrigem, true);
								
								if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();
								nomePortador = nomePortador.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").trim();
								nomePortador = stringNormalizer(nomePortador, true);
								
								if(dataMovimento.equals("")) continue;
								// quando for ler linha principal zerar as variaveis que vem depois da principal para nao sobrepor campos.
								if(isLinhaPrincipal) {
									// #DOCUMENTACAO
									// cont define que eh um novo lancamento (normalmente uma nova linha)
									cont++;

									if (lerAposPrincipal.contains("FORNECEDOR"))	nomeOrigem = "";
									if (lerAposPrincipal.contains("DOCUMENTO"))		documento = "";
									if (lerAposPrincipal.contains("PORTADOR")) 		nomePortador = "";
									if (lerAposPrincipal.contains("COMPLEMENTO01")) complemento01 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO02")) complemento02 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO03")) complemento03 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO04")) complemento04 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO05")) complemento05 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO06")) complemento06 = "";

								}
								if(cont == 0) continue;

								histobj.put("nomeOrigem", nomeOrigem);					histobj.put("documento", documento);
								histobj.put("complemento01", complemento01);			histobj.put("complemento02", complemento02);
								histobj.put("complemento03", complemento03);			histobj.put("complemento04", complemento04);
								histobj.put("complemento05", complemento05);			histobj.put("complemento06", complemento06);
								histobj.put("complemento07", complemento07);			histobj.put("complemento08", complemento08);
								histobj.put("complemento09", complemento09);			histobj.put("complemento10", complemento10);
								histobj.put("dataMovimento", dataMovimento);			histobj.put("mesAnoAnterior", mesAnoAnterior);
								histobj.put("mesAno2Anterior", mesAno2Anterior);		histobj.put("mesAnoAtual", mesAnoAtual);
								histobj.put("nomePortador", nomePortador);				histobj.put("contaMovimento", contaMovimento);
								histobj.put("contaPortador", contaPortador);	   		histobj.put("contaDebito", "");
								histobj.put("contaCredito", "");						histobj.put("contaJuros", contaJuros);
								histobj.put("contaDesconto", contaDesconto);			histobj.put("contaMulta", contaMulta);
								histobj.put("valorDocumento", valorDocumento);			histobj.put("tipoPlanilha", tipoPlanilha); 
								histobj.put("valorJuros", valorJuros);   				histobj.put("valorDesconto", valorDesconto);
								histobj.put("valorMulta", valorMulta); 				    histobj.put("codFilial", codFilial);
								histobj.put("nomeArquivo", nomeArquivo.toUpperCase()); // foi ajustado 
								
								// #DOCUMENTACAO
								// TRATA PLANILHA OU LANCAMENTO EXPECIFICO COMO EXTRATO
								tratarComoExtrato = getTratarComoExtrato(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
                                nomeOrigem = nomeOrigem.replaceAll("  ", " ").trim();
								if (tratarComoExtrato) {
                                    if (nomeOrigem.length() > 199) nomeOrigem = cutString(nomeOrigem, 0, 180); // #Fabrica(2019-10-03) @Becker
									JSONObject jDados = new JSONObject();
									jDados.put("PORTADOR",    		nomePortador);
									jDados.put("EMPRESA",     		codEmpresa);
									jDados.put("DATAMOVIMENTO",	 	dataMovimento);
									jDados.put("NOMEARQUIVO",       debitoCredito+nomeArquivo.toUpperCase()); // #DOCUMENTACAO EVITA PROBLEMA DE TRANSFERENCIAS NO MESMO ARQUIVO
									jDados.put("NOMEORIGEM",    	nomeOrigem);
									jDados.put("VALORDOCUMENTO",    valorDocumento);
									jDados.put("COMPLEMENTO01",     complemento02);
									jDados.put("DEBITO-CREDITO",    debitoCredito);
									jDados.put("CONT",  			String.valueOf(cont));
									boolean primExtrato = insertIOExtrato(jDados, dbIOCont, logger );
									jStatus = new JSONObject();
									putStatus(dirName, "", jStatus, logger);
									continue;									
								}
								
								debitoCredito = ""; // zera aqui para n?o confundir com extratos bancarios.


								// #DOCUMENTACAO
								// trata lancamento como juros (de outro lancamento)
								complemento10 = "";
								tratarComoJuros = getTratarComoJuros(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								if (tratarComoJuros) {
									complemento10 = dataMovimento + "-" + documento + "-JUROS";
									ttJuros ttJ    = (ttJuros)mapaJuros.get(complemento10);
									if (ttJ == null) {
										ttJ  = new ttJuros();
										ttJ.documento  = documento;
										ttJ.valorJur   = valorDocumento;
										ttJ.valorLido  = 0;
									}
									mapaJuros.put(complemento10,ttJ);
									continue;
								}

								// #DOCUMENTACAO
								// trata lancamento como desconto (de outro lancamento)
								tratarComoDesconto = getTratarComoDesconto(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								if (tratarComoDesconto) {
									complemento10  = dataMovimento + "-" + documento + "-DESCONTO";
									ttDesconto ttD    = (ttDesconto)mapaDesconto.get(complemento10);

									if(valorDocumento == 0) continue;

									if (ttD == null) {
										ttD  = new ttDesconto();
										ttD.documento  = documento;
										ttD.valorDesc  = valorDocumento;
										ttD.valorLido  = 0;
									}
									mapaDesconto.put(complemento10,ttD);
									continue;
								}

								int restoLinha = 0;
								restoLinha = (cont % 100);
								if (restoLinha == 0) putStatus(dirName, "02--Etapa 2 de 4 - " + String.valueOf(cont) + "--" + tipoLancamento + ".status", jStatus, logger);


								String contLinhaTexto = String.valueOf(cont);
								contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
								String consolidaClass = StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;

								classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;
								
								//alterado para evitar problemas de lote (maiusculo)
								lote = (nomeEmpresa + "_" + codEmpresa + "__" + nomeArquivo  + "__" + dataLote + "_" + tipoLancamento).replaceAll("\\." , "");
								chave = lote + "-" + String.valueOf(porAba) + "-" + contLinhaTexto;
                                // lote = nomeEmpresa + "_" + codEmpresa + "_" + nomeArquivo  + "_" + dataLote + "_" + tipoLancamento;

								if(chave.length() > 200)  chave = chave.substring(0, 199);
								
								// #DOCUMENTACAO
								////////////////////////////////////////////////////////////// ACUMULA ANTES
								histobj.put("nomeOrigem", nomeOrigem);
								histobj.put("documento", documento);
								histobj.put("complemento01", complemento01);
								histobj.put("complemento02", complemento02);
								histobj.put("complemento03", complemento03);
								histobj.put("complemento04", complemento04);
								histobj.put("complemento05", complemento05);
								histobj.put("complemento06", complemento06);
								histobj.put("nomePortador", nomePortador);
								histobj.put("dataMovimento", dataMovimento);
								histobj.put("mesAnoAnterior", mesAnoAnterior);
								histobj.put("mesAno2Anterior", mesAno2Anterior);
								histobj.put("mesAnoAtual", mesAnoAtual);
								histobj.put("valorDocumento", valorDocumento);
								histobj.put("valorJuros", valorJuros);
								histobj.put("valorDesconto", valorDesconto);
								histobj.put("valorMulta",valorMulta);
								histobj.put("tipoPlanilha", tipoPlanilha);
								histobj.put("nomeArquivo", nomeArquivo.toUpperCase());
								
								String testeChave = getRegrasParaAcumular(lote, chave, tipoLancamento, documento, nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
								if(testeChave.toUpperCase().contains("ACUMULAANTES") || testeChave.toUpperCase().contains("ACUMULARANTES")) {
									chave = testeChave;
									if(chave.length() > 180) chave = cutString(chave, 0, 179);
									acumulouAntes = true;
								}
								////////////////////////////////////////////////////////////////////////////////////
								String key = chave  + "-CTB";
								nomeOrigem = nomeOrigem.replaceAll("  "," ").trim();

								
								// #DOCUMENTACAO
								// insere numa tabela temporaria
								ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
								if (ttMov2 == null) {
									ttMov2 = new ttMovimentoPadrao();
									ttMov2.lote              = lote;
									ttMov2.codEmpresa        = codEmpresa;
									ttMov2.nomeEmpresa       = nomeEmpresa;
									ttMov2.dataMovimento     = dataMovimento;
									ttMov2.tipoMovimento     = "CTB";
									ttMov2.tipoLancamento    = tipoLancamento;
									ttMov2.historico         = historico;
									ttMov2.contaJuros        = contaJuros;
									ttMov2.contaMulta        = contaMulta;
									ttMov2.contaDesconto     = contaDesconto;
									ttMov2.centroCusto       = codCcOrigem;
									ttMov2.cpfCnpj           = cpfCnpj;
									ttMov2.chave             = chave + "-CTB";
									ttMov2.classificacao     = classificacao;
									ttMov2.codFilial         = codFilial;
									ttMov2.complemento07     = complemento07;
									ttMov2.complemento08     = complemento08;
									ttMov2.complemento09     = complemento09;
									ttMov2.complemento10     = complemento10;
									ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
									ttMov2.tipoPlanilha      = tipoPlanilha;
									ttMov2.chaveExtrato      = chaveExtrato;
									ttMov2.debitoCredito     = debitoCredito;
                                    ttMov2.contLinha         = contLinhaTexto;
									ttMov2.historicoMulta    = "";
									ttMov2.historicoJuros    = "";
									ttMov2.historicoDesconto = "";
									ttMov2.contaDebito       = "";
									ttMov2.contaCredito      = "";
									ttMov2.naturezaContabil  = "";
									ttMov2.contador 		 = 0;
									ttMov2.parcelaDoc        = parcelaDoc;
									ttMov2.abaPlanilha       = String.valueOf(porAba);

									if(!lerAposPrincipal.contains("FORNECEDOR"))	ttMov2.nomeOrigem    = nomeOrigem;
									if(!lerAposPrincipal.contains("DOCUMENTO")) 	ttMov2.documento 	 = documento;
									if(!lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador;
									if(!lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01;
									if(!lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02;
									if(!lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03;
									if(!lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04;
									if(!lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05;
									if(!lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06;


								}

								///  -------------------------------------------------------------------------------------------------------
								///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
								///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
								///  if (!complemento02.equals("")) ttMov2.complemento02 = complemento02;
								///  -------------------------------------------------------------------------------------------------------

								// #DOCUMENTACAO
								// acumula linhas secundarias ou apenas l? as secundarias
								boolean acumulaSegundaLinha = true;
								
								if(acumulaSegundaLinha){
									if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = (ttMov2.nomeOrigem    + " " + nomeOrigem).trim();
									if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = (ttMov2.documento + " " + documento).trim();
									if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = (ttMov2.nomePortador  + " " + nomePortador).trim();
									if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = (ttMov2.complemento01 + " " + complemento01).trim();
									if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = (ttMov2.complemento02 + " " + complemento02).trim();
									if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = (ttMov2.complemento03 + " " + complemento03).trim();
									if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = (ttMov2.complemento04 + " " + complemento04).trim();
									if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = (ttMov2.complemento05 + " " + complemento05).trim();
									if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = (ttMov2.complemento06 + " " + complemento06).trim();
								}
								if(!acumulaSegundaLinha){
									if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = nomeOrigem.trim();
									if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = documento.trim();
									if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador.trim();
									if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01.trim();
									if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02.trim();
									if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03.trim();
									if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04.trim();
									if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05.trim();
									if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06.trim();
								}
								
								ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
								ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
								ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
								ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

								leuFinanceiro = true;
								mapaVariavel.put(key,ttMov2);
								
							} catch (Exception e) {
								logger.logError("EndpointA:", e);
							}
						} // while
					}finally {
						
						/*if (memFile != null) { //closeFile
							try {memFile.closeFile(); } 
							catch (Exception ex) { }
						}*/ //closeFile
						
					}
				}

            }
            try{
                FileUtil.moveToDir(dirName+"/"+nomeArquivo, backupDirName);
            }catch(Exception ee){}

        }
    } catch (Exception ee) {
        putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
        logger.logError("EndpointA: ", ee);
    }

    if(erroShrink){
        putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
        throw new Exception();
    }
	// --------------------------------------------------------------------------------------------------------------------
	// #DOCUMENTACAO
	// BUSCA INFORMACAO DE EXTRATOS SALVOS
	if (leuFinanceiro && cruzaExtrato.contains("TRUE") || (tipoPlanilha.contains("EXTRATO") && cruzaExtrato.contains("FALSE")) ||
        (Cruza_Extrato_com_Extrato.contains("TRUE") && cruzaExtrato.contains("FALSE")) ||
        (Cruza_Extrato_com_Extrato.contains("FALSE") && cruzaExtrato.contains("FALSE"))) {
           
        try {
            JSONArray extratoEmpresa = getExtratosEmpresa(codEmpresa, dbIOCont, logger);

            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                for (int t=0; t<extratoEmpresa.length(); t++) {

                    JSONObject recMov = extratoEmpresa.optJSONObject(t);

                    recMov.put("CODEMPRESA", codEmpresa);
                    recMov.put("NOMEEMPRESA", nomeEmpresa);

                    //QUANDO FOR CRUZAMENTO DE EXTRATO, MANTER NOME UNICO NO ARQUIVO FINAL.
                    if (leuFinanceiro && cruzaExtrato.contains("TRUE")) {
                        recMov.put("NOMEARQUIVO", nomeArquivo);
                    }
                    else {
                        recMov.put("NOMEARQUIVO", "");
                    }

                    recMov.put("TIPOLANCAMENTO", tipoLancamento);
                    recMov.put("CONTAMOVIMENTO", "");
                    recMov.put("CONTAPORTADOR", "");
                    recMov.put("CONTLINHATEXTO", String.valueOf(t));

                    ttMovimentoPadrao ttMovExtrato = getMovimentoExtrato(recMov, logger);
                    if (nomeArquivo.toUpperCase().contains("FILTRO_")){
                        boolean filtro = validaFiltro(nomeArquivo, ttMovExtrato.dataMovimento);
                        if(!filtro) continue; 
                    } 
                    mapaVariavel.put(ttMovExtrato.chave, ttMovExtrato);
                    apagaExtrato    = true;

                }
            }
        }
        catch (Exception xx) {
            logger.logDebug("ATENCAO - PROBLEMA NA LEITURA DE EXTRATO - BANCO");
        }

    } // if tipo planilha nao igual extrato
    // --------------------------------------------------------------------------------------------------------------------
	// #DOCUMENTACAO
	// INICIO DAS ITERACOES
    StringBuilder txtFiscal     = new StringBuilder();
    StringBuilder txtFornecedor = new StringBuilder();
    StringBuilder txtPortador   = new StringBuilder();
    String nomePortadorAnterior = "";
    if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB")) txtFiscal.append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // #Fabrica(2019-08-13) @Vini


    int contRegra = -1;
	
    try {
        Iterator itExtrato = mapaVariavel.keySet().iterator();
        while (itExtrato.hasNext()) {
            String chaveExtrato     = "";

            String key = (String)itExtrato.next();
            ttMovimentoPadrao ttMov = (ttMovimentoPadrao)mapaVariavel.get(key);

            if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
                roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
            }else{
                roteiroCRM = getRoteiro();
            }
			
			// #DOCUMENTACAO
			// TRATA LOTES (MAIUSCULO e MINUSCULO)
			if(ttMov.lote.lastIndexOf("__") > ttMov.lote.indexOf("__")){
				ttMov.lote = nomeEmpresa +"_"+ codEmpresa +"_"+  cutString(ttMov.lote, ttMov.lote.indexOf("__"), ttMov.lote.lastIndexOf("__")).toLowerCase() +"_"+ ttMov.lote.substring(ttMov.lote.lastIndexOf("__"));
			}
			// #DOCUMENTACAO
			// EVITA GERAR 2 ARQUIVOS QUANDO TEM TRATAR COMO EXTRATO
			ttMov.lote = ttMov.lote.replace(ttMov.debitoCredito,"").replace("extrato-debito","").replace("extrato-credito","").replace("___","_").replace("__","_");

			// #DOCUMENTACAO
			// JUNCAO DOS LANCAMENTOS COM OS JUROS E DESCONTOS (TRATAR COMO JUROS OU DESCONTO)
			String chaveJuros = ttMov.dataMovimento + "-" + ttMov.documento + "-JUROS";
            ttJuros ttJ  = (ttJuros)mapaJuros.get(chaveJuros);
            if (ttJ != null && ttJ.valorLido == 0) {
                ttMov.valorJuros  = ttJ.valorJur;
                ttJ.valorLido     = 1;
                mapaJuros.put(chaveJuros,ttJ);

            }

			String chaveDesconto = ttMov.dataMovimento + "-" + ttMov.documento + "-DESCONTO";
            ttDesconto ttD  = (ttDesconto)mapaDesconto.get(chaveDesconto);
            if (ttD != null && ttD.valorLido == 0) {
                ttMov.valorDesconto  = ttD.valorDesc;
                ttD.valorLido     = 1;
                mapaDesconto.put(chaveDesconto,ttD);

            }
            contRegra++;
            int restoLinha = 0;
            restoLinha = (contRegra % 100);
            if (restoLinha == 0) putStatus(dirName, "03--Etapa 3 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);

            classificaPlano     = roteiroCRM.optString("classificaPlano");
            classificaFornec    = roteiroCRM.optString("classificaFornec");
            cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
            Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
            String integraFiscal = roteiroCRM.optString("Integracao_fiscal").toUpperCase();

            if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) continue;
            if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-DEBITO")) continue;

            // ------------------------------------------------------------------------------------------------------------------
            // 	 		INICIA PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------
            String DATAMOVIMENTO   = "";
            String PORTADOR        = "";
            String CHAVE           = "";
            boolean jaCruzou       = false;


			// #DOCUMENTACAO
			// EXTRATO COM EXTRATO
            if (Cruza_Extrato_com_Extrato.contains("TRUE") && ttMov.tipoPlanilha.contains("EXTRATO")) {

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);
                if (ttMov.valorDocumento == 0) continue;

                JSONArray extratoEmpresa = new JSONArray();
                String transferencia = "NAO";

                if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-DEBITO"))  transferencia = "SIM";
                if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) transferencia = "SIM";

                if (transferencia.equals("SIM")) {
                    for (int xx = 0;xx<1;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;

                            if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato + "%")
                            .param(0)
                            .param(ttMov.nomeArquivo.toUpperCase())
                            .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    JSONObject recMov = extratoEmpresa.optJSONObject(0);

                    DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
                    PORTADOR        = recMov.optString("PORTADOR");
                    CHAVE           = recMov.optString("CHAVE");

                    ttMov.complemento04 = ttMov.nomeOrigem;
                    ttMov.nomeOrigem    = PORTADOR;
                    ttMov.dataMovimento = DATAMOVIMENTO;
                    ttMov.tipoPlanilha  = "EXTRATO-TRANSFERENCIA";

                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(1)
                    .param(CHAVE)
                    .execute();
                    jaCruzou = true;

                }
            }

			// #DOCUMENTACAO
			// EXTRATO COM PLANILHA
            if (cruzaExtrato.contains("TRUE")  && !jaCruzou) {

                Conta_Fixa_Cruzamento_Extrato  = roteiroCRMPrincipal.optString("Conta_Fixa_Cruzamento_Extrato");

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Date dataMovimentoDateMenosUm   = new Date();
                Date dataMovimentoDateMenosDois = new Date();
                Date dataMovimentoDateMenosTres = new Date();
                Date dataMovimentoDateMaisUm    = new Date();
                Date dataMovimentoDateMaisDois  = new Date();
                Date dataMovimentoDateMaisTres  = new Date();

                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm   = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm    = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois  = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres  = cal.getTime();

                if (ttMov.valorDocumento == 0) continue;

                JSONArray extratoEmpresa = new JSONArray();

                String transferencia = "NAO";

                if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
                    for (int xx = 0;xx<7;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;
                            if (xx ==1) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisUm, "dd/MM/yyyy");
                            if (xx ==2) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosUm, "dd/MM/yyyy");
                            if (xx ==3) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisDois, "dd/MM/yyyy");
                            if (xx ==4) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosDois, "dd/MM/yyyy");
                            if (xx ==5) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisTres, "dd/MM/yyyy");
                            if (xx ==6) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosTres, "dd/MM/yyyy");


                            if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato + "%")
                            .param(0)
                            .param(ttMov.nomeArquivo.toUpperCase())
                            .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    JSONObject recMov = extratoEmpresa.optJSONObject(0);

                    DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
                    PORTADOR        = recMov.optString("PORTADOR");
                    CHAVE           = recMov.optString("CHAVE");
                    if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) ttMov.complemento02 = recMov.optString("COMPLEMENTO"); //checknum

                    ttMov.nomePortador  = PORTADOR;
                    ttMov.dataMovimento = DATAMOVIMENTO;

                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(1)
                    .param(CHAVE)
                    .execute();

                }

            }


            // ------------------------------------------------------------------------------------------------------------------
            // 	 		FINALO DO PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------




            classificacao = "";

            String key2 = ttMov.chave;

            if(ttMov.dataMovimento.length() > 9){
                mesRef  = Integer.parseInt(ttMov.dataMovimento.substring(3,5));
                anoRef  = Integer.parseInt(ttMov.dataMovimento.substring(6,10));
                mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                mesRef  = mesRef - 1;
                if (mesRef  == 0) {
                    mesRef  = 12;
                    anoRef  = anoRef - 1;
                }
                mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                mesRef  = mesRef - 1;
                if (mesRef  == 0) {
                    mesRef  = 12;
                    anoRef  = anoRef - 1;
                }
                mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
            }

            String trimestreMesAnoAnterior	    = "";
            String trimestreMesAnoAtual   	    = "";
            String descricaoPlanoContaPortador  = "";
            String descricaoPlanoContaMovimento = "";

			// #DOCUMENTACAO
			// TRIMESTRE
            if (mesAnoAnterior.startsWith("01") || mesAnoAnterior.startsWith("02") || mesAnoAnterior.startsWith("03")) trimestreMesAnoAnterior = "1. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("04") || mesAnoAnterior.startsWith("05") || mesAnoAnterior.startsWith("06")) trimestreMesAnoAnterior = "2. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("07") || mesAnoAnterior.startsWith("08") || mesAnoAnterior.startsWith("09")) trimestreMesAnoAnterior = "3. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("10") || mesAnoAnterior.startsWith("11") || mesAnoAnterior.startsWith("12")) trimestreMesAnoAnterior = "4. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAtual.startsWith("01") || mesAnoAtual.startsWith("02") || mesAnoAtual.startsWith("03")) trimestreMesAnoAtual = "1. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("04") || mesAnoAtual.startsWith("05") || mesAnoAtual.startsWith("06")) trimestreMesAnoAtual = "2. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("07") || mesAnoAtual.startsWith("08") || mesAnoAtual.startsWith("09")) trimestreMesAnoAtual = "3. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("10") || mesAnoAtual.startsWith("11") || mesAnoAtual.startsWith("12")) trimestreMesAnoAtual = "4. Trimestre/" + mesAnoAtual.substring(3);


            if (ttMov.nomeOrigem.equals("")) ttMov.nomeOrigem = ttMov.complemento01 + " " + ttMov.dataMovimento + " R$" + String.valueOf(ttMov.documento);
            ttMov.nomeOrigem = ttMov.nomeOrigem.trim();
            if (ttMov.nomePortador.equals("")) ttMov.nomePortador = "EM BRANCO";

            contaJuros        = roteiroCRM.optString("contaFixaJuros");
            contaFixaCredito  = roteiroCRM.optString("contaFixaCredito");
            contaFixaDebito   = roteiroCRM.optString("contaFixaDebito");
            contaDesconto     = roteiroCRM.optString("contaFixaDesconto");
            contaMulta        = roteiroCRM.optString("contaFixaMulta");



            contaMovimento = "";
            contaPortador  = "";


            if(ttMov.tipoLancamento.contains("PAGAR")) {
                contaMovimento = contaFixaDebito;
                contaPortador  = contaFixaCredito;
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                contaPortador  = contaFixaDebito;
                contaMovimento = contaFixaCredito;
            }

            // Quando pede para cruzar extrato e nao encontra relacionamento com o extrato
            // joga conta fixa de extrato em DEBITO quando for extato e CREDITO quando for planilha
            if ((cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO")) && PORTADOR.equals("")) {
                if (ttMov.tipoPlanilha.contains("EXTRATO"))  contaMovimento  = Conta_Fixa_Cruzamento_Extrato;
                if (!ttMov.tipoPlanilha.contains("EXTRATO")) contaPortador   = Conta_Fixa_Cruzamento_Extrato;
            }


            ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

            contaMovimento    = getConta09(contaMovimento, ttMov.nomeOrigem,  ttMov.documento, "", ttMov.complemento01,  ttMov.complemento02,  ttMov.complemento03, "",  ttMov.centroCusto);
            contaPortador     = getConta09(contaPortador, "", "", ttMov.nomePortador, "", "", "", ttMov.nomeArquivo, "");
            ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, "", ttMov.centroCusto);
            ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                                          ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                                          ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);
            if (!ttMov.codFilial.equals("") && roteiroCRMPrincipal.optString("erpContabilidade").equals("CUCA-FRESCA")) ttMov.cpfCnpj = ttMov.codFilial;

            ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

            JSONObject histobj = new JSONObject();

            histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
            histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
            histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
            histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
            histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
            histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
            histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
            histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
            histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

            ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getReplaceTermos("complemento08", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getReplaceTermos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getReplaceTermos("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getReplaceTermos("nomePortador",  ttMov.nomePortador,   histobj);

            ttMov.complemento01 = getLimpaCampos("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getLimpaCampos("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getLimpaCampos("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getLimpaCampos("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getLimpaCampos("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getLimpaCampos("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getLimpaCampos("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getLimpaCampos("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getLimpaCampos("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getLimpaCampos("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getLimpaCampos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getLimpaCampos("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getLimpaCampos("nomePortador",  ttMov.nomePortador,   histobj);

			histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
			histobj.put("nomePortador", ttMov.nomePortador);

            ttMov.complemento01 = getLimpaCamposAvancado("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getLimpaCamposAvancado("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getLimpaCamposAvancado("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getLimpaCamposAvancado("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getLimpaCamposAvancado("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getLimpaCamposAvancado("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getLimpaCamposAvancado("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getLimpaCamposAvancado("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getLimpaCamposAvancado("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getLimpaCamposAvancado("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getLimpaCamposAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getLimpaCamposAvancado("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getLimpaCamposAvancado("nomePortador",  ttMov.nomePortador,   histobj);

            ttMov.complemento01 = getReplaceTermosAvancado("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getReplaceTermosAvancado("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getReplaceTermosAvancado("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getReplaceTermosAvancado("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getReplaceTermosAvancado("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getReplaceTermosAvancado("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getReplaceTermosAvancado("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getReplaceTermosAvancado("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getReplaceTermosAvancado("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getReplaceTermosAvancado("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getReplaceTermosAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getReplaceTermosAvancado("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getReplaceTermosAvancado("nomePortador",  ttMov.nomePortador,   histobj);

            histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
            histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
            histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
            histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
            histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
            histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
            histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
            histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
            histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

            contaMovimento = getContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaPortador  = getContaPortador(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if(roteiroCRM.optString("gravaCnpjMovimento").toUpperCase().contains("TRUE")){
				if(contaMovimento.equals("")) {
                    if(!ttMov.cpfCnpj.equals("")){
                        contaMovimento = ttMov.cpfCnpj;
                        if(roteiroCRM.optString("erpContabilidade").toUpperCase().contains("SCI UNICO") && !ttMov.cpfCnpj.equals(""))
                        contaMovimento = ttMov.cpfCnpj + "P";
                    }
                }
                else {ttMov.cpfCnpj = "";}
			}
            regraContaMovimento  = getRegraContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


            double valorPrincipal 	 = getValorPrincipal("", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            if (valorPrincipal> 0 && ttMov.valorDocumento > valorPrincipal) {
                ttMov.valorJuros     = ttMov.valorDocumento - valorPrincipal;
                ttMov.valorDocumento = valorPrincipal;
            }
            
            ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";
            ttMov.contaJuros        = getContaJuros(contaJuros,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaDesconto     = getContaDesconto(contaDesconto,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaMulta        = getContaMulta(contaMulta,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            tabelaContabil   		= getTabelaContabil("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);
            ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

            

            boolean regraCRM = false;
            if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;

           //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---

            if (!contaMovimento.equals("")){
			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {					
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";


					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresa)
					.param(contaMovimento)
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresa)
						.param(contaMovimento)
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}		
					ttP.contaContabil     = contaMovimento;
 					mapaPlano.put(contaMovimento,ttP);
				}
            }

            regraCRM = false;
            if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;
			
			if (contaMovimento.equals("")){
                try {
                    String classificacaoPlanoContas = getCodigoClassificacao(ttMov.nomeOrigem, histobj); // exemplo: 2.1.1.01.
                    JSONObject futureObject = new JSONObject();
                    JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
                    
					if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = ret.optString("contaDebito");
                    if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = ret.optString("contaCredito");
					if (contaMovimento == null || contaMovimento.trim().length() == 0) {
						contaMovimento = "";
						
						// CASO NAO ACHOU CONTA EM REGRAS NEM NO DEPARA ATUAL
						// VERIFICA SE E A PRIMEIRA VEZ QUE BUSCA A DESCRICAO NA NUVEM
						// INSERIDO PARA TRATGAR O BUSSOLA 3.0 
						
						ttPlano ttP  = (ttPlano)mapaDePara.get(ttMov.nomeOrigem);
						if (ttP == null) {							
							ttP  = new ttPlano(); 
							ttP.descricaoPlano = ttMov.nomeOrigem;
							ttP.contaAnalitica = "";
	
							ttP.contaContabil     = "";
							mapaDePara.put(ttMov.nomeOrigem,ttP);
							
							// BUSCA DEPARA PREENCHIDO PELO CONTADOR NO BUSSOLA 3.0 
							String cnpjEmpresaRequest = cnpjEmpresa.replaceAll("[^0-9]","").trim();
							String cnpjContabilidadeRequest = roteiroCRM.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/","");
							
							try{
								deParaObj = findDeParaDescricao(dbIODepara, cnpjEmpresaRequest, cnpjContabilidadeRequest, ttMov.nomeOrigem);
								}
							catch (Exception e) { 
							}
							if (deParaObj != null ) {
								if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = deParaObj.optString("conta_debito");
								if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = deParaObj.optString("conta_credito");
								if (contaMovimento == null) contaMovimento = "";
							}else contaMovimento = "";
							
							// SE ENCONTROU DAPARA NA NUVEM GRAVA NO H2 PARA NA PROXIMA VEZ// ACHAR LOCALMENTE O DEPARA
							if (!contaMovimento.equals("")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("PAGAR")) {
									if (!hasPessoaPag(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("PAGAR")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "",
															contaMovimento, "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "", contaMovimento, "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}
							if (!contaMovimento.equals("")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("RECEBER")) {
									if (!hasPessoaRec(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("RECEBER")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento,
													"", "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento, "", "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}
							
						}	
					}  
				} catch  (Exception Ee) {}
            }
			
			if(roteiroCRM.optString("erpContabilidade").contains("DEXION")){
				if (contaMovimento.equals("")) {
						JSONObject descricaoPlano = dbIOCont.sql("SELECT CONTACONTABIL FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOPLANO LIKE ?")
						.fields("CONTACONTABIL")
						.param(codEmpresa)
						.param(ttMov.cpfCnpj + "%")
						.queryUnique();
						contaMovimento = descricaoPlano.optString("CONTACONTABIL").trim();
				}
			}

			if (contaPortador.equals("")) {
                try {
					ttFornecedor ttF  = (ttFornecedor)mapaFornecedor.get(ttMov.nomePortador+"PORT");
					if (ttF == null) {					
						ttF  = new ttFornecedor(); 

						JSONArray portadorDePara =  findPortador(dbIOCont, codEmpresa, ttMov.nomePortador);
						if (portadorDePara != null && portadorDePara.length() > 0) {
							JSONObject ret = portadorDePara.optJSONObject(0);
							contaPortador = ret.optString("CONTACONTABIL").trim();
						}

						ttF.contaMovimento = contaPortador;
						ttF.nomeOrigem     = ttMov.nomePortador + "PORT";
						mapaFornecedor.put(ttMov.nomePortador + "PORT",ttF);
					} else {
						contaPortador = ttF.contaMovimento;
					}
                }
                catch  (Exception Ee) {}
            }

            String contaTipoFornecedor = "999333";

            boolean eFornecedor = false;
            String  razaoSocial = ttMov.nomeOrigem;
            String  razaoSocialDuplicata = ttMov.nomeOrigem;
            if (contaMovimento.toUpperCase().contains("FISCAL"))  eFornecedor = true;

            if (!contaMovimento.equals("")){			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";

					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
								.fields("DESCRICAOPLANO,CONTAANALITICA")
								.param(codEmpresa)
								.param(contaMovimento)
								.queryUnique();

					if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO") && descricaoPlano.has("CONTAANALITICA") ) {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");						
					}
					ttP.contaContabil     = contaMovimento;
					mapaPlano.put(contaMovimento,ttP);
				}

				descricaoPlanoContaMovimento = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
					razaoSocial = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				}

				// Joga no nome do fornecedor o que esta no plano de contas
				if (!classificaPlano.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaPlano))) {
					ttMov.nomeOrigem = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				}
				if (ttP.descricaoPlano.length() < 2 || ttP.descricaoPlano.equals("") || ttP.descricaoPlano == null) {
					eFornecedor = true;
				}		

                if (razaoSocial.length() < 4) razaoSocial = ttMov.nomeOrigem;

                if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
                    eFornecedor = true;
                }  
            }

			if (!contaPortador.equals("")){
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaPortador);
				if (ttP == null) {
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";
					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresa)
					.param(contaPortador)
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresa)
						.param(contaPortador)
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}
					ttP.contaContabil     = contaPortador;
					mapaPlano.put(contaPortador,ttP);
				}
				descricaoPlanoContaPortador = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
            }
            
            if(ttMov.tipoLancamento.contains("PAGAR")) {
                ttMov.contaDebito  = contaMovimento;
                ttMov.contaCredito = contaPortador;
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                ttMov.contaCredito  = contaMovimento;
                ttMov.contaDebito   = contaPortador;
            }
            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
                objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                if(ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);
                mapaVariavel.put(key,ttMov);
                continue;
            }
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
                objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                if(ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);
                mapaVariavel.put(key,ttMov);
                continue;
            }
            String parcelaAtualeFinal = "";
            String parcelaAtual       = "";

            int parcelaBase = getParcelaBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            int totalParcelas = getTotalParcelas(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            String mesAnoBase = getMesAnoBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!mesAnoBase.equals("") && parcelaBase > 0) parcelaAtual       = String.valueOf(getParcelaFinanciamento(mesAnoAtual, mesAnoBase,parcelaBase, totalParcelas));
            if (!mesAnoBase.equals("")) parcelaAtualeFinal = parcelaAtual.trim() + "/" + String.valueOf(totalParcelas).trim();

            ttMov.historico = getHistorico(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                           ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                           ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			
            histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);
            histobj.put("contaDebito", ttMov.contaDebito);
            histobj.put("contaCredito", ttMov.contaCredito);
            histobj.put("contaJuros", ttMov.contaJuros);
			histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("contaDesconto", ttMov.contaDesconto);
            histobj.put("parcelaAtual", parcelaAtual);
            histobj.put("parcelaAtualeFinal", parcelaAtualeFinal);
            histobj.put("trimestreMesAnoAnterior", trimestreMesAnoAnterior);
            histobj.put("trimestreMesAnoAtual", trimestreMesAnoAtual);
            histobj.put("descricaoPlanoMovimento", descricaoPlanoContaMovimento.toUpperCase());
            histobj.put("descricaoPlanoPortador", descricaoPlanoContaPortador.toUpperCase());

            if(roteiroCRM.optString("Realizar_Busca_Plano").equals("TRUE")){

				// #Fabrica(2019-08-27) @Vini
				JSONObject fornecFilial = new JSONObject();
				String cAnalitica = "";
				String auxNomeOrig = "";
				auxNomeOrig = ttMov.nomeOrigem.replaceAll("-","").replaceAll("/","").replaceAll("\\.","").replaceAll("[0-9]*", "").replaceAll("\\s+","").replaceAll("ME","").replaceAll("EPP","").replaceAll("LTDA","").replaceAll("EIRELI","").replaceAll("SA","").trim();
				if (auxNomeOrig.length()> 11) auxNomeOrig = cutString(auxNomeOrig,0,10);
				//pesquisa no banco de dados pela descricao continua para pegar a classifica??o usada na nova regra
				fornecFilial = dbIOCont.sql("SELECT CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOCONTINUA LIKE ?")
				.fields("CONTAANALITICA")
				.param(codEmpresa)
				.param(auxNomeOrig+"%")
				.queryUnique();
				cAnalitica = fornecFilial.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim();                
				histobj.put("classificacao", cAnalitica); // classificacao para criacao de regra
			}

            ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

            ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            regraHistorico = getRegraHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
						
            if (!ttMov.historicoJuros.contains("JUROS")) ttMov.historicoJuros = "JUROS REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoJuros = getHistorico(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                                ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                                ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoJuros = getHistoricoJuros(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!ttMov.historicoDesconto.contains("DESCONTO")) ttMov.historicoDesconto = "DESCONTO REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoDesconto = getHistorico(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                                   ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                                   ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoDesconto = getHistoricoDesconto(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (ttMov.historicoMulta.equals("")) ttMov.historicoMulta = "MULTA REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoMulta = getHistorico(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.nomeOrigem,
                                                ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                                                ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoMulta = getHistoricoMulta(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                                          ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                                          ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);

            String codParticipante   = getParticipante("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, 
														ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, 
														ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);

            ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

            if (!ttMov.codFilial.equals("")) {
                ttMov.historico 		= ttMov.historico 			 + " Filial:" + ttMov.codFilial;
                ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Filial:" + ttMov.codFilial;
                ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Filial:" + ttMov.codFilial;
                ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Filial:" + ttMov.codFilial;
            }
                        
            if (!codParticipante.equals("")) {
                ttMov.historico 		= ttMov.historico			 + " Participante:" + codParticipante;
                ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Participante:" + codParticipante;
                ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Participante:" + codParticipante;
                ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Participante:" + codParticipante;
            }

            ttMov.historico 		= ttMov.historico.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
            ttMov.historicoJuros 	= ttMov.historicoJuros.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
            ttMov.historicoDesconto = ttMov.historicoDesconto.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
            ttMov.historicoMulta 	= ttMov.historicoMulta.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
									
            if(roteiroCRMPrincipal.optString("erpContabilidade").equals("JBSOFTWARE")){
                ttMov.historico += "GPLCTO:" + ttMov.contLinha;
                ttMov.historicoJuros += "GPLCTO:" + ttMov.contLinha;
                ttMov.historicoDesconto += "GPLCTO:" + ttMov.contLinha;
                ttMov.historicoMulta += "GPLCTO:" + ttMov.contLinha;
            }

            // ------------------------------------------------
            //           GERA ARQUIVO PARA O FISCAL
            // ------------------------------------------------
            ttMov.documento = ttMov.documento.trim();
            if (ttMov.documento.startsWith("0")) {
                for (int xx=0;xx<10;xx++) {
                    if (ttMov.documento.length() > 1 && ttMov.documento.startsWith("0")) ttMov.documento = ttMov.documento.substring(1);
                }
            }

            JSONObject jDescricaoDupl = new JSONObject();
            if (eFornecedor)   jDescricaoDupl.put("TIPO","FORNECEDOR");

            if(integraFiscal.contains("TRUE") && ttMov.tipoPlanilha.contains("MOVIMENTO") && !razaoSocial.equals("") && !ttMov.documento.equals("") && !regraCRM && !contaMovimento.equals("")){

				apagaStatus = true;

                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("QUESTOR")) {

                    JSONObject jDados = new JSONObject();
                    jDados.put("CODEMPRESA",     codEmpresa);
					
					// usando a filial do questor em duplicatas em aberto
					if (roteiroCRMPrincipal.optString("Usa_Filial_Questor").toUpperCase().equals("TRUE"))  jDados.put("CODEMPRESA",     codEmpresa + "-%");
                    
                    //jDados.put("DATAVENCIMENTO", ttMov.complemento06); //Descomentar, para fazer a baixa com uso da data de vencimento
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORMULTA",     ttMov.valorMulta);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

                    // #Fabrica(2019-05-20)
                    // Descomentar a proxima linha para testar a razaoSocial do movimento com a jDescricaoDupl.optString("RAZAOSOCIAL") que vem das duplicatas em aberto!
                    // if (jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, razaoSocial);      //IDENTIFICAMOS UMA FALHA LOGICA
                    // if (jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem); //USAR ESSE
                    // #Fabrica(2019-07-30)
                    // Descomentar a proxima linha para testar o codigo de filial do movimento com a jDescricaoDupl.optString("SITUACAO") que vem das duplicatas em aberto! OBS: Lembrando que deve existir regra de c?digo filial no CRM
                    // if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorFilial(jDescricaoDupl, ttMov.codFilial);
                    // #Fabrica(2019-07-31)
                    // Descomentar a proxima linha para testar data de vencimento  a jDescricaoDupl.optString("DATAVENCIMENTO") que vem das duplicatas em aberto! OBS: Complemento06, deve estar lendo a data de vencimento da planilha financeira
                    // if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorDataVencimento(jDescricaoDupl, ttMov.complemento06);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
                    ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							
							if (roteiroCRMPrincipal.optString("Usa_Filial_Questor").toUpperCase().equals("TRUE"))  {
								txtFiscal.append(cutString(jDescricaoDupl.optString("CODEMPRESA"), "-"));
							}
							else {
								txtFiscal.append(jDescricaoDupl.optString("CODEMPRESA"));
							}
							
							txtFiscal.append(";");
							txtFiscal.append("1;");
							txtFiscal.append(jDescricaoDupl.optString("CHAVEDUPLICATA"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("PARCELADOC"));
							// quando o formato da parcela deve ser igual ao duplicatas em aberto (questor) comentar linha acima e descomentar a linha abaixo
							//txtFiscal.append(jDescricaoDupl.optString("PARCELADOCORIGINAL")); 
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("DUPLICATA"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("VALORFINAL"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("VALORFINALJUROS"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("TABELACONTABIL"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("CODIGOFORNECEDOR"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("VALORFINALDESCONTO"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("VALORFINALMULTA"));
							txtFiscal.append("\r\n");

							geraFiscal = true;
							loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else {
                            if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
                            txtFornecedor.append("\r\n");

							jDescricaoDupl.put("TIPO","FORNECEDOR");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
							continue;
                        }
					}
				}

                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("MAKROWEB")) {

                    JSONObject jDados = new JSONObject();
                    jDados.put("CODEMPRESA",     codEmpresa);
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
						ttMov.parcelaDoc     = jDescricaoDupl.optInt("PARCELADOC");
						ttMov.valorDesconto  = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDesconto));
						ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento));
                        ttMov.valorJuros 	 = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorJuros));
                        
                        String valorDescontoAux  = preparaDoublePrecisao(String.valueOf(ttMov.valorDesconto));
						String valorDocumentoAux = preparaDoublePrecisao(String.valueOf(ttMov.valorDocumento));
                        String valorJurosAux 	 = preparaDoublePrecisao(String.valueOf(ttMov.valorJuros));
                        
                        double valorAux = ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros;
                        String valorCalcAux = "";
                        // #Fabrica(2019-08-06) @Vini
                        valorCalcAux = preparaDoublePrecisao(String.valueOf(DecimalUtil.toDecimal(String.format("%.2f", valorAux))));
                        
                        // if (!String.format("%.2f", ttMov.valorDocumento).equals(jDescricaoDupl.optString("VALORPARCELA"))) { //<--- antigo
						if (ttMov.valorDocumento > jDescricaoDupl.optDouble("VALORPARCELA")) {
							jDescricaoDupl.put("TIPO", "FORNECEDOR");
						} else {
							txtFiscal.append(StringUtil.leftPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 14,  "0"));
							txtFiscal.append(StringUtil.leftPad(ttMov.documento, 8, "0"));
							txtFiscal.append(StringUtil.leftPad(String.valueOf(ttMov.parcelaDoc), 2, "0"));
							txtFiscal.append(StringUtil.leftPad(valorDocumentoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal.append(ttMov.dataMovimento.replaceAll("/",""));
							txtFiscal.append(StringUtil.leftPad(valorDescontoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal.append(StringUtil.leftPad(valorJurosAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal.append(StringUtil.leftPad(valorCalcAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal.append(StringUtil.leftPad(ttMov.contaCredito, 9,  "0"));
							txtFiscal.append("\r\n");

							geraFiscal = true;
							loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
                    }
                }

                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) {
                    JSONObject jDados = new JSONObject();
                    jDados.put("CODEMPRESA",     codEmpresa);
					                    
                    //jDados.put("DATAVENCIMENTO", ttMov.complemento06); //Descomentar, para fazer a baixa com uso da data de vencimento
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORMULTA",     ttMov.valorMulta);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
                    ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							if(geraCabecalhoCordilheira) {
                                txtFiscal.append("DATA DE VENCIMENTO;DATA DO PAGAMENTO;CNPJ DO CLIENTE;DOCUMENTO;NOME/RAZAO;NUMERO DA PARCELA;VALOR ORIGINAL;VALOR PAGO;VALOR JUROS;VALOR DESCONTO;FORMA DE PAGAMENTO;NUMERO DA NOTA");
                                txtFiscal.append("\r\n");
                                geraCabecalhoCordilheira = false;
                            }

                            txtFiscal.append(jDescricaoDupl.optString("DATAVENCIMENTO"));
							txtFiscal.append(";");
							txtFiscal.append(ttMov.dataMovimento);
							txtFiscal.append(";");
							txtFiscal.append(ttMov.cpfCnpj);
							// quando o formato da parcela deve ser igual ao duplicatas em aberto (questor) comentar linha acima e descomentar a linha abaixo
							//txtFiscal.append(jDescricaoDupl.optString("PARCELADOCORIGINAL")); 
							txtFiscal.append(";");
							txtFiscal.append(ttMov.documento);
							txtFiscal.append(";");
							txtFiscal.append(ttMov.nomeOrigem);
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("PARCELADOC"));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("VALORPARCELA").replaceAll("\\.",","));
							txtFiscal.append(";");
							txtFiscal.append(String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto)).replaceAll("\\.",","));
							txtFiscal.append(";");
							txtFiscal.append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",","));
							txtFiscal.append(";");
							txtFiscal.append(String.format("%.2f",ttMov.valorDesconto).replaceAll("\\.",","));
							txtFiscal.append(";");
							txtFiscal.append(jDescricaoDupl.optString("TABELACONTABIL"));
							txtFiscal.append(";");
							txtFiscal.append(ttMov.documento);
							txtFiscal.append("\r\n");

							geraFiscal = true;
							loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else {
                            if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
                            txtFornecedor.append("\r\n");

							jDescricaoDupl.put("TIPO","FORNECEDOR");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
							continue;
                        }
					}
				}

				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CUCA-FRESCA")) {

                    JSONObject jDados = new JSONObject();
                    jDados.put("CODEMPRESA",     codEmpresa);
					
					// usando a filial do questor em duplicatas em aberto
                   
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORMULTA",     ttMov.valorMulta);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
                    ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							String separadorFiscal = "";
							String dataVencimento  = "";
							//String parcela		   = "1";
							String duplicataParcela = jDescricaoDupl.optString("DUPLICATA")+"/"+String.valueOf(ttMov.parcelaDoc);
							
							txtFiscal.append(cnpjEmpresa);
							txtFiscal.append("    ");

							if(tipoLancamento.contains("PAGAR"))	txtFiscal.append("E");
							if(tipoLancamento.contains("RECEBER"))	txtFiscal.append("S");

							txtFiscal.append(StringUtil.rightPad(jDescricaoDupl.optString("DATAVENCIMENTO"), 10, " ")); //lendo do duplicatasem aberto
							txtFiscal.append(StringUtil.rightPad(jDescricaoDupl.optString("SITUACAO"), 5, " ")); //especie
							txtFiscal.append(StringUtil.rightPad("", 3, " ")); //serie
							
							txtFiscal.append(StringUtil.rightPad("", 2, " ")); //sub-serie
							txtFiscal.append(StringUtil.leftPad(ttMov.documento, 9, "0"));
							txtFiscal.append(StringUtil.leftPad("", 9, "0"));
							
							txtFiscal.append(StringUtil.rightPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 18, " ")); // preciso criar a leitura do CNPJ do cliente, est? sendo usado o objeto "CODIGOFORNECEDOR" para guardar essa informa??o
							txtFiscal.append(StringUtil.leftPad(duplicataParcela, 21, "0"));
							txtFiscal.append(StringUtil.leftPad(dataVencimento, 10, " ")); //data do vencimento
							
							txtFiscal.append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0")); //? preciso criar a leitura do valor ? baixar, est? sendo usado o objeto "VALORPARCELA" para guardar no banco
							
							if(contaPortador.length() > 1){
								contaPortador = contaPortador.substring(0, contaPortador.length()-1) + "-" + contaPortador.substring(contaPortador.length()-1);
								if(contaPortador.length() > 5) contaPortador = contaPortador.substring(0, contaPortador.length()-5) + "." + contaPortador.substring(contaPortador.length()-5);
							}
							
							txtFiscal.append(StringUtil.leftPad(contaPortador, 9, "0")); //a conta do banco
							txtFiscal.append(StringUtil.rightPad(ttMov.centroCusto, 4, " "));
							
							// txtFiscal.append(StringUtil.rightPad(ttMov.historico, 3, ""));	
							if(tipoLancamento.contains("PAGAR"))	txtFiscal.append(StringUtil.rightPad("10", 3, " ")); //10 pagamento fornecedor 
							if(tipoLancamento.contains("RECEBER"))	txtFiscal.append(StringUtil.rightPad("11", 3, " ")); // 11 recebimento duplicata
							
							txtFiscal.append(StringUtil.leftPad("", 15, " "));	//numero do cheque na planilha
							txtFiscal.append(StringUtil.rightPad(ttMov.dataMovimento, 10, " "));
							
							txtFiscal.append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0"));
							txtFiscal.append(StringUtil.leftPad(String.format("%.2f", ttMov.valorJuros), 13, "0"));
							txtFiscal.append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDesconto), 13, "0"));
							
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // correcao monetaria
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // despesas/receitas
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // Base de Calculo Retencao
							
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // IRRF Retido 
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // PIS Retido 
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido 
							
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // CSLL Retido 
							txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido 
							txtFiscal.append("    "); //n?o encontrado o c?digo da receita
							
							txtFiscal.append("\r\n");

							geraFiscal = true;
							loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else {
                            if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
                            txtFornecedor.append("\r\n");

							jDescricaoDupl.put("TIPO","FORNECEDOR");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
							continue;
                        }
					}
				}
				
                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {
                    JSONObject jDados = new JSONObject();
                    //jDados.put("DATAVENCIMENTO", ttMov.complemento06); //Descomentar, para fazer a baixa com uso da data de vencimento
                    jDados.put("CODEMPRESA",     codEmpresa);
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
                    jDados.put("OBSERVACAO", 	 ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     99);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORMULTA",     ttMov.valorMulta);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);

                    // Descomentar a proxima linha para testar data de vencimento  a jDescricaoDupl.optString("DATAVENCIMENTO") que vem das duplicatas em aberto! OBS: Complemento06, deve estar lendo a data de vencimento da planilha financeira
                    // if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorDataVencimento(jDescricaoDupl, ttMov.complemento06);

                    String chaveParcela = ttMov.documento + "-PARCELA";
					ttParcelaDominio ttP    = (ttParcelaDominio)mapaParcelaDominio.get(chaveParcela);
					if (ttP == null) {
						ttP  			= new ttParcelaDominio();
						ttP.documento   = ttMov.documento;
						ttP.ultimaParcela = 0;
					}
					ttP.ultimaParcela++;
					
					mapaParcelaDominio.put(chaveParcela,ttP);
                    
					jDados.put("PARCELADOC", ttP.ultimaParcela);                 
					jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);	

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");
 
					String chaveDuplicata = "";
					if (jDescricaoDupl.has("CODIGOFORNECEDOR")) chaveDuplicata = ttMov.codEmpresa + "-ESPECIAL-" + jDescricaoDupl.optString("CODIGOFORNECEDOR") + "-" + ttMov.documento + "-SEG-";
					
                    String serie = "";
                    String subSerie = "";
                    String especie = "";
                    double valorSegmento = 0;

                    JSONArray recordsDup = new JSONArray();

                    /*
                    DESCOMENTAR ESSA LINHA QUANDO TIVER DATA DE VENCIMENTO
                    VAI SEPARAR QUANDO ENCONTRAR A DATA DE VENCIMENTO NO BANCO
                    COLOCAR O COMPLEMENTO QUE TIVER A DATA DE VENCIMENTO : ttMov.complemento06
                    */
                    // boolean isData = false;
                    // Date dtV = new Date();
                    // try{ 
                    //     dtV = DateUtil.stringToDate(jDescricaoDupl.optString("DATAVENCIMENTO"), "dd/MM/yyyy");
					// 	isData = true; 
                    //     if(!getCampoDate(DateUtil.dateToString(dtV, "dd/MM/yyyy")).equals(getCampoDate(ttMov.complemento06))) isData = false; 
					// } catch(Exception ii){ 
					// 	isData = false; 
					// }
					// if(!chaveDuplicata.equals("")){
					// 	if(isData){
					// 		try {
					// 			String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? AND VENCIMENTO = ? "; 
					// 			recordsDup = dbIOCont.sql(sql)
					// 			  .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
					// 			  .param(chaveDuplicata + "%")
					// 			  .param(dtV)
					// 			  .debug(logger)
					// 			  .query();								
					// 		} catch (Exception e1) {
					// 			logger.logDebug("ERROR: " + e1.getMessage());
					// 		}
					// 	}
					// 	if(!isData){
					// 		try {
					// 			String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? "; 
					// 			recordsDup = dbIOCont.sql(sql)
					// 			  .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
					// 			  .param(chaveDuplicata + "%")
					// 			  .debug(logger)
					// 			  .query();								
					// 		} catch (Exception e1) {
					// 			logger.logDebug("ERROR: " + e1.getMessage());
					// 		}
					// 	}
					// }

					if(!chaveDuplicata.equals("")){
						try {
							String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? "; 
							recordsDup = dbIOCont.sql(sql)
							  .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
							  .param(chaveDuplicata + "%")
							  .debug(logger)
							  .query();	

						} catch (Exception e1) {
							logger.logDebug("ERROR: " + e1.getMessage());
						}
					}
					/* EXEMPLO DE COMO TEM QUE SAIR
					
					|0000|07701892000105|
					|5100|39||0|21338|15/08/2017|14/08/2017|0|||180,00|||||||||||||
					|5110|15/08/2017|3612|434|180,00|5|21338 ATLANTA ALARMES -  MONITOL MONIT. TOLEDO LTDA.||418|
					*/

					JSONObject recordsDupSeg = new JSONObject(); 
					if (recordsDup.length() > 0) recordsDupSeg = recordsDup.optJSONObject(0);
					
					if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
						serie   = recordsDupSeg.optString("SERIE");
						especie = recordsDupSeg.optString("CHAVEDUPLICATA");
					}

					double valorSaldoDuplicata = 0;
                    double valorSomaSegmentos  = 0;
                    
                    // soma os segmentos pois eles nao sao baixados. Ou seja, se pago um valor parcial no dominio soma dos segmentos 
                    // continua sendo o valor origial (total) da nota fiscal
                    // utilizado para achar a proporcao do valor para cada segmento
                    for (int seg =0; seg<recordsDup.length(); seg ++) {
                        recordsDupSeg =  recordsDup.optJSONObject(seg);
                        if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
                            valorSomaSegmentos = valorSomaSegmentos + DecimalUtil.toDecimal(String.format("%.2f", recordsDupSeg.optDouble("VALORPARCELA")));
                        }		
                    }

                    boolean leuDuplicata = false;
                    
                    // valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));
                    if (valorSomaSegmentos > 0) valorSaldoDuplicata = valorSomaSegmentos;

					valorSaldoDuplicata  = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                    double diferencaParcela = DecimalUtil.toDecimal(String.format("%.2f", DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento )) - valorSomaSegmentos));
					
					if (!especie.equals("") || !serie.equals("")) {
						if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) {
							for (int seg =0; seg<recordsDup.length(); seg ++) {
							
								recordsDupSeg =  recordsDup.optJSONObject(seg);
                                String segmento = "";
								
								if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
									serie   	  = recordsDupSeg.optString("SERIE");
									subSerie   	  = recordsDupSeg.optString("SITUACAO");      // GUARDA SUB SERIE 
									especie 	  = recordsDupSeg.optString("CHAVEDUPLICATA");
									valorSegmento = recordsDupSeg.optDouble("VALORPARCELA");
                                    segmento      = recordsDupSeg.optString("CHAVE");
									if (segmento.contains("-SEG-")) {
                                        segmento = cutString(segmento, "-SEG-");
                                        segmento = cutString(segmento, 0, "-");
                                    }	
								}	

                                if(segmento.equals("0")){
                                    if(seg>0) continue;
                                    valorSomaSegmentos = DecimalUtil.toDecimal(String.format("%.2f",valorSegmento));
                                    diferencaParcela = 0;
                                }

								// (zerado para validacao)
								diferencaParcela = 0;

                                //if (subSerie.equals("")) subSerie = "0";

                                String codContabil = "";
                                if(ttMov.tipoLancamento.contains("PAGAR")) {
                                    ttMov.contaDebito  = contaMovimento;
                                    ttMov.contaCredito = contaPortador;
                                    codContabil = "5100";
                                }
                                if(ttMov.tipoLancamento.contains("RECEBER")) {
                                    ttMov.contaDebito   = contaPortador;
                                    ttMov.contaCredito  = contaMovimento;
                                    codContabil = "5200";
                                    if(especie.equals("39")) codContabil = "5300";
                                }

                                String delimitador = "|";
                                String tipoSerie = delimitador + codContabil + delimitador + especie + delimitador + serie + delimitador + subSerie + delimitador;

                                if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                                    txtFiscal.append(tipoSerie);
                                    txtFiscal.append(jDescricaoDupl.optString("DUPLICATA"));
                                    txtFiscal.append(delimitador);
                                    txtFiscal.append(jDescricaoDupl.optString("DATAVENCIMENTO"));
                                    txtFiscal.append(delimitador);
                                    txtFiscal.append(ttMov.dataMovimento);
                                    txtFiscal.append(delimitador);
									if (recordsDup.length() > 1 && seg == 0) {
                                        txtFiscal.append(String.format("%.2f", ((ttMov.valorDocumento - 0.01 - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))).replaceAll("\\.",","));
                                    } else {
                                        txtFiscal.append(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))).replaceAll("\\.",","));
                                    }
                                    txtFiscal.append(delimitador);
                                    if (seg == 0) txtFiscal.append(jDescricaoDupl.optString("VALORFINALJUROS").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal.append("0");
                                    txtFiscal.append(delimitador);
                                    if (seg == 0) txtFiscal.append(jDescricaoDupl.optString("VALORFINALMULTA").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal.append("0");
                                    txtFiscal.append(delimitador);
                                    if (seg == 0) txtFiscal.append(jDescricaoDupl.optString("VALORFINALDESCONTO").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal.append("0");
                                    // txtFiscal.append("||||||||||");
                                    // if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal.append("||");
                                    txtFiscal.append("||||||||");
                                    if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal.append("||||");
                                    
									if(ttMov.tipoLancamento.contains("PAGAR")) {
										txtFiscal.append(delimitador);
										txtFiscal.append(jDescricaoDupl.optString("CPFCNPJ"));
										txtFiscal.append(delimitador);
									}
									txtFiscal.append(segmento);
                                    txtFiscal.append(delimitador);
                                    //txtFiscal.append(jDescricaoDupl.optString("OBSERVACAO"));	// FEITO PARA SPEROTO VANZELLA
                                    //txtFiscal.append(delimitador);
                                    txtFiscal.append("\r\n");


                                    if (ttMov.valorDocumento > ttMov.valorDesconto) {
										codContabil = codContabil.replaceAll("00","10");

										txtFiscal.append(delimitador);
										txtFiscal.append(codContabil);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.dataMovimento);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.contaDebito);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.contaCredito);
										txtFiscal.append(delimitador);
										if (recordsDup.length() > 1 && seg == 0) {
                                            txtFiscal.append(String.format("%.2f", ((ttMov.valorDocumento - 0.01 - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))).replaceAll("\\.",","));
                                        } else {
                                            txtFiscal.append(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))).replaceAll("\\.",","));
                                        }
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										if(ttMov.historico.contains("CodigoHistorico")) txtFiscal.append(cutString(ttMov.historico, "CodigoHistorico:", " "));
										txtFiscal.append(delimitador);
										txtFiscal.append(cutString(ttMov.historico, 0 ,"Codigo"));
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										txtFiscal.append(delimitador + codEmpresa + delimitador);
										txtFiscal.append("\r\n");
									}

									if (ttMov.valorDesconto > 0 && seg == 0) {

										txtFiscal.append(delimitador);
										txtFiscal.append(codContabil);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.dataMovimento);
										txtFiscal.append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal.append(ttMov.contaDebito);
											txtFiscal.append(delimitador);
											txtFiscal.append(contaDesconto);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal.append(contaDesconto);
											txtFiscal.append(delimitador);
											txtFiscal.append(ttMov.contaCredito);
										}
										txtFiscal.append(delimitador);
										txtFiscal.append(String.format("%.2f", ttMov.valorDesconto).replaceAll("\\.",","));
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										if(ttMov.historicoDesconto.contains("CodigoHistorico")) txtFiscal.append(cutString(ttMov.historicoDesconto, "CodigoHistorico:", " "));
										txtFiscal.append(delimitador);
										txtFiscal.append(cutString(ttMov.historicoDesconto, 0 ,"Codigo"));

										txtFiscal.append(delimitador);
										txtFiscal.append("");
										txtFiscal.append(delimitador + codEmpresa + delimitador);
										txtFiscal.append("\r\n");
									}

									 if (ttMov.valorJuros > 0  && seg == 0) {
										txtFiscal.append(delimitador);
										txtFiscal.append(codContabil);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.dataMovimento);
										txtFiscal.append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal.append(contaJuros);
											txtFiscal.append(delimitador);
											txtFiscal.append(ttMov.contaDebito);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal.append(ttMov.contaCredito);
											txtFiscal.append(delimitador);
											txtFiscal.append(contaJuros);
										}
										txtFiscal.append(delimitador);
										txtFiscal.append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",","));
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										if(ttMov.historicoJuros.contains("CodigoHistorico")) txtFiscal.append(cutString(ttMov.historicoJuros, "CodigoHistorico:", " "));
										txtFiscal.append(delimitador);
										txtFiscal.append(cutString(ttMov.historicoJuros, 0 ,"Codigo"));
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										txtFiscal.append(delimitador + codEmpresa + delimitador);
										txtFiscal.append("\r\n");
									}

									 if (ttMov.valorMulta > 0 && seg == 0) {
										txtFiscal.append(delimitador);
										txtFiscal.append(codContabil);
										txtFiscal.append(delimitador);
										txtFiscal.append(ttMov.dataMovimento);
										txtFiscal.append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal.append(contaMulta);
											txtFiscal.append(delimitador);
											txtFiscal.append(ttMov.contaDebito);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal.append(ttMov.contaCredito);
											txtFiscal.append(delimitador);
											txtFiscal.append(contaMulta);
										}
										txtFiscal.append(delimitador);
										txtFiscal.append(String.format("%.2f", ttMov.valorMulta).replaceAll("\\.",","));
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										if(ttMov.historicoMulta.contains("CodigoHistorico")) txtFiscal.append(cutString(ttMov.historicoMulta, "CodigoHistorico:", " "));
										txtFiscal.append(delimitador);
										txtFiscal.append(cutString(ttMov.historicoMulta, 0 ,"Codigo"));
										txtFiscal.append(delimitador);
										txtFiscal.append("");
										txtFiscal.append(delimitador + codEmpresa + delimitador);
										txtFiscal.append("\r\n");
									}

                                    diferencaParcela = 0;

                                    geraFiscal = true;
                                    loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                                    eFornecedor = false;
                                    leuDuplicata = true;

                                }
                            }
                            if (leuDuplicata) continue;
                        } else {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata));
                            txtFornecedor.append("\r\n");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                        }
                    }
                    else {
                        if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                            jDescricaoDupl.put("TIPO","FORNECEDOR"); // se nao acha serie vai para duplicatas nao encontradas
                            eFornecedor = true;
                        }
                    }
                }


                if (eFornecedor) {

					dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
					contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");


					if(dupliNaoEncontContabil){
						contaMovimento = contaTemp;
						if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
						if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

						histobj.put("contaMovimento", contaMovimento);
						ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


					}else{
						if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FORNECEDOR")) {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorFinal = String.format("%.2f", ttMov.valorDocumento);
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							
							
							jDescricaoDupl.put("NOMEORIGEM",     ttMov.nomeOrigem);
							jDescricaoDupl.put("DOCUMENTO",      ttMov.documento);
							jDescricaoDupl.put("DATAMOVIMENTO",  ttMov.dataMovimento);
							jDescricaoDupl.put("VALORFINAL",  valorFinal);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("NOMEORIGEM"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("DOCUMENTO"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORFINAL").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Duplicata nao encontrada no Fiscal ");
							txtFornecedor.append("\r\n");


							geraFiscal = true;
							loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
							
						}
					}
                }
            }
			boolean ctFiscal = false;
			if(ttMov.tipoLancamento.contains("PAGAR")	&& ttMov.contaDebito.toUpperCase().contains("FISCAL")) ctFiscal = true;
			if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.contaCredito.toUpperCase().contains("FISCAL")) ctFiscal = true;

			dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
			contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");

			if(contaMovimento.toUpperCase().contains("FISCAL") || ctFiscal) {
				contaMovimento = contaTemp;
				if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
				if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

				histobj.put("contaMovimento", contaMovimento);
				ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			}

			if (!contaMovimento.equals("")){
			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {
					
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";
					
					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO,CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresa)
					.param(contaMovimento)
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresa)
						.param(contaMovimento)
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}					
					ttP.contaContabil     = contaMovimento;
					mapaPlano.put(contaMovimento,ttP);


				}
            }
             //Tratamento para inverter conta em lencamento simples feito para JBSOFTWARE
            if (roteiroCRM.optString("erpContabilidade").contains("JBSOFTWARE")){
				if(ttMov.contaDebito.contains("INVERTE") && !ttMov.contaCredito.contains("INVERTE")) ttMov.contaCredito = ttMov.contaCredito+ "INVERTE";
				if(!ttMov.contaDebito.contains("INVERTE") && ttMov.contaCredito.contains("INVERTE")) ttMov.contaDebito = ttMov.contaDebito+ "INVERTE";
			}

            chave = ttMov.chave;
			//chave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			String testeChave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
			if(!testeChave.toUpperCase().contains("ACUMULAANTES") && !testeChave.toUpperCase().contains("ACUMULARANTES")) chave = testeChave;
			
			if(chave.length() > 180) chave = cutString(chave, 0, 179);
			
            chave = chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";
            ttMov.chave = ttMov.chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";

			apagaStatus = true;
            String keyAc = chave;

            ttMovimentoPadrao ttMov3       = (ttMovimentoPadrao)mapaOficial.get(keyAc);
            if (ttMov3  == null) {
                ttMov3                = new ttMovimentoPadrao(ttMov);
                ttMov3.valorDesconto   = 0;
                ttMov3.valorJuros      = 0;
                ttMov3.valorDocumento  = 0;
                ttMov3.valorMulta      = 0;
                ttMov3.documento       = "";
            }
            if (ttMov3.documento.equals("")) {
                ttMov3.documento         = ttMov.documento;
            } else ttMov3.documento = ttMov3.documento + ", " + ttMov.documento;

            ttMov3.valorDesconto     = ttMov3.valorDesconto   + ttMov.valorDesconto;
            ttMov3.valorDocumento    = ttMov3.valorDocumento  + ttMov.valorDocumento;
            ttMov3.valorMulta        = ttMov3.valorMulta      + ttMov.valorMulta;
            ttMov3.valorJuros        = ttMov3.valorJuros      + ttMov.valorJuros;
            ttMov3.chave = chave;

            if (!ttMov.chave.equals(chave)) ttMov3.contador = 3;

			// for?a lancamento aberto no FB software
			if (roteiroCRM.optString("erpContabilidade").contains("JBSOFTWARE")) ttMov3.contador = 3;

            mapaVariavel.put(key,ttMov);
            mapaOficial.put(keyAc,ttMov3);
			
			ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
            if (ttLot       == null) {
                ttLot       = new ttLote();
                ttLot.lote  = ttMov.lote;
            }
            mapaLote.put(ttMov.lote,ttLot);

            if(ttMov.tipoPlanilha.contains("EXTRATO") || ttMov.tipoPlanilha.contains("CARTAO")){
                if(roteiroCRMPrincipal.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;
            }else if(roteiroCRM.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;

            if  ((ttMov.valorJuros > 0 || ttMov.valorDesconto > 0 || ttMov.valorMulta > 0 || ttMov3.contador == 3) && !ttMov.tipoPlanilha.equals("NAO LER")) {
                chave = chave.replaceAll("CTB","CTBPORT");
                key = chave;
                ttMovimentoPadrao ttMov2       = (ttMovimentoPadrao)mapaOficial.get(key);
                if (ttMov2  == null) {
                    ttMov2                = new ttMovimentoPadrao(ttMov);
                    ttMov2.contador        = 0;
                    ttMov2.valorDesconto   = 0;
                    ttMov2.valorJuros      = 0;
                    ttMov2.valorDocumento  = 0;
                    ttMov2.valorMulta      = 0;
                }
                ttMov2.tipoMovimento     = "CTBPORT";
                ttMov2.valorDesconto     = ttMov2.valorDesconto   + ttMov.valorDesconto;
                ttMov2.valorMulta        = ttMov2.valorMulta      + ttMov.valorMulta;
                ttMov2.valorJuros        = ttMov2.valorJuros      + ttMov.valorJuros;
                ttMov2.chave             = chave;
                ttMov2.chaveExtrato      = "";
                ttMov2.documento         = ttMov3.documento;
                ttMov2.classificacao     = ttMov.classificacao;
                ttMov2.valorDocumento    = ttMov2.valorDocumento + ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta;
                ttMov2.contador          = ttMov2.contador + ttMov3.contador;
                if(tipoLancamento.contains("PAGAR")){
                    ttMov2.naturezaContabil  = "C";
                    ttMov2.contaDebito       = "";
                    ttMov2.contaCredito      = ttMov.contaCredito;
                }
                if(tipoLancamento.contains("RECEBER")){
                    ttMov2.naturezaContabil  = "D";
                    ttMov2.contaDebito       = ttMov.contaDebito;
                    ttMov2.contaCredito      = "";
                }
                ttMov2.historico = getHistoricoPortador(contaPortador, ttMov2.historico, ttMov2.tipoLancamento, ttMov2.documento, ttMov2.nomeOrigem, histobj);
                
                String tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem, histobj);
                if(!tratarDiv.equals("")){
                    String filial = "";
                    if(tipoLancamento.contains("PAGAR")){
                        filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                        if(tratarDiv.contains("FORNECEDOR"))    ttMov3.historico = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("JUROS"))         ttMov3.historicoJuros = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("MULTA"))         ttMov3.historicoMulta = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("PORTADOR"))      ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("DESCONTO"))      ttMov2.historicoDesconto = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
                    }
                    if(tipoLancamento.contains("RECEBER")){
                        filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                        String aux = ttMov2.historico;
                        if(tratarDiv.contains("FORNECEDOR"))    ttMov3.historico = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("JUROS"))         ttMov3.historicoJuros = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("MULTA"))         ttMov3.historicoMulta = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("PORTADOR"))      ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
                        if(tratarDiv.contains("DESCONTO"))      ttMov2.historicoDesconto = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
                    }
                }

                mapaOficial.put(key,ttMov2);
				ttMov3.classificacao = ttMov2.classificacao;
				mapaOficial.put(keyAc,ttMov3);
            }
        }


        //-------------------------------------------------------------------------
        // GERA OS ARQUICOS PARA BAIXA DE DUPLICATAS -- FISCAL
        //-------------------------------------------------------------------------
        if (geraFiscal) {

            String auxExtencao = ".txt";
            if(roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) auxExtencao = ".csv";
            String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal + auxExtencao;
            FileWriter writer = new FileWriter(filename);
            writer.writeNewFile(txtFiscal.toString());

            loteFiscal = loteFiscal.replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");

            filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal + ".csv";
            writer = new FileWriter(filename);
            writer.writeNewFile(txtFornecedor.toString());
        }


        //-------------------------------------------------------------------------
        //--- DESABILITAR AQUI SOMENTE SE O BANCO DE DADOS CONTIVER TABELA IO_RAZAO
        //-------------------------------------------------------------------------


        StringBuilder ResumoTxt = new StringBuilder();
        String rn = "\r\n";
        ResumoTxt = new StringBuilder();
        ResumoTxt.append("");
        ResumoTxt.append(rn);

        ResumoTxt.append("STATUS;");
        ResumoTxt.append("DATA;TIPO DATA;");
        ResumoTxt.append("VALOR;");
        ResumoTxt.append("DOCUMENTO;");
        ResumoTxt.append("CLIENTE/FORNECEDOR;");
        ResumoTxt.append("PORTADOR;");
        ResumoTxt.append("COMPLEMENTO01;");
        ResumoTxt.append("COMPLEMENTO02;");
        ResumoTxt.append("COMPLEMENTO03;");
        ResumoTxt.append("COMPLEMENTO04;");
        ResumoTxt.append("COMPLEMENTO05;");
        ResumoTxt.append("COMPLEMENTO06;;CTA DEBITO ENCONTRADA;CTA CREDITO ENCONTRADA;REGRA CONTA CRM;HISTORICO;REGRA HISTORICO;;");
        ResumoTxt.append("DATA;");
        ResumoTxt.append("DEBITO;");
        ResumoTxt.append("CLASS DEB;");
        ResumoTxt.append("NOME CONTA;");
        ResumoTxt.append("CREDITO;");
        ResumoTxt.append("CLASS CRED;");
        ResumoTxt.append("NOME CONTA;");
        ResumoTxt.append("VALOR;");
        ResumoTxt.append("HISTORICO;");
        ResumoTxt.append("ORIGEM");

        StringBuilder txtDePara = new StringBuilder();

        txtDePara.append("DATA;VALOR;FORNECEDOR/CLIENTE;PORTADOR;CONTA DEBITO;CONTACREDITO;DOCUMENTO;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;C.CUSTO;ARQUIVO");
        txtDePara.append("\r\n");

        mapaVariavel		= new HashMap();

		if (apagaStatus) {
			jStatus = new JSONObject();
			putStatus(dirName, "", jStatus, logger);
		}
		
		// =======================================================================================
        // * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base
        // =======================================================================================
           
		
		Iterator itLote = mapaLote.keySet().iterator();
        while (itLote.hasNext()) {

            String key = (String)itLote.next();
            ttLote ttLot = (ttLote)mapaLote.get(key);
             lote = ttLot.lote;

            try {
                if (dbIOCont != null) {
                    dbIOCont.closeConnection();
                    dbIOCont = null;
                }
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(lote)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }
		}

        contRegra = -1;
        Iterator it = mapaOficial.keySet().iterator();
        while (it.hasNext()) {
            String chaveExtrato     = "";

            String key = (String)it.next();
            ttMovimentoPadrao ttMov = new ttMovimentoPadrao();
            try {
                ttMov = (ttMovimentoPadrao)mapaOficial.get(key);
            }
            catch (Exception xx) { continue;}

            if (ttMov.tipoPlanilha.equals("NAO LER")) continue;


            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                if(tipoLancamento.contains("PAGAR") && ttMov.debitoCredito.equals("EXTRATO-CREDITO")) continue;
                if(tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.equals("EXTRATO-DEBITO"))  continue;

            }
            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) continue;
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) continue;

            ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();

            contRegra++;
            int restoLinha = 0;
            restoLinha = (contRegra % 100);
            if (restoLinha == 0) putStatus(dirName, "04--Etapa 4 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);

            if(tipoLancamento.contains("PAGAR")){
                ttMov.naturezaContabil = "D";
                if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "C";
            }
            if(tipoLancamento.contains("RECEBER")){
                ttMov.naturezaContabil = "C";
                if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "D";
            }

            JSONObject extratoEmpresa = new JSONObject();


            // CASO A LINHA DO EXTATO JA TENHA SIDO LIDA PELA PLANILHA DE PAGAMENTOS, DEVE SER IGNORADA
            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                chaveExtrato = ttMov.chaveExtrato;

                extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? ")
                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                .param(chaveExtrato + "%")
                .queryUnique();

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    if (extratoEmpresa.has("EXTRATOLIDO")) {

                        double extratoLido = extratoEmpresa.optDouble("EXTRATOLIDO");

                        if (extratoLido == 1) continue;

                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")
                        .param(1)
                        .param(chaveExtrato)
                        .execute();

                    }
                }

            }


            // -----------------------------------------------------------------------------------------------------------
            // COMPARA COM RAZAO APENAS QUANDO O NOME DO ARQUIVO CONTIVER OTTIMIZZA, ASSIM FICA MAIS RAPIDA A INTEGRACAO
            // QUANDO O CLIENTE FINAL ESTIVER RODANDO.
            // -----------------------------------------------------------------------------------------------------------

            if (!ttMov.tipoMovimento.equals("CTBPORT") && ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) {

                String tipoData = "MOVIMENTO";

                comparaRazao = true;


                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Date dataMovimentoDateMenosUm= new Date();
                Date dataMovimentoDateMenosDois= new Date();
                Date dataMovimentoDateMenosTres= new Date();
                Date dataMovimentoDateMaisUm= new Date();
                Date dataMovimentoDateMaisDois= new Date();
                Date dataMovimentoDateMaisTres= new Date();

                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres = cal.getTime();

                if (ttMov.valorDocumento == 0) continue;

                String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                valorFinal = valorFinal.replaceAll("\\.",",");

                JSONArray registro = new JSONArray();

                for (int xx = 0;xx<5;xx++) {
                    try {
                        Date dataLeitura = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                        if (xx ==1) {dataLeitura = dataMovimentoDateMaisUm; tipoData = "D+1";}
                        if (xx ==2) {dataLeitura = dataMovimentoDateMenosUm; tipoData = "D-1";}
                        if (xx ==3) {dataLeitura = dataMovimentoDateMaisDois; tipoData = "D+2";}
                        if (xx ==4) {dataLeitura = dataMovimentoDateMenosDois; tipoData = "D-2";}

                        registro = dbIOCont.sql("SELECT CONTADEBITO,CONTACREDITO,HISTORICO FROM IO_RAZAO WHERE CODEMPRESA = ? AND DATAMOVIMENTO = ? AND VALORDOCUMENTO = ?")
                        .fields("CONTADEBITO,CONTACREDITO,HISTORICO")
                        .param(codEmpresa)
                        .param(dataLeitura)
                        .param(ttMov.valorDocumento)
                        .query();

                        if (registro != null && registro.length() > 0) break;
                    }
                    catch (Exception xx) {
                        break;
                    }
                }



                JSONObject histobj = new JSONObject();
                ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01, histobj);
                ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02, histobj);
                ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03, histobj);
                ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04, histobj);
                ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05, histobj);
                ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06, histobj);
                ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07, histobj);
                ttMov.complemento08 = getReplaceTermos("complemento09", ttMov.complemento08, histobj);
                ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09, histobj);
                ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10, histobj);
                ttMov.nomeOrigem = getReplaceTermos("nomeOrigem", ttMov.nomeOrigem, histobj);
                ttMov.documento = getReplaceTermos("documento", ttMov.documento, histobj);
                ttMov.nomePortador = getReplaceTermos("nomePortador", ttMov.nomePortador, histobj);

                histobj.put("nomeOrigem", ttMov.nomeOrigem); histobj.put("documento", ttMov.documento);
                histobj.put("complemento01", ttMov.complemento01); histobj.put("complemento02", ttMov.complemento02);
                histobj.put("complemento03", ttMov.complemento03); histobj.put("complemento04", ttMov.complemento04);
                histobj.put("complemento05", ttMov.complemento05); histobj.put("complemento06", ttMov.complemento06);
                histobj.put("complemento07", ttMov.complemento07); histobj.put("complemento08", ttMov.complemento08);
                histobj.put("complemento09", ttMov.complemento09); histobj.put("complemento10", ttMov.complemento10);
                histobj.put("dataMovimento", ttMov.dataMovimento); histobj.put("mesAnoAnterior", mesAnoAnterior);
                histobj.put("mesAno2Anterior", mesAno2Anterior); histobj.put("mesAnoAtual", mesAnoAtual);
                histobj.put("nomePortador", ttMov.nomePortador); histobj.put("contaMovimento", contaMovimento);
                histobj.put("contaPortador", contaPortador); histobj.put("contaDebito", "");
                histobj.put("contaCredito", ""); histobj.put("contaJuros", ttMov.contaJuros);
                histobj.put("contaDesconto", ttMov.contaDesconto); histobj.put("contaMulta", ttMov.contaMulta);
                histobj.put("centroCusto", ttMov.centroCusto); histobj.put("valorDocumento", ttMov.valorDocumento);
                histobj.put("valorJuros", ttMov.valorJuros); histobj.put("valorDesconto", ttMov.valorDesconto);
                histobj.put("valorMulta", ttMov.valorMulta); histobj.put("codFilial", ttMov.codFilial);
                histobj.put("tipoPlanilha", ttMov.tipoPlanilha); histobj.put("numeroAba", ttMov.abaPlanilha);

                String contaPrincipal = "";
                String contraSecundaria = "";

                if (tipoLancamento.contains("PAGAR")) {
                    contaPrincipal = ttMov.contaDebito;
                    contraSecundaria = ttMov.contaCredito;

                }
                if (tipoLancamento.contains("RECEBER")) {
                    contaPrincipal = ttMov.contaCredito;
                    contraSecundaria = ttMov.contaDebito;
                }

                regraContaMovimento = getRegraContaMovimento(contaPrincipal, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
                regraHistorico = getRegraHistoricoRegra(contaPrincipal, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

                if (registro != null && registro.length() > 0) {
                    for (int t=0; t<registro.length(); t++) {

                        JSONObject recMov = registro.optJSONObject(t);
                        String contaDebitoRazao = recMov.optString("CONTADEBITO");
                        String contaCreditoRazao = recMov.optString("CONTACREDITO");
                        String historicoRazao = recMov.optString("HISTORICO");

                        String descricaoCredito = "";
                        String descricaoDebito = "";
                        String classificacaoDebito = "";
                        String classificacaoCredito = "";

                        JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO,CONTAANALITICA")
                        .param(codEmpresa)
                        .param(contaDebitoRazao)
                        .queryUnique();

                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                        }
                        if (descricaoPlano != null && descricaoPlano.has("CONTAANALITICA")) {
                            classificacaoDebito = descricaoPlano.optString("CONTAANALITICA");
                        }

                        descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO,CONTAANALITICA")
                        .param(codEmpresa)
                        .param(contaCreditoRazao)
                        .queryUnique();

                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoCredito = descricaoPlano.optString("DESCRICAOPLANO");
                        }
                        if (descricaoPlano != null && descricaoPlano.has("CONTAANALITICA")) {
                            classificacaoCredito = descricaoPlano.optString("CONTAANALITICA");
                        }

                        ResumoTxt.append("\r\n");

                        if (registro.length() == 1) ResumoTxt.append("ENCONTRADO;");
                        if (registro.length() > 1) ResumoTxt.append("REPETIDO;");
                        ResumoTxt.append(ttMov.dataMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(tipoData);
                        ResumoTxt.append(";");
                        ResumoTxt.append(valorFinal);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.documento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomeOrigem);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomePortador);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento01);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento02);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento03);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento04);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento05);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento06);
                        ResumoTxt.append(";;");

                        ResumoTxt.append(ttMov.contaDebito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.contaCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(regraContaMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.historico.substring(0, ttMov.historico.indexOf("GPLCTO")));
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.historico.substring(0, ttMov.historico.indexOf("GPLCTO")));
                        ResumoTxt.append(";;");

                        ResumoTxt.append(ttMov.dataMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(contaDebitoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(classificacaoDebito);
                        ResumoTxt.append(";");


                        ResumoTxt.append(descricaoDebito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(contaCreditoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(classificacaoCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(descricaoCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(valorFinal);
                        ResumoTxt.append(";");
                        ResumoTxt.append(historicoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomeArquivo);
                        ResumoTxt.append(";");

                        objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                        objetoRoteiro.put("CHAVE", ttMov.chave + contaDebitoRazao);

                        objetoRoteiro.put("contaCreditoRazao", contaCreditoRazao);
                        objetoRoteiro.put("contaDebitoRazao", contaDebitoRazao);
                        objetoRoteiro.put("historicoRazao", historicoRazao);
                        objetoRoteiro.put("regraConta", regraContaMovimento);
                        objetoRoteiro.put("regraHistorico", regraHistorico);
                        objetoRoteiro.put("codigoHistorico", "");

                        objetoRoteiro.put("classificacaoDebito", classificacaoDebito);
                        objetoRoteiro.put("classificacaoCredito", classificacaoDebito);
                        objetoRoteiro.put("descricaoDebito", descricaoDebito);
                        objetoRoteiro.put("descricaoCredito", descricaoCredito);



                        if(ttMov.tipoMovimento.equals("CTB")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);
                    }
                }
                else {
                    ResumoTxt.append("\r\n");
                    ResumoTxt.append("NAO ENCONTRADO;");
                    ResumoTxt.append(ttMov.dataMovimento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(tipoData);
                    ResumoTxt.append(";");
                    ResumoTxt.append(valorFinal);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.documento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.nomeOrigem);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.nomePortador);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento01);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento02);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento03);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento04);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento05);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento06);
                    ResumoTxt.append(";;");

                    ResumoTxt.append(ttMov.contaDebito);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.contaCredito);
                    ResumoTxt.append(";");
                    ResumoTxt.append(regraContaMovimento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.historico);
                    ResumoTxt.append(";");
                    ResumoTxt.append(regraHistorico);
                    ResumoTxt.append(";;");
                    ResumoTxt.append(ttMov.nomeArquivo);
                    ResumoTxt.append(";");
                    objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                    if(ttMov.tipoMovimento.equals("CTB")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);

                }
            }

			if(tipoLancamento.contains("PAGAR")){

                if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "C";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "D";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "C";
                if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
            }
            if(tipoLancamento.contains("RECEBER")){
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "D";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "C";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "D";
                if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
            }

			if (roteiroCRM.optString("erpContabilidade").contains("DOMINIO")) {
				if(tipoLancamento.contains("PAGAR")){

					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

					if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
					if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
				}
				if(tipoLancamento.contains("RECEBER")){
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

					if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
					if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
				}
			}

            String classificacaoFinal = classificacao + ttMov.classificacao + "01";

            if ((classificacao.startsWith("X") || roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) && ttMov.tipoMovimento.equals("CTBPORT")) { continue;}


            if (classificacao.startsWith("X")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", ttMov.tipoMovimento);
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("CONTADEBITO", ttMov.contaDebito);
                js.put("CONTACREDITO", ttMov.contaCredito);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave  + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);

				if (statusCRM.contains("PROJETO") && ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO"))  {
					js.put("ID_ROTEIRO", roteiroCRM.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRM.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRM.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
					js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
					js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
					js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
					js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
				}

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");
				
				if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);

                //records.put(js);
                if (!ttMov.centroCusto.equals("")) {
					
                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("CONTADEBITO", ttMov.contaDebito);
					rec3.put("CONTACREDITO", ttMov.contaCredito);
				    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);

                    //records.put(rec3);
                }
                continue;
            }

            String classJur = "";
            String classDes = "";
            String classMul = "";

			if(tipoLancamento.contains("PAGAR")){
                if(classificacao.startsWith("C") || classificacao.startsWith("V")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
                    classDes = classificacao + ttMov.classificacao + "02";
                    classJur = classificacao + ttMov.classificacao + "04";
                    classMul = classificacao + ttMov.classificacao + "05";
                }
                if(classificacao.startsWith("D")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    classDes = classificacao + ttMov.classificacao + "05";
                    classJur = classificacao + ttMov.classificacao + "02";
                    classMul = classificacao + ttMov.classificacao + "03";
                }
            }
			
			
            if(tipoLancamento.contains("RECEBER")){
                if(classificacao.startsWith("D") || classificacao.startsWith("V")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
                    classDes = classificacao + ttMov.classificacao + "02";
                    classJur = classificacao + ttMov.classificacao + "04";
                    classMul = classificacao + ttMov.classificacao + "05";
                }
                if(classificacao.startsWith("C")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    classDes = classificacao + ttMov.classificacao + "05";
                    classJur = classificacao + ttMov.classificacao + "02";
                    classMul = classificacao + ttMov.classificacao + "03";
                }
            }
              


            if (ttMov.tipoMovimento.equals("CTBPORT")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTBPORT");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTBPORT");
                js.put("CLASSIFICACAO", classificacaoFinal);

				if (statusCRM.contains("PROJETO") && ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO"))  {
					js.put("ID_ROTEIRO", roteiroCRM.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRM.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRM.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
					js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
					js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
					js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
					js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
				}

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                }
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBPORT");				
				if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");				
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBPORT", js);
             
                //records.put(js);
            }
            if (ttMov.tipoMovimento.equals("CTB")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTB");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);

				if (statusCRM.contains("PROJETO") && ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO"))  {
					js.put("ID_ROTEIRO", roteiroCRM.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRM.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRM.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
					js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
					js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
					js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
					js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
				}

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                    if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTACREDITO", ttMov.contaCredito);
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                    if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTADEBITO", ttMov.contaDebito);

                }
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");				
				if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");				
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);
				
                //records.put(js);
                if (!ttMov.centroCusto.equals("")) {
                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("CONTADEBITO", ttMov.contaDebito);
					rec3.put("CONTACREDITO", ttMov.contaCredito);
				    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);
                    //records.put(rec3);
                }

				 
                if (ttMov.valorJuros > 0)  {
                    classificacaoFinal = classJur;
                    JSONObject jsJUR = new JSONObject(js.toString());
                    jsJUR.put("LOTE", ttMov.lote);
                    jsJUR.put("CNPJEMPRESA", cnpjEmpresa);
                    jsJUR.put("DOCUMENTO", ttMov.documento);
                    jsJUR.put("CODEMPRESA", ttMov.codEmpresa);
                    jsJUR.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsJUR.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsJUR.put("TIPOMOVIMENTO", "CTBJUR");
                    jsJUR.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsJUR.put("HISTORICO", ttMov.historicoJuros);
                    jsJUR.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsJUR.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsJUR.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsJUR.put("VALORJUROS", ttMov.valorJuros);
                    jsJUR.put("VALORMULTA", ttMov.valorMulta);
                    jsJUR.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsJUR.put("CENTROCUSTO", ttMov.centroCusto);
                    jsJUR.put("NATUREZACONTABIL", "D");
                    jsJUR.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsJUR.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsJUR.put("SERIE", ttMov.serie);
                    jsJUR.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsJUR.put("CHAVE", ttMov.chave + "-CTBJUR");
                    jsJUR.put("CLASSIFICACAO", classificacaoFinal);

                    jsJUR.put("COMPLEMENTO01", ttMov.complemento01);
                    jsJUR.put("COMPLEMENTO02", ttMov.complemento02);
                    jsJUR.put("COMPLEMENTO03", ttMov.complemento03);
                    jsJUR.put("COMPLEMENTO04", ttMov.complemento04);
                    jsJUR.put("COMPLEMENTO05", ttMov.complemento05);
                    jsJUR.put("COMPLEMENTO06", ttMov.complemento06);
                    jsJUR.put("COMPLEMENTO07", ttMov.complemento07);
                    jsJUR.put("COMPLEMENTO08", ttMov.complemento08);
                    jsJUR.put("COMPLEMENTO09", ttMov.complemento09);
                    jsJUR.put("COMPLEMENTO10", ttMov.complemento10);
                    jsJUR.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsJUR.put("CONTADEBITO",  ttMov.contaJuros);
                        jsJUR.put("CONTACREDITO", "");
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTACREDITO", ttMov.contaCredito);

                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsJUR.put("CONTADEBITO",  "");
                        jsJUR.put("CONTACREDITO", ttMov.contaJuros);
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTADEBITO", ttMov.contaDebito);

                    }
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJUR");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJUR", jsJUR);
				
                
                    //records.put(jsJUR);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsJUR.toString());
                         rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBJURCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBJURCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBJURCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJURCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJURCC", rec3);
                       // records.put(rec3);
                    }
                }
                if (ttMov.valorDesconto > 0)  {
                    classificacaoFinal = classDes;
                    JSONObject jsDES = new JSONObject(js.toString());
                    jsDES.put("LOTE", ttMov.lote);
                    jsDES.put("CNPJEMPRESA", cnpjEmpresa);
                    jsDES.put("DOCUMENTO", ttMov.documento);
                    jsDES.put("CODEMPRESA", ttMov.codEmpresa);
                    jsDES.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsDES.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsDES.put("TIPOMOVIMENTO", "CTBDES");
                    jsDES.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsDES.put("HISTORICO", ttMov.historicoDesconto);
                    jsDES.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsDES.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsDES.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsDES.put("VALORJUROS", ttMov.valorJuros);
                    jsDES.put("VALORMULTA", ttMov.valorMulta);
                    jsDES.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsDES.put("CENTROCUSTO", ttMov.centroCusto);
                    jsDES.put("NATUREZACONTABIL", "C");
                    jsDES.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsDES.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsDES.put("SERIE", ttMov.serie);
                    jsDES.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsDES.put("CHAVE", ttMov.chave + "-CTBDES");
                    jsDES.put("CLASSIFICACAO", classificacaoFinal);

                    jsDES.put("COMPLEMENTO01", ttMov.complemento01);
                    jsDES.put("COMPLEMENTO02", ttMov.complemento02);
                    jsDES.put("COMPLEMENTO03", ttMov.complemento03);
                    jsDES.put("COMPLEMENTO04", ttMov.complemento04);
                    jsDES.put("COMPLEMENTO05", ttMov.complemento05);
                    jsDES.put("COMPLEMENTO06", ttMov.complemento06);
                    jsDES.put("COMPLEMENTO07", ttMov.complemento07);
                    jsDES.put("COMPLEMENTO08", ttMov.complemento08);
                    jsDES.put("COMPLEMENTO09", ttMov.complemento09);
                    jsDES.put("COMPLEMENTO10", ttMov.complemento10);
                    jsDES.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsDES.put("CONTADEBITO", "");
                        jsDES.put("CONTACREDITO", ttMov.contaDesconto);
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTADEBITO", ttMov.contaCredito);

                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsDES.put("CONTADEBITO",  ttMov.contaDesconto);
                        jsDES.put("CONTACREDITO", "");
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTACREDITO", ttMov.contaDebito);

                    }
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDES");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDES", jsDES);
				 
                    //records.put(jsDES);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsDES.toString());
                        rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBDESCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBDESCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBDESCC");
                        recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDESCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDESCC", rec3);
                       // records.put(rec3);
                    }
                }
                if (ttMov.valorMulta > 0)  {
                    classificacaoFinal = classMul;
                    JSONObject jsMUL = new JSONObject(js.toString());
                    jsMUL.put("LOTE", ttMov.lote);
                    jsMUL.put("CNPJEMPRESA", cnpjEmpresa);
                    jsMUL.put("DOCUMENTO", ttMov.documento);
                    jsMUL.put("CODEMPRESA", ttMov.codEmpresa);
                    jsMUL.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsMUL.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsMUL.put("TIPOMOVIMENTO", "CTBMUL");
                    jsMUL.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsMUL.put("HISTORICO", ttMov.historicoMulta);
                    jsMUL.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsMUL.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsMUL.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsMUL.put("VALORJUROS", ttMov.valorJuros);
                    jsMUL.put("VALORMULTA", ttMov.valorMulta);
                    jsMUL.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsMUL.put("CENTROCUSTO", ttMov.centroCusto);
                    jsMUL.put("NATUREZACONTABIL", "D");
                    jsMUL.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsMUL.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsMUL.put("SERIE", ttMov.serie);
                    jsMUL.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsMUL.put("CHAVE", ttMov.chave + "-CTBMUL");
                    jsMUL.put("CLASSIFICACAO", classificacaoFinal);

                    jsMUL.put("COMPLEMENTO01", ttMov.complemento01);
                    jsMUL.put("COMPLEMENTO02", ttMov.complemento02);
                    jsMUL.put("COMPLEMENTO03", ttMov.complemento03);
                    jsMUL.put("COMPLEMENTO04", ttMov.complemento04);
                    jsMUL.put("COMPLEMENTO05", ttMov.complemento05);
                    jsMUL.put("COMPLEMENTO06", ttMov.complemento06);
                    jsMUL.put("COMPLEMENTO07", ttMov.complemento07);
                    jsMUL.put("COMPLEMENTO08", ttMov.complemento08);
                    jsMUL.put("COMPLEMENTO09", ttMov.complemento09);
                    jsMUL.put("COMPLEMENTO10", ttMov.complemento10);
                    jsMUL.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsMUL.put("CONTADEBITO",  ttMov.contaMulta);
                        jsMUL.put("CONTACREDITO", "");
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTACREDITO", ttMov.contaCredito);

                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsMUL.put("CONTADEBITO",  "");
                        jsMUL.put("CONTACREDITO", ttMov.contaMulta);
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTADEBITO", ttMov.contaDebito);

                    }
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMUL");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMUL", jsMUL);				 
                    
                    //records.put(jsMUL);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsMUL.toString());
                        rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBMULCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBMULCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBMULCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMULCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMULCC", rec3);
                       //records.put(rec3);
                    }
                }
            }
        }

        if (apagaExtrato) {
            dbIOCont.delete("IO_EXTRATO")
            .where("CODEMPRESA=?")
            .param(codEmpresa)
            .execute();
        }
        // resumo comparativo com razao
        if (comparaRazao) {
            String filenameRazao = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_APOS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +".csv";
            FileWriter writerRazao = new FileWriter(filenameRazao);
            writerRazao.writeNewFile(ResumoTxt.toString());
        }

        //-------------------------------------------------------------------------------------
        // GERA ARQUIVO COM CONTAS NAO ENCONTRADAS
        //-------------------------------------------------------------------------------------
        String filename = backupDirName + "/ARQUIVO_APOIO_" + tipoLancamento + ".csv";
        // Cria o arquivo de DE-PARA FORNECEDOR
        FileWriter writer = new FileWriter(filename);
        writer.writeNewFile(txtDePara.toString());

        Iterator ite = mapaLote.keySet().iterator();
        while (ite.hasNext()) {
            String key = (String)ite.next();
            ttLote ttLot = (ttLote)mapaLote.get(key);
            // =======================================================================================
            // * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base *
            // =======================================================================================
            lote = ttLot.lote;             
            ultimoJS = new JSONObject();
            ultimoJS.put("LOTE", lote);
            ultimoJS.put("DOCUMENTO", "");
            ultimoJS.put("CODEMPRESA", codEmpresa);
            ultimoJS.put("NOMEEMPRESA", nomeEmpresa);
            ultimoJS.put("DATAMOVIMENTO", "");
            ultimoJS.put("TIPOMOVIMENTO", "");
            ultimoJS.put("TIPOLANCAMENTO", "");
            ultimoJS.put("CONTADEBITO", "LOTE_ENCERRADO");
            ultimoJS.put("CONTACREDITO", "LOTE_ENCERRADO");
            ultimoJS.put("HISTORICO", "");
            ultimoJS.put("VALORLIQUIDACAO", 0);
            ultimoJS.put("VALORDOCUMENTO", 0);
            ultimoJS.put("VALORDESCONTO", 0);
            ultimoJS.put("VALORJUROS", 0);
            ultimoJS.put("VALORMULTA", 0);
            ultimoJS.put("NOMEPORTADOR", "");
            ultimoJS.put("CENTROCUSTO", "");
            ultimoJS.put("NATUREZACONTABIL", "");
            ultimoJS.put("NOMEORIGEM", "");
            ultimoJS.put("CPFCNPJ", "");
            ultimoJS.put("SERIE", "");
            ultimoJS.put("STATUSMOVIMENTO", 0);
            ultimoJS.put("CHAVE","LOTE_ENCERRADO " + lote );
            ultimoJS.put("CLASSIFICACAO", "LOTE_ENCERRADO");
            ultimoJS.put("STATUSMOVIMENTO", 1);
            records.put(ultimoJS);
            // Resumo Planilha
            try {
                String dirName1 = dirName.substring(0, dirName.lastIndexOf("/"))+"/DePara/";
                File file = new File(dirName1);
                try {
                    String diretorio = dirName1;
                    File file2 = new File(diretorio);
                    File[] files = file2.listFiles();
                    if (FileUtil.dirHasFiles(diretorio)) {
                        for (File fl: files) {
                            if (fl.isFile()){
                                if(fl.getName().contains(lote) && fl.getName().toLowerCase().endsWith(".csv") && !fl.getName().startsWith("OK_") ){
                                    // ELIMINA ARQUIVO IMPORTADO
                                    file = new File(dirName1);
                                    if (file.exists()){
                                        FileUtil.deleteFile(dirName1+fl.getName());
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception ee) {
                    logger.logError(ee);
                }
            }catch (Exception e) {
                logger.logError(e);
            }
        }
    } catch (Exception ee) {
        logger.logError("EndpointA: ", ee);
    } finally {
        if (dbIOCont != null) {
            dbIOCont.closeConnection();
        }
		if (dbIODepara != null) {
            dbIODepara.closeConnection();
        }
    }
    return records;
}

class ttLote {
    public String lote;
    public ttLote(){}
    public ttLote(ttLote tt){
        lote=tt.lote;
    }
}

class ttJuros {
    public String documento;
	public double valorJur;
	public int valorLido;
    public ttJuros(){}
    public ttJuros(ttJuros ttJ){
        documento = ttJ.documento;
		valorLido = ttJ.valorLido;
		valorJur  = ttJ.valorJur;
    }
}

class ttDesconto {
    public String documento;
	public double valorDesc;
	public int valorLido;
    public ttDesconto(){}
    public ttDesconto(ttDesconto ttD){
        documento  = ttD.documento;
		valorDesc  = ttD.valorDesc;
		valorLido  = ttD.valorLido;
    }
}

class ttPlano {
    public String contaContabil;
    public String descricaoPlano;
    public String contaAnalitica;
    public ttPlano(){}
    public ttPlano(ttPlano ttP){
        contaContabil = ttP.contaContabil;
		descricaoPlano = ttP.descricaoPlano;
		contaAnalitica = ttP.contaAnalitica;
    }
}

class ttFornecedor {
    public String nomeOrigem;
    public String contaMovimento;
    public ttFornecedor(){}
    public ttFornecedor(ttFornecedor ttF){
        nomeOrigem 	 = ttF.nomeOrigem;
        contaMovimento = ttF.contaMovimento;
    }
}

public void criaMovimento(DataBase dbIO, JSONObject recordRec, String chave, JSONObject js) {
	if (recordRec != null)  {
		try {
			updateMovimento(dbIO, js);
			/*if (js.has("idRoteiro")) {
				try {
					updateArquivo(dbIO, js);
				} catch(Exception ex){}
			}*/
		} catch (Exception eUpdateMovimento) {						 
			logger.logError("EndpointB: Erro ao Atualizar Movimento", eUpdateMovimento);
		}
	} else {
		try {
			insertMovimento(dbIO, js); 
			/*if (js.has("idRoteiro")) {
				try {
					insertArquivo(dbIO, js);
				} catch(Exception ex) {}
			}*/
				
		} catch (Exception eInsertMovimento) { 						 
			logger.logError("EndpointB: Erro ao fazer insert no Movimento", eInsertMovimento);
		}
	}
}

public int getIndiceRoteiro(String nomeCampo, JSONObject roteiroIndice) {
    int validaCampo = -1;
    try {
        if (!roteiroIndice.optString(nomeCampo).equals("")) {
            try {
                validaCampo = Integer.parseInt(roteiroIndice.optString(nomeCampo).replaceAll("@","").trim());
            }
            catch (Exception xx) { validaCampo = -1;}
        }
    }
    catch (Exception xx) {validaCampo = -1;}
    return  validaCampo;
}



/*#############################################@ EXTRATO-BRADESCO-TXT @##############################################*/
public String verificaExtratos(JSONObject variaveis, HashMap mapaVariavel, MemoryFile memFile, JSONObject roteiroCRM, DataBase dbIOCont, InoutLogger logger) throws Exception {

	String line           = "";
    String anoData        = "";
	String dirName        = "";
	String jStatus        = "";
	String extensao       = "";
	String codEmpresa     = "";
	String nomeArquivo    = "";
	String nomeEmpresa    = "";
	String nomePortador   = "";
	String tipoPlanilha   = "";
	String complemento01  = "";
	String complemento02  = "";
	String nomePortador2  = "";
	String tipoLancamento = "";
    
	
	if (variaveis.has("line"))           line           = variaveis.optString("line");
	if (variaveis.has("anoData"))        anoData        = variaveis.optString("anoData");
	if (variaveis.has("dirName"))        dirName        = variaveis.optString("dirName");
	if (variaveis.has("jStatus"))        jStatus        = variaveis.optString("jStatus");
	if (variaveis.has("extensao"))       extensao       = variaveis.optString("extensao");
	if (variaveis.has("codEmpresa"))     codEmpresa     = variaveis.optString("codEmpresa");
	if (variaveis.has("nomeArquivo"))    nomeArquivo    = variaveis.optString("nomeArquivo");
	if (variaveis.has("nomeEmpresa"))    nomeEmpresa    = variaveis.optString("nomeEmpresa");
	if (variaveis.has("nomePortador"))   nomePortador   = variaveis.optString("nomePortador");
	if (variaveis.has("tipoPlanilha"))   tipoPlanilha   = variaveis.optString("tipoPlanilha");
	if (variaveis.has("complemento01"))  complemento01  = variaveis.optString("complemento01");
	if (variaveis.has("complemento02"))  complemento02  = variaveis.optString("complemento02");
	if (variaveis.has("nomePortador2"))  nomePortador2  = variaveis.optString("nomePortador2");
	if (variaveis.has("tipoLancamento")) tipoLancamento = variaveis.optString("tipoLancamento");
	


		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//  LEITURA PADRAO - EXTRATO - BRADESCO TXT
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Bradesco_TXT") && nomeArquivo.toUpperCase().endsWith(".TXT")) {
			// Nome Portador  ->  "BRADESCO {AGENCIA} {CONTA}"
			if (line.contains("EXTRATO DE: AG") && line.contains("NCIA:") && line.contains("CONTA:")) {
				nomePortador = ("BRADESCO " + line.substring(line.indexOf("NCIA:")+5, line.indexOf("NCIA:")+11).trim() + " " + line.substring(line.indexOf("CONTA:")+6).trim()).trim();

				tipoPlanilha = "EXTRATO-BRADESCO-TXT";

				JSONObject jDados = new JSONObject();
				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);
				
				readExtratoBradescoTxt(memFile, nomePortador, jDados, dbIOCont, logger);
                variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			}
		} // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO BANCO BRADESCO TXT"

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//  LEITURA PADRAO - EXTRATO - BANESTE
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Banestes_Excel")) {

			if (line.toUpperCase().trim().startsWith("BANESTES") && 
					!line.toUpperCase().trim().contains("SISTEMA DE SALDOS") &&
						!line.toUpperCase().trim().contains("EXTRATO DE CONTA CORRENTE")) {
							nomePortador2 = "BANESTES";

                            variaveis.put("nomePortador2", nomePortador2);
                            variaveis.put("tipoRetorno",   "break");
				            return variaveis.toString();
						}

			if ((line.toUpperCase().trim().startsWith("BANESTES S/A") && 
					line.toUpperCase().trim().contains("SISTEMA DE SALDOS")&&
						line.toUpperCase().trim().contains("EXTRATOS")) || (nomePortador2.equals("BANESTES") && line.contains("EXTRATO"))) {
                            tipoPlanilha = "EXTRATOBANESTE";

                            JSONObject jDados = new JSONObject();
                            jDados.put("CODEMPRESA", codEmpresa);
                            jDados.put("NOMEARQUIVO", nomeArquivo);

                            readExtratoBanesteDefault(memFile, jDados, dbIOCont, logger);
                            variaveis.put("tipoRetorno", "break");
                            return variaveis.toString();
			}
		} // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO BANESTE"
		
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~-- //
		// 								LEITURA PADRAO - BEN VISA  									     //
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~-- //
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_BenVisa_Excel") && nomeArquivo.toUpperCase().contains("BEN") && nomeArquivo.toUpperCase().contains("VISA")) {
			String lineAux = line.replaceAll("\"", "");
			if (lineAux.contains("NRO DOC") &&
			lineAux.contains("ESTABELECIMENTO") &&
			lineAux.contains("CNPJ") &&
			lineAux.contains("VALOR") &&
			lineAux.contains("VENDA") &&
			lineAux.contains("TAXAS")) {

				JSONObject jDados = new JSONObject();
				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo do Erp do Cliente da Contabilidade.
				mapaVariavel = readCartaoBenVisaExcel(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			}
		}

		//  LEITURA PADRAO - EXTRATO - Extrato_Daycoval_Excel
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Daycoval_Excel")) {
			if (nomeArquivo.toUpperCase().contains("DAYCOVAL") && (extensao.contains(".xlsx,.XLSX") || extensao.contains(".csv,.CSV")) ) {

				tipoPlanilha = "EXTRATODAYCOVAL";

				JSONObject jDados = new JSONObject();
				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);
				jDados.put("TIPOLANCAMENTO", tipoLancamento);

				readExtratoDaycoval(memFile, jDados, dbIOCont, logger);
 				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			}
		} // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO Daycoval"
		
		// ----------------------------------------------------------------------------------------------------------
        //  LEITURA PADRAO - EXTRATO - BANCO DO BRASIL EXCEL
        //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
        if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_BB_Excel")) {
            if (line.contains("EXTRATO CONTA CORRENTE")) {
                nomePortador2 = "BANCO-BRASIL";
				variaveis.put("nomePortador2", nomePortador2);
                variaveis.put("tipoRetorno", "continue");
				return variaveis.toString();
            }
            if (nomePortador2.contains("BANCO-BRASIL") && line.contains("NCIA") && line.contains("CONTA")) {
                tipoPlanilha = "EXTRATO-BANCO-DO-BRASIL";

                nomePortador2 = nomePortador2 + " - " + memFile.getStringFieldRemoveEspCharsUpper(1) + " - " + memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1);
				
                JSONObject jDados = new JSONObject();
                jDados.put("CODEMPRESA", codEmpresa);
                jDados.put("NOMEARQUIVO", nomeArquivo);

                readExtratoBancoBrasilExcel(memFile, nomePortador2, jDados, dbIOCont, logger);
                variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
            }
		}
		
		//  LEITURA PADRAO - EXTRATO - SICOOB
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Sicoob_Txt")) {
			if (line.startsWith("SICOOB")) {

				tipoPlanilha = "EXTRATOSICOOB";

				JSONObject jDados = new JSONObject();
				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);

				readExtratoSicoobTxt(memFile, nomePortador, jDados, dbIOCont, logger);
 				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			}
		} // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO SICOOB"


		 //  LEITURA PADRAO - EXTRATO - Sicredi
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Sicredi_TXT")) {
			if (line.contains("COOP") && line.contains("CRED") && line.contains("EXTRATO") && line.contains("CONTA") && line.contains("CORRENTE")) {

				tipoPlanilha = "EXTRATOSICREDI";

				JSONObject jDados = new JSONObject();
				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",    tipoPlanilha);

				readExtratoSicrediTxt(memFile, nomePortador, jDados, dbIOCont, logger);
 				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			}
		} // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO SICOOB"

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - Topazio
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Topazio_Excel")) {
			if(line.contains("TOPAZ BANKING")) {

				tipoPlanilha = "EXTRATOTOPAZIO";

				JSONObject jDados = new JSONObject();
				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",    tipoPlanilha);

				readExtratoTopazioExcel(memFile, nomePortador, jDados, dbIOCont, logger);
 				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			}

		}
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - UNICRED
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~--
		/* NAO esta nos padroes
		if(roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Unicred_TXT") && nomeArquivo.toUpperCase().contains(".TXT") && nomeArquivo.toUpperCase().contains("UNICRED")){
			tipoPlanilha = "EXTRATO-UNICRED";
			JSONObject jDados = new JSONObject();
			jDados.put("CODEMPRESA", codEmpresa);
			jDados.put("NOMEARQUIVO", nomeArquivo);
			readExtratoUNICREDTxt(memFile, jDados, dbIOCont, logger);
			putStatus(dirName, "", jStatus, logger);
			variaveis.put("tipoRetorno", "break");
            return variaveis.toString();
		}*/
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - SEM PARAR
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Sem_Parar_Csv")) {
			if (memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").replace("\"","").replace("'","").equals("LOCAL") &&
				memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").replace("\"","").replace("'","").equals("DATA LOTE") &&
				memFile.getStringFieldRemoveEspCharsUpper(8).replaceAll("\"","").contains("VALOR ACEITO") && 
				memFile.getStringFieldRemoveEspCharsUpper(9).replaceAll("\"","").contains("VALOR REPASSE")) {

				tipoPlanilha = "CARTAO-SEM PARAR";

				JSONObject jDados = new JSONObject();
				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",    tipoPlanilha);

				mapaVariavel = readExtratoSemParar(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			} 
			
			if (memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").replace("\"","").replace("'","").equals("LOCAL") &&
				memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").replace("\"","").replace("'","").equals("DATA LOTE") &&
				memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","").replace("\"","").replace("'","").equals("LOTE") && 
				memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").contains("ENV. ")&&
				memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("\"","").contains("ENV. ") &&
				memFile.getStringFieldRemoveEspCharsUpper(5).replaceAll("\"","").contains("REJ. ") &&
				memFile.getStringFieldRemoveEspCharsUpper(6).replaceAll("\"","").contains("REJ. ") &&
				memFile.getStringFieldRemoveEspCharsUpper(7).replaceAll("\"","").contains("ACEITO ") &&
				memFile.getStringFieldRemoveEspCharsUpper(8).replaceAll("\"","").contains("ACEITO ") &&
				memFile.getStringFieldRemoveEspCharsUpper(9).replaceAll("\"","").replace("\"","").replace("'","").equals("DATA REPASSE") &&
				memFile.getStringFieldRemoveEspCharsUpper(10).replaceAll("\"","").contains("REPASSE ")){
				tipoPlanilha = "SEMPARARNOVO";
				
				JSONObject jDados = new JSONObject();
				
				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",    tipoPlanilha);

				mapaVariavel = readExtratoSemParar2(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno", "break");
				return variaveis.toString(); // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO SEM PARAR"
			}
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO CARTAO - GREENCARD
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_GreenCard_Excel")) {
			if (
				memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA") &&
				memFile.getStringFieldRemoveEspCharsUpper(0).contains("COMPRA") &&
				memFile.getStringFieldRemoveEspCharsUpper(1).contains("VENCIMENTO") &&
				memFile.getStringFieldRemoveEspCharsUpper(2).contains("AUTORIZA") &&
				memFile.getStringFieldRemoveEspCharsUpper(3).contains("VALOR")
				) {
				tipoPlanilha = "CARTAO-GREENCARD";

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",    tipoPlanilha);

				mapaVariavel = readCartaoGreenCard(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			}
		
		}/*~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--*/
		
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - BANRISUL
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~--
		if(roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Banrisul_TXT") && nomeArquivo.toUpperCase().contains(".TXT") 
		&& line.contains("B A N R I S U L")){

			nomePortador  = StringUtil.removeSpecialCharsToUC(nomeArquivo);
			complemento01 = nomePortador;
			tipoPlanilha = "EXTRATO-BANRISUL";

			JSONObject jDados = new JSONObject();

			jDados.put("CODEMPRESA", codEmpresa);
			jDados.put("NOMEARQUIVO", nomeArquivo);

			readExtratoBANRISULDefault(memFile, nomePortador, jDados, dbIOCont, logger);
 			variaveis.put("tipoRetorno", "break");
            return variaveis.toString();
		}


		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - BOTICARIO
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Boticario_Excel")) {
			if (line.contains("NSU") && line.contains("SITEF") && line.contains("ADQUIRENTE") && !line.contains("PEDIDO")) {

				tipoPlanilha = "BOTICARIO";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",    tipoPlanilha);

				mapaVariavel = readBoticario(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO SEM PARAR"
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - STONE
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Stone_Excel")) {
			if (line.contains("HORA DA VENDA") && line.contains("BANDEIRA") && line.contains("STONE ID")) {

				tipoPlanilha = "CARTAO-STONE";
				
				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",    tipoPlanilha);

				mapaVariavel = readExtratoStone(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO STONE"
		}
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - Cartao_Paypal_Excel
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
	   if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Paypal_Excel") && 
		nomeArquivo.toUpperCase().contains("PAYPAL") &&
		nomeArquivo.toUpperCase().endsWith(".XLSX")) {
				if (line.contains("DATA") &&
				line.contains("MOEDA") &&
				line.contains("STATUS") &&
				line.contains("HORA") &&
				line.contains("TARIFA")) {
					
					tipoPlanilha = "CARTAO-PAYPAL";
					
					JSONObject jDados = new JSONObject();

					jDados.put("CODEMPRESA", codEmpresa);
					jDados.put("TIPOLANCAMENTO", tipoLancamento);
					jDados.put("NOMEEMPRESA",    nomeEmpresa);
					jDados.put("NOMEARQUIVO",    nomeArquivo);
					jDados.put("TIPOPLANILHA",    tipoPlanilha);
					
				mapaVariavel = readCartaoPayPal(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO STONE"
			if (line.contains("DATA") &&
			line.contains("PAGAMENTOS") &&
			line.contains("RECEBIDOS") &&
			line.contains("REEMBOLSADAS") &&
			line.contains("TARIFAS")) {
				
				tipoPlanilha = "CARTAO-PAYPAL";
				
				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",    tipoPlanilha);

				mapaVariavel = readCartaoPayPal2(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO STONE"
		}
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - ELAVON
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Elavon_Excel")) {
			if (memFile.getStringFieldRemoveEspCharsUpper(11).replaceAll("\"","").replace("\"","").replace("'","").equals("NSU") &&
				memFile.getStringFieldRemoveEspCharsUpper(23).replaceAll("\"","").contains("ECOM") &&
				memFile.getStringFieldRemoveEspCharsUpper(23).replaceAll("\"","").contains("RECORRENTE") &&
				memFile.getStringFieldRemoveEspCharsUpper(29).replaceAll("\"","").contains("DO BATCH IATA")) {

				tipoPlanilha = "CARTAO-ELAVON";

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",   tipoPlanilha);

				mapaVariavel = readExtratoElavon(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO ELAVON"
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - PAGSEGURO
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_PagSeguro_Excel")) {
			if (memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").replace("\"","").replace("'","").equals("TRANSACAO_ID") &&
				memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").replace("\"","").replace("'","").equals("CLIENTE_NOME") &&
				memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","").replace("\"","").replace("'","").equals("CLIENTE_EMAIL") &&
				memFile.getStringFieldRemoveEspCharsUpper(17).replaceAll("\"","").replace("\"","").replace("'","").equals("CODIGO_USUARIO")) {

				tipoPlanilha = "CARTAO-PAGSEGURO";

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",   tipoPlanilha);

				mapaVariavel = readExtratoPagSeguro(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO PAGSEGURO"
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - MOIP
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Moip_Excel")) {
			if (memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").replace("\"","").replace("'","").equals("ID") &&
				memFile.getStringFieldRemoveEspCharsUpper(8).replaceAll("\"","").replace("\"","").replace("'","").equals("EVENTO") &&
				memFile.getStringFieldRemoveEspCharsUpper(11).replaceAll("\"","").contains("ID PROPRIO")) {

				tipoPlanilha = "CARTAO-MOIP";

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",   tipoPlanilha);

				mapaVariavel = readExtratoMoip(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO MOIP"
			if (line.replaceAll("\"","").replace("\"","").replace("'","").contains("DATA INICIAL") &&
				line.replaceAll("\"","").replace("\"","").replace("'","").contains("OUTROS RECEBEDORES") &&
				line.replaceAll("\"","").contains("NUMERO DE PARCELAS")) {
				
				tipoPlanilha = "CARTAO-MOIP";

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",   tipoPlanilha);

				mapaVariavel = readExtratoMoip2(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO MOIP"
		}
		
		
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//  LEITURA PADRAO - EXTRATO - BANCO DO BRASIL - PDF
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_BB_PDF")) {

			// Nome Portador  ->  "BANCO DO BRASIL {AGENCIA} {CONTA}"
			if (line.contains("CLIENTE - CONTA ATUAL") && nomeArquivo.toUpperCase().contains(".PDF") && nomePortador2.equals("")) {

				nomePortador2 = "PDF-BANCOBRASIL";

                variaveis.put("nomePortador2", nomePortador2);
                variaveis.put("tipoRetorno", "continue");
				return variaveis.toString();
			}
			if (nomePortador2.equals("PDF-BANCOBRASIL") && line.contains("CONTA CORRENTE")) {

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);
				jDados.put("TIPOPLANILHA", "EXTRATO-BB");
				
				readExtratoBancoDoBrasilPDF(memFile, "BANCO DO BRASIL", jDados, dbIOCont, logger);
 				variaveis.put("tipoRetorno", "continue");
				return variaveis.toString();
			}
		}
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//  LEITURA PADRAO - EXTRATO - BANCO DO BRASIL
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_BB_TXT")) {

			// Nome Portador  ->  "BANCO DO BRASIL {AGENCIA} {CONTA}"
			if (line.contains("EXTRATO CONTA CORRENTE") && nomeArquivo.toUpperCase().contains(".TXT")) {

				tipoPlanilha = "EXTRATO-BB";

				JSONObject jDados = new JSONObject();
				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);
				
				readExtratoBancoDoBrasilDoc2(memFile, "BANCO DO BRASIL", jDados, dbIOCont, logger);
				// readExtratoBancoDoBrasilDoc(memFile, "BANCO DO BRASIL", jDados, dbIOCont, logger);
 				variaveis.put("tipoRetorno", "break");
				return variaveis.toString();
			}
		} // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO BANCO DO BRASIL"

	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
	//LEITURA PADRAO - EXTRATO - GETNET
	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
	if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_GetNet_Excel")) {
		String tipoLeitura = "";
		if (line.toUpperCase().trim().contains("CART") && 
			line.toUpperCase().trim().contains("EMISSOR CART") && 
			line.toUpperCase().trim().contains("MERO DO TERMINAL") && 
			line.toUpperCase().trim().contains("MERO DA AUTORIZA") ) {
			tipoLeitura = "001";
		}

		if (line.toUpperCase().trim().contains("VALOR BRUTO:") &&
			line.toUpperCase().trim().contains("DA TAXA:") &&
			line.toUpperCase().trim().contains("DETALHAMENTO DAS VENDAS") &&
			line.toUpperCase().trim().contains("QUIDO:")) {
			tipoLeitura = "002";											
		}
		
		if (line.toUpperCase().trim().contains("DESCRI") &&                                            
			line.toUpperCase().trim().contains("DATA DE LAN") && 
			line.toUpperCase().trim().contains("BANDEIRA") && 
			line.toUpperCase().trim().contains("ESTABELECIMENTO") &&  
			line.toUpperCase().trim().contains("QTD TOTAL DE TRAN")) {
			tipoLeitura = "003";											
		}

        if (line.toUpperCase().trim().contains("VALOR") &&
            line.toUpperCase().trim().contains("DATA") &&
            line.toUpperCase().trim().contains("TAXA") &&
            line.toUpperCase().trim().contains("VENDAS") &&
            line.toUpperCase().trim().contains("BRUTO:") &&
            line.toUpperCase().trim().contains("TARIFA:") &&
            line.toUpperCase().trim().contains("CONSOLIDADO") &&
            line.toUpperCase().trim().contains("QUIDO:")) {
            tipoLeitura = "004";											
        }

		if (!tipoLeitura.equals("")) {

			tipoPlanilha = "CARTAO-GETNET";

			JSONObject jDados = new JSONObject();

			jDados.put("LINE",           line);
			jDados.put("CODEMPRESA",     codEmpresa);
			jDados.put("TIPOLEITURA",    tipoLeitura);
			jDados.put("NOMEEMPRESA",    nomeEmpresa);
			jDados.put("NOMEARQUIVO",    nomeArquivo);
			jDados.put("TIPOPLANILHA",   tipoPlanilha);
			jDados.put("TIPOLANCAMENTO", tipoLancamento);

			mapaVariavel = readExtratoGetNetRefatorado(memFile, jDados, mapaVariavel, logger);
			variaveis.put("tipoRetorno", "break");
            return variaveis.toString();
		}   
	}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - SIPAG
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Sipag_Excel")) {
			if (line.contains("CODIGO DO CLIENTE") && line.contains("COMPROVANTES") && line.contains("VLR. DESC") && line.contains("PLANO")) {

				tipoPlanilha = "CARTAO-SIPAG";

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",   tipoPlanilha);

				mapaVariavel = readExtratoSipag(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno", "break");
                return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO SIPAG"
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - ITAU
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Itau_Excel")) {
			if (memFile.getStringFieldRemoveEspCharsUpper(5).contains("CONTA")) {

				nomePortador  = "ITAU " + memFile.getStringFieldRemoveEspCharsUpper(5) +  memFile.getStringFieldRemoveEspCharsUpper(6);
				nomePortador2 = "ITAU " + memFile.getStringFieldRemoveEspCharsUpper(5) +  memFile.getStringFieldRemoveEspCharsUpper(6);
				complemento01 = nomePortador2;

				variaveis.put("nomePortador",  nomePortador);
				variaveis.put("nomePortador2", nomePortador2);
				variaveis.put("complemento01", complemento01);
				variaveis.put("tipoRetorno",   "continue");
                return variaveis.toString();
			}

			if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("EXTRATO")) {

				anoData = memFile.getStringFieldRemoveEspCharsUpper(6);

				if (anoData.trim().equals("")) anoData = memFile.getStringFieldRemoveEspCharsUpper(1);
				if (anoData.contains("/")) anoData = anoData.substring(anoData.lastIndexOf("/")+1).trim();
				if (!anoData.equals("") && anoData.contains("-")) anoData = anoData.substring(0, anoData.indexOf("-")).trim();
				if (anoData.equals("")) anoData = memFile.getStringFieldRemoveEspCharsUpper(1).substring(memFile.getStringFieldRemoveEspCharsUpper(1).lastIndexOf("/")).trim();

                variaveis.put("anoData",       anoData);
				variaveis.put("tipoRetorno",   "continue");
                return variaveis.toString();
			}

			if (memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").replace("\"","").replace("'","").equals("DATA") &&
				memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("\"","").replace("\"","").replace("'","").contains("AMENTO") &&
				memFile.getStringFieldRemoveEspCharsUpper(5).replaceAll("\"","").contains("VALOR") &&
				memFile.getStringFieldRemoveEspCharsUpper(6).replaceAll("\"","").contains("SALDO")) {

				tipoPlanilha = "EXTRATO-ITAU";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);
				readExtratoItauDefault(memFile, anoData, "TIPO01", nomePortador2, jDados, dbIOCont, logger);
 				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO ITAU"

			if (memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").replace("\"","").replace("'","").equals("DATA") &&
				memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("\"","").replace("\"","").replace("'","").equals("LANCAMENTO") &&
				memFile.getStringFieldRemoveEspCharsUpper(6).replaceAll("\"","").contains("VALOR") &&
				memFile.getStringFieldRemoveEspCharsUpper(7).replaceAll("\"","").contains("SALDO")) {

				tipoPlanilha = "EXTRATO-ITAU";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);

				readExtratoItauDefault(memFile, anoData, "TIPO02", nomePortador2, jDados, dbIOCont, logger);
                variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();			
            } // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO ITAU"
		}


		// if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_ITAU_PDF")) {
		// 	/*O TIPO 002 NAO ESTA PASSANDO NESTE IF, POIS O TEXTO TIAU EMPRESA VEIO EM UMA IMAGEM NO PADRAO NOVO
		// 	COMO ALTERNATIVA TALVEZ SEJA NECESSARIO VIR NO NOME DO ARQUIVO ITAU
		// 	POIS A LINHA ANTERIOR VEM 
		// 	01/06/2020|PRE-VISUALIZACAO DE IMPRESSAO |  -> PRE-VISUALIZACAO DE IMPRESSAO
		// 	ISSO NAO EH SAUDAVEL POIS EH UM TEXTO GERADO PELO BROWSER E DE NAVEGADOR PARA NAVEGADOR VAI MUDAR
		// 	TEM QUE CHEGAR A UMA CONCESSO DE COMO VALIDAR.
		// 	JA EXISTEM PADROES QUE SAO NECESSARIO DIZER NO NOME DO ARQUIVO QUE TIPO DE EXTRATO EH
		// 	EX: CEF_EXCEL.*/
		// 	if (line.contains("ITAU") && line.contains("EMPRESA") && nomeArquivo.toUpperCase().contains(".PDF") && nomePortador2.equals("")) {
		// 		nomePortador2 = "ITAU-PDF";

		        // variaveis.put("nomePortador2",   nomePortador2);
		        // variaveis.put("tipoRetorno",     "continue");
                // return variaveis.toString();
		// 	}
		// 	 if (memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).contains("CONTA") && 
		// 			memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).contains("CORRENTE")  && 
		// 			memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-2).contains("AGENCIA") && 
		// 			nomePortador2.equals("") && 
		// 			nomeArquivo.toUpperCase().contains(".PDF")) {
		// 			nomePortador2 = "ITAU-PDF-PROXIMO";

                    // variaveis.put("nomePortador2",   nomePortador2);
                    // variaveis.put("tipoRetorno",     "continue");
                    // return variaveis.toString();
		// 		}
		// 	if (nomePortador2.contains("ITAU-PDF") && line.contains("AGENCIA") && line.contains("CONTA")) {
		// 
		// 		JSONObject jDados = new JSONObject();
		// 	   
		// 		nomePortador2 += " - " + cutString(memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1), ": ");
		// 		jDados.put("CODEMPRESA", codEmpresa);
		// 		jDados.put("NOMEARQUIVO", nomeArquivo);
		// 		jDados.put("TIPOPLANILHA", "EXTRATO-ITAU");
		// 		jDados.put("TIPO", "001");
		// 		jDados.put("TESTE", nomePortador2);

		// 		readExtratoItauPdfInterno(memFile, nomePortador2, jDados, dbIOCont, logger);
 		        // variaveis.put("tipoRetorno",   "break");
                // return variaveis.toString();
		// 	}
		// 	if (nomePortador2.contains("ITAU-PDF") && nomePortador2.contains("PROXIMO")) {
		// 		JSONObject jDados = new JSONObject();
		// 		nomePortador2 =  nomePortador2.replaceAll("-PROXIMO", "") + " - " + cutString(memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1), ": ");
		// 		jDados.put("CODEMPRESA", codEmpresa);
		// 		jDados.put("NOMEARQUIVO", nomeArquivo);
		// 		jDados.put("TIPOPLANILHA", "EXTRATO-ITAU");
		// 		jDados.put("TIPO", "002");
		// 		jDados.put("TESTE", nomePortador2);

		// 		readExtratoItauPdfInterno(memFile, nomePortador2, jDados, dbIOCont, logger);
 		        // variaveis.put("tipoRetorno",   "break");
                // return variaveis.toString();
		// 	}
		// }

		// ----------------------------------------------------------------------------------------------------------
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - UNICRED
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~


		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Unicred_Excel")) {

			if (memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").replace("\"","").replace("'","").equals("DATA") &&
				memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","").replaceAll(" ","").contains("ID.DOC") &&
				memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").contains("HISTORICOS") &&
				memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("\"","").contains("LANCAMENTOS") &&
				memFile.getStringFieldRemoveEspCharsUpper(5).replaceAll("\"","").contains("SALDO")) {

				nomePortador  = "UNICRED";
				complemento02 = nomePortador;
				tipoPlanilha = "EXTRATO-UNICRED";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);
				readExtratoUnicredDefault(memFile, jDados, dbIOCont, logger);
 				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO UNICRED"
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - PAGUECOM CSV
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Paguecom_CSV")) {
			if (memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").contains("DATA DA TRANSA") &&
				memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").contains("DIGO DO CLIENTE") &&
				memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","").contains("COMPROVANTE") &&
				memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").contains("PRODUTO") &&
				memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("\"","").contains("TIPO DE TRANSA") &&
				memFile.getStringFieldRemoveEspCharsUpper(5).replaceAll("\"","").contains("PARCELAS")) {

				tipoPlanilha = "PAGUECOM-CSV";

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",   tipoPlanilha);

				mapaVariavel = readPaguecomCSV(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO ELAVON"
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - TICKET
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Ticket_Excel")) {

			if (line.contains("DATA CORTE") && line.contains("DATA TRANSACAO") && line.contains("DESCRICAO LANCAMENTO")
				&& line.contains("NUMERO DOCTO") && line.contains("NUMERO CARTAO"))  {

				tipoPlanilha = "CARTAO-TICKET";

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",   tipoPlanilha);

				if(line.contains("DATA CORTE") && line.contains("DATA TRANSACAO") && line.contains("DESCRICAO LANCAMENTO")
				&& line.contains("NUMERO DOCTO") && line.contains("NUMERO CARTAO")) {

					for (int i = 0; i < memFile.getFieldsSize(); i++) {
						if (memFile.getStringFieldRemoveEspCharsUpper(i).replace("\"","").replace("'","").equals("")) continue;

						if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR")) jDados.put("IVALORDOCUMENTO", i);
						if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA TRANSACAO")) jDados.put("IDATAMOVIMENTO", i);
						if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DESCRICAO LANCAMENTO")) jDados.put("INOMEORIGEM", i);
					}
				}

				mapaVariavel = readExtratoTicketNovo(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}

			if (line.contains("EXTRATO DETALHADO") && line.contains("TICKET ALIMENTACAO")) {

				tipoPlanilha = "CARTAO-TICKET";
				JSONObject jDados = new JSONObject();
				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",   tipoPlanilha);

				mapaVariavel = readExtratoTicket(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO TICKET"
		}


		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//  LEITURA PADRAO - EXTRATO - SICREDI
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Sicredi_Excel")) {
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("ASSOCIADO:")) {
				nomePortador2 = "SICREDI";

                variaveis.put("nomePortador2",   nomePortador2);
                variaveis.put("tipoRetorno",     "continue");
                return variaveis.toString();
			}
			if(nomePortador2.contains("SICREDI") && memFile.getStringFieldRemoveEspCharsUpper(0).contains("CONTA CORRENTE:")){
				nomePortador2 += " "+ memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","");

                variaveis.put("nomePortador2",   nomePortador2);
                return variaveis.toString();
			}

			if (memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").replace("\"","").replace("'","").equals("DATA") &&
				memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").replace("\"","").replace("'","").equals("DESCRICAO") &&
				memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","").contains("DOCUMENTO") &&
				memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").contains("VALOR") &&
				memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("\"","").contains("SALDO") && 
                nomePortador2.contains("SICREDI")) {

				tipoPlanilha = "EXTRATO-SICREDI";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);

				readExtratoSicrediDefault(memFile, nomePortador2, jDados, dbIOCont, logger);
 				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO SICREDI"
		}
		// ----------------------------------------------------------------------------------------------------------

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - BRADESCO
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Bradesco_Excel") && !nomeArquivo.toUpperCase().endsWith(".TXT")) {
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("EXTRATO DE") &&
				memFile.getStringFieldRemoveEspCharsUpper(0).contains("AGENCIA")) {
				nomePortador2  = "BRADESCO " +  memFile.getStringFieldRemoveEspCharsUpper(0);
			
                variaveis.put("nomePortador2",   nomePortador2);
                return variaveis.toString();
			}

			if (memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").replace("\"","").replace("'","").equals("DATA") &&
				memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").replace("\"","").replace("'","").equals("LANCAMENTO") &&
				memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","").contains("DCTO") &&
				memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").contains("CREDITO") &&
				memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("\"","").contains("DEBITO") ) {

				tipoPlanilha = "EXTRATO-BRADESCO";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);

				readExtratoBradescoDefault(memFile, nomePortador2, jDados, dbIOCont, logger);
 				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO BRADESCO"
		}
		// ----------------------------------------------------------------------------------------------------------
		
		// ----------------------------------------------------------------------------------------------------------
		//                      LEITURA PADRAO EXTRATO REDECARD - XLSX
		//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Redecard_Excel")) {
			if ((line.contains("HORA DA VENDA") && line.contains("MODALIDADE") && line.contains("NSU/CV") && line.contains("TIPO DE TERMINAL"))
			&& (line.replaceAll("\"","").contains("CHARGEBACK") && line.replaceAll("\"","").contains("NACIONALIDADE DO CART") && line.replaceAll("\"","").contains("MODALIDADE"))){
				
                tipoPlanilha = "CARTAO-REDECARD";
				nomePortador = "REDECARD";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);
				jDados.put("NOMEEMPRESA", nomeEmpresa);
				jDados.put("TIPOLANCAMENTO", tipoLancamento);

				readCartaoRedecardNovoPadrao(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO REDECARD"
			if ((line.contains("HORA DA VENDA") && line.contains("MODALIDADE") && line.contains("NSU/CV") && line.contains("TIPO DE TERMINAL"))
			|| (line.replaceAll("\"","").contains("PRAZO DE RECEB") && line.replaceAll("\"","").contains("RESUMO DE VENDAS") && line.replaceAll("\"","").contains("MODALIDADE"))){

				tipoPlanilha = "CARTAO-REDECARD";
				nomePortador = "REDECARD";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);
				jDados.put("NOMEEMPRESA", nomeEmpresa);
				jDados.put("TIPOLANCAMENTO", tipoLancamento);

				readCartaoRedecard(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO REDECARD"
		}
		// ----------------------------------------------------------------------------------------------------------
		
		// ----------------------------------------------------------------------------------------------------------
		//                      LEITURA PADRAO EXTRATO REDECARD
		//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Redecard_TXT")) {

			if (line.replaceAll("\"","").contains("E X T R A T O   P A R A   S I M P L E S ")) {

				tipoPlanilha = "CARTAO-REDECARD";
				nomePortador = "REDECARD";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);
				jDados.put("NOMEEMPRESA", nomeEmpresa);
				jDados.put("TIPOLANCAMENTO", tipoLancamento);

				readCartaoRedecardDefault(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO REDECARD"
		}


		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		// LEITURA PADRAO - EXTRATO - CARTAO AMERICAN EXPRESS
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_American_Express_Extrato_Excel")) {
			if (line.contains("DATA RECEB") && line.contains("CREDITO") && line.contains("DEBITO") && line.contains("REFERENCIA")) {

				tipoPlanilha = "AMERICAN-EXTRATO";

				JSONObject jDados = new JSONObject();
                int ivalorDocumento = -1;

				String[] head = StringUtil.removeSpecialChars(line).split("\\|");
				for (int i = 0; i < head.length; i++) {
					if (head[i].contains("VALOR LIQUIDO")) ivalorDocumento = i;
				}
				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("IVALORDOCUMENTO",  ivalorDocumento);

				mapaVariavel = readCartaoAmericanExtratoDefault(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();

			}
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		// LEITURA PADRAO - CARTAO AMERICAN EXPRESS
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_American_Express_Excel")) {
			if (line.contains("DATA RECEB") && line.contains("TRANSACAO") && line.contains("PARCELAS")) {

				tipoPlanilha = "AMERICAN-EXPRESS";

				JSONObject jDados = new JSONObject();
                int ivalorDocumento = -1;

				String[] head = StringUtil.removeSpecialChars(line).split("\\|");
				for (int i = 0; i < head.length; i++) {
					if (head[i].contains("VALOR TOTAL")) ivalorDocumento = i;
				}

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("IVALORDOCUMENTO",  ivalorDocumento);

				mapaVariavel =  readCartaoAmericanExpressDefault(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		// LEITURA PADRAO - EXTRATO - SODEXO
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Sodexo_Excel")) {
			if (line.contains("PRODUTO:") &&  ((line.contains("ALIMENTA") || line.contains("REFEI") || line.contains("PREMIUM") || line.contains("GIFT")) && line.contains("PASS"))) {

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo para leitura de Extrato.
				mapaVariavel = readExtratoSodexo(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		}
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		// LEITURA PADRAO - EXTRATO - BONUS
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Bonus_Excel")) {
			if ((nomeArquivo.toUpperCase().contains("BONUS") && !extensao.contains(".TXT")) && (memFile.getStringFieldRemoveEspCharsUpper(0).contains("DOCTO") && line.contains("CARTAO") && line.contains("CAPTURA"))) {

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo para leitura de Extrato.
				mapaVariavel = readExtratoBonus(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		// LEITURA PADRAO - EXTRATO - NUTRICARD
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Nutricard_Excel")) {
			if ((extensao.contains(".XLSX") || extensao.contains(".CSV")) && (memFile.getStringFieldRemoveEspCharsUpper(0).contains("DOCTO") && line.contains("CARTAO") && line.contains("CAPTURA"))) {

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo para leitura de Extrato.
				mapaVariavel = readExtratoNutricard(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		// LEITURA PADRAO - EXTRATO - GOODCARD
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Goodcard_Excel")) {
			if (line.contains("COD. DE VENDA") && line.contains("REDE CAPTURA")&& line.contains("AUTORIZACAO")) {

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo para leitura de Extrato.
				mapaVariavel = readExtratoGoodcard(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		// LEITURA PADRAO - EXTRATO - SENFF
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Senff_Excel")) {
			if (line.contains("CARTAO") && line.contains("AUTORIZACAO") && line.contains("PARCELAS") && line.contains("CLIENTE")) {
				
				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo para leitura de Extrato.
				mapaVariavel = readExtratoSenff(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
			if (line.contains("DATA") && line.contains("HOMOLOGADO")) {
				
				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo para leitura de Extrato.
				mapaVariavel = readExtratoSenffLayout2(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		// LEITURA PADRAO - EXTRATO - VRALIMENTACAO
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_VRAlimentacao_TXT")) {
			if ((line.length() > 40) && line.substring(34,40).contains("******") && extensao.contains(".TXT")) {

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo para leitura de Extrato.
				mapaVariavel = readExtratoVRAlimentacao(line, memFile, jDados, mapaVariavel, logger);
                variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
		   }
		}
		// ----------------------------------------------------------------------------------------------------------


		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - SANTANDER
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Santander_Excel")) {
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("NOME:") &&
				memFile.getStringFieldRemoveEspCharsUpper(3).contains("AGENCIA:") &&
				memFile.getStringFieldRemoveEspCharsUpper(5).contains("CONTA CORRENTE:")) {

				line = StringUtil.removeSpecialCharsToUC(memFile.nextLine());
				nomePortador2 = String.format("%s %s %s",
											"SANTANDER",
											memFile.getStringFieldRemoveEspCharsUpper(3), // Agencia.
											memFile.getStringFieldRemoveEspCharsUpper(5)  // Conta Corrente.
											);

				variaveis.put("nomePortador2",    nomePortador2);
                return variaveis.toString();
			}
			if (nomeArquivo.toUpperCase().contains("SANTANDER") &&
				memFile.getStringFieldRemoveEspCharsUpper(0).contains("AGENCIA") &&
				memFile.getStringFieldRemoveEspCharsUpper(2).contains("CONTA")) {

				nomePortador2 = String.format("%s %s %s",
											"SANTANDER",
											memFile.getStringFieldRemoveEspCharsUpper(1), // Agencia.
											memFile.getStringFieldRemoveEspCharsUpper(3)  // Conta Corrente.
											);
				
				variaveis.put("nomePortador2",    nomePortador2);
                return variaveis.toString();
			}

			if (memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").replace("\"","").replace("'","").equals("DATA") &&
				memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","").replace("\"","").replace("'","").equals("HISTORICO") &&
				(memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").contains("DOCTO") || memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").contains("DOCUMENTO")) &&
				memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("\"","").contains("VALOR") &&
				memFile.getStringFieldRemoveEspCharsUpper(5).replaceAll("\"","").contains("SALDO")) {

				tipoPlanilha = "EXTRATO-SANTANDER";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);
				

                readExtratoSantanderDefault(memFile, nomePortador2, jDados, dbIOCont, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO BRADESCO"
		}
		// ----------------------------------------------------------------------------------------------------------

		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		// LEITURA PADRAO - ERP - BYSOFT I-BROKER
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		// if (roteiroCRM.optString("Planilhas_Padroes").contains("BySoft_i-Broker")) {
			// if (line.contains("RELATORIO") && line.contains("MOVIMENTACAO") && line.contains("FINANCEIRA") && line.contains("ANALITICO")) {
				// JSONObject jDados = new JSONObject();
				// jDados.put("TIPOLANCAMENTO", tipoLancamento);
				// jDados.put("NOMEEMPRESA",    nomeEmpresa);
				// jDados.put("CODEMPRESA",     codEmpresa);
				// jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo do Erp do Cliente da Contabilidade.
				// mapaVariavel = readBysoftIBroker(memFile, jDados, mapaVariavel, logger);
				// variaveis.put("tipoRetorno",   "break");
                // return variaveis.toString();
			// }
		// }

		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		// LEITURA PADRAO ERP - GENESYS MCP002 (Interfoc)
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		// if (roteiroCRM.optString("Planilhas_Padroes").contains("Interfoc_Genesys_mcp002")) {
			// if (line.contains("ROTINA") && line.contains("MCP002")) {
				// JSONObject jDados = new JSONObject();
				// jDados.put("TIPOLANCAMENTO", tipoLancamento);
				// jDados.put("NOMEEMPRESA",    nomeEmpresa);
				// jDados.put("CODEMPRESA",     codEmpresa);
				// jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo do Erp do Cliente da Contabilidade.
				// mapaVariavel = readInterfocGenesysMCP002(memFile, jDados, mapaVariavel, logger);
				// variaveis.put("tipoRetorno",   "break");
                // return variaveis.toString();
			// }
		// }

		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		// LEITURA PADRAO ERP - PROSYST
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		// if (roteiroCRM.optString("Planilhas_Padroes").contains("Prosyst")) {
			// JSONObject jDados = new JSONObject();
			// jDados.put("TIPOLANCAMENTO", tipoLancamento);
			// jDados.put("NOMEEMPRESA",    nomeEmpresa);
			// jDados.put("CODEMPRESA",     codEmpresa);
			// jDados.put("NOMEARQUIVO",    nomeArquivo);
			// if (line.contains("PR00428")) {
				// mapaVariavel = readProsystPR00428(memFile, jDados, mapaVariavel, logger);
				// variaveis.put("tipoRetorno",   "break");
                // return variaveis.toString();
			// }
			// if (line.contains("PRX004815")) {
				// mapaVariavel = readProsystPRX004815(memFile, jDados, mapaVariavel, logger);
				// variaveis.put("tipoRetorno",   "break");
                // return variaveis.toString();
			// }
		// }/*~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--*/

		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		// LEITURA PADRAO ERP - SISJURI (BCS Financeiro)
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		// if (roteiroCRM.optString("Planilhas_Padroes").toUpperCase().contains("SISJURI_BCS_FINANCEIRO")) {
			// if (line.contains("BCS") && line.contains("FINANCEIRO")) {
				// JSONObject jDados = new JSONObject();

				// jDados.put("CODEMPRESA", codEmpresa);
				// jDados.put("NOMEEMPRESA", nomeEmpresa);
				// jDados.put("NOMEARQUIVO", nomeArquivo);
				// jDados.put("TIPOLANCAMENTO", tipoLancamento);
				// Chama metodo do Erp do Cliente da Contabilidade.
				// mapaVariavel = readSisjuriBCSFinanceiro(memFile, jDados, mapaVariavel, logger);
				// variaveis.put("tipoRetorno",   "break");
                // return variaveis.toString();
			// }
		// }

		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		// LEITURA PADRAO ERP - SOFTPHARMA FCPA200 (Linx)
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		// if (roteiroCRM.optString("Planilhas_Padroes").contains("Linx_Softpharma_fcpa200")) {
			// if (line.contains("****") && line.contains("INICIO")) {
				// JSONObject jDados = new JSONObject();

				// jDados.put("CODEMPRESA", codEmpresa);
				// jDados.put("NOMEEMPRESA", nomeEmpresa);
				// jDados.put("NOMEARQUIVO", nomeArquivo);
				// jDados.put("TIPOLANCAMENTO", tipoLancamento);

				// Chama metodo do Erp do Cliente da Contabilidade.
				// mapaVariavel = readLinxSoftpharmaFCPA200(memFile, jDados, mapaVariavel, logger);
				// variaveis.put("tipoRetorno",   "break");
                // return variaveis.toString();
			// }
		// }

		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		// LEITURA PADRAO ERP - SYSTEXTIL
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		// if (roteiroCRM.optString("Planilhas_Padroes").contains("Systextil")) {
			// if (line.contains("EMPRESA") && line.contains("SYSTEXTIL")) {
				// JSONObject jDados = new JSONObject();
				// jDados.put("TIPOLANCAMENTO", tipoLancamento);
				// jDados.put("NOMEEMPRESA",    nomeEmpresa);
				// jDados.put("CODEMPRESA",     codEmpresa);
				// jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo do Erp do Cliente da Contabilidade.
				// mapaVariavel = readSystextil(memFile, jDados, mapaVariavel, logger);
				// variaveis.put("tipoRetorno",   "break");
                // return variaveis.toString();
			// }// Fim - Leitura Padrao - SYSTEXTIL
		// } 
		// /*~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--*/

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO CARTAO - CIELO
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Cielo")) {
			if (line.contains("EXTRATO") && line.contains("SIMPLES") && line.contains("CONFERENCIA")) {

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo do Erp do Cliente da Contabilidade.
				mapaVariavel = readCartaoCielo(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			} 
			if ((roteiroCRM.optString("contabilidade").toUpperCase().equals("CONTASPRO") && // valida??o para contaspro
			(line.contains("ESTABELECIMENTO") && 
			line.contains("BANDEIRA") && 
			line.contains("FORMA DE PAGAMENTO") &&
			line.contains("VALOR LIQUIDO")))
			|| 
			(line.contains("BANDEIRA") && 
			line.contains("FORMA DE PAGAMENTO") &&
			line.contains("DATA DA AUTORIZACAO") &&
			line.contains("QUANTIDADE DE PARCELAS") &&
			line.contains("VALOR LIQUIDO"))) {

			JSONObject jDados = new JSONObject();

			jDados.put("TIPOLANCAMENTO", tipoLancamento);
			jDados.put("NOMEEMPRESA",    nomeEmpresa);
			jDados.put("CODEMPRESA",     codEmpresa);
			jDados.put("NOMEARQUIVO",    nomeArquivo);

                // Chama metodo do Erp do Cliente da Contabilidade.
                mapaVariavel = readCartaoCieloExcel2(memFile, jDados, mapaVariavel, logger);
                variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
		    }
		}


		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - VALECARD
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_ValeCard_PDF")) {
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("VALECARD") && memFile.getFieldsSize() <= 2) {

				nomePortador  = "VALECARD";
				complemento01 = nomePortador;
				return "continue";
			}
			if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("DEMONSTRATIVO") && memFile.getStringFieldRemoveEspCharsUpper(0).contains("VENDA") && memFile.getFieldsSize() <= 2 && nomePortador.equals("VALECARD")) {

				nomePortador2 = "VALECARD";
				return "continue";
			}
			if(nomePortador.equals("VALECARD") && nomePortador2.equals("VALECARD") && complemento01.equals("VALECARD")){

				tipoPlanilha = "CARTAO-VALECARD";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("NOMEPORTADOR",   nomePortador);
				jDados.put("TIPOPLANILHA",   tipoPlanilha);
				jDados.put("TIPOLANCAMENTO", tipoLancamento);

				mapaVariavel = readExtratoValeCardPdf(memFile, jDados, mapaVariavel, logger);
				return "break";
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO VALECARD" #BATISTELLA
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO CARTAO - REDECARD
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Redecard_Excel")) {

			if (memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").contains("PRAZO DE RECEB") &&
				memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("\"","").contains("RESUMO DE VENDAS") &&
				memFile.getStringFieldRemoveEspCharsUpper(6).replaceAll("\"","").contains("MODALIDADE")) {

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo do Erp do Cliente da Contabilidade.
				mapaVariavel = readCartaoRedecardCred(memFile, jDados, mapaVariavel, logger);
				return "break";
			}
			if (memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").contains("RESUMO DE VENDAS") &&
				memFile.getStringFieldRemoveEspCharsUpper(5).replaceAll("\"","").contains("MODALIDADE") &&
				memFile.getStringFieldRemoveEspCharsUpper(6).replaceAll("\"","").contains("BANDEIRA")) {

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo do Erp do Cliente da Contabilidade.
				mapaVariavel = readCartaoRedecardDeb(memFile, jDados, mapaVariavel, logger);
				return "break";
			}
		}
		//LEITURA PADRAO CARTAO - CIELO SEM BANDEIRA
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Cielo_Simples_Sem_Bandeira")) {

			if (memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").replace("\"","").replace("'","").equals("DATA DE VENDA") &&
				memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").replace("\"","").replace("'","").equals("VALOR BRUTO") &&
				memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","").contains("VALOR") &&
				memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","").contains("QUIDO") &&
				memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").replace("\"","").replace("'","").equals("TAXA")) {

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo do Erp do Cliente da Contabilidade.
				mapaVariavel = readCartao_Cielo_Simples_Sem_Bandeira(memFile, jDados, mapaVariavel, logger);
				return "break";
			}
		}


			///////////////////////////////////////////////////////// // #Fabrica(2019-08-06) @Vini
	if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Abrapetite_Excel") && nomeArquivo.toUpperCase().contains("ABRAPETITE")) {

		if (memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").contains("DATA") &&
			memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").contains("QUANTIDADE") &&
			memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","").contains("VALOR") &&
			memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").contains("TRANSACOES")) {
		   
			tipoPlanilha = "CARTAOABRAPETITE";

			JSONObject jDados = new JSONObject();

			jDados.put("TIPOLANCAMENTO", tipoLancamento);
			jDados.put("NOMEEMPRESA",    nomeEmpresa);
			jDados.put("CODEMPRESA",     codEmpresa);
			jDados.put("NOMEARQUIVO",    nomeArquivo);
			jDados.put("TIPOPLANILHA",   tipoPlanilha);

			// Chama metodo do Erp do Cliente da Contabilidade.
			mapaVariavel = readCartaoAbrapetite(memFile, jDados, mapaVariavel, logger);
			return "break";
		}
   }
	///////////////////////////////////////////////////////// // #Fabrica(2019-08-08) @Batistella
	if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Masterfarma_Excel") && nomeArquivo.toUpperCase().contains("MASTERFARMA")) {
		//DATA EMISS?O	DATA VENCIMENTO	VLR. BRUTO	VLR. DESCTO.	VLR. COMIS.	VLR. LIQ.	TX. ADM.	TAXA ADICIONAL	VLR. LIQ.
		if (memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").contains("DATA") &&
			memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").contains("VENCIMENTO") &&
			memFile.getStringFieldRemoveEspCharsUpper(2).replaceAll("\"","").contains("BRUTO") &&
			memFile.getStringFieldRemoveEspCharsUpper(3).replaceAll("\"","").contains("DESCTO") &&
			memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("\"","").contains("COMIS")) {
			
			tipoPlanilha = "CARTAOMASTERFARMA";

			JSONObject jDados = new JSONObject();

			jDados.put("TIPOLANCAMENTO", tipoLancamento);
			jDados.put("NOMEEMPRESA",    nomeEmpresa);
			jDados.put("CODEMPRESA",     codEmpresa);
			jDados.put("NOMEARQUIVO",    nomeArquivo);
			jDados.put("TIPOPLANILHA",   tipoPlanilha);
			
			mapaVariavel = readCartaoMasterFarma(memFile, jDados, mapaVariavel, logger);
			return "break";
		}
	}
	///////////////////////////////////////////////////////// // // #Fabrica(2019-08-07) @Vini
	if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Cabal_Excel") && nomeArquivo.toUpperCase().contains("CABAL")) {

		if (memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").contains("DATA") &&
			memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").contains("VENDA") &&
			memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").contains("PREVISAO") &&
			memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").contains("PAGAMENTO") &&
			memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("\"","").contains("VALOR") &&
			memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("\"","").contains("VENDA") &&
			memFile.getStringFieldRemoveEspCharsUpper(5).replaceAll("\"","").contains("VALOR") &&
			memFile.getStringFieldRemoveEspCharsUpper(5).replaceAll("\"","").contains("LIQUIDO")) {
			
			tipoPlanilha = "CARTAOCABAL";

			JSONObject jDados = new JSONObject();

			jDados.put("TIPOLANCAMENTO", tipoLancamento);
			jDados.put("NOMEEMPRESA",    nomeEmpresa);
			jDados.put("CODEMPRESA",     codEmpresa);
			jDados.put("NOMEARQUIVO",    nomeArquivo);
			jDados.put("TIPOPLANILHA",   tipoPlanilha);


			// Chama metodo do Erp do Cliente da Contabilidade.
			mapaVariavel = readCartaoCabal(memFile, jDados, mapaVariavel, logger);
			return "break";
		}
	}
	
	///////////////////////////////////////////////////////// // // #Fabrica(2019-08-0) @BATISTELLA
	if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Calcard_Excel") && nomeArquivo.toUpperCase().contains("CALCARD")) {
		//DT.TRANSACAO	DT.CREDITO	CARTAO	DESCRIAOO DA TRANSAAOO	VALOR BRUTO	VALOR LIQUIDO
		if ((memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").contains("DT") &&
			memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\"","").contains("TRANSACAO")) &&
			(memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").contains("DT") &&
			memFile.getStringFieldRemoveEspCharsUpper(1).replaceAll("\"","").contains("CREDITO")) &&
			(memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("\"","").contains("VALOR") &&
			memFile.getStringFieldRemoveEspCharsUpper(4).replaceAll("\"","").contains("BRUTO")) &&
			(memFile.getStringFieldRemoveEspCharsUpper(5).replaceAll("\"","").contains("VALOR") &&
			memFile.getStringFieldRemoveEspCharsUpper(5).replaceAll("\"","").contains("LIQUIDO"))) {
			
			tipoPlanilha = "CARTAOCALCARD";

			JSONObject jDados = new JSONObject();

			jDados.put("TIPOLANCAMENTO", tipoLancamento);
			jDados.put("NOMEEMPRESA",    nomeEmpresa);
			jDados.put("CODEMPRESA",     codEmpresa);
			jDados.put("NOMEARQUIVO",    nomeArquivo);
			jDados.put("TIPOPLANILHA",   tipoPlanilha);


			// Chama metodo do Erp do Cliente da Contabilidade.
			mapaVariavel = readCartaoCalcard(memFile, jDados, mapaVariavel, logger);
			return "break";
		}
	}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO ERP - AutoSystem (Linx)
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
		// if (roteiroCRM.optString("Planilhas_Padroes").contains("Linx_AutoSystem")) {

			// JSONObject jDados = new JSONObject();
			// jDados.put("TIPOLANCAMENTO", tipoLancamento);
			// jDados.put("NOMEEMPRESA",    nomeEmpresa);
			// jDados.put("CODEMPRESA",     codEmpresa);
			// jDados.put("NOMEARQUIVO",    nomeArquivo);

			// if (line.startsWith(StringUtil.removeSpecialCharsToUC(roteiroCRM.optString("complemento06")))) {
				// tipoPlanilha = "Linx_AutoSystem";
				// continue;
			// }
			// if (memFile.getStringFieldRemoveEspCharsUpper(0).replace("\"","").replace("'","").equals("")) continue;

			// jDados.put("TIPOPLANILHA", tipoPlanilha);

			// if (tipoPlanilha.equals("Linx_AutoSystem")) {
				// tipoPlanilha = memFile.getStringFieldRemoveEspCharsUpper(0);
				// continue;
			// }
			// if (tipoPlanilha.equals("CONTAS PAGAS")) {
				// mapaVariavel = readLinx_AutoSystem_ContasPagas(memFile, jDados, mapaVariavel, logger);
				// return "break";
			// }
			// if (tipoPlanilha.equals("RECEBIMENTOS")) {
				// mapaVariavel = readLinx_AutoSystem_Recebimentos(memFile, jDados, mapaVariavel, logger);
				// return "break";
			// }
			// if (tipoPlanilha.equals("EXTRATO BANCARIO")) {
				// mapaVariavel = readLinx_AutoSystem_ExtratoBancario(memFile, jDados, mapaVariavel, logger);
				// return "break";
			// }
			// if (tipoPlanilha.equals("MOVIMENTACAO DE CONTAS")) {
				// mapaVariavel = readLinx_AutoSystem_MovimentacaoContas(memFile, jDados, mapaVariavel, logger);
				// return "break";
			// }
		// }

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - CEF
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_CEF_TXT")) {
			if(nomeArquivo.toUpperCase().contains(".TXT") && line.contains("CONTA")
			&& line.contains("DATA_MOV")
			&& line.contains("NR_DOC")
			&& line.contains("HISTORICO")
			&& line.contains("VALOR")
			&& line.contains("DEB_CRED")){

				nomePortador  = "CEF "+nomeArquivo;
				complemento01 = nomePortador;
				tipoPlanilha = "EXTRATO-CEF";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);

				readExtratoCEFDefaultNovo(memFile, nomePortador, jDados, dbIOCont, logger);
 				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - CEF EXCEL
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Cef_Excel")) {
			if(nomeArquivo.toUpperCase().contains(".XLSX")  && memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA")
			&& memFile.getStringFieldRemoveEspCharsUpper(0).contains("MOV")
			&& memFile.getStringFieldRemoveEspCharsUpper(1).contains("NR")
			&& memFile.getStringFieldRemoveEspCharsUpper(1).contains("DOC")
			&& memFile.getStringFieldRemoveEspCharsUpper(2).contains("HISTORICO")
			&& memFile.getStringFieldRemoveEspCharsUpper(3).contains("VALOR")
			&& memFile.getStringFieldRemoveEspCharsUpper(4).contains("SALDO")){

				nomePortador  = "CEF EXCEL "+nomeArquivo;
				complemento01 = nomePortador;
				tipoPlanilha = "EXTRATO-CEF-EXCEL";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);

				readExtratoCEFExcel(memFile, nomePortador, jDados, dbIOCont, logger);
 				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - SICOOB
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Sicoob")) {
			if(nomeArquivo.toUpperCase().contains(".XLSX") && memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA")
			&& memFile.getStringFieldRemoveEspCharsUpper(1).contains("DOCUMENTO")
			&& memFile.getStringFieldRemoveEspCharsUpper(2).contains("HISTORICO")
			&& memFile.getStringFieldRemoveEspCharsUpper(3).contains("VALOR")){


				nomePortador  = "SICOOB "+nomeArquivo;
				complemento01 = nomePortador;
				tipoPlanilha = "EXTRATO-SICOOB";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);

				readExtratoSicoobDefaultNovo(memFile, nomePortador, jDados, dbIOCont, logger);
 				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		}
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - SAFRA EXCEL
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~--
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Safra_Excel")) {

			if(nomeArquivo.toUpperCase().contains(".XLSX") && line.contains("BANCO SAFRA S/A")){

				if (line.contains("AGENCIA") && !nomePortador.contains("SAFRA")) nomePortador  = "SAFRA "+ line.replaceAll("\\|","");
				complemento01 = nomePortador;
				tipoPlanilha = "EXTRATO-SAFRA-EXCEL";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);

				if(line.contains("EXTRATO MENSAL:")) 
                    jDados.put("ANO", cutString(line,"EXTRATO MENSAL:").replaceAll("\\|","").trim());

				readExtratoSafraExcel(memFile, nomePortador, jDados, dbIOCont, logger);
 				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		}

		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~-- //
		// 								LEITURA PADRAO - BIN  									 //
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~-- //
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Bin_Excel")) {
			if (line.contains("RESUMO DE VENDAS") &&
				line.contains("PRODUTO") &&
				line.contains("COMPROVANTES")) {

				tipoPlanilha = "CARTAO-BIN";
                
				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",   tipoPlanilha);

				mapaVariavel = readCartaoBinExcel(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		}
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - BANPARA
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Banpara_Excel")) {
			if (nomeArquivo.toUpperCase().contains("BANPARA")) {

				nomePortador  = "BANPARA ";
				tipoPlanilha = "EXTRATO-BANPARA";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);

				readExtratoBanpara(memFile, nomePortador, jDados, dbIOCont, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
			// Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO BANPARA"
		}
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~-- //
		// 								LEITURA PADRAO - SAFRA  									 //
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~-- //
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Safra_CSV")) {
			if  (line.contains("DATA") &&
                line.contains("VENDA") &&
                line.contains("VENDAS") &&
                line.contains("VALOR") &&
                line.contains("BRUTO") &&
                line.contains("TAXA") &&
                line.contains("QUIDO"))  {

				tipoPlanilha = "SAFRA";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",   tipoPlanilha);

				mapaVariavel = readCartaocSafraCsv(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		}
		 // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~-- //
		// 								LEITURA PADRAO - STELO  									 //
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~-- //
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Stelo_Excel") && nomeArquivo.toUpperCase().contains("STELO")) {
			
			if  (
                line.contains("STATUS") &&
                line.contains("DATA") &&
                line.contains("HORA") &&
                line.contains("DOC") &&
                line.contains("PGTO") &&
                line.contains("PLANO"))  {
			 

                tipoPlanilha = "STELO";

                JSONObject jDados = new JSONObject();

                jDados.put("CODEMPRESA", codEmpresa);
                jDados.put("TIPOLANCAMENTO", tipoLancamento);
                jDados.put("NOMEEMPRESA",    nomeEmpresa);
                jDados.put("NOMEARQUIVO",    nomeArquivo);
                jDados.put("TIPOPLANILHA",   tipoPlanilha);

                mapaVariavel = readCartaoSteloCsv(memFile, jDados, mapaVariavel, logger);
                variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			 }
		 }
	   //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - UNIPRIME
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Uniprime_Txt") && 
			nomeArquivo.toUpperCase().contains(".TXT")) { // #Fabrica(2019-10-03) @Vini

			if (
				line.contains("EXTRATO") &&
				line.contains("CONTA") &&
				line.contains("CORRENTE") &&
				line.contains("UNIPRIME")
				) {

				tipoPlanilha = "EXTRATOUNIPRIME";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",    tipoPlanilha);

				readExtratoUniprimeTxt(memFile, jDados, dbIOCont, logger);
 				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		}

		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//LEITURA PADRAO - EXTRATO - UNIPRIME
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Uniprime_Excel")) {
			if (line.contains("EXTRATO") &&
				line.contains("CONTA CORRENTE") &&
				line.contains("UNIPRIME") && (nomeArquivo.toUpperCase().contains(".XLSX") || nomeArquivo.toUpperCase().contains(".CSV"))) {

				tipoPlanilha = "EXTRATO-UNIPRIME";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);

				readExtratoUniprime(memFile, nomePortador, jDados, dbIOCont, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		}
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~-- //
		// 								LEITURA PADRAO - MOOZ  									     //
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~-- //
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Mooz_CSV")) {
			if (line.contains("NSU") && line.contains("SITEF") && line.contains("ADQUIRENTE") && line.contains("PEDIDO")) {

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);

				// Chama metodo do Erp do Cliente da Contabilidade.
				mapaVariavel = readCartaoMoozCsv(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		}

		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~-- //
		// 								LEITURA PADRAO - SUMUP  									     //
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~-- //
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Sumup_Excel")) {

			if (memFile.getStringFieldRemoveEspCharsUpper(0).replace("\"","").replace("'","").equals("E-MAIL") && 
				memFile.getStringFieldRemoveEspCharsUpper(1).replace("\"","").replace("'","").equals("DATA") && 
				memFile.getStringFieldRemoveEspCharsUpper(2).replace("\"","").replace("'","").equals("ID DA TRANSACAO")) {

				tipoPlanilha = "CARTAO-SUMUP";

				JSONObject jDados = new JSONObject();

				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("TIPOPLANILHA",   tipoPlanilha);

				mapaVariavel = readCartaoSumup(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
		} // Fim  -> Captura e dados quando Tipo Planilha -> "CARTAO SUMUP"

		// ----------------------------------------------------------------------------------------------------------
		//  LEITURA PADRAO - EXTRATO - TRIBANCO
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Tribanco_Excel")) {
			if (memFile.getStringFieldRemoveEspCharsUpper(4).contains("D/C")) {
				tipoPlanilha = "EXTRATO-TRIBANCO";

				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);

				readExtratoTribancoExcel(memFile, nomePortador, jDados, dbIOCont, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			}
			 
		}

	//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
	//                      LEITURA PADRAO CARTAO COOPER
	//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---

	if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Coopercard_Excel")) {
		if(line.toUpperCase().contains("FILTROS:") && line.toUpperCase().contains("PERIODO:") && line.toUpperCase().contains("ESTABELECIMENTO:")) {
				
				tipoPlanilha = "CARTAO-COOPER";
				
				JSONObject jDados = new JSONObject();

				jDados.put("CODEMPRESA", codEmpresa);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("NOMEARQUIVO", nomeArquivo);
				jDados.put("TIPOPLANILHA",   tipoPlanilha);
				jDados.put("TIPOLANCAMENTO", tipoLancamento);

				mapaVariavel = readCartaoCooper(memFile, jDados, mapaVariavel, logger);
                variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
		}
	}

	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
	//  LEITURA PADRAO - CARTAO - IFOOD EXCEL  #BATISTELLA
	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
	if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_IFood_Excel")) {
		if(line.contains("TOTAL PRATOS")
		&& line.contains("DATA DO CANCELAMENTO")
		&& line.contains("ORIGEM DO CANCELAMENTO")) {

			tipoPlanilha = "CARTAO IFOOD";

			JSONObject jDados = new JSONObject();

			jDados.put("CODEMPRESA", codEmpresa);
			jDados.put("TIPOLANCAMENTO", tipoLancamento);
			jDados.put("NOMEEMPRESA",    nomeEmpresa);
			jDados.put("NOMEARQUIVO",    nomeArquivo);
			jDados.put("TIPOPLANILHA",    tipoPlanilha);

			readExtratoIFood(memFile, jDados, mapaVariavel, logger);
 			variaveis.put("tipoRetorno",   "break");
            return variaveis.toString();
		}
	}
	
	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
	//LEITURA PADRAO - EXTRATO - UBEREATS
	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
	if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Ubereats_Excel")) {
		if (line.contains("RESTAURANTE") && line.contains("PEDIDO") && line.contains("TAXA") && 
			 line.contains("UBER")&& line.contains("MODO")&& line.contains("REFEI")) {
			
			tipoPlanilha = "CARTAO-UBEREATS";
			
			JSONObject jDados = new JSONObject();

			jDados.put("TIPOLANCAMENTO", tipoLancamento);
			jDados.put("NOMEEMPRESA",    nomeEmpresa);
			jDados.put("CODEMPRESA",     codEmpresa);
			jDados.put("NOMEARQUIVO",    nomeArquivo);
			jDados.put("TIPOPLANILHA",   tipoPlanilha);

			mapaVariavel = readExtratoUbereats(memFile, jDados, mapaVariavel, logger);
			variaveis.put("tipoRetorno", "break");
			return variaveis.toString();
			//break;
		} // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO-UBEREATS"
	}
	
	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
	//LEITURA PADRAO - EXTRATO - AIQUEFOME
	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
	if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Aiquefome_Excel")) {
		if (line.contains("RESTAURANTE") && line.contains("PEDIDO") && line.contains("CIDADE") && 
			 line.contains("USU")&& line.contains("PICK")&& line.contains("CUPOM") && line.contains("STATUS")) {

			
			tipoPlanilha = "CARTAO-AIQUEFOME";

			JSONObject jDados = new JSONObject();

			jDados.put("TIPOLANCAMENTO", tipoLancamento);
			jDados.put("NOMEEMPRESA",    nomeEmpresa);
			jDados.put("CODEMPRESA",     codEmpresa);
			jDados.put("NOMEARQUIVO",    nomeArquivo);
			jDados.put("TIPOPLANILHA",   tipoPlanilha);

			mapaVariavel = readExtratoAiquefome(memFile, jDados, mapaVariavel, logger);
			variaveis.put("tipoRetorno", "break");
			return variaveis.toString();
			//break;
		} // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO-AIQUEFOME"
	}
	
	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		//  LEITURA PADRAO - EXTRATO - BANCO SICOOB
		//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
		if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Sicoob_PDF")) {
			
			if (line.contains("SICOOB") && line.contains("SISTEMA DE COOPERATIVAS DE CREDITO DO BRASIL") && nomeArquivo.toUpperCase().contains(".PDF") && nomePortador2.equals("")) {

				nomePortador2 = "SICOOB-PDF";

                variaveis.put("nomePortador2",   nomePortador2);
                variaveis.put("tipoRetorno",   "continue");
                return variaveis.toString();
			}
			if (nomePortador2.contains("SICOOB-PDF")) {
			   if (line.startsWith("SISBR")) return "continue";
			   if (line.contains("EXTRATO CONTA CORRENTE")) return "continue";
			   if (line.startsWith("COOP.:")) return "continue";
			   if (line.startsWith("CONTA:")) {

				   nomePortador2 += " - " + memFile.getStringFieldRemoveEspCharsUpper(0) + " " + memFile.getStringFieldRemoveEspCharsUpper(1);

					JSONObject jDados = new JSONObject();

					jDados.put("CODEMPRESA", codEmpresa);
					jDados.put("NOMEARQUIVO", nomeArquivo);
					jDados.put("TIPOPLANILHA", "EXTRATO-SICOOB");

					readExtratSicoobPDF(memFile, nomePortador2, jDados, dbIOCont, logger);
 					variaveis.put("tipoRetorno",   "continue");
                    return variaveis.toString();
				}
			}
		} // Fim  -> Captura de Dados quando Tipo Planilha -> "EXTRATO BANCO SICOOB"

	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
	//LEITURA PADRAO CARTAO - PoliCard
	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
	if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_PoliCard_Excel")) {

		String padraoCabecalho = "";
		if(line.contains("DATA") && 
			line.contains("PRODUTO") && 
			line.contains("ESTABELECIMENTO") && 
			line.contains("CNPJ") && 
			line.contains("LANCAMENTO") && 
			line.contains("DATA REPASSE") && 
			line.contains("USUARIO") && 
			line.contains("COD. AUT.") && 
			line.contains("TIPO") && 
			line.contains("NSU") && 
			line.contains("CREDITO") && 
			line.contains("DEBITO") && 
			line.contains("SALDO")){
				padraoCabecalho = "PADRAO-1";
			}
		if( line.contains("RAZAO SOCIAL") && 
			line.contains("DT.MOVIMENTO") && 
			line.contains("VL.COMISSAO") && 
			line.contains("DT.REPASSE") && 
			line.contains("VL.LIQUIDO") &&
			line.contains("VL.BRUTO") && 
			line.contains("EMPRESA") && 
			line.contains("PRODUTO") && 
			line.contains("CARTAO") && 
			line.contains("NUMERO") && 
			line.contains("CNPJ")){
				padraoCabecalho = "PADRAO-2";
			}
		if(!padraoCabecalho.equals("")){

			tipoPlanilha = "CARTAO-POLICARD";

			JSONObject jDados = new JSONObject();

			jDados.put("PADRAOCABECALHO", padraoCabecalho);
			jDados.put("TIPOLANCAMENTO",  tipoLancamento);
			jDados.put("TIPOPLANILHA",    tipoPlanilha);
			jDados.put("NOMEEMPRESA",     nomeEmpresa);
			jDados.put("NOMEARQUIVO",     nomeArquivo);
			jDados.put("CODEMPRESA",      codEmpresa);
			jDados.put("LINE",            line);

			mapaVariavel = readCartaoPoliCard(memFile, jDados, mapaVariavel, logger);
			variaveis.put("tipoRetorno",   "break");
            return variaveis.toString();
		}
	}

	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
	//LEITURA PADRAO CARTAO - TrioCard
	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
	if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_TrioCard_Excel")) {
		String padraoCabecalho = "";
		// NOMSUBREDE|DATA|AUTORIZ|TRANSACAO|CARTAO|VALOR|VAL_LIQ|DT_FECH|NUM_FECHTO|CREDENCIADO|NOME_CREDENCIADO
		if(line.contains("NOMSUBREDE") && 
			line.contains("DATA") && 
			line.contains("AUTORIZ") && 
			line.contains("TRANSACAO") && 
			line.contains("CARTAO") && 
			line.contains("VALOR") && 
			line.contains("VAL_LIQ") && 
			line.contains("DT_FECH") && 
			line.contains("NUM_FECHTO") && 
			line.contains("CREDENCIADO") && 
			line.contains("NOME_CREDENCIADO")){
				padraoCabecalho = "PADRAO-1";
			}
		if(!padraoCabecalho.equals("")){
			tipoPlanilha = "CARTAO-TRIOCARD";
			JSONObject jDados = new JSONObject();
			jDados.put("PADRAOCABECALHO", padraoCabecalho);
			jDados.put("TIPOLANCAMENTO",  tipoLancamento);
			jDados.put("TIPOPLANILHA",    tipoPlanilha);
			jDados.put("NOMEEMPRESA",     nomeEmpresa);
			jDados.put("NOMEARQUIVO",     nomeArquivo);
			jDados.put("CODEMPRESA",      codEmpresa);
			jDados.put("LINE",            line);

			mapaVariavel = readCartaoTrioCard(memFile, jDados, mapaVariavel, logger);
			variaveis.put("tipoRetorno",   "break");
            return variaveis.toString();
		 }
	}

	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
	//  LEITURA PADRAO - CARTAO - ITAU EXCEL  #BATISTELLA
	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
	if (roteiroCRM.optString("Planilhas_Padroes").contains("Extrato_Itau_Txt")) {
		if(line.matches("[[0-9]{2}/[0-9]{2}/[0-9]{4};].*")
		&& nomeArquivo.contains("ITAU")
		&& extensao.contains("TXT")) {

			tipoPlanilha = "EXTRATO-ITAU";

			JSONObject jDados = new JSONObject();

			jDados.put("CODEMPRESA",     codEmpresa);
			jDados.put("TIPOLANCAMENTO", tipoLancamento);
			jDados.put("NOMEEMPRESA",    nomeEmpresa);
			jDados.put("NOMEARQUIVO",    nomeArquivo);
			jDados.put("TIPOPLANILHA",   tipoPlanilha);
			jDados.put("LINE",           line);

			readExtratoItauTXT(memFile, nomeArquivo, jDados, dbIOCont, logger);
 			variaveis.put("tipoRetorno",   "break");
            return variaveis.toString();
		}
	}
	
	// //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
    // //  LEITURA PADRAO - CARTAO - PAGARME EXCEL  #BATISTELLA
    // //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
    // if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_PagarME_Excel")) {
    //     if(line.contains("DATA")
    //     && line.contains("OPERACAO")
    //     && line.contains("ENTRADA")
    //     && line.contains("SAIDA")
    //     && line.contains("TAXA TOTAL")) {

    //         tipoPlanilha = "CARTAO PAGARME";
    //         JSONObject jDados = new JSONObject();
    //         jDados.put("LINE",           line);
    //         jDados.put("CODEMPRESA",     codEmpresa);
    //         jDados.put("NOMEARQUIVO",    nomeArquivo);
    //         jDados.put("NOMEEMPRESA",    nomeEmpresa);
    //         jDados.put("TIPOPLANILHA",   tipoPlanilha);
    //         jDados.put("TIPOLANCAMENTO", tipoLancamento);
    //         readExtratoPagarME(memFile, jDados, mapaVariavel, logger);
    //         variaveis.put("tipoRetorno",   "break");
    //         return variaveis.toString();
    //     }
    // }
	
	
	//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
    // //  LEITURA PADRAO - CARTAO - ALELO CSV
    // //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
   
	// if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Alelo_Csv")) {
    //     if (line.replaceAll("\"","").trim().contains("AUTORIZACAO") &&
	// 		line.replaceAll("\"","").trim().contains("CARTAO")         &&
    //         line.replaceAll("\"","").trim().contains("CARTAO")      &&
    //         line.replaceAll("\"","").trim().contains("CREDENCIADORA")    &&
    //         line.replaceAll("\"","").trim().contains("STATUS")           &&
    //         line.replaceAll("\"","").trim().contains("TRANSACAO")){

    //         tipoPlanilha = "ALELO-CSV"; 
    //         JSONObject jDados = new JSONObject();
    //         jDados.put("LINE", line);
    //         jDados.put("CODEMPRESA",     codEmpresa);
    //         jDados.put("NOMEARQUIVO",    nomeArquivo);
    //         jDados.put("NOMEEMPRESA",    nomeEmpresa);
    //         jDados.put("TIPOPLANILHA",   tipoPlanilha);
    //         jDados.put("TIPOLANCAMENTO", tipoLancamento);
    //         mapaVariavel = readAleloCsv(memFile, jDados, mapaVariavel, logger);
    //         variaveis.put("tipoRetorno",   "break");
    //         return variaveis.toString();
    //     } // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO ALELO"
    // }
		
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~-- //
		// 								LEITURA PADRAO - Liv PDF									     //
		// --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~-- //
		/*if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Liv_PDF")) {

			if(line.contains("DATA") && line.contains("TIPO") && line.contains("CONVENIO")){
				
				tipoPlanilha = "CARTAO-LIV";
				JSONObject jDados = new JSONObject();
				jDados.put("CODEMPRESA",     codEmpresa);
				jDados.put("NOMEEMPRESA",    nomeEmpresa);
				jDados.put("NOMEARQUIVO",    nomeArquivo);
				jDados.put("NOMEPORTADOR",   nomePortador);
				jDados.put("TIPOPLANILHA",   tipoPlanilha);
				jDados.put("TIPOLANCAMENTO", tipoLancamento);
				mapaVariavel = readCartaoLivPdf(memFile, jDados, mapaVariavel, logger);
				variaveis.put("tipoRetorno",   "break");
                return variaveis.toString();
			} // Fim  -> Captura de Dados quando Tipo Planilha -> "CARTAO LIV"
		} */

	
	
	// //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
	// //  LEITURA PADRAO - CARTAO - MAGALU EXCEL  #BATISTELLA
	// //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
	// if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_MagaLU_Excel")) {
	// 	if(line.contains("DATA")
	// 	&& line.contains("METODO")
	// 	&& line.contains("VALOR BRUTO")
	// 	&& line.contains("VALOR DA COMISSAO")
	// 	&& line.contains("ORIGEM")) {

	// 		tipoPlanilha = "CARTAO MAGALU";
	// 		JSONObject jDados = new JSONObject();
	// 		jDados.put("LINE",           line);
	// 		jDados.put("CODEMPRESA",     codEmpresa);
	// 		jDados.put("NOMEARQUIVO",    nomeArquivo);
	// 		jDados.put("NOMEEMPRESA",    nomeEmpresa);
	// 		jDados.put("TIPOPLANILHA",   tipoPlanilha);
	// 		jDados.put("TIPOLANCAMENTO", tipoLancamento);
	// 		readExtratoMagaLU(memFile, jDados, mapaVariavel, logger);
	// 		variaveis.put("tipoRetorno",   "break");
    //         return variaveis.toString();
	// 	}
	// }
	// //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
	// //  LEITURA PADRAO - CARTAO - NETSHOES EXCEL  #BATISTELLA
	// //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
	// if (roteiroCRM.optString("Planilhas_Padroes").contains("Cartao_Netshoes_Excel")) {
	// 	if(line.contains("PEDIDO")
	// 	&& line.contains("STATUS")
	// 	&& line.contains("FRETE LOJISTA")
	// 	&& line.contains("TOTAL PRODUTO")
	// 	&& line.contains("SKU MKT")) {

	// 		tipoPlanilha = "CARTAO NETSHOES";
	// 		JSONObject jDados = new JSONObject();
	// 		jDados.put("LINE",           line);
	// 		jDados.put("CODEMPRESA",     codEmpresa);
	// 		jDados.put("NOMEARQUIVO",    nomeArquivo);
	// 		jDados.put("NOMEEMPRESA",    nomeEmpresa);
	// 		jDados.put("TIPOPLANILHA",   tipoPlanilha);
	// 		jDados.put("TIPOLANCAMENTO", tipoLancamento);
	// 		readExtratoNetshoes(memFile, jDados, mapaVariavel, logger);
	// 		variaveis.put("tipoRetorno",   "break");
    //         return variaveis.toString();
	// 	}
	// }

	variaveis.put("tipoRetorno",   "segue");
    return variaveis.toString();
 }





















































































































//## CODIGO GERADO A PARTIR DAS REGRAS NO SALESFORCE ##
//## NAO ALTERAR DAQUI ATE O FINAL DO SCRIPT!!!!     ##
public JSONObject getRoteiro() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2020-089516");
    js.put("idRoteiro", "a0A1C000011YrVj");
    js.put("idEmpresa", "a0q1C000008X5bXQAS");
    js.put("idContabilidade", "a091500001Rq7TD");
    js.put("CnpjContabilidade", "38.739.504/0001-09");
    js.put("CnpjEmpresa", "00.794.227/0001-56");
    js.put("fornecedor", "@2");
    js.put("dataMovimento", "1");
    js.put("portador", "0");
    js.put("documentoNF", "0");
    js.put("valorDocumento", "4");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "3");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "@2");
    js.put("complemento05", "2");
    js.put("complemento06", "4");
    js.put("centroCusto", "");
    js.put("valorAlternativo", "");
    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("dataFake", "");

    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Alcefran");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "FALSE");
    js.put("cruzaExtrato", "FALSE");
    js.put("empresa", "Institutodarcy");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "ALTERDATA");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "FALSE");
    js.put("ValidaFornecedorFiscal", "0");
    js.put("Integracao_contratos", "false");
    js.put("Usa_Filial_Questor", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "ALBERGUE 01 01 A 31 05 20.XLSX");
    js.put("Planilhas_Padroes", "Extratos OFX;Extrato_CEF_TXT;Extrato_Cef_Excel;Extrato_CEF_PDF;Extrato_Cef_Html;Extrato_CEF_por periodo_PDF");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");

    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("especiaisBaixaFiscal", "");
    js.put("Arredonda", "false");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");
    js.put("Coluna_Valor_Duplicata_Dominio", "9");
    js.put("delimitadorDoArquivo", "");
    js.put("agrupaArquivos", "FALSE");

    js.put("X001_ROB", "");
    js.put("X002_Despesas", "");
    js.put("X003_Despesas_Detalhe", "");
    js.put("X004_Geracao_Caixa_Mes", "");
    js.put("X005_Geracao_Caixa_Acumulado", "");
    js.put("X006_Despesas_sobre_Faturamento", "");
    js.put("X007_Lucro", "");
    js.put("X008_Deducoes_Receitas", "");
    js.put("X009_CMV", "");
    js.put("X010_CPV", "");
    js.put("X011_CSP", "");
    js.put("X012_Indicador", "");
    js.put("X013_Indicador", "");
    js.put("X014_Indicador", "");
    js.put("X015_Indicador", "");
    js.put("X016_Indicador", "");
    js.put("X017_Indicador", "");
    js.put("X018_Indicador", "");
    js.put("X019_Indicador", "");
    js.put("X020_Indicador", "");
    js.put("X021_Indicador", "");

    js.put("X015_Label", "");
    js.put("X016_Label", "");
    js.put("X017_Label", "");
    js.put("X018_Label", "");
    js.put("X019_Label", "");
    js.put("X020_Label", "");
    js.put("Email_Logo", "");
    js.put("BuscaCnpjCRM", "FALSE");
    js.put("Idioma", "PORTUGUES");
    js.put("Ordem_dos_Indicadores", "7, 12, 21, 1, 8, 9, 10, 11, 13, 2, 3, 6, 4, 5, 15, 16, 18, 14, 17, 19, 20");
    js.put("Rotulo_Complemento_01", "CATEGORIA");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "FAVORECIDO");
    js.put("Gera_LOG", "false");
    js.put("Gera_LOG_PARAMETROS", "");

    return js;
}

public String getTipoPlanilha(String line, String tipoPlanilha, String nomeArquivo, JSONObject jDadosObj) {
    boolean achouTipo = true;
    return tipoPlanilha;
}
public String getConta(String nomeOrigem, String documento, String nomePortador,
                       String complemento01, String complemento02, String complemento03, 
                       String nomeArquivo, String codCentroCusto) {
    String conta = "";
    String complemento04 = "";
    String complemento05 = "";
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getConta09(String contaMovimento, String nomeOrigem, String documento, 
                       String nomePortador, String complemento01, String complemento02, 
                       String complemento03, String nomeArquivo, String codCentroCusto) {
    String conta = contaMovimento;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) { //ROT-2023-1093778
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) { //ROT-2023-1097268
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2023-0140950
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS")) { //ROT-2020-089516
        conta = "49";
        contaMovimento = "49";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANARE")) { //ROT-2020-089516
        conta = "4830";
        contaMovimento = "4830";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "112";
        contaMovimento = "112";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) { //ROT-2020-089516
        conta = "133";
        contaMovimento = "133";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "196";
        contaMovimento = "196";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOSXXXX") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PIS/COFINS/CSLL")) { //ROT-2020-089516
        conta = "770";
        contaMovimento = "770";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TERCEIROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("EMIVE")) { //ROT-2020-089516
        conta = "770";
        contaMovimento = "770";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ISSQN")) { //ROT-2020-089516
        conta = "784";
        contaMovimento = "784";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TERCEIROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ISSQN")) { //ROT-2020-089516
        conta = "784";
        contaMovimento = "784";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF ALUGUEL")) { //ROT-2020-089516
        conta = "798";
        contaMovimento = "798";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO DE FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "112";
        contaMovimento = "112";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO DE SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "196";
        contaMovimento = "196";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO ALIMENTICIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "910";
        contaMovimento = "910";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICOS DE TRANSPORTE")) { //ROT-2020-089516
        conta = "931";
        contaMovimento = "931";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICOS DE UTILIDADE PUBLICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "938";
        contaMovimento = "938";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS SERVICOS PESSOA JURIDICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE 701-9") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS SERVICOS DE TERCEIROS")) { //ROT-2020-089516
        conta = "4235";
        contaMovimento = "4235";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("THYSSENKRUPP") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4249";
        contaMovimento = "4249";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DENTAL")) { //ROT-2020-089516
        conta = "4830";
        contaMovimento = "4830";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MATERIAIS DE CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBOL LT") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4291";
        contaMovimento = "4291";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("LOCACAO DE IMOVEL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4382";
        contaMovimento = "4382";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS : INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4543";
        contaMovimento = "4543";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4599";
        contaMovimento = "4599";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4655";
        contaMovimento = "4655";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVIDIR") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4662";
        contaMovimento = "4662";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4711";
        contaMovimento = "4711";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4907";
        contaMovimento = "4907";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PEQUNOS REPAROS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "5110";
        contaMovimento = "5110";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("UNIFORME E EPI") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "5131";
        contaMovimento = "5131";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MAT. ESCRITORIO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4879";
        contaMovimento = "4879";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MAT. LIMPEZA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4928";
        contaMovimento = "4928";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SABONETES") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "5117";
        contaMovimento = "5117";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS MATERIAIS DE CONSUMOX")) { //ROT-2020-089516
        conta = "4998";
        contaMovimento = "4998";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("2 VIA CARTAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4977";
        contaMovimento = "4977";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FORMATACAO DE CARTAO")) { //ROT-2020-089516
        conta = "4977";
        contaMovimento = "4977";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "5033";
        contaMovimento = "5033";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TARIFA SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "5040";
        contaMovimento = "5040";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAG. INDEVIDO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4942";
        contaMovimento = "4942";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTABILIDADE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4977";
        contaMovimento = "4977";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DOC/TED INTERNET") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "5040";
        contaMovimento = "5040";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4900";
        contaMovimento = "4900";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) { //ROT-2020-089516
        conta = "6503";
        contaMovimento = "6503";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) { //ROT-2020-089516
        conta = "6496";
        contaMovimento = "6496";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("INVESTIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) { //ROT-2020-089516
        conta = "6545";
        contaMovimento = "6545";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MATERIAL DE CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) { //ROT-2020-089516
        conta = "6503";
        contaMovimento = "6503";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REMUNERACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) { //ROT-2020-089516
        conta = "861";
        contaMovimento = "861";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICOS DE TERCEIROS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) { //ROT-2020-089516
        conta = "6531";
        contaMovimento = "6531";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS BANCARIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) { //ROT-2020-089516
        conta = "6587";
        contaMovimento = "6587";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) { //ROT-2020-089516
        conta = "5208";
        contaMovimento = "5208";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) { //ROT-2020-089516
        conta = "4550";
        contaMovimento = "4550";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) { //ROT-2020-089516
        conta = "4606";
        contaMovimento = "4606";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) { //ROT-2020-089516
        conta = "4718";
        contaMovimento = "4718";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PEQUNOS REPAROS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) { //ROT-2020-089516
        conta = "5327";
        contaMovimento = "5327";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MAT. ESCRITORIO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) { //ROT-2020-089516
        conta = "5166";
        contaMovimento = "5166";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MEDICAMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) { //ROT-2020-089516
        conta = "5257";
        contaMovimento = "5257";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS MATERIAIS DE CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS")) { //ROT-2020-089516
        conta = "5229";
        contaMovimento = "5229";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS MATERIAIS DE CONSUMO : MATERIAIS DE CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) { //ROT-2020-089516
        conta = "5194";
        contaMovimento = "5194";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CEMIG")) { //ROT-2020-089516
        conta = "4298";
        contaMovimento = "4298";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AGUA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO")) { //ROT-2020-089516
        conta = "4319";
        contaMovimento = "4319";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF SOBRE FOLHA")) { //ROT-2020-089516
        conta = "798";
        contaMovimento = "798";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CORREIOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("INSTITUTO")) { //ROT-2020-089516
        conta = "7238";
        contaMovimento = "7238";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("13")) { //ROT-2020-089516
        conta = "4613";
        contaMovimento = "4613";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF IRRF 13") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) { //ROT-2020-089516
        conta = "4634";
        contaMovimento = "4634";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("REVIVER") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("13")) { //ROT-2020-089516
        conta = "4627";
        contaMovimento = "4627";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("13")) { //ROT-2020-089516
        conta = "4620";
        contaMovimento = "4620";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES")) { //ROT-2020-089516
        conta = "4620";
        contaMovimento = "4620";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF IRRF FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) { //ROT-2020-089516
        conta = "4634";
        contaMovimento = "4634";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS")) { //ROT-2020-089516
        conta = "4613";
        contaMovimento = "4613";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES")) { //ROT-2020-089516
        conta = "4732";
        contaMovimento = "4732";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REVIVER")) { //ROT-2020-089516
        conta = "4739";
        contaMovimento = "4739";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL")) { //ROT-2020-089516
        conta = "4725";
        contaMovimento = "4725";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) { //ROT-2020-089516
        conta = "4746";
        contaMovimento = "4746";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SESC")) { //ROT-2020-089516
        conta = "4753";
        contaMovimento = "4753";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) { //ROT-2020-089516
        conta = "4578";
        contaMovimento = "4578";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL")) { //ROT-2020-089516
        conta = "4557";
        contaMovimento = "4557";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES")) { //ROT-2020-089516
        conta = "4564";
        contaMovimento = "4564";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SESC")) { //ROT-2020-089516
        conta = "4585";
        contaMovimento = "4585";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REVIVER")) { //ROT-2020-089516
        conta = "4571";
        contaMovimento = "4571";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NET TELEFONE")) { //ROT-2020-089516
        conta = "938";
        contaMovimento = "938";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO INDEVIDO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL")) { //ROT-2020-089516
        conta = "3388";
        contaMovimento = "3388";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO INDEVIDO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) { //ROT-2020-089516
        conta = "6300";
        contaMovimento = "6300";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO INDEVIDO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) { //ROT-2020-089516
        conta = "5145";
        contaMovimento = "5145";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO INDEVIDO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES")) { //ROT-2020-089516
        conta = "5845";
        contaMovimento = "5845";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO INDEVIDO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("IDOSO")) { //ROT-2020-089516
        conta = "6741";
        contaMovimento = "6741";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO DE DESPESA BANCARIA")) { //ROT-2020-089516
        conta = "7252";
        contaMovimento = "7252";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REVIVER")) { //ROT-2020-089516
        conta = "3514";
        contaMovimento = "3514";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) { //ROT-2020-089516
        conta = "854";
        contaMovimento = "854";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES")) { //ROT-2020-089516
        conta = "3605";
        contaMovimento = "3605";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL")) { //ROT-2020-089516
        conta = "3388";
        contaMovimento = "3388";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) { //ROT-2020-089516
        conta = "3283";
        contaMovimento = "3283";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "196";
        contaMovimento = "196";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SESC")) { //ROT-2020-089516
        conta = "4130";
        contaMovimento = "4130";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES")) { //ROT-2020-089516
        conta = "5957";
        contaMovimento = "5957";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) { //ROT-2020-089516
        conta = "6202";
        contaMovimento = "6202";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL")) { //ROT-2020-089516
        conta = "5488";
        contaMovimento = "5488";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REVIVER")) { //ROT-2020-089516
        conta = "5733";
        contaMovimento = "5733";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SESC")) { //ROT-2020-089516
        conta = "7014";
        contaMovimento = "7014";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) { //ROT-2020-089516
        conta = "5278";
        contaMovimento = "5278";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES")) { //ROT-2020-089516
        conta = "5971";
        contaMovimento = "5971";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL")) { //ROT-2020-089516
        conta = "5495";
        contaMovimento = "5495";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REVIVER")) { //ROT-2020-089516
        conta = "5740";
        contaMovimento = "5740";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8902")) { //ROT-2020-089516
        conta = "3185";
        contaMovimento = "3185";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8422") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) { //ROT-2020-089516
        conta = "3157";
        contaMovimento = "3157";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("7698") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) { //ROT-2020-089516
        conta = "3143";
        contaMovimento = "3143";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("7426") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) { //ROT-2020-089516
        conta = "3164";
        contaMovimento = "3164";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8899") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) { //ROT-2020-089516
        conta = "3192";
        contaMovimento = "3192";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("7027") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) { //ROT-2020-089516
        conta = "3129";
        contaMovimento = "3129";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("7914") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) { //ROT-2020-089516
        conta = "3150";
        contaMovimento = "3150";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("7680") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) { //ROT-2020-089516
        conta = "3136";
        contaMovimento = "3136";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("7019") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) { //ROT-2020-089516
        conta = "3122";
        contaMovimento = "3122";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COFINS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CSLL")) { //ROT-2020-089516
        conta = "770";
        contaMovimento = "770";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBOL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4291";
        contaMovimento = "4291";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEGA FESTAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4907";
        contaMovimento = "4907";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BH ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4928";
        contaMovimento = "4928";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRALDAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4928";
        contaMovimento = "4928";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GVENDAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4928";
        contaMovimento = "4928";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RS ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4928";
        contaMovimento = "4928";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAT ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4977";
        contaMovimento = "4977";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4984";
        contaMovimento = "4984";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COBERTOR") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4998";
        contaMovimento = "4998";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENXOVAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4998";
        contaMovimento = "4998";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UTILIDADES DOM") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "5005";
        contaMovimento = "5005";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("UNIFORME") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "5131";
        contaMovimento = "5131";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("EPI") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "5131";
        contaMovimento = "5131";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARCOM") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) { //ROT-2020-089516
        conta = "5194";
        contaMovimento = "5194";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRIJO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) { //ROT-2020-089516
        conta = "5194";
        contaMovimento = "5194";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARTESANATOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "5012";
        contaMovimento = "5012";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LANTERNATATICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "5010";
        contaMovimento = "5010";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBOL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) { //ROT-2020-089516
        conta = "5194";
        contaMovimento = "5194";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) { //ROT-2020-089516
        conta = "5229";
        contaMovimento = "5229";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("UNIFORME") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) { //ROT-2020-089516
        conta = "5320";
        contaMovimento = "5320";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BEBTEC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("791")) { //ROT-2020-089516
        conta = "5894";
        contaMovimento = "5894";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBOL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("791")) { //ROT-2020-089516
        conta = "5894";
        contaMovimento = "5894";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("791")) { //ROT-2020-089516
        conta = "5922";
        contaMovimento = "5922";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBOL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) { //ROT-2020-089516
        conta = "5390";
        contaMovimento = "5390";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UTILIDADES") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) { //ROT-2020-089516
        conta = "5390";
        contaMovimento = "5390";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BEBTEC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) { //ROT-2020-089516
        conta = "5432";
        contaMovimento = "5432";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) { //ROT-2020-089516
        conta = "5439";
        contaMovimento = "5439";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAHANE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("INSTITUTO")) { //ROT-2020-089516
        conta = "7238";
        contaMovimento = "7238";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("INSTITUTO")) { //ROT-2020-089516
        conta = "7238";
        contaMovimento = "7238";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEG E PAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("INSTITUTO")) { //ROT-2020-089516
        conta = "7238";
        contaMovimento = "7238";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BH ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) { //ROT-2020-089516
        conta = "5663";
        contaMovimento = "5663";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBOL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) { //ROT-2020-089516
        conta = "5663";
        contaMovimento = "5663";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UTILIDADES") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) { //ROT-2020-089516
        conta = "5663";
        contaMovimento = "5663";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) { //ROT-2020-089516
        conta = "5691";
        contaMovimento = "5691";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GVENDAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) { //ROT-2020-089516
        conta = "6944";
        contaMovimento = "6944";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROD LIMPEZA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4928";
        contaMovimento = "4928";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMILXXX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMIL DENTAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4256";
        contaMovimento = "4256";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANAREXXX") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4452";
        contaMovimento = "4452";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIMED")) { //ROT-2020-089516
        conta = "4830";
        contaMovimento = "4830";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIMED") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) { //ROT-2020-089516
        conta = "4263";
        contaMovimento = "4263";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANARE")) { //ROT-2020-089516
        conta = "4830";
        contaMovimento = "4830";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANARE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4452";
        contaMovimento = "4452";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DENTAL")) { //ROT-2020-089516
        conta = "4830";
        contaMovimento = "4830";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMIL DENTAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4256";
        contaMovimento = "4256";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO")) { //ROT-2020-089516
        conta = "819";
        contaMovimento = "819";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("791")) { //ROT-2020-089516
        conta = "847";
        contaMovimento = "847";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) { //ROT-2020-089516
        conta = "833";
        contaMovimento = "833";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) { //ROT-2020-089516
        conta = "840";
        contaMovimento = "840";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("889")) { //ROT-2020-089516
        conta = "861";
        contaMovimento = "861";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("889")) { //ROT-2020-089516
        conta = "4130";
        contaMovimento = "4130";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) { //ROT-2020-089516
        conta = "3514";
        contaMovimento = "3514";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) { //ROT-2020-089516
        conta = "3388";
        contaMovimento = "3388";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("791")) { //ROT-2020-089516
        conta = "3605";
        contaMovimento = "3605";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) { //ROT-2020-089516
        conta = "3283";
        contaMovimento = "3283";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "196";
        contaMovimento = "196";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "112";
        contaMovimento = "112";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) { //ROT-2020-089516
        conta = "133";
        contaMovimento = "133";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("791")) { //ROT-2020-089516
        conta = "3570";
        contaMovimento = "3570";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) { //ROT-2020-089516
        conta = "3346";
        contaMovimento = "3346";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) { //ROT-2020-089516
        conta = "3479";
        contaMovimento = "3479";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("889")) { //ROT-2020-089516
        conta = "4095";
        contaMovimento = "4095";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTICIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "910";
        contaMovimento = "910";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRATUAL")) { //ROT-2020-089516
        conta = "819";
        contaMovimento = "819";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRATUAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) { //ROT-2020-089516
        conta = "833";
        contaMovimento = "833";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRATUAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) { //ROT-2020-089516
        conta = "840";
        contaMovimento = "840";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) { //ROT-2020-089516
        conta = "4907";
        contaMovimento = "4907";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) { //ROT-2020-089516
        conta = "5208";
        contaMovimento = "5208";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("791")) { //ROT-2020-089516
        conta = "5887";
        contaMovimento = "5887";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) { //ROT-2020-089516
        conta = "5376";
        contaMovimento = "5376";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) { //ROT-2020-089516
        conta = "5656";
        contaMovimento = "5656";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("889")) { //ROT-2020-089516
        conta = "6937";
        contaMovimento = "6937";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) { //ROT-2020-058689
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) { //ROT-2021-0311455
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERNET")) { //ROT-2020-089516
        conta = "6804";
        contaMovimento = "6804";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED")) { //ROT-2020-089516
        conta = "6762";
        contaMovimento = "6762";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANUT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CTA")) { //ROT-2020-089516
        conta = "6804";
        contaMovimento = "6804";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO")) { //ROT-2020-089516
        conta = "6762";
        contaMovimento = "6762";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEV") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MESM")) { //ROT-2020-089516
        conta = "3164";
        contaMovimento = "3164";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) { //ROT-2021-0512280
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) { //ROT-2021-0612672
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) { //ROT-2020-079383
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8724") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC")) { //ROT-2020-089516
        conta = "3171";
        contaMovimento = "3171";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8732") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC")) { //ROT-2020-089516
        conta = "3178";
        contaMovimento = "3178";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8996") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC")) { //ROT-2020-089516
        conta = "8785";
        contaMovimento = "8785";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) { //ROT-2021-0612733
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) { //ROT-2022-0421802
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("873") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICA")) { //ROT-2020-089516
        conta = "3178";
        contaMovimento = "3178";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) { //ROT-2020-089516
        conta = "9079";
        contaMovimento = "9079";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) { //ROT-2022-1033321
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) { //ROT-2024-03128218
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6230";
        contaMovimento = "6230";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "4634";
        contaMovimento = "4634";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "4746";
        contaMovimento = "4746";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SERV") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TERC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "770";
        contaMovimento = "770";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("BANCAR") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6209";
        contaMovimento = "6209";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ISSQN") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "784";
        contaMovimento = "784";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REMUNERACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "854";
        contaMovimento = "854";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADIANTA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVID") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "3682";
        contaMovimento = "3682";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TELEFONIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "938";
        contaMovimento = "938";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REMUNERA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "3647";
        contaMovimento = "3647";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMIG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "4298";
        contaMovimento = "4298";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COPASA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "4319";
        contaMovimento = "4319";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMIVE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "4403";
        contaMovimento = "4403";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("LOCAC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VEICUL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "4431";
        contaMovimento = "4431";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "4445";
        contaMovimento = "4445";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "4578";
        contaMovimento = "4578";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TRANSP") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6111";
        contaMovimento = "6111";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SOCIAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6111";
        contaMovimento = "6111";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6118";
        contaMovimento = "6118";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6132";
        contaMovimento = "6132";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("LIMP") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6132";
        contaMovimento = "6132";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DEDETIZA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6132";
        contaMovimento = "6132";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("LAVANDERIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6132";
        contaMovimento = "6132";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SERV") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTAB") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6153";
        contaMovimento = "6153";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOTEBOOKS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVIDIR") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6153";
        contaMovimento = "6153";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6160";
        contaMovimento = "6160";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REMUNERA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6153";
        contaMovimento = "6153";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOVEIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6153";
        contaMovimento = "6153";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("RELOGIO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6153";
        contaMovimento = "6153";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENXOVAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6174";
        contaMovimento = "6174";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MAT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("OFICINA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6181";
        contaMovimento = "6181";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARG") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6202";
        contaMovimento = "6202";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVID") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6202";
        contaMovimento = "6202";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PLANO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6188";
        contaMovimento = "6188";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("UNIFORME") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6272";
        contaMovimento = "6272";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INDEV") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6300";
        contaMovimento = "6300";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANARE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MEDIC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "4452";
        contaMovimento = "4452";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AVCB") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6153";
        contaMovimento = "6153";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("COMPUTADOR") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6153";
        contaMovimento = "6153";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FOTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) { //ROT-2020-089516
        conta = "6153";
        contaMovimento = "6153";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADIANTA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("922")) { //ROT-2020-089516
        conta = "9205";
        contaMovimento = "9205";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FER") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("922")) { //ROT-2020-089516
        conta = "9100";
        contaMovimento = "9100";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) { //ROT-2020-089516
        conta = "4830";
        contaMovimento = "4830";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS RESC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) { //ROT-2020-089516
        conta = "5306";
        contaMovimento = "5306";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARG") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS")) { //ROT-2020-089516
        conta = "4655";
        contaMovimento = "4655";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARG") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PROJETO")) { //ROT-2020-089516
        conta = "4662";
        contaMovimento = "4662";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("873") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PESS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JUR") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SODEX")) { //ROT-2020-089516
        conta = "9856";
        contaMovimento = "9856";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("BANCAR")) { //ROT-2020-089516
        conta = "9401";
        contaMovimento = "9401";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVID")) { //ROT-2020-089516
        conta = "9303";
        contaMovimento = "9303";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SERV") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TERC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TELEF")) { //ROT-2020-089516
        conta = "9352";
        contaMovimento = "9352";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TELEF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PROJ")) { //ROT-2020-089516
        conta = "9303";
        contaMovimento = "9303";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ESTORN")) { //ROT-2020-089516
        conta = "9303";
        contaMovimento = "9303";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTA")) { //ROT-2020-089516
        conta = "9331";
        contaMovimento = "9331";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SALAR") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTA")) { //ROT-2020-089516
        conta = "9135";
        contaMovimento = "9135";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IMPOST") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF")) { //ROT-2020-089516
        conta = "9219";
        contaMovimento = "9219";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARG") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF")) { //ROT-2020-089516
        conta = "9219";
        contaMovimento = "9219";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARG") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INSS")) { //ROT-2020-089516
        conta = "9212";
        contaMovimento = "9212";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TRANSF")) { //ROT-2020-089516
        conta = "9317";
        contaMovimento = "9317";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCAR") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS")) { //ROT-2020-089516
        conta = "9226";
        contaMovimento = "9226";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCAR") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS")) { //ROT-2020-089516
        conta = "9226";
        contaMovimento = "9226";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("923") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("BANCAR")) { //ROT-2020-089516
        conta = "10304";
        contaMovimento = "10304";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("923") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PERM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IMPRES")) { //ROT-2020-089516
        conta = "10227";
        contaMovimento = "10227";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("923") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JUR") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SODEX")) { //ROT-2020-089516
        conta = "10213";
        contaMovimento = "10213";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("923") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TRANSP") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TRANSF")) { //ROT-2020-089516
        conta = "10213";
        contaMovimento = "10213";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SERV") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TECN")) { //ROT-2020-089516
        conta = "9352";
        contaMovimento = "9352";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCAR") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE")) { //ROT-2020-089516
        conta = "9317";
        contaMovimento = "9317";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MAT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("LIMP")) { //ROT-2020-089516
        conta = "9331";
        contaMovimento = "9331";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("923") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) { //ROT-2020-089516
        conta = "9486";
        contaMovimento = "9486";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) { //ROT-2023-1093778
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) { //ROT-2023-1097268
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2023-0140950
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVIDIR")) { //ROT-2020-089516
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("-")) { //ROT-2020-089516
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS")) { //ROT-2020-089516
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVIDIR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA")) { //ROT-2020-089516
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (Integer.parseInt(dataMovimento.substring(3,5)) <= 12 &&
        Integer.parseInt(dataMovimento.substring(6)) <= 2019) { //ROT-2020-089516
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) { //ROT-2020-058689
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) { //ROT-2021-0311455
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) { //ROT-2021-0311491
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) { //ROT-2021-0512280
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) { //ROT-2021-0612672
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) { //ROT-2020-079383
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) { //ROT-2021-0612733
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) { //ROT-2022-0421802
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) { //ROT-2022-1033321
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) { //ROT-2024-03128218
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    return conta;
}
public String getContaMovimento2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getRegraContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'PIX ENVIADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGARME2', Complemento (06) nao contem 'PAGA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PUNTO2', Complemento (06) nao contem 'PAGO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'VALOR', Fornecedor/Cliente contem 'LIQUIDADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AME1', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVIDIR")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'DIVIDIR', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (04) nao contem 'PAGAMENTO', Complemento (04) nao contem 'ASSINATURA', Complemento (04) nao contem 'SAQUE', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (03) nao contem 'APROVAD', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("-")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (06) nao contem '-', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (05) contem 'EM BRANCO', Fornecedor/Cliente nao contem 'AGUA', Fornecedor/Cliente nao contem 'FGTS', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVIDIR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGUA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente contem 'GAS', Complemento (01) contem 'DIVIDIR', Fornecedor/Cliente contem 'AGUA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FGTS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (05) contem 'EM BRANCO', Fornecedor/Cliente contem 'FGTS', CONTA MOVIMENTO SERA = '49'";
    }
    if (Integer.parseInt(dataMovimento.substring(3,5)) <= 12 &&
        Integer.parseInt(dataMovimento.substring(6)) <= 2019) {
        conta = "Quando Mes Movimento menor ou igual a '12', Ano Movimento menor ou igual a '2019', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS")) {
        conta = "Quando Complemento (01) contem 'ENCARGOS', Complemento (01) contem 'FGTS', CONTA MOVIMENTO SERA = '49'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANARE")) {
        conta = "Quando Fornecedor/Cliente contem 'SANARE', CONTA MOVIMENTO SERA = '4830'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'FERIAS', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '112'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'FERIAS', Portador contem '702', CONTA MOVIMENTO SERA = '133'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'FERIAS', Portador contem '701', CONTA MOVIMENTO SERA = '196'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOSXXXX") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PIS/COFINS/CSLL")) {
        conta = "Quando Complemento (01) contem 'ENCARGOSXXXX', Complemento (01) contem 'PIS/COFINS/CSLL', CONTA MOVIMENTO SERA = '770'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TERCEIROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("EMIVE")) {
        conta = "Quando Complemento (01) contem 'SERVICO', Complemento (01) contem 'TERCEIROS', Complemento (01) contem 'EMIVE', CONTA MOVIMENTO SERA = '770'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ISSQN")) {
        conta = "Quando Complemento (01) contem 'ENCARGOS', Complemento (01) contem 'ISSQN', CONTA MOVIMENTO SERA = '784'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TERCEIROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ISSQN")) {
        conta = "Quando Complemento (01) contem 'SERVICO', Complemento (01) contem 'TERCEIROS', Complemento (01) contem 'ISSQN', CONTA MOVIMENTO SERA = '784'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF ALUGUEL")) {
        conta = "Quando Complemento (01) contem 'ENCARGOS', Complemento (01) contem 'IRRF ALUGUEL', CONTA MOVIMENTO SERA = '798'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO DE FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'PAGAMENTO DE FERIAS', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '112'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO DE SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'ADIANTAMENTO DE SALARIOS', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '196'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO ALIMENTICIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'PENSAO ALIMENTICIA', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '910'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICOS DE TRANSPORTE")) {
        conta = "Quando Complemento (01) contem 'SERVICOS DE TRANSPORTE', CONTA MOVIMENTO SERA = '931'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICOS DE UTILIDADE PUBLICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'SERVICOS DE UTILIDADE PUBLICA', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '938'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS SERVICOS PESSOA JURIDICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE 701-9") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS SERVICOS DE TERCEIROS")) {
        conta = "Quando Complemento (01) contem 'OUTROS SERVICOS PESSOA JURIDICA', Portador contem 'ALBERGUE 701-9', Complemento (01) contem 'OUTROS SERVICOS DE TERCEIROS', CONTA MOVIMENTO SERA = '4235'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("THYSSENKRUPP") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'THYSSENKRUPP', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4249'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DENTAL")) {
        conta = "Quando Fornecedor/Cliente contem 'AMIL', Fornecedor/Cliente contem 'DENTAL', CONTA MOVIMENTO SERA = '4830'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MATERIAIS DE CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBOL LT") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'MATERIAIS DE CONSUMO', Fornecedor/Cliente contem 'EMBOL LT', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4291'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("LOCACAO DE IMOVEL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'LOCACAO DE IMOVEL', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4382'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS : INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'ENCARGOS : INSS', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4543'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'ENCARGOS', Complemento (01) contem 'IRRF', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4599'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'ENCARGOS', Complemento (01) contem 'FGTS', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4655'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVIDIR") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'DIVIDIR', Complemento (04) contem 'FGTS', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4662'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'ENCARGOS', Complemento (01) contem 'PIS', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4711'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'ALIMENTACAO', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4907'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PEQUNOS REPAROS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'PEQUNOS REPAROS', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '5110'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("UNIFORME E EPI") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'UNIFORME E EPI', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '5131'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MAT. ESCRITORIO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'MAT. ESCRITORIO', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4879'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MAT. LIMPEZA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'MAT. LIMPEZA', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4928'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SABONETES") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'SABONETES', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '5117'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS MATERIAIS DE CONSUMOX")) {
        conta = "Quando Complemento (01) contem 'OUTROS MATERIAIS DE CONSUMOX', CONTA MOVIMENTO SERA = '4998'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("2 VIA CARTAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem '2 VIA CARTAO', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4977'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FORMATACAO DE CARTAO")) {
        conta = "Quando Complemento (01) contem 'FORMATACAO DE CARTAO', CONTA MOVIMENTO SERA = '4977'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'SODEXO', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '5033'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TARIFA SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'TARIFA SISPAG', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '5040'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAG. INDEVIDO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'PAG. INDEVIDO', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4942'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTABILIDADE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'CONTABILIDADE', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4977'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DOC/TED INTERNET") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'DOC/TED INTERNET', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '5040'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Complemento (01) contem 'VALE TRANSPORTE', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4900'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) {
        conta = "Quando Complemento (01) contem 'VALE ALIMENTACAO', Portador contem 'CONTAGEM', CONTA MOVIMENTO SERA = '6503'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE TRANSPORTE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) {
        conta = "Quando Complemento (01) contem 'VALE TRANSPORTE', Portador contem 'CONTAGEM', CONTA MOVIMENTO SERA = '6496'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("INVESTIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) {
        conta = "Quando Complemento (01) contem 'INVESTIMENTO', Portador contem 'CONTAGEM', CONTA MOVIMENTO SERA = '6545'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MATERIAL DE CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) {
        conta = "Quando Complemento (01) contem 'MATERIAL DE CONSUMO', Portador contem 'CONTAGEM', CONTA MOVIMENTO SERA = '6503'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REMUNERACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) {
        conta = "Quando Complemento (01) contem 'REMUNERACAO', Portador contem 'CONTAGEM', CONTA MOVIMENTO SERA = '861'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICOS DE TERCEIROS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) {
        conta = "Quando Complemento (01) contem 'SERVICOS DE TERCEIROS', Portador contem 'CONTAGEM', CONTA MOVIMENTO SERA = '6531'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXAS BANCARIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) {
        conta = "Quando Complemento (01) contem 'TAXAS BANCARIAS', Portador contem 'CONTAGEM', CONTA MOVIMENTO SERA = '6587'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) {
        conta = "Quando Complemento (01) contem 'ALIMENTACAO', Portador contem 'CASA DOS BEBES', CONTA MOVIMENTO SERA = '5208'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) {
        conta = "Quando Complemento (01) contem 'INSS', Portador contem 'CASA DOS BEBES', CONTA MOVIMENTO SERA = '4550'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) {
        conta = "Quando Complemento (01) contem 'IRRF', Portador contem 'CASA DOS BEBES', CONTA MOVIMENTO SERA = '4606'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) {
        conta = "Quando Complemento (01) contem 'ENCARGOS', Complemento (01) contem 'PIS', Portador contem 'CASA DOS BEBES', CONTA MOVIMENTO SERA = '4718'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PEQUNOS REPAROS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) {
        conta = "Quando Complemento (01) contem 'PEQUNOS REPAROS', Portador contem 'CASA DOS BEBES', CONTA MOVIMENTO SERA = '5327'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MAT. ESCRITORIO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) {
        conta = "Quando Complemento (01) contem 'MAT. ESCRITORIO', Portador contem 'CASA DOS BEBES', CONTA MOVIMENTO SERA = '5166'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MEDICAMENTOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) {
        conta = "Quando Complemento (01) contem 'MEDICAMENTOS', Portador contem 'CASA DOS BEBES', CONTA MOVIMENTO SERA = '5257'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS MATERIAIS DE CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS")) {
        conta = "Quando Complemento (01) contem 'OUTROS MATERIAIS DE CONSUMO', Portador contem 'CASA DOS BEBES', Complemento (01) contem 'GAS', CONTA MOVIMENTO SERA = '5229'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS MATERIAIS DE CONSUMO : MATERIAIS DE CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) {
        conta = "Quando Complemento (01) contem 'OUTROS MATERIAIS DE CONSUMO : MATERIAIS DE CONSUMO', Portador contem 'CASA DOS BEBES', CONTA MOVIMENTO SERA = '5194'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CEMIG")) {
        conta = "Quando Complemento (01) contem 'CEMIG', CONTA MOVIMENTO SERA = '4298'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AGUA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO")) {
        conta = "Quando Complemento (01) contem 'AGUA', Complemento (01) contem 'SERVICO', CONTA MOVIMENTO SERA = '4319'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF SOBRE FOLHA")) {
        conta = "Quando Complemento (01) contem 'IRRF SOBRE FOLHA', CONTA MOVIMENTO SERA = '798'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CORREIOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("INSTITUTO")) {
        conta = "Quando Fornecedor/Cliente contem 'CORREIOS', Portador contem 'INSTITUTO', CONTA MOVIMENTO SERA = '7238'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("13")) {
        conta = "Quando Complemento (01) contem 'IRRF', Portador contem 'HOTEL SOCIAL', Complemento (01) contem '13', CONTA MOVIMENTO SERA = '4613'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF IRRF 13") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) {
        conta = "Quando Fornecedor/Cliente contem 'DARF IRRF 13', Portador contem 'CONTAGEM', CONTA MOVIMENTO SERA = '4634'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("REVIVER") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("13")) {
        conta = "Quando Portador contem 'REVIVER', Complemento (01) contem 'IRRF', Complemento (01) contem '13', CONTA MOVIMENTO SERA = '4627'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("13")) {
        conta = "Quando Portador contem 'FABIO ALVES', Complemento (01) contem 'IRRF', Complemento (01) contem '13', CONTA MOVIMENTO SERA = '4620'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES")) {
        conta = "Quando Complemento (01) contem 'IRRF', Complemento (01) contem 'FERIAS', Portador contem 'FABIO ALVES', CONTA MOVIMENTO SERA = '4620'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF IRRF FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) {
        conta = "Quando Fornecedor/Cliente contem 'DARF IRRF FERIAS', Portador contem 'CONTAGEM', CONTA MOVIMENTO SERA = '4634'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS")) {
        conta = "Quando Portador contem 'HOTEL SOCIAL', Complemento (01) contem 'IRRF', Complemento (01) contem 'FERIAS', CONTA MOVIMENTO SERA = '4613'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES")) {
        conta = "Quando Fornecedor/Cliente contem 'DARF PIS', Portador contem 'FABIO ALVES', CONTA MOVIMENTO SERA = '4732'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REVIVER")) {
        conta = "Quando Fornecedor/Cliente contem 'DARF PIS', Portador contem 'REVIVER', CONTA MOVIMENTO SERA = '4739'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL")) {
        conta = "Quando Fornecedor/Cliente contem 'DARF PIS', Portador contem 'HOTEL SOCIAL', CONTA MOVIMENTO SERA = '4725'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) {
        conta = "Quando Fornecedor/Cliente contem 'DARF PIS', Portador contem 'CONTAGEM', CONTA MOVIMENTO SERA = '4746'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SESC")) {
        conta = "Quando Fornecedor/Cliente contem 'DARF PIS', Portador contem 'SESC', CONTA MOVIMENTO SERA = '4753'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) {
        conta = "Quando Fornecedor/Cliente contem 'INSS', Portador contem 'CONTAGEM', CONTA MOVIMENTO SERA = '4578'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL")) {
        conta = "Quando Fornecedor/Cliente contem 'INSS', Portador contem 'HOTEL SOCIAL', CONTA MOVIMENTO SERA = '4557'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES")) {
        conta = "Quando Fornecedor/Cliente contem 'INSS', Portador contem 'FABIO ALVES', CONTA MOVIMENTO SERA = '4564'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SESC")) {
        conta = "Quando Fornecedor/Cliente contem 'INSS', Portador contem 'SESC', CONTA MOVIMENTO SERA = '4585'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REVIVER")) {
        conta = "Quando Fornecedor/Cliente contem 'INSS', Portador contem 'REVIVER', CONTA MOVIMENTO SERA = '4571'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NET TELEFONE")) {
        conta = "Quando Fornecedor/Cliente contem 'NET TELEFONE', CONTA MOVIMENTO SERA = '938'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO INDEVIDO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL")) {
        conta = "Quando Fornecedor/Cliente contem 'PAGAMENTO INDEVIDO', Portador contem 'HOTEL SOCIAL', CONTA MOVIMENTO SERA = '3388'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO INDEVIDO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) {
        conta = "Quando Fornecedor/Cliente contem 'PAGAMENTO INDEVIDO', Portador contem 'CONTAGEM', CONTA MOVIMENTO SERA = '6300'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO INDEVIDO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) {
        conta = "Quando Fornecedor/Cliente contem 'PAGAMENTO INDEVIDO', Portador contem 'CASA DOS BEBES', CONTA MOVIMENTO SERA = '5145'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO INDEVIDO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES")) {
        conta = "Quando Fornecedor/Cliente contem 'PAGAMENTO INDEVIDO', Portador contem 'FABIO ALVES', CONTA MOVIMENTO SERA = '5845'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO INDEVIDO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("IDOSO")) {
        conta = "Quando Fornecedor/Cliente contem 'PAGAMENTO INDEVIDO', Portador contem 'IDOSO', CONTA MOVIMENTO SERA = '6741'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO DE DESPESA BANCARIA")) {
        conta = "Quando Fornecedor/Cliente contem 'REEMBOLSO DE DESPESA BANCARIA', CONTA MOVIMENTO SERA = '7252'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REVIVER")) {
        conta = "Quando Fornecedor/Cliente contem 'SISPAG ADIANTAMENTO', Portador contem 'REVIVER', CONTA MOVIMENTO SERA = '3514'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) {
        conta = "Quando Fornecedor/Cliente contem 'SISPAG ADIANTAMENTO', Portador contem 'CONTAGEM', CONTA MOVIMENTO SERA = '854'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES")) {
        conta = "Quando Fornecedor/Cliente contem 'SISPAG ADIANTAMENTO', Portador contem 'FABIO ALVES', CONTA MOVIMENTO SERA = '3605'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL")) {
        conta = "Quando Fornecedor/Cliente contem 'SISPAG ADIANTAMENTO', Portador contem 'HOTEL SOCIAL', CONTA MOVIMENTO SERA = '3388'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) {
        conta = "Quando Fornecedor/Cliente contem 'SISPAG ADIANTAMENTO', Portador contem 'CASA DOS BEBES', CONTA MOVIMENTO SERA = '3283'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Fornecedor/Cliente contem 'SISPAG ADIANTAMENTO', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '196'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SESC")) {
        conta = "Quando Fornecedor/Cliente contem 'SISPAG ADIANTAMENTO', Portador contem 'SESC', CONTA MOVIMENTO SERA = '4130'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES")) {
        conta = "Quando Fornecedor/Cliente contem 'SODEXO', Portador contem 'FABIO ALVES', CONTA MOVIMENTO SERA = '5957'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CONTAGEM")) {
        conta = "Quando Fornecedor/Cliente contem 'SODEXO', Portador contem 'CONTAGEM', CONTA MOVIMENTO SERA = '6202'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL")) {
        conta = "Quando Fornecedor/Cliente contem 'SODEXO', Portador contem 'HOTEL SOCIAL', CONTA MOVIMENTO SERA = '5488'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REVIVER")) {
        conta = "Quando Fornecedor/Cliente contem 'SODEXO', Portador contem 'REVIVER', CONTA MOVIMENTO SERA = '5733'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SESC")) {
        conta = "Quando Fornecedor/Cliente contem 'SODEXO', Portador contem 'SESC', CONTA MOVIMENTO SERA = '7014'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) {
        conta = "Quando Fornecedor/Cliente contem 'TARIFA SISPAG', Portador contem 'CASA DOS BEBES', CONTA MOVIMENTO SERA = '5278'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("FABIO ALVES")) {
        conta = "Quando Fornecedor/Cliente contem 'TARIFA SISPAG', Portador contem 'FABIO ALVES', CONTA MOVIMENTO SERA = '5971'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("HOTEL SOCIAL")) {
        conta = "Quando Fornecedor/Cliente contem 'TARIFA SISPAG', Portador contem 'HOTEL SOCIAL', CONTA MOVIMENTO SERA = '5495'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("REVIVER")) {
        conta = "Quando Fornecedor/Cliente contem 'TARIFA SISPAG', Portador contem 'REVIVER', CONTA MOVIMENTO SERA = '5740'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8902")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'APLICACAO', Portador contem '8902', CONTA MOVIMENTO SERA = '3185'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8422") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Portador contem '8422', Fornecedor/Cliente contem 'APLICACAO', CONTA MOVIMENTO SERA = '3157'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("7698") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Portador contem '7698', Fornecedor/Cliente contem 'APLICACAO', CONTA MOVIMENTO SERA = '3143'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("7426") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Portador contem '7426', Fornecedor/Cliente contem 'APLICACAO', CONTA MOVIMENTO SERA = '3164'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8899") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Portador contem '8899', Fornecedor/Cliente contem 'APLICACAO', CONTA MOVIMENTO SERA = '3192'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("7027") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Portador contem '7027', Fornecedor/Cliente contem 'APLICACAO', CONTA MOVIMENTO SERA = '3129'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("7914") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Portador contem '7914', Fornecedor/Cliente contem 'APLICACAO', CONTA MOVIMENTO SERA = '3150'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("7680") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Portador contem '7680', Fornecedor/Cliente contem 'APLICACAO', CONTA MOVIMENTO SERA = '3136'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("7019") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Portador contem '7019', Fornecedor/Cliente contem 'APLICACAO', CONTA MOVIMENTO SERA = '3122'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARGO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COFINS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CSLL")) {
        conta = "Quando Complemento (01) contem 'ENCARGO', Complemento (01) contem 'PIS', Complemento (01) contem 'COFINS', Complemento (01) contem 'CSLL', CONTA MOVIMENTO SERA = '770'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBOL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'EMBOL', Portador contem '701', CONTA MOVIMENTO SERA = '4291'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEGA FESTAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'MEGA FESTAS', Portador contem '701', CONTA MOVIMENTO SERA = '4907'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BH ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'BH_', Portador contem '701', CONTA MOVIMENTO SERA = '4928'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRALDAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'FRALDAS', Portador contem '701', CONTA MOVIMENTO SERA = '4928'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GVENDAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'GVENDAS', Portador contem '701', CONTA MOVIMENTO SERA = '4928'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RS ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'RS_', Portador contem '701', CONTA MOVIMENTO SERA = '4928'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAT ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'SAT_', Portador contem '701', CONTA MOVIMENTO SERA = '4977'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Complemento (01) contem 'GAS', Portador contem '701', CONTA MOVIMENTO SERA = '4984'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("COBERTOR") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Complemento (01) contem 'COBERTOR', Portador contem '701', CONTA MOVIMENTO SERA = '4998'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENXOVAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Complemento (01) contem 'ENXOVAL', Portador contem '701', CONTA MOVIMENTO SERA = '4998'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UTILIDADES DOM") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'UTILIDADES DOM', Portador contem '701', CONTA MOVIMENTO SERA = '5005'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("UNIFORME") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Complemento (01) contem 'UNIFORME', Portador contem '701', CONTA MOVIMENTO SERA = '5131'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("EPI") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Complemento (01) contem 'EPI', Portador contem '701', CONTA MOVIMENTO SERA = '5131'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARCOM") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'ARCOM', Portador contem '702', CONTA MOVIMENTO SERA = '5194'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRIJO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'GRIJO', Portador contem '702', CONTA MOVIMENTO SERA = '5194'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARTESANATOS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'ARTESANATOS', Portador contem '701', CONTA MOVIMENTO SERA = '5012'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LANTERNATATICA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'LANTERNATATICA', Portador contem '701', CONTA MOVIMENTO SERA = '5010'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBOL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'EMBOL', Portador contem '702', CONTA MOVIMENTO SERA = '5194'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Complemento (01) contem 'GAS', Portador contem '702', CONTA MOVIMENTO SERA = '5229'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("UNIFORME") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Complemento (01) contem 'UNIFORME', Portador contem '702', CONTA MOVIMENTO SERA = '5320'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BEBTEC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("791")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'BEBTEC', Portador contem '791', CONTA MOVIMENTO SERA = '5894'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBOL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("791")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'EMBOL', Portador contem '791', CONTA MOVIMENTO SERA = '5894'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("791")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Complemento (01) contem 'GAS', Portador contem '791', CONTA MOVIMENTO SERA = '5922'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBOL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'EMBOL', Portador contem '768', CONTA MOVIMENTO SERA = '5390'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UTILIDADES") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'UTILIDADES', Portador contem '768', CONTA MOVIMENTO SERA = '5390'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BEBTEC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'BEBTEC', Portador contem '768', CONTA MOVIMENTO SERA = '5432'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Complemento (01) contem 'GAS', Portador contem '768', CONTA MOVIMENTO SERA = '5439'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAHANE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("INSTITUTO")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'DAHANE', Portador contem 'INSTITUTO', CONTA MOVIMENTO SERA = '7238'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("INSTITUTO")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'OUTROS', Portador contem 'INSTITUTO', CONTA MOVIMENTO SERA = '7238'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEG E PAG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("INSTITUTO")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'PEG E PAG', Portador contem 'INSTITUTO', CONTA MOVIMENTO SERA = '7238'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BH ") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'BH_', Portador contem '769', CONTA MOVIMENTO SERA = '5663'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMBOL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'EMBOL', Portador contem '769', CONTA MOVIMENTO SERA = '5663'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UTILIDADES") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'UTILIDADES', Portador contem '769', CONTA MOVIMENTO SERA = '5663'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Complemento (01) contem 'GAS', Portador contem '769', CONTA MOVIMENTO SERA = '5691'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GVENDAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'GVENDAS', Portador contem '769', CONTA MOVIMENTO SERA = '6944'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("OUTROS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROD LIMPEZA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'OUTROS', Complemento (01) contem 'CONSUMO', Fornecedor/Cliente contem 'PROD LIMPEZA', Portador contem '701', CONTA MOVIMENTO SERA = '4928'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMILXXX") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMIL DENTAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Fornecedor/Cliente contem 'AMILXXX', Fornecedor/Cliente contem 'AMIL DENTAL', Portador contem '701', CONTA MOVIMENTO SERA = '4256'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANAREXXX") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Fornecedor/Cliente contem 'SANAREXXX', Portador contem '701', CONTA MOVIMENTO SERA = '4452'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIMED")) {
        conta = "Quando Fornecedor/Cliente contem 'UNIMED', CONTA MOVIMENTO SERA = '4830'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIMED") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE")) {
        conta = "Quando Fornecedor/Cliente contem 'UNIMED', Portador contem 'ALBERGUE', CONTA MOVIMENTO SERA = '4263'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANARE")) {
        conta = "Quando Fornecedor/Cliente contem 'SANARE', CONTA MOVIMENTO SERA = '4830'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANARE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Fornecedor/Cliente contem 'SANARE', Portador contem '701', CONTA MOVIMENTO SERA = '4452'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DENTAL")) {
        conta = "Quando Fornecedor/Cliente contem 'AMIL', Fornecedor/Cliente contem 'DENTAL', CONTA MOVIMENTO SERA = '4830'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMIL") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMIL DENTAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Fornecedor/Cliente contem 'AMIL', Fornecedor/Cliente contem 'AMIL DENTAL', Portador contem '701', CONTA MOVIMENTO SERA = '4256'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).equals("FGTS")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Fornecedor/Cliente igual a 'FGTS', CONTA MOVIMENTO SERA = '4830'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'PAGAMENTO', CONTA MOVIMENTO SERA = '819'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("791")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'PAGAMENTO', Portador contem '791', CONTA MOVIMENTO SERA = '847'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'PAGAMENTO', Portador contem '768', CONTA MOVIMENTO SERA = '833'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'PAGAMENTO', Portador contem '769', CONTA MOVIMENTO SERA = '840'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("889")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'PAGAMENTO', Portador contem '889', CONTA MOVIMENTO SERA = '861'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("889")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'ADIANTAMENTO', Portador contem '889', CONTA MOVIMENTO SERA = '4130'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'ADIANTAMENTO', Portador contem '769', CONTA MOVIMENTO SERA = '3514'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'ADIANTAMENTO', Portador contem '768', CONTA MOVIMENTO SERA = '3388'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("791")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'ADIANTAMENTO', Portador contem '791', CONTA MOVIMENTO SERA = '3605'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'ADIANTAMENTO', Portador contem '702', CONTA MOVIMENTO SERA = '3283'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'ADIANTAMENTO', Portador contem '701', CONTA MOVIMENTO SERA = '196'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'FERIAS', Complemento (01) contem 'PAGAMENTO', Portador contem '701', CONTA MOVIMENTO SERA = '112'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'FERIAS', Complemento (01) contem 'PAGAMENTO', Portador contem '702', CONTA MOVIMENTO SERA = '133'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("791")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'FERIAS', Complemento (01) contem 'PAGAMENTO', Portador contem '791', CONTA MOVIMENTO SERA = '3570'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'FERIAS', Complemento (01) contem 'PAGAMENTO', Portador contem '768', CONTA MOVIMENTO SERA = '3346'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'FERIAS', Complemento (01) contem 'PAGAMENTO', Portador contem '769', CONTA MOVIMENTO SERA = '3479'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAMENTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("889")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'FERIAS', Complemento (01) contem 'PAGAMENTO', Portador contem '889', CONTA MOVIMENTO SERA = '4095'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PENSAO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTICIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'PENSAO', Complemento (01) contem 'ALIMENTICIA', Portador contem '701', CONTA MOVIMENTO SERA = '910'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRATUAL")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'RESC', Complemento (01) contem 'CONTRATUAL', CONTA MOVIMENTO SERA = '819'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRATUAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'RESC', Complemento (01) contem 'CONTRATUAL', Portador contem '768', CONTA MOVIMENTO SERA = '833'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SALARIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTRATUAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) {
        conta = "Quando Complemento (01) contem 'SALARIOS', Complemento (01) contem 'RESC', Complemento (01) contem 'CONTRATUAL', Portador contem '769', CONTA MOVIMENTO SERA = '840'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("701")) {
        conta = "Quando Complemento (01) contem 'ALIMENTACAO', Complemento (01) nao contem 'VALE', Portador contem '701', CONTA MOVIMENTO SERA = '4907'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("702")) {
        conta = "Quando Complemento (01) contem 'ALIMENTACAO', Complemento (01) nao contem 'VALE', Portador contem '702', CONTA MOVIMENTO SERA = '5208'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("791")) {
        conta = "Quando Complemento (01) contem 'ALIMENTACAO', Complemento (01) nao contem 'VALE', Portador contem '791', CONTA MOVIMENTO SERA = '5887'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("768")) {
        conta = "Quando Complemento (01) contem 'ALIMENTACAO', Complemento (01) nao contem 'VALE', Portador contem '768', CONTA MOVIMENTO SERA = '5376'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("769")) {
        conta = "Quando Complemento (01) contem 'ALIMENTACAO', Complemento (01) nao contem 'VALE', Portador contem '769', CONTA MOVIMENTO SERA = '5656'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTACAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("889")) {
        conta = "Quando Complemento (01) contem 'ALIMENTACAO', Complemento (01) nao contem 'VALE', Portador contem '889', CONTA MOVIMENTO SERA = '6937'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO1', Complemento (04) nao contem 'CONFIRMED', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO2', Complemento (04) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_DETODOS', Complemento (03) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (04) nao contem 'COMPLETO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) {
        conta = "Quando Complemento (01) contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'REEMBOLSO', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'DINHEIRO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'VIA LOJA', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (04) nao contem 'EM BRANCO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOC") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERNET")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'DOC', Fornecedor/Cliente contem 'TED', Fornecedor/Cliente contem 'INTERNET', CONTA MOVIMENTO SERA = '6804'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'ENVIO', Fornecedor/Cliente contem 'TED', CONTA MOVIMENTO SERA = '6762'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MANUT") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CTA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'MANUT', Fornecedor/Cliente contem 'CTA', CONTA MOVIMENTO SERA = '6804'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'PAG', Fornecedor/Cliente contem 'BOLETO', CONTA MOVIMENTO SERA = '6762'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TEV") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MESM")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Fornecedor/Cliente contem 'TEV', Fornecedor/Cliente contem 'MESM', CONTA MOVIMENTO SERA = '3164'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (05) contem 'NAO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) {
        conta = "Quando Tipo Planilha contem 'PRATO', Complemento (01) contem 'PRATO', Complemento (03) nao contem 'CART', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_POLICARD', Complemento (03) contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '2', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '3', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '4', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '5', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '6', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '7', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '8', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '9', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AIQFOME1', Fornecedor/Cliente contem 'CANCELADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8724") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Portador contem '8724', Fornecedor/Cliente contem 'APLIC', CONTA MOVIMENTO SERA = '3171'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8732") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Portador contem '8732', Fornecedor/Cliente contem 'APLIC', CONTA MOVIMENTO SERA = '3178'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("8996") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLIC")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Portador contem '8996', Fornecedor/Cliente contem 'APLIC', CONTA MOVIMENTO SERA = '8785'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_STONE2', Complemento (04) contem 'CANCELAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '10', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '11', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '12', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '13', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '14', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '15', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '16', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '17', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '18', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_BMGCARD', Complemento (04) contem 'NAO', Complemento (04) contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("873") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICA")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Portador contem '873', Fornecedor/Cliente contem 'APLICA', CONTA MOVIMENTO SERA = '3178'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Portador contem '922', Fornecedor/Cliente contem 'APLICACAO', CONTA MOVIMENTO SERA = '9079'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_REDECARD3', Complemento (06) nao contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_DOM1', Complemento (04) nao contem 'ENTRADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'FGTS', Complemento (01) contem 'RESCIS', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6230'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRRF") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Fornecedor/Cliente contem 'DARF', Fornecedor/Cliente contem 'IRRF', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '4634'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Fornecedor/Cliente contem 'DARF', Fornecedor/Cliente contem 'PIS', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '4746'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SERV") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TERC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Fornecedor/Cliente contem 'DARF', Complemento (01) contem 'SERV', Complemento (01) contem 'TERC', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '770'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("BANCAR") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'TAXA', Complemento (01) contem 'BANCAR', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6209'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ISSQN") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Fornecedor/Cliente contem 'ISSQN', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '784'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REMUNERACAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'REMUNERACAO', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '854'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADIANTA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVID") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Fornecedor/Cliente contem 'SISPAG', Fornecedor/Cliente contem 'ADIANTA', Complemento (01) contem 'DIVID', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '3682'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TELEFONIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'TELEFONIA', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '938'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REMUNERA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FERIAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'REMUNERA', Complemento (01) contem 'FERIAS', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '3647'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CEMIG") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Fornecedor/Cliente contem 'CEMIG', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '4298'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COPASA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Fornecedor/Cliente contem 'COPASA', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '4319'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMIVE") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Fornecedor/Cliente contem 'EMIVE', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '4403'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("LOCAC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VEICUL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'LOCAC', Complemento (01) contem 'VEICUL', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '4431'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALUGUEL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'ALUGUEL', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '4445'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INSS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Fornecedor/Cliente contem 'INSS', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '4578'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TRANSP") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'VALE', Complemento (01) contem 'TRANSP', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6111'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SOCIAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'TARIFA', Complemento (01) contem 'SOCIAL', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6111'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'CONSUMO', Complemento (01) contem 'ALIMENTA', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6118'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MANUTENCAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'MANUTENCAO', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6132'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("LIMP") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'CONSUMO', Complemento (01) contem 'LIMP', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6132'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DEDETIZA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'DEDETIZA', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6132'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("LAVANDERIA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'LAVANDERIA', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6132'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SERV") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CONTAB") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'SERV', Complemento (01) contem 'CONTAB', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6153'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOTEBOOKS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVIDIR") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Fornecedor/Cliente contem 'NOTEBOOKS', Complemento (01) contem 'DIVIDIR', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6153'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("GAS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'GAS', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6160'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REMUNERA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'REMUNERA', Complemento (01) contem 'CARTAO', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6153'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOVEIS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'MOVEIS', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6153'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("RELOGIO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'RELOGIO', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6153'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENXOVAL") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'ENXOVAL', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6174'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MAT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("OFICINA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'MAT', Complemento (01) contem 'OFICINA', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6181'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARG") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'ENCARG', Complemento (01) contem 'ALIMENTA', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6202'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVID") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Fornecedor/Cliente contem 'SODEXO', Complemento (01) contem 'DIVID', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6202'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PLANO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'PLANO', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6188'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("UNIFORME") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'UNIFORME', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6272'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGAM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INDEV") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'PAGAM', Complemento (01) contem 'INDEV', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6300'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANARE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MEDIC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Fornecedor/Cliente contem 'SANARE', Complemento (01) contem 'MEDIC', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '4452'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AVCB") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'AVCB', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6153'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("COMPUTADOR") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'COMPUTADOR', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6153'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FOTO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CENTRO")) {
        conta = "Quando Complemento (01) contem 'FOTO', Portador contem 'CENTRO', CONTA MOVIMENTO SERA = '6153'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADIANTA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("922")) {
        conta = "Quando Fornecedor/Cliente contem 'SALAR', Fornecedor/Cliente contem 'ADIANTA', Portador contem '922', CONTA MOVIMENTO SERA = '9205'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALAR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FER") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("922")) {
        conta = "Quando Fornecedor/Cliente contem 'SALAR', Fornecedor/Cliente contem 'FER', Portador contem '922', CONTA MOVIMENTO SERA = '9100'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) {
        conta = "Quando Complemento (01) contem 'FGTS', Portador contem 'CASA DOS BEBES', CONTA MOVIMENTO SERA = '4830'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS RESC") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA DOS BEBES")) {
        conta = "Quando Complemento (01) contem 'FGTS RESC', Portador contem 'CASA DOS BEBES', CONTA MOVIMENTO SERA = '5306'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARG") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS")) {
        conta = "Quando Portador contem 'ALBERGUE', Complemento (01) contem 'ENCARG', Complemento (01) contem 'FGTS', CONTA MOVIMENTO SERA = '4655'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("ALBERGUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARG") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PROJETO")) {
        conta = "Quando Portador contem 'ALBERGUE', Complemento (01) contem 'ENCARG', Complemento (01) contem 'FGTS', Complemento (01) contem 'PROJETO', CONTA MOVIMENTO SERA = '4662'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("873") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PESS") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JUR") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SODEX")) {
        conta = "Quando Portador contem '873', Complemento (01) contem 'PESS', Complemento (01) contem 'JUR', Complemento (01) contem 'SODEX', CONTA MOVIMENTO SERA = '9856'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("BANCAR")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'TAXA', Complemento (01) contem 'BANCAR', CONTA MOVIMENTO SERA = '9401'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVID")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'DIVID', CONTA MOVIMENTO SERA = '9303'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SERV") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TERC") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TELEF")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'SERV', Complemento (01) contem 'TERC', Complemento (01) contem 'TELEF', CONTA MOVIMENTO SERA = '9352'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TELEF") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PROJ")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'TELEF', Complemento (01) contem 'PROJ', CONTA MOVIMENTO SERA = '9303'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ESTORN")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'ESTORN', CONTA MOVIMENTO SERA = '9303'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ALIMENTA")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'ALIMENTA', Complemento (01) contem 'ALIMENTA', CONTA MOVIMENTO SERA = '9331'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SALAR") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ADIANTA")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'SALAR', Complemento (01) contem 'ADIANTA', CONTA MOVIMENTO SERA = '9135'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IMPOST") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'IMPOST', Complemento (01) contem 'IRRF', CONTA MOVIMENTO SERA = '9219'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARG") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IRRF")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'ENCARG', Complemento (01) contem 'IRRF', CONTA MOVIMENTO SERA = '9219'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCARG") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("INSS")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'ENCARG', Complemento (01) contem 'INSS', CONTA MOVIMENTO SERA = '9212'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TRANSF")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'VALE', Complemento (01) contem 'TRANSF', CONTA MOVIMENTO SERA = '9317'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCAR") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'ENCAR', Complemento (01) contem 'FGTS', CONTA MOVIMENTO SERA = '9226'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCAR") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'ENCAR', Complemento (01) contem 'FGTS', CONTA MOVIMENTO SERA = '9226'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("923") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("BANCAR")) {
        conta = "Quando Portador contem '923', Complemento (01) contem 'TAXA', Complemento (01) contem 'BANCAR', CONTA MOVIMENTO SERA = '10304'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("923") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PERM") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("IMPRES")) {
        conta = "Quando Portador contem '923', Complemento (01) contem 'PERM', Complemento (01) contem 'IMPRES', CONTA MOVIMENTO SERA = '10227'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("923") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PES") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("JUR") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SODEX")) {
        conta = "Quando Portador contem '923', Complemento (01) contem 'PES', Complemento (01) contem 'JUR', Complemento (01) contem 'SODEX', CONTA MOVIMENTO SERA = '10213'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("923") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TRANSP") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TRANSF")) {
        conta = "Quando Portador contem '923', Complemento (01) contem 'VALE', Complemento (01) contem 'TRANSP', Complemento (01) contem 'TRANSF', CONTA MOVIMENTO SERA = '10213'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("SERV") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TECN")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'SERV', Complemento (01) contem 'TECN', CONTA MOVIMENTO SERA = '9352'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("ENCAR") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VALE")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'ENCAR', Complemento (01) contem 'VALE', CONTA MOVIMENTO SERA = '9317'";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("MAT") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("LIMP")) {
        conta = "Quando Portador contem '922', Complemento (01) contem 'MAT', Complemento (01) contem 'LIMP', CONTA MOVIMENTO SERA = '9331'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("923") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO', Portador contem '923', Fornecedor/Cliente contem 'APLICACAO', CONTA MOVIMENTO SERA = '9486'";
    }
    return conta;
}
public String getContaPortador(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("INSTITUTO")) {
        conta = "7826";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("8996")) {
        conta = "8743";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("899-6")) {
        conta = "8743";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("57381")) {
        conta = "7826";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("923")) {
        conta = "9479";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("922")) {
        conta = "9072";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("873")) {
        conta = "3094";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("923")) {
        conta = "9479";
    }
    return conta;
}
public String getContaPortador2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros2(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros3(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros4(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros5(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros6(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaDesconto(String contaDesconto, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaDesconto;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMulta(String contaMulta, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("cntaJuros");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMulta;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public boolean getTratarComoExtrato(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoExtrato = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoExtrato;
}
public boolean getTratarComoDesconto(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoDesconto = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoDesconto;
}
public boolean getTratarComoJuros(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoJuros = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoJuros;
}
public boolean getTratarLinhaIgnorar(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarIgnoraLinha = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarIgnoraLinha;
}
public String getTratarValorAlternativo(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoAlternativo  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoAlternativo;
}
public String getTratarComoDiv(String documento, String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoDiv  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoDiv;
}
public String getCodigoClassificacao(String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String documento   = objHistorico.optString("documento");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoClassificacao  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoClassificacao;
}
public String getModificaData(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoData  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoData;
}
public String getCampoFiscal(String parametro, JSONObject objHistorico) {
    String especie         = objHistorico.optString("especie");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String returnaCodigo  = "";

    return returnaCodigo.trim();
}
public int getContadorCabecalho(int contador, String line) {
    return contador;
}
public double getValorPrincipal(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorPrincipal = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return valorPrincipal;
}
public String getHistorico(String conta, String histParam, String tipoLancamento, String nomeOrigem, String documento, 
                           String nomePortador, String complemento01, String complemento02, String complemento03, 
                           String nomeArquivo, String codCentroCusto) {
    String historico = "";
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getRegraHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("USO FUTURO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem USO FUTURO, HISTORICO =";
    
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("XPTO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente nao contem xpto, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem extrato, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("35"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 35, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("49"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 49, HISTORICO = Complemento (04) transferencia";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("49XXX"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem 49xxx, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("112"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 112, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("133"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 133, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("196"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 196, HISTORICO = Mes-Ano Atual Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("770"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 770, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("784"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 784, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("798"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 798, HISTORICO = Complemento (04) Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("819"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 819, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("112"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 112, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("196"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 196, HISTORICO = Mes-Ano Atual Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("910"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 910, HISTORICO = Complemento (01) Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("931"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 931, HISTORICO = Complemento (01) Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("938"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 938, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4235"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4235, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4249"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4249, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4256"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4256, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4291"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4291, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4382"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4382, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4543"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4543, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4599"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4599, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4655"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4655, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4662"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4662, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4711"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4711, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4907"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4907, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5110"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5110, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5131"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5131, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4879"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4879, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5033"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5033, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5040"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5040, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5040"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5040, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4900"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4900, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6496"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6496, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("861"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 861, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6587"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6587, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5306"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5306, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4550"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4550, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4606"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4606, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4718"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4718, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5327"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5327, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4298"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4298, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4319"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4319, HISTORICO = Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("798"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 798, HISTORICO = Complemento (01) Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("7238"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 7238, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4613"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4613, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4634"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4634, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4627"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4627, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4620"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4620, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4620"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4620, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4613"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4613, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4732"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4732, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4739"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4739, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4725"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4725, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4746"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4746, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4753"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4753, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4578"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4578, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4557"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4557, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4564"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4564, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4585"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4585, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4571"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4571, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3388"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3388, HISTORICO = Mes-Ano Atual Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6300"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6300, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5145"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5145, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5845"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5845, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6741"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6741, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("7252"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 7252, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3514"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3514, HISTORICO = Mes-Ano Atual Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("854") && StringUtil.removeSpecialCharsToUC(complemento01).contains("REMUNERACAO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 854, Complemento (01) contem REMUNERACAO, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3605"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3605, HISTORICO = Mes-Ano Atual Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3388"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3388, HISTORICO = Mes-Ano Atual Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3283"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3283, HISTORICO = Mes-Ano Atual Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("196"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 196, HISTORICO = Mes-Ano Atual Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4130"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4130, HISTORICO = Mes-Ano Atual Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5957"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5957, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6202"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6202, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5488"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5488, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5733"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5733, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("7014"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 7014, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5278"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5278, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5971"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5971, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5495"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5495, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("5740"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 5740, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3185"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3185, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3157"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3157, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3143"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3143, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3164"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3164, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3192"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3192, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3129"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3129, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3150"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3150, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3136"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3136, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3122"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3122, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4830"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4830, HISTORICO = Complemento (04) transferencia";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4830") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("791"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4830, Portador contem 791, HISTORICO = Complemento (04) transferencia";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4830") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANARE") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("768"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4830, Fornecedor/Cliente contem sanare, Portador contem 768, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4830") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANARE") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("701"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4830, Fornecedor/Cliente contem sanare, Portador contem 701, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4830") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANARE") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("842"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4830, Fornecedor/Cliente contem sanare, Portador contem 842, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4452"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4452, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4830") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIMED") && !StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVIDIR"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4830, Fornecedor/Cliente contem UNIMED, Complemento (01) nao contem dividir, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4263"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4263, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6230"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6230, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("854") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVIDIR"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 854, Complemento (01) contem DIVIDIR, HISTORICO = Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("854") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCIS"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 854, Complemento (01) contem RESCIS, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3647"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3647, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4403"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4403, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4431"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4431, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4445"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4445, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6111"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6111, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6118"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6118, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6132") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("MANUTENC"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6132, Complemento (01) contem CONSUMO, Complemento (01) contem MANUTENC, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6132") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("MANUTENC"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6132, Complemento (01) contem SERVICO, Complemento (01) contem MANUTENC, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6153"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6153, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6160"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6160, HISTORICO = DESPESA COM GAS";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6174"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6174, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6181"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6181, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6188"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6188, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6209"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6209, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6272"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6272, HISTORICO = Documento/NF Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3682"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3682, HISTORICO = Mes-Ano Atual";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4830") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("BEBE") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 4830, Portador contem CASA, Portador contem BEBE, Complemento (01) contem FGTS, HISTORICO = Complemento (04) transferencia";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6804") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6804, Tipo Planilha contem EXTRATO, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6762") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6762, Tipo Planilha contem EXTRATO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6762") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 6762, Tipo Planilha contem EXTRATO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3164") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 3164, Tipo Planilha contem EXTRATO, HISTORICO = Estorno de pagamento indevido";
    

    return historico.replaceAll("  "," ").trim();
}
public int getParcelaBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public int getTotalParcelas(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public String getMesAnoBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String mesAnoBase = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return mesAnoBase;
}
public double getTaxaTarifa(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorTaxaTarifa = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("VISTA")) {
        valorTaxaTarifa = 0.0319;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PARC")) {
        valorTaxaTarifa = 0.0379;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_VRALIMENTACAO1")) {
        valorTaxaTarifa = 0.063;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SENFF")) {
        valorTaxaTarifa = 0.04;
    }
    return valorTaxaTarifa;
}
public String getHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("USO FUTURO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("XPTO"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:34";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:63";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("196"))  historico = "" + " " + mesAnoAtual + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:75";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("819"))  historico = "" + " " + complemento04 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:78";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4830"))  historico = "" + " " + complemento04 + " " + "transferencia"  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:61";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4830") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("791"))  historico = "" + " " + complemento04 + " " + "transferencia"  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:60";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4830") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANARE") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("768"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:34";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4830") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANARE") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("701"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:34";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4830") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANARE") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("842"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:34";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4452"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:34";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4830") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIMED") && !StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVIDIR"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:34";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4263"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:35";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6230"))  historico = "" + " " + complemento04 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:60";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("854") && StringUtil.removeSpecialCharsToUC(complemento01).contains("DIVIDIR"))  historico = "" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:79";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("854") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RESCIS"))  historico = "" + " " + complemento04 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:76";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3647"))  historico = "" + " " + complemento04 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:105";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4403"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:34";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4431"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:34";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4445"))  historico = "" + " " + complemento04 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:60";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6111"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:35";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6118"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:34";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6132") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CONSUMO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("MANUTENC"))  historico = "" + " " + complemento04 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:60";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6132") && StringUtil.removeSpecialCharsToUC(complemento01).contains("SERVICO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("MANUTENC"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:34";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6153"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:34";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6160"))  historico = "DESPESA COM GAS"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:60";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6174"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:34";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6181"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:34";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6188"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:34";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6209"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:59";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6272"))  historico = "" + " " + documento + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:34";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3682"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:75";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("4830") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("CASA") && StringUtil.removeSpecialCharsToUC(nomePortador).contains("BEBE") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FGTS"))  historico = "" + " " + complemento04 + " " + "transferencia"  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:61";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6804") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:59";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6762") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:60";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("6762") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:60";
    
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("3164") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO"))  historico = "Estorno de pagamento indevido"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:61";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra3(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra4(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra5(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra6(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getCentroCusto(String CentroCusto, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto) {
          String retornaCentroCusto = CentroCusto;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaCentroCusto;
}
public String getTabelaContabil(String TabelaContabil, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaTabelaContabil = TabelaContabil;
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaTabelaContabil;
}
public String getParticipante(String participante, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaParticipantePai = participante;
    complemento04 = "";
    complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaParticipantePai;
}
public String getFilial(String codFilial, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto, String filial) {
          String retornaFilial = codFilial;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaFilial;
}
public String getRegrasParaAcumular(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String getRegrasParaAcumularPortador(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String  getReplaceTermos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = "";
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return parametro2.trim();
}
public String  getReplaceTermosAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double numeroAba  		= objHistorico.optDouble("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String  getLimpaCampos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");

    return lote.trim();
}
public String  getLimpaCamposAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String getTipoGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String graph = "";

    //feito para manter o legado sem problemas, sera sobreposto por regras! ;-)
    //tipos esperados: Column, Multiple_Column_Stacked, Multiple_Columns, Line, Multiple_Lines, Pie, Donut
    //Card refere-se ao Lucro/Prejuizo
    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    if (complemento01.startsWith("07") || complemento01.startsWith("12")) graph = "CardChart";

    if (complemento01.startsWith("01") || complemento01.startsWith("02") || complemento01.startsWith("04") || 
    	complemento01.startsWith("08") || complemento01.startsWith("09") || complemento01.startsWith("10") || 
    	complemento01.startsWith("11") || complemento01.startsWith("21"))  graph = "ColumnChart";

    if (complemento01.startsWith("15") || complemento01.startsWith("16") || complemento01.startsWith("17")) 
    	graph = "ColumnChartStacked";

    if (complemento01.startsWith("05") || complemento01.startsWith("06")) graph = "LineChart";

    if (complemento01.startsWith("18") || complemento01.startsWith("19") || complemento01.startsWith("20")) 
    	graph = "LineChartMultiple";

    if (complemento01.startsWith("03") || complemento01.startsWith("13") || complemento01.startsWith("14")) 
    	graph = "DonutChart";

    return graph;
}
public String getSimboloValor(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String simboloValor = "R$";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return simboloValor.replaceAll("Nenhum","");
}
public String getSeriesGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String series = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return series;
}
public String getTituloGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String Titulo_Grafico = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return Titulo_Grafico;
}
public String getColunaAlternativa(String parametro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String retornaColunas  = "";

    return retornaColunas.replace(",",";").trim();
}

/*#############################################@ EXTRATO-BOTICARIO-EXCEL @##############################################*/
public HashMap readBoticario(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ ERP-SISPLAN @##############################################*/
public HashMap readSisplanSistemaPlanejamento(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
	
    return mapaVariavel;
}


//####################################################################################################################################
//									EXTRATO UNICRED2 PDF
//####################################################################################################################################

public boolean readExtratoUnicred2PDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}



public boolean readExtratoSafraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
 
    return true;
}


/*#############################################@ EXTRATO-CEF-HTML @##############################################*/
public boolean readExtratoCEFHtml(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

	//logger.logInfo("Caixa HTML");

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataString        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

	String tipoExtrato	 	 = "001";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais        = true;
	int cont	= 0; //Contador para definir os campos do extrato.

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

			if(line.contains("VIA INTERNET")) {
				tipoExtrato = "002";
			}

			if(tipoExtrato.equals("001")){

				//logger.logInfo("Line i caixa -> "+line);
				if(line.contains("<TD>") && line.contains("CONTA:")){//termo usado para validar a linha anterior a captura do nomePortador
					naoLeMais = false;
					continue;
				}
				//Sempre que encontrar este termo na class CSS, será inicado a leitura de um lançamento e portando o contador é zerado
				if(line.contains("IMPRESSAO_SALVAR") && line.contains("<TR")){
					naoLeMais = false;
					cont = 0;
					continue;
				}

				if(naoLeMais) continue;

				if(nomePortador.equals("")){
					nomePortador = cutString(line, line.lastIndexOf("|")-1, "</TD>");
					naoLeMais = true;
					continue;
				}
				if(line.contains("<TD")) cont++;

				if(cont == 1){//contador 1 é para ler a Data.
					dataString = cutString(line, line.indexOf(">"), "</TD>");
					if (!dataString.equals("")) {
						String dataMovimentoAux	  = getCampoDate(dataString);
						if (dataMovimentoAux.contains("/")) {
							dataMovimento     = getCampoDate(dataString);
							dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");

						}
						if (!dataString.equals("") && dataMovimento.equals("")) {
							if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
								String pattern = "";
								if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
									if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
										pattern = "yyyy-MM-dd hh:mm:ss";
									} else {
										pattern = "yyyy-MM-dd";
									}
									dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
								} else {
									try {
										pattern = "ddddd";
										dataString = cutString(dataString, 0, 5);
										Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
										int datanum = Integer.parseInt(dataString);
										Calendar calSerial = Calendar.getInstance();
										calSerial.setTime(dt);
										calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
										dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
									} catch (Exception dt2) {dataMovimento = "";}
								}
								if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
							}
						}
					}

					if(dataMovimento.equals("")){
						naoLeMais = true;
						continue;
					}
				}

				if(cont == 2){//contador 2 é para ler o documento NF
					documento = cutString(line, line.indexOf(">"), "</TD>");
					complemento02 = documento;
				}

				if(cont == 3){//contador 3 é para ler o histórico
					nomeOrigem = cutString(line, line.indexOf(">"), "</TD>");
				}

				valorDocumento  = 0;

				if(cont == 4){//contador 4 é para ler o valor
					strValorDocumento = cutString(line, line.indexOf(">"), "</TD>");
					if(strValorDocumento.contains("D")) debitoCredito = "EXTRATO-DEBITO";
					if(strValorDocumento.contains("C")) debitoCredito = "EXTRATO-CREDITO";
					strValorDocumento = strValorDocumento.replace("C", "").replace("D", "").replace(".", "").replace(",", ".").trim();
					try{
						valorDocumento = Double.parseDouble(strValorDocumento);
					}catch(Exception vlrd){
						valorDocumento = 0;
					}
				}

			}

            //2312-025426
			if(tipoExtrato.contains("002")){

				if(line.contains("AGANCIA:") || line.contains("AGENCIA:")) nomePortador = line.replaceAll("AGANCIA", "AGENCIA");
				if(line.contains("PRODUTO:")) nomePortador += " "+line;
				if(line.contains("CONTA:")) nomePortador += " "+line;

				if(line.contains("<TR")){
					naoLeMais = false;
					cont = 0;
					continue;
				}

                if(naoLeMais) continue;

				if(line.contains("<TD")) cont++;

				if(cont == 2){
					dataString = cutString(line, line.indexOf(">"), "</TD>");

                    dataMovimento = getCampoDate(dataString);
                    dataLote = getCampoDate(dataMovimento,"","yyyy-MM");

					if (!dataString.equals("") && dataMovimento.equals("")) {
                        if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
                            String pattern = "";
                            if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
                                if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
                                    pattern = "yyyy-MM-dd hh:mm:ss";
                                } else {
                                    pattern = "yyyy-MM-dd";
                                }
                                dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
                            } else {
                                try {
                                    pattern = "ddddd";
                                    dataString = cutString(dataString, 0, 5);
                                    Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
                                    int datanum = Integer.parseInt(dataString);
                                    Calendar calSerial = Calendar.getInstance();
                                    calSerial.setTime(dt);
                                    calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
                                    dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
                                } catch (Exception dt2) {dataMovimento = "";}
                            }
                            if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                        }
                    }

                       if(dataMovimento.equals("")){
                           naoLeMais = true;
                           continue;
                       }
				}

				if(cont == 3){
					documento = cutString(line, line.indexOf(">"), "</TD>");
				}

				if(cont == 4){
					nomeOrigem = cutString(line, line.indexOf(">"), "</TD>");
				}

				if(cont > 5) continue;

				valorDocumento  = 0;

				if(cont == 5){
					strValorDocumento = cutString(line, line.indexOf(">"), "</TD>");

					if(strValorDocumento.contains("-")) debitoCredito = "EXTRATO-DEBITO";
					if(!strValorDocumento.contains("-")) debitoCredito = "EXTRATO-CREDITO";

                    //Feito dessa maneira pq algumas vezes o cutString corta o - junto, dai os pagamentos apareciam como recebimentos
					if(line.replaceAll(" ", "").contains("-0") || line.replaceAll(" ", "").contains("-1") || line.replaceAll(" ", "").contains("-2") ||
				    line.replaceAll(" ", "").contains("-3") || line.replaceAll(" ", "").contains("-4") || line.replaceAll(" ", "").contains("-5") || line.replaceAll(" ", "").contains("-6") ||
					line.replaceAll(" ", "").contains("-7") || line.replaceAll(" ", "").contains("-8") || line.replaceAll(" ", "").contains("-9")) {
					    debitoCredito = "EXTRATO-DEBITO";
				    }

					try{
						valorDocumento = Double.parseDouble(strValorDocumento);
					}catch(Exception vlrd){
						valorDocumento = 0;
					}
				}

				if(nomeOrigem.contains("SALDO DIA")) continue;
			}

            if (valorDocumento == 0) continue;

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato CEF Excel", readExtratoException);
        }
    }
    return true;
}


/*#############################################@ EXTRATO-TRIBANCO2-PDF @##############################################*/
public boolean readExtratoTribanco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

	return true;
}


//####################################################################################################################################
//									EXTRATO UNIPRIME PDF
//####################################################################################################################################

public boolean readExtratoUniprimePDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}


public boolean readExtratoFibraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoABCPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


//####################################################################################################################################
//									EXTRATO BBM PDF
//####################################################################################################################################

public boolean readExtratoBBMPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    
    return true;
}


public boolean readExtratoBIBPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoGuanabaraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


//####################################################################################################################################
//									EXTRATO BBM PDF
//####################################################################################################################################

public boolean readExtratoSofisaPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
  
    return true;
}


public boolean readExtratoVotorantimPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}

public boolean readExtratoVotorantim3PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoXPInvestimentosPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}

public boolean readExtratoXPInvestimentos2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoNubankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoMercadoPagoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoVotorantim2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoAsaasPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



/*#############################################@ EXTRATO-CONTASIMPLES-PDF @##############################################*/
public boolean readExtratoContaSimplesPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}


public boolean readExtratoStonePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-TOPAZIO-EXCEL @##############################################*/
public boolean readExtratoC6Excel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readSantanderRET(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public boolean readExtratoCoraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBtgPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public HashMap readFrancesinhagrupoAilosPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoXPInvestimentosExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readInvestimentoBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoOmieCashPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

	return true;
}


public boolean readExtratoArbiExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
 }


public boolean readExtratoMovilepayPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-SISPRIME-EXCEL @##############################################*/
public boolean readExtratoSisprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}




public HashMap readExtratoItauPdfFrancesinha(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}

public HashMap readExtratItauPdfFrancesinha2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoTransfeeraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoLinkerPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoEfiPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	  return true;
}


public HashMap readFrancesinhaSicrediExcel (MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public boolean readExtratoMercadoPagoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}



public HashMap readFrancesinhaSicoobPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}



public boolean readExtratoBMGExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoTargetPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-target-EXCEL @##############################################*/
public boolean readExtratoTargetExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}



public boolean readExtratoCredisisPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


		
		/*#############################################@ EXTRATO-Fibra-EXCEL @##############################################*/
public boolean readExtratoFibraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
    return true;
}


		
		/*#############################################@ EXTRATO-INDUSTRIAL-EXCEL @##############################################*/
public boolean readExtratoIndustrialExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


				
		/*#############################################@ EXTRATO-PAULISTA-EXCEL @##############################################*/
public boolean readExtratoPaulistaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


	
/*#############################################@ EXTRATO-BBM-TXT @##############################################*/
public boolean readExtratoBBMTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


		
/*#############################################@ EXTRATO-Votorantim-EXCEL @##############################################*/
public boolean readExtratoVotorantimExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}



//#2307-009642 - Leal

public HashMap readFrancesinhaBradescoPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}



/*#############################################@ EXTRATO-HDT-EXCEL @##############################################*/


//#2312-024479 By Leal

public boolean readExtratoHDTExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoUBPPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public HashMap readSicoobComprovantesPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readFrancesinhaSicrediPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public HashMap readErpFolhaDominio(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoSisprimePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoPaybrokersPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


public HashMap readErpFolhaWk(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoGrafenoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoGrafenoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
 }


public HashMap readFrancesinha_BBPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoAbrapetite(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}


//##############################################**CARTAO ALELO CSV**#######################
public HashMap readAleloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExpressDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExtratoDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-BENVISA-EXCEL @##############################################*/
public HashMap readCartaoBenVisaExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-BIN-EXCEL @##############################################*/
public HashMap readCartaoBinExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


/*#############################################@ CARTAO-BONUS-EXCEL @##############################################*/
public HashMap readExtratoBonus(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ EXTRATO-CABAL-EXCEL @##############################################*/
public HashMap readCartaoCabal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}

/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcardExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCielo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   
    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

 
    return mapaVariavel;
}

public HashMap readCartaoCieloRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

 
    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartao_Cielo_Simples_Sem_Bandeira(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ CARTAO-CARREFOUR-EXCEL @##############################################*/
public HashMap readCartaoCarrefour(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoCooper(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
      
    return mapaVariavel;
}


/*#############################################@ CARTAO-SANTANDERCREDITO-EXCEL @##############################################*/
public HashMap readCartaoCreditoSantander(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
    return mapaVariavel;
}


/*#############################################@ CARTAO-ELAVON-EXCEL @##############################################*/
public HashMap readExtratoElavon(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  

    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   
    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNetRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
	
    return mapaVariavel;
}



/*#############################################@ CARTAO-GOODCARD-EXCEL @##############################################*/
public HashMap readExtratoGoodcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
   return mapaVariavel;
}



/*#############################################@ CARTAO-GREENCARD-EXCEL @##############################################*/
public HashMap readCartaoGreenCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-IFOOD-EXCEL @##############################################*/
public HashMap readExtratoIFood(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-MASTERFARMA-EXCEL @##############################################*/
public HashMap readCartaoMasterFarma(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-MERCADOLIVRE-EXCEL @##############################################*/
public HashMap readCartaoMercadoLivre(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-MOOZ-EXCEL @##############################################*/
public HashMap readCartaoMoozCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoNutricard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-PAGSEGURO-EXCEL @##############################################*/
public HashMap readExtratoPagSeguro(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-PAGUECOM-EXCEL @##############################################*/
public HashMap readPaguecomCSV(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}


/*#############################################@ CARTAO-POLICARD-EXCEL @##############################################*/
public HashMap readCartaoPoliCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardNovoPadrao(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDeb(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardCred(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	

    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	
	return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefaultNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}

/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardTxt(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
			   
   
   return mapaVariavel;
}


/*#############################################@ EXTRATO-SAFRA-CSV @##############################################*/
public HashMap readCartaocSafraCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

    return mapaVariavel;
}


/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenff(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenffLayout2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagFluxoCaixa(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    

    return mapaVariavel;
}

/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipag(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  
    return mapaVariavel;
}
/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

  
    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoSodexo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ EXTRATO-STELO-EXCEL @##############################################*/
public HashMap readCartaoSteloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

	return mapaVariavel;
}


/*#############################################@ CARTAO-STONE-EXCEL @##############################################*/
public HashMap readExtratoStone(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
	
    return mapaVariavel;
}


/*#############################################@ CARTAO-SUMUP-EXCEL @##############################################*/
public HashMap readCartaoSumup(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    

    return mapaVariavel;
}


/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicketNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}

/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicket(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    
    return mapaVariavel;
}


/*#############################################@ EXTRATO-TRIOCARD-EXCEL @##############################################*/
public HashMap readCartaoTrioCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   

   return mapaVariavel;
}


/*#############################################@ EXTRATO-VALECARD-PDF @##############################################*/
public HashMap readExtratoValeCardPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   

   return mapaVariavel;
}


/*#############################################@ CARTAO-VRALIMENTACAO-TXT @##############################################*/
public HashMap readExtratoVRAlimentacao(String lineParam, MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

   
   return mapaVariavel;
}



public HashMap readExtratoMagaLU(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readExtratoPagarME(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	return mapaVariavel;
}


public HashMap readExtratoNetshoes(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
	return mapaVariavel;
}



/*#############################################@ EXTRATO-LIV-PDF @##############################################*/
public HashMap readCartaoLivPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ CARTAO-FIDELIDADE-EXCEL @##############################################*/
public HashMap readCartaoFidelidade(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*     Leitura de Planilha Padrao - EXTRATO AIQUEFOME

## ################################################################################################################## */
public HashMap readExtratoAiquefome(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
        
          
	return mapaVariavel;
}						
           
        


 /*     Leitura de Planilha Padrao - EXTRATO UBEREATS

        ## ################################################################################################################## */
        public HashMap readExtratoUbereats(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
        
           
				 return mapaVariavel;
            }


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoSquidExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-TRIBANCO-PDF @##############################################*/
public boolean readExtratoTribancoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


public boolean readExtratoPagseguroExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBS2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBanesePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoNordestePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public HashMap readErpFolhaAlterdataProgresso(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoBancoDaycovalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoBancoPaulistaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BANESTE-EXCEL @##############################################*/
public boolean readExtratoBanesteDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   


   return true;
}


/*#############################################@ EXTRATO-BANPARA-EXCEL @##############################################*/
public boolean readExtratoBanpara(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoBanparaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

	return true;
}


/*#############################################@ EXTRATO-BANRISUL-TXT @##############################################*/
public boolean readExtratoBANRISULDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratoBancoBrasilExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BBFINANCIAMENTOS-EXCEL @##############################################*/
public boolean readExtratoBancoDoBrasilFinanciamentos(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	
    return true;
}


public boolean readExtratoBancoDoBrasilPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

  

  return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
    return true;
}


/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBRADESCODefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}

/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBradescoDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   

    return true;
}


public boolean readExtratBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-BRADESCO-TXT @##############################################*/
public boolean readExtratoBradescoTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	return true;
}


/*#############################################@ EXTRATO-CEF-EXCEL @##############################################*/
public boolean readExtratoCEFExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	logger.logInfo("Dentro da caixa");

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 0;
	int idocumento		= 1;
	int inomeOrigem		= 2;
	int ivalorDocumento	= 3;
	int icomplemento02	= 3;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
			//logger.logInfo("Line i caixa -> "+line);
            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) continue;
			
			String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
			if (!dataString.equals("")) {
				String dataMovimentoAux	  = getCampoDate(dataString);
				if (dataMovimentoAux.contains("/")) {
					dataMovimento     = getCampoDate(dataString);
					dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
					
				}
				if (!dataString.equals("") && dataMovimento.equals("")) {
					if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
						String pattern = "";
						if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
							if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
								pattern = "yyyy-MM-dd hh:mm:ss";
							} else {
								pattern = "yyyy-MM-dd";
							}
							dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
						} else {
							try {
								pattern = "ddddd";
								dataString = cutString(dataString, 0, 5);
								Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
								int datanum = Integer.parseInt(dataString);
								Calendar calSerial = Calendar.getInstance();
								calSerial.setTime(dt);
								calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
								dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
							} catch (Exception dt2) {dataMovimento = "";}
						}
						if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
					}
				}
			}
			
			//logger.logInfo("IDATA = "+idataMovimento+" -- data == "+dataMovimento);

            valorDocumento  = 0;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
            if (valorDocumento == 0) continue;

			nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
			complemento01   = nomePortador;
            complemento02	= "";
            complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
			documento		= "";
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");
			
			
			if (complemento02.contains("C") || complemento02.contains("D")){
				if (complemento02.contains("C")) debitoCredito = "EXTRATO-CREDITO";
				if (complemento02.contains("D")) debitoCredito = "EXTRATO-DEBITO";
			}else{
				if (!complemento02.contains("-")) debitoCredito = "EXTRATO-CREDITO";
				if (complemento02.contains("-")) debitoCredito = "EXTRATO-DEBITO";
			}	

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato CEF Excel", readExtratoException);
        }
    }
    return true;
}



public boolean readExtratoCaixaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	//logger.logInfo("PADRAO CAIXA PDF123");


    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPadrao  = "";

	String valorDocAux = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= 0;
	int idocumento      = 1;
	int inomePortador	=-1;
	int inomeOrigem		= 2;
	int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

	boolean tipoUmSemSaldo = false;
	String linhaRun = "";

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOPADRAO"))   tipoPadrao   = jDados.optString("TIPOPADRAO");
    if(jDados.has("LINHA"))   linhaRun   = jDados.optString("LINHA");

	if(tipoPadrao.equals("001") && linhaRun.contains("DATA") && !linhaRun.contains("SALDO")) tipoUmSemSaldo = true;

	//logger.logInfo("Tipo: "+tipoPadrao);

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

		if (line.contains("SALDO") && line.contains("ANTERIOR")) continue;
		if (line.contains("SALDO") && line.contains("DIA")) continue;
		if (line.contains("SAC") && line.contains("CAIXA")) continue;
		if (line.contains("PESSOAS") && line.contains("DEFICIENCIA")) continue;
		if (line.contains("OUVIDORIA") && line.contains("0800")) continue;
		if (line.contains("ALO CAIXA") && line.contains("0800")) continue;
		if (line.contains("HELP") && line.contains("DESK")) continue;
		if (line.startsWith("PAGINA") && memFile.getFieldsSize() == 1) continue;
		if (line.startsWith("SUJEITO") && memFile.getFieldsSize() == 1) continue;
		if (line.contains("INTERNETBANKING") && line.contains("IMPRIME")) continue;
		if (line.contains("CAIXA.GOV.BR")) continue;


		if(line.toUpperCase().contains("CONTA:") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && memFile.getStringFieldRemoveEspCharsUpper(3).equals("")){
			nomePortador = "CEF - " + cutString(line,line.lastIndexOf("|"),line.length()).replaceAll(";", " ");
		}
		//Douglas. Feito para o Chamado #2304-003957 para leitura das colunas 1 2 e 3
		if(line.toUpperCase().contains("CONTA:") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(3).equals("")){
			nomePortador = "CEF - " + memFile.getStringFieldRemoveEspCharsUpper(1) + " / " + memFile.getStringFieldRemoveEspCharsUpper(2) + " / " + memFile.getStringFieldRemoveEspCharsUpper(3);
		}
		
		if(tipoPadrao.equals("010")){
			String linhaLimpa = line.replaceAll("  ", " ");
			if(linhaLimpa.contains("  ")){
				boolean limpouu = true;
				while(limpouu){
					if(linhaLimpa.contains("  ")){
						linhaLimpa = linhaLimpa.replaceAll("  ", " ");
					}else{
						limpouu = false;
					}
				}
			}
			String[] linhaArray = linhaLimpa.split(" ");

			dataMovimento = getCampoDate(linhaArray[0]);

			documento = linhaArray[1];

			nomeOrigem = "";
			for(int i = 2; i < (linhaArray.length-4); i++){
				nomeOrigem += " " + linhaArray[i];
			}
			try{
				valorDocumento = Double.parseDouble(linhaArray[linhaArray.length-4].replaceAll("\\.", "").replaceAll(",", ""))/100;
			}catch(Exception e){
				valorDocumento = 0;
			}
			debitoCreditoAux = linhaArray[linhaArray.length-3];
		}

		// logger.logInfo("DENTRO DO EXTRAto tipoPadrao -> " + tipoPadrao);
		//logger.logInfo("linelength " + line.length());
		if(tipoPadrao.contains("002")){
			if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOC") && line.contains("VALOR")) {
				// logger.logInfo("ENTROU IDX");
				idataMovimento	= -1;
				idocumento      = -1;
				inomePortador	= -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA"))      idataMovimento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR"))     ivalorDocumento = i;
				}
				// logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento);
				continue;
			}
		}
		if(tipoPadrao.contains("001")){
			if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOC") && line.contains("VALOR")) {
				 logger.logInfo("ENTROU IDX");
				idataMovimento	= -1;
				idocumento      = -1;
				inomePortador	= -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					// if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i+1;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i; //Correção do chamado BUG CAIXA -> 2401-027811
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA"))      idataMovimento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR"))     ivalorDocumento = i;
				}
				// logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento);
				continue;
			}

			if(line.startsWith("SALDO")) continue;
		}
		if(tipoPadrao.contains("003")){
			if (line.contains("MOVIMENTO") && line.contains("HISTORICO") && line.contains("DOCUMENTO")) {
				idataMovimento	= -1;
				idocumento      = -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCUMENTO"))       idocumento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("MOVIMENTO"))      idataMovimento = i;
					ivalorDocumento = 4;
				}
				// logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento + " | LIN == "+line);
				continue;
			}
			if(ivalorDocumento > 0){
				if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;
			}
		}
		if(tipoPadrao.contains("004")){
			idataMovimento = 0;

			if (memFile.getStringFieldRemoveEspCharsUpper(1).trim().equals("C") || memFile.getStringFieldRemoveEspCharsUpper(1).trim().equals("D")) {
				inomeOrigem = 2;
				idocumento = 2;
				ivalorDocumento = 5;

				complemento03 = memFile.getStringFieldRemoveEspCharsUpper(3);
			}
			else {
				inomeOrigem = 1;
				idocumento = 1;
				ivalorDocumento = 4;

				complemento03 = memFile.getStringFieldRemoveEspCharsUpper(2);
			}

			if(ivalorDocumento > 0){
				if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;
			}
		}

        if (memFile.getFieldsSize() == 1 && !tipoPadrao.equals("010")) {
			if(tipoPadrao.equals("001") && memFile.getStringFieldRemoveEspCharsUpper(0).trim().startsWith("EXTRATO")) {
				continue;
			} else {
				nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("HISTORICO")
					.where("CHAVE = ? ")
					.param(nomeOrigem)
					.param(chaveExtrato)
					.execute();
				} catch (Exception sqlUpdateException) {
				}
			}
        } else {
				// logger.logInfo("DTS " + dataString);
            try {
				
				if(!tipoPadrao.equals("010")){

					String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");


					if (dataString.equals("000000")) continue;
					try {
						Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt1) {
						try {
							Date dt = memFile.getDateField(idataMovimento);
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) {
							try {
								dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
								Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
								dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
								dataLote = DateUtil.dateToString(dt, "yyyy-MM");
							} catch (Exception dt2) { continue; }
						}
					}



					if (dataMovimento.equals("")) continue;

					valorDocumento  = 0;
					debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("[^A-Za-z]", "").trim();
					try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
					catch (Exception vlrd) { valorDocumento = 0; }

					//2401-026791
					if(tipoPadrao.equals("001") && memFile.getFieldsSize() > 4 && tipoUmSemSaldo) valorDocumento = 1;

					if (valorDocumento == 0) continue;


					nomeOrigem      = "";
					nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
					if (nomeOrigem.contains("SALDO C/C")) continue;
					documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
					complemento02 = documento;
				
				}

				//2401-026791
				if(tipoPadrao.equals("001") && memFile.getFieldsSize() > 4 && tipoUmSemSaldo){
					if(memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim().equals("D") ||
						memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim().equals("C")){
						ivalorDocumento = memFile.getFieldsSize()-2;
					} else {
						ivalorDocumento = memFile.getFieldsSize()-1;
					}
					valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replace("+", "").replace("-", "").replace(".", "").replace(",", ".").replace("R$", "").replace("D", "").replace("C", "").trim();
					valorDocumento  = 0;
					try{valorDocumento = Double.parseDouble(valorDocAux);}
					catch (Exception vlrd) { valorDocumento = 0; }

					debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1);

					documento = memFile.getStringFieldRemoveEspCharsUpper(1);

					for(int i = 2; i < ivalorDocumento; i++){
						if(i == 2) nomeOrigem = "";
						nomeOrigem+=" "+memFile.getStringFieldRemoveEspCharsUpper(i);
					}
				}


				if(tipoPadrao.equals("003")){
					if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")) debitoCredito = "EXTRATO-DEBITO";
					if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")) debitoCredito = "EXTRATO-CREDITO";
				}
				else if (tipoPadrao.equals("004")) {
					if (complemento03.contains("D")) debitoCredito = "EXTRATO-DEBITO";
					if (complemento03.contains("C")) debitoCredito = "EXTRATO-CREDITO";
				}
				else{
                if (!debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-CREDITO";
                if ( debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-DEBITO";
				}
                // logger.logInfo("BTL -> 5565|  -> " + dataMovimento  + "|  -> " + valorDocumento  + "|  -> " + debitoCredito  );



                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                .fields("CHAVE")
                .param(chaveExtrato)
                .queryUnique();

				// Inserir caso Chave nao encontrada.


                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato)
                        .param(codEmpresa)
                        .param(dataMovimento)
                        .param(documento)
                        .param(nomePortador)
                        .param(nomeOrigem)
                        .param(nomeArquivo.toUpperCase())
                        .param(complemento02)
                        .param(valorDocumento)
                        .param(debitoCredito)
                        .param(0)
                        .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                        .fields("EXTRATOLIDO")
                        .where("CHAVE = ? ")
                        .param(0)
                        .param(chaveExtrato)
                        .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
    return true;
}

public boolean readExtratoCefPDF4(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPlanilhaAux   = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;


    int idataMovimento	= 1;
	int idocumento      = 2;
	int inomePortador	= 0;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHAAUX")) tipoPlanilhaAux = jDados.optString("TIPOPLANILHAAUX"); //#2311-021318 - Leal
	if (nomeArquivo.toUpperCase().contains("CSV")) {
		memFile.setFieldSeparator(";");
	}

    //#2311-021318 - Leal
    if(tipoPlanilhaAux.contains("005")) idataMovimento = 0;

	//logger.logInfo("LOG IDATAMOVIMENTO - " + idataMovimento);

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        //if (memFile.getStringFieldRemoveEspCharsUpper(1).replace(" ", "").startsWith("SALDO")) {continue;}
        if (memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("AGENCIA:")) {
            nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador);
        }
		if (line.startsWith("FILE:")) {naoLeMais = true;}
        if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("EXTRATO POR PERIODO")) {naoLeMais = true;}
        if (line.startsWith("DATA DE")) {
            naoLeMais = false;
            continue;
        }
        if (memFile.getStringFieldRemoveEspCharsUpper(3).contains("SALDO DIA")) {continue;}
        if (memFile.getStringFieldRemoveEspCharsUpper(3).contains("BLOQ.SALDO")) {continue;}
        if (naoLeMais) continue;
        try {
            try {
                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try {
                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) { }
                }
            }
            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (debitoCreditoAux.contains("-")) {
                debitoCredito = "EXTRATO-DEBITO";
            } else {
                debitoCredito = "EXTRATO-CREDITO";
            }
            valorDocumento  = 0;
            try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
            catch (Exception vlrd) { valorDocumento = 0; }
            //Tenta capturar o valor caso o memFile.getDoubleField tenha falhado
            if (valorDocumento == 0 && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).matches("[\\d\\.\\)\\-,\\s\\(]*")) {
                try {
                    valorDocumento = capturaValor(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
                } catch (Exception ex) {logger.logInfo("Erro ao capturar valor -> " + ex.getMessage());}
            }
            if (valorDocumento == 0) continue;
            nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
			documento       = "";
			documento       = memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").replaceAll("\\?","").trim();
            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();
            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
					.param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }
    }
    return true;
}

//2312-024906
public boolean readExtratoCefPDF6(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;

	int colunaVerificado = 0;
    int idataMovimento	= 1;
	int idocumento      = 2;
	int inomePortador	= 0;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;

    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
	//if (nomeArquivo.toUpperCase().contains("CSV")) {
	//	memFile.setFieldSeparator(";");
	//}

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

		logger.logInfo("Linha: "+line);

		colunaVerificado = 0;

        if (naoLeMais) continue;
        try {

			for(int i = 0; i < 2; i++){

				idataMovimento = -1;
				idocumento = -1;
				inomeOrigem = -1;
				ivalorDocumento = -1;

				//Tratamento para pegar as colunas de cada lancamento a partir da coluna com a data
				for(int col = colunaVerificado; col < memFile.getFieldsSize(); col++){
					if(memFile.getStringFieldRemoveEspCharsUpper(col).trim().length() == 10 && !memFile.getStringFieldRemoveEspCharsUpper(col).contains(",") &&
					memFile.getStringFieldRemoveEspCharsUpper(col).contains("/")){
						idataMovimento = col;
						idocumento = col + 1;
						inomeOrigem = col + 2;
						ivalorDocumento = col + 3;

						colunaVerificado = col + 4;
						break;
					}
				}

				if(idataMovimento == -1 && ivalorDocumento == -1) continue;

				try {
					Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt1) {
					try {
						Date dt = memFile.getDateField(idataMovimento);
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) {
						try {
							String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
							Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) { }
					}
				}

				logger.logInfo("Data: "+dataMovimento);

				if(dataMovimento.equals("")) continue;

				debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);

				if (debitoCreditoAux.contains("D")) {
					debitoCredito = "EXTRATO-DEBITO";
				} else if(debitoCreditoAux.contains("C")) {
					debitoCredito = "EXTRATO-CREDITO";
				}

				valorDocumento  = 0;

				try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
				catch (Exception vlrd) { valorDocumento = 0; }

				logger.logInfo("Valor: "+valorDocumento);

				if (valorDocumento == 0) continue;

				nomeOrigem      = "";
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim();

				documento       = "";
				documento       = memFile.getStringFieldRemoveEspCharsUpper(idocumento).trim();

				contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
				chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
				// Buscar Extrato por Chave na Tabela IO_EXTRATO.
				extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
				.fields("CHAVE")
				.param(chaveExtrato)
				.queryUnique();
				// Inserir caso Chave nao encontrada.
				if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
					try {
						dbIOCont.insert("IO_EXTRATO")
						.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
						.param(chaveExtrato)
						.param(codEmpresa)
						.param(dataMovimento)
						.param(documento)
						.param(nomePortador)
						.param(nomeOrigem)
						.param(nomeArquivo.toUpperCase())
						.param(complemento02)
						.param(valorDocumento)
						.param(debitoCredito)
						.param(0)
						.execute();
					} catch (Exception sqlInsertException) {
						logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
						continue;
					}
				} else {
					try {
						dbIOCont.update("IO_EXTRATO")
						.fields("EXTRATOLIDO")
						.where("CHAVE = ? ")
						.param(0)
						.param(chaveExtrato)
						.execute();
					} catch (Exception sqlUpdateException) {
						logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
						continue;
					}
				}
			}
        } catch (Exception ex) {
        }
    }
    return true;
}


/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 1;
	int idocumento		= 2;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;
	int icomplemento02	= 5;
	int icomplemento03	= 0;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

	memFile.setFieldSeparator(";");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").length() != 8) continue;

            try {
				String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
				Date dt  = DateUtil.stringToDate(dataString, "yyyyMMdd");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dateException01) {
				continue;
			}


            valorDocumento  = 0;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
            if (valorDocumento == 0) continue;

			nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
			complemento01   = nomePortador;
            complemento02	= "";
            complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
			complemento03	= "";
            complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).replaceAll("\"","");
			documento		= "";
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");

            if (complemento02.equals("C")) debitoCredito = "EXTRATO-CREDITO";
            if (complemento02.equals("D")) debitoCredito = "EXTRATO-DEBITO";

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador/*+"_"+complemento03+"_"+documento*/)
                    .param(nomeOrigem)
                    .param(StringUtil.removeSpecialCharsToUC(nomeArquivo.toUpperCase()))
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Padrão Santander", readExtratoException);
        }
    }
    return true;
}

/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 1;
	int idocumento		= 2;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;
	int icomplemento02	= 2;
	int icomplemento03	= 0;
	int icomplemento04	= 5;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

	memFile.setFieldSeparator(";");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").length() != 8) continue;

            try {
				String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
				Date dt  = DateUtil.stringToDate(dataString, "yyyyMMdd");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dateException01) {
				continue;
			}


            valorDocumento  = 0;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
            if (valorDocumento == 0) continue;

			nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
			complemento01   = nomePortador;
            complemento02	= "";
            complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
			complemento03	= "";
            complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).replaceAll("\"","");
			documento		= "";
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");

            if (memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).contains("C")) debitoCredito = "EXTRATO-CREDITO";
            if (memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).contains("D")) debitoCredito = "EXTRATO-DEBITO";

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
                    .param(documento)
                    .param(nomePortador/*+"_"+complemento03+"_"+documento*/)
                    .param(nomeOrigem)
                    .param(StringUtil.removeSpecialCharsToUC(nomeArquivo.toUpperCase()))
                    .param(complemento02)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Padrão Santander", readExtratoException);
        }
    }
    return true;
}


/*#############################################@ EXTRATO-DAYCOVAL-EXCEL @##############################################*/
public boolean readExtratoDaycoval(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

	return true;
}


/*#############################################@ EXTRATO-ITAU-EXCEL @##############################################*/
public boolean readExtratoItauDefault(MemoryFile memFile, String anoData, String tipoExtrato, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


public boolean readExtratoItauPdfInterno(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}

public boolean readExtratoItauPdfInterno2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-ITAU-TXT @##############################################*/
public boolean readExtratoItauTXT(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


/*#############################################@ EXTRATO-SAFRA-EXCEL @##############################################*/
public boolean readExtratoSafraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

  
  return true;
}


/*#############################################@ EXTRATO-SANTANDER-EXCEL @##############################################*/
public boolean readExtratoSantanderDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratSantanderPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	
    return true;
}


/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

   
   
    return true;
}

/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


public boolean readExtratSicoobPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	
    return true;
}


/*#############################################@ EXTRATO-SICOOB-TXT @##############################################*/
public boolean readExtratoSicoobTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
	return true;
}


/*#############################################@ EXTRATO-SICREDI-EXCEL @##############################################*/

public boolean readExtratoSicrediDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

    return true;
}


public boolean readExtratoSicrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-SICREDI-TXT @##############################################*/
public boolean readExtratoSicrediTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
	
    return true;
}


/*#############################################@ EXTRATO-TRIBANCO-EXCEL @##############################################*/
public boolean readExtratoTribancoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


/*#############################################@ EXTRATO-UNICRED-EXCEL @##############################################*/
public boolean readExtratoUnicredDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

 

	return true;
}


/*#############################################@ EXTRATO-UNICRED-TXT @##############################################*/
public boolean readExtratoUNICREDTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


/*#############################################@ EXTRATO-UNIPRIME-EXCEL @##############################################*/
public boolean readExtratoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    

    return true;
}



/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoBancoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}

/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoUniprimeTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoViacrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



public boolean readExtratBradesco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();

     
    return true;
}


public boolean readExtratoInterPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
 
     
    return true;
}



public HashMap readExtratoFolhaSageExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
     

    return mapaVariavel;
}

public HashMap readExtratoFolhaSageExcelv2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
     

    return mapaVariavel;
}








/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoViacredi(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    
    return true;
}


public boolean readExtratoItauConsolidadoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
    return true;
}


/*#############################################@ EXTRATO-CREDISAN-EXCEL @##############################################*/
public boolean readExtratoCredisanExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
    return true;
	
}



/*#############################################@ EXTRATO-CONTASIMPLES-EXCEL @##############################################*/
public boolean readExtratoContaSimplesExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}



/*#############################################@ EXTRATO-ORIGINAL-PDF @##############################################*/
public boolean readExtratoOriginalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    JSONObject extratoEmpresa = new JSONObject();
    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - SOFISA
## ################################################################################################################## */
public boolean readExtratoSofisaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    
    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoAbcExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    
    return true;
}


//####################################################################################################################################
//									EXTRATO UNICRED PDF
//####################################################################################################################################

public boolean readExtratoUnicredPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}

public boolean readExtratoUnicred3PDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
   
    return true;
}


/*#############################################@ EXTRATO-EWALLY-EXCEL @##############################################*/
public boolean readExtratoEwallyExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


/*#############################################@ EXTRATO-BANCONORDESTE-EXCEL @##############################################*/
public boolean readExtratoBancoNordesteExcel(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BMPMONEYPLUS-EXCEL @##############################################*/
public boolean readExtratoBMPMoneyPlusExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-STONE-EXCEL @##############################################*/
public boolean readExtratoStoneExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-JUNO-EXCEL @##############################################*/
public boolean readExtratoJunoDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ EXTRATO-CRESOL-EXCEL @##############################################*/
public boolean readExtratoCresolExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


//#############################################@ EXTRATO-ORIGINAL-EXCEL @##############################################/

public boolean readExtratoOriginalExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoPagbankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoCresolPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
	return true;
}


public boolean readExtratoC6BankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


//####################################################################################################################################
//									EXTRATO BRB PDF
//####################################################################################################################################

public boolean readExtratoBRBPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public HashMap readNotasCorretagemXP(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


/*#############################################@ EXTRATO-TOPAZIO-EXCEL @##############################################*/
public boolean readExtratoTopazioExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    

	return true;
}


public HashMap readFrancesinha_BradescoExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BRADESCO-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BradescoPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public HashMap readFaturaCartaoCredito_SicoobPDFF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BB-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BBPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}


public HashMap readFrancesinhaSantanderPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BRADESCO-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BanrisulPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

	return mapaVariavel;
}


public boolean readExtratoSulcrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	return true;
}


public boolean readExtratoCredisanPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   
    return true;
}


public boolean readExtratoPoupeCrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


//2312-024960
public HashMap readFrancesinhaUnicrediPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


public HashMap readFrancesinha_CefPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoAilosCiviaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


public boolean readExtratoBMGPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}



public boolean readExtratoSicoobCapitalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoMercantilPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoInfinitePayPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoBKBankPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public boolean readExtratoNextPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	return true;
}


public boolean readExtratoEfiExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoPagPixBankPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBanrisulPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
   
    return true;
}


public HashMap readFrancesinhaSafraPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


public boolean readExtratoCrehnorPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoCoraExcel(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoNBCPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBTGExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public boolean readExtratoOteroBankExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public HashMap readExtrato_ApliBB_PDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
	return mapaVariavel;
}


public boolean readExtratoPinkPayPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public HashMap readExtratoSicoobConveniosPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}



public HashMap readFrancesinhaCresolPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    
    return mapaVariavel;
}


public boolean readExtratoSquidPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


public HashMap readErpDetalhamentoSispagItau(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoHSBCExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	

    return true;
}


public boolean readExtratoHSBCPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    
    return true;
}


public HashMap readExtratoItauCsvFrancesinha(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	
    return mapaVariavel;
}


public boolean readExtratoPlannerPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


//CONVERSOR ANTIGO

public boolean readExtratoCiviaPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public HashMap readFrancesinhaBanrisulTXT(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readFrancesinhaSisprimeExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
   
    return mapaVariavel;
}


public HashMap readFrancesinha_BradescoXLSX (MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-BRASILIA-EXCEL @##############################################*/
public boolean readExtratoBrasiliaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
    return true;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readCartaoNutricardPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
	return mapaVariavel;
}

