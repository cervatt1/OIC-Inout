        //{import: io_contabil.PadroesERP};
        //{import: io_contabil.PadroesCartoes};
        {import: io_contabil.Database};
        {import: io_contabil.RegrasSemCartoes};
        {import: io_contabil.Duplicatas};
        {import: io_contabil.Util};
// TEMPLATE 22.08.2019
// CORRIGIDO BUGS DE EXTRATOS QUE TRATAVAM EM 2/4
// Adicionado tratamento para identificar um terceiro padrao de cartao CIELO na funcao readCartaoCieloExcel2. @Becker
// Adicionado tratamento [comentado] de comparacao de razaoSocial entre movimento e duplicata. @Becker
// Alteracao no padrao de leitura de data para deta serial. @Becker
// Regra nova "getTratarValorAlternativo", feita pra diferenciar qual ? o valor alternativo na coluna. @Vinicios
public JSONArray run(InoutLogger logger) throws Exception {

    JSONArray  records  = new JSONArray();
    JSONObject ultimoJS = new JSONObject();

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    JSONObject roteiroCRMPrincipal = getRoteiro();
    JSONObject roteiroCRM = getRoteiro();
    JSONObject jStatus = new JSONObject();

    JSONObject objetoRoteiro = new JSONObject();
    objetoRoteiro.put("contabilidade", roteiroCRM.optString("contabilidade"));
    props.load("contabil/" + roteiroCRM.optString("contabilidade") + "/contabil.properties");

    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String empresa = getNomeEmpresa();
    String codEmpresa = props.get(empresa + "_COD_EMPRESA");
    String ERPContabil = props.get("ERP_CONTABILIDADE");
    String nomeEmpresa = props.get(empresa + "_NOME_EMPRESA");
    String cnpjEmpresa = props.get(empresa + "_CNPJ_EMPRESA");
    String emailResponsavel = props.get(empresa + "_EMAIL_RESPONSAVEL");
    String emailCanal = props.get("EMAIL_CANAL");

    String tipoLancamento = getNomeRota();
    if (tipoLancamento.toUpperCase().contains("PAGAS"))    tipoLancamento = "PAGAR";
    if (tipoLancamento.toUpperCase().contains("RECEBIDA")) tipoLancamento = "RECEBER";


    String compDirName = nomeEmpresa + "_#" + codEmpresa;
    String dirName = "";
    if (tipoLancamento.contains("PAGAR"))   dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/APagar";
    if (tipoLancamento.contains("RECEBER")) dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/AReceber";


    String backupDirName = dirName + "/Processado";

    boolean erroShrink = false;
    boolean geraCabecalhoCordilheira = true;
    boolean cabecalhoNaoEncontrada        = true;
    boolean apagaExtrato        = false;
    boolean geraRegraPortador   = false;
    boolean comparaRazao        = false;
    String tipoEmail            = "";

    HashMap mapaVariavel		= new HashMap();
    HashMap mapaLote			= new HashMap();
    HashMap mapaDePara			= new HashMap();
    HashMap mapaOficial			= new HashMap();
    HashMap mapaDesconto		= new HashMap();
    HashMap mapaJuros   		= new HashMap();
    HashMap mapaFornecedor 		= new HashMap();
    HashMap mapaPlano   		= new HashMap();
    HashMap mapaParcelaDominio	= new HashMap();

    JSONObject recordF = new JSONObject();


    String cruzaExtrato			= "";
    String Cruza_Extrato_com_Extrato = "";
    String mesAnoAnterior		= "";
    String mesAno2Anterior		= "";
    String mesAnoAtual			= "";
    int mesRef					= 0;
    int anoRef					= 0;
    String contaJuros			= "";
    String contaDesconto		= "";
    String contaMulta			= "";
    String contaTransitoria		= "";
    String contaEmpresaBranco	= "";
    String movimentoPortador	= "";
    String contaFixaDebito		= "";
    String contaFixaCredito		= "";
    String contaPortador		= "";		//pg - cred | rec - deb
    String contaMovimento		= "";		//pg - deb | rec - cred
    String tabelaContabil       = "";
    String dataMovimento        = "";
    String classificaPlano      = "";
    String classificaFornec     = "";

    boolean geraFiscal			= false;
    String loteFiscal			= "";
    boolean apagaStatus         = false;

    String Conta_Fixa_Cruzamento_Extrato = "";
    String contaInvertida	= "";
    String contaBuscaPlano	= "";
    String nomeArquivo      = "";
    String chave			= "";
    String classificacao	= "";
    String dataLote			= DateUtil.dateToString(new Date(),"yyyy-MM");
    String lote				= "";
    boolean enviouEmail 	= false;
    boolean primeiraVezDuplicata	= true;
    boolean primeiroArquivo 		= true;
    String regraContaMovimento 		= "";
    String regraHistorico 			= "";
    String separadorCsv				= "";
    String tipoPlanilha				= "";
    boolean dupliNaoEncontContabil	= false;
    String contaTemp				= "";
    boolean acumulouAntes			= false;
    boolean leuFinanceiro			= false;

    try {

        // #DOCUMENTACAO
        // FOR leitura dos arquivos das extensoes abaixo
        // altera-se aqui para NAO LER xlsx por exemplo

        String extensao = "";
        for(int extArquivo = 0; extArquivo < 15; extArquivo++){
            if(extArquivo == 0) extensao = ".ofx,.OFX";
            if(extArquivo == 1) extensao = ".ofx,.OFX";
            if(extArquivo == 2) extensao = ".ofx,.OFX";
            if(extArquivo == 3) extensao = ".csv,.CSV";
            if(extArquivo == 4) extensao = ".csv,.CSV";
            if(extArquivo == 5) extensao = ".csv,.CSV";
            if(extArquivo == 6) extensao = ".xlsx,.XLSX";
            if(extArquivo == 7) extensao = ".xlsx,.XLSX";
            if(extArquivo == 8) extensao = ".xlsx,.XLSX";
            if(extArquivo == 9) extensao = ".txt,.TXT";
            if(extArquivo == 10) extensao = ".txt,.TXT";
            if(extArquivo == 11) extensao = ".txt,.TXT";
            if(extArquivo == 12) extensao = ".pdf,.PDF";
            if(extArquivo == 13) extensao = ".pdf,.PDF";
            if(extArquivo == 14) extensao = ".pdf,.PDF";


            for (int porAba = 0; porAba < 60; porAba++) {



                // #DOCUMENTACAO
                // tratamento de abas vindas do CRM
                String apagaArquivo		= backupDirName;
                String abasEspecificas	= roteiroCRMPrincipal.optString("Abas_Especificas");
                abasEspecificas 		= abasEspecificas.replace(",",";");
                if (abasEspecificas.equals("")) {
                    if (porAba > 0) break;
                }
                if (!abasEspecificas.equals("")) {
                    if (!abasEspecificas.contains(String.valueOf(porAba))) {
                        continue;
                    }

                    String ultimaAba = abasEspecificas;
                    if (ultimaAba.contains(";")) ultimaAba = ultimaAba.substring(ultimaAba.lastIndexOf(";")+1).trim();
                    if (!ultimaAba.equals(String.valueOf(porAba)) && extensao.contains(".XLSX")) apagaArquivo = null;
                }

                // #DOCUMENTACAO
                // auto ajuste do separador de CSV
                if(extensao.contains("CSV")){
                    FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
                    fileLoader2.loadFiles();
                    for (MemoryFile memFile: fileLoader2.getMemFiles()) {


                        if (memFile.getFilename().toUpperCase().contains("CSV")) {

                            while (memFile.hasNextLine()) {

                                try {
                                    String line = memFile.nextLine();
                                    line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
                                    if (line.length() < 10) continue;
                                    String [] fields1 = line.split(";");
                                    String [] fields2 = line.split(",");
                                    if(fields1.length > 0 && fields2.length > 0){
                                        if(fields1.length < fields2.length) { separadorCsv = ","; break; }
                                        if(fields1.length > fields2.length) { separadorCsv = ";"; break; }
                                    }
                                }
                                catch(Exception xx) {}
                            }
                            break;
                        }

                    }
                }

                // #DOCUMENTACAO
                // carregamento do arquivo
                FilesLoader fileLoader = new FilesLoader(dirName, extensao, apagaArquivo, true, logger);
                int[] abas = {porAba};
                fileLoader.setSheetsToRead(abas);
                fileLoader.loadFiles();

                for (MemoryFile memFile: fileLoader.getMemFiles()) {

                    putStatus(dirName, "01--Etapa 1 de 4--" + tipoLancamento + ".status", jStatus, logger);

                    // =======================  =================   =======================
                    // =======================  VARIAVEIS PADROES   =======================
                    // =======================  =================   =======================
                    String historico      = "";

                    String codCcOrigem    = "";
                    String cpfCnpj        = "";
                    String nomeOrigem     = "";
                    String nomePortador   = "";
                    String nomePortador2  = "";
                    String documento      = "";
                    int    parcelaDoc     = 1;
                    double valorDocumento = 0.00;
                    double valorPagamento = 0.00;
                    double valorDesconto  = 0.00;
                    double valorJuros     = 0.00;
                    double valorMulta     = 0.00;
                    double valorAlternativo = 0;

                    int icodCcOrigem    = -1;
                    int icpfCnpj        = -1;
                    int inomeOrigem     = -1;
                    int inomePortador   = -1;
                    int idocumento      = -1;
                    int idataMovimento  = -1;
                    int ivalorDocumento = -1;
                    int ivalorAlternativo = -1;
                    int ivalorPagamento = -1;
                    int ivalorDesconto  = -1;
                    int ivalorJuros     = -1;
                    int ivalorMulta     = -1;
                    int icomplemento01  = -1;
                    int icomplemento02  = -1;
                    int icomplemento03	= -1;
                    int icomplemento04  = -1;
                    int icomplemento05	= -1;
                    int icomplemento06	= -1;
                    int icomplemento07	= -1;
                    int icomplemento08	= -1;
                    int icomplemento09	= -1;
                    int icomplemento10	= -1;
                    int idataFake		= -1;

                    String contaGetConta	= "";
                    contaPortador	= "";		//pg - cred | rec - deb
                    contaMovimento	= "";		//pg - deb | rec - cred


                    String complemento01	= "";
                    String complemento02	= "";
                    String complemento03	= "";
                    String complemento04	= "";
                    String complemento05	= "";
                    String complemento06	= "";
                    String complemento07	= "";
                    String complemento08	= "";
                    String complemento09	= "";
                    String complemento10	= "";
                    String codCentroCusto	= "";
                    String codFilial        = "";

                    double valorTotalDoc	= 0.0;
                    double valorTotalJuros	= 0.0;
                    double valorTotalDesc	= 0.0;

                    String classJur			= "";
                    String classDes			= "";
                    String classMul			= "";

                    String codErroString	= "";
                    int cont				= 0;
                    String linhasProblema	= "";
                    String idEmpresa        = "";
                    String idRoteiro  	    = "";

                    String histAux			= "";
                    String anoData			= "";
                    boolean zerar			= true;
                    boolean filtro			= true;

                    String lerAposPrincipal   = "";
                    boolean isLinhaPrincipal  = false;
                    boolean ignorarAntes	  = false;
                    boolean tratarComoExtrato = false;
                    boolean tratarComoDesconto = false;
                    boolean tratarComoJuros = false;

                    dataMovimento        = "";


                    // #DOCUMENTACAO
                    // definicao de separador do arquivo
                    // se ouver separador em TXT deve ser tratado caso a caso
                    // evitar usar tabulacao como separador
                    if(extensao.contains(".xlsx,.XLSX")) memFile.setFieldSeparator("\\|");
                    if(extensao.contains(".pdf,.PDF"))   memFile.setFieldSeparator("\\|");
                    if(extensao.contains(".csv,.CSV"))	 memFile.setFieldSeparator(separadorCsv);
                    if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(";"); // #FABRICA GAMBIARRA

                    //nao pode usar o line contem  ';' pois nao existe line neste ponto ainda.
                    if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && roteiroCRM.optString("erpContabilidade").contains("DOMINIO")) {
                        if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(";");
                    }


                    nomeArquivo = memFile.getFilename().replace("%","");


                    // #DOCUMENTACAO
                    // conecta ao BANCO DE DADOS
                    if (dbIOCont == null) {
                        dbIOCont = connectIOContabil(props, logger);
                    }

                    if(primeiroArquivo) {
                        limparIORoteiro(codEmpresa, tipoLancamento, dbIOCont, logger);
                        primeiroArquivo = false;
                    }

                    //########################################################################

                    contaJuros		    = roteiroCRM.optString("contaFixaJuros");
                    contaFixaCredito    = roteiroCRM.optString("contaFixaCredito");
                    contaFixaDebito     = roteiroCRM.optString("contaFixaDebito");
                    contaDesconto 	    = roteiroCRM.optString("contaFixaDesconto");
                    contaMulta		    = roteiroCRM.optString("contaFixaMulta");
                    idEmpresa      	    = roteiroCRM.optString("idEmpresa");
                    idRoteiro   	    = roteiroCRM.optString("idRoteiro");
                    movimentoPortador   = roteiroCRM.optString("movimentoPortador");
                    classificaPlano     = roteiroCRM.optString("classificaPlano");
                    classificaFornec    = roteiroCRM.optString("classificaFornec");
                    cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
                    Cruza_Extrato_com_Extrato = roteiroCRM.optString("Cruza_Extrato_com_Extrato").toUpperCase();

                    tipoPlanilha = "MOVIMENTO";
                    boolean enviaEmailExtrato = false;
                    boolean naoLeMais = false;

                    tipoEmail = "CLIENTE";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZA"))  tipoEmail = "CANAL";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZAF")) tipoEmail = "SUPORTE";

                    String debitoCredito   		 = "";
                    String chaveExtrato    		 = "";


                    //if(roteiroCRM.has("contaBuscaPlano"))contaBuscaPlano = roteiroCRM.optString("contaBuscaPlano");

                    //########################################################################

                    // COLOCAR AQUI funcao para carregar variaveis do cliente
                    // CNPJ, EMAIL, contas fixas, etc.


                    // =======================  ========================   =======================
                    // =======================  VARIAVEIS PERSONALIZADAS   =======================
                    // =======================  ========================   =======================


                    JSONObject objetoParametro = new JSONObject();

                    // #DOCUMENTACAO
                    // busca de indices da planilha principal
                    if (tipoPlanilha.equals("MOVIMENTO")) {
                        roteiroCRM = getRoteiro();

                        inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
                        idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
                        inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
                        idocumento      = getIndice("documento", idocumento, roteiroCRM);
                        ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
                        ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
                        ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
                        ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
                        icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
                        ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
                        ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
                        icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
                        icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
                        icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
                        icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
                        icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
                        icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
                        icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
                        icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
                        icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
                        icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
                        idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
                        icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);

                        zerar 			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
                    }

                    jStatus = new JSONObject();
                    putStatus(dirName, "", jStatus, logger);
                    try{
                        // #DOCUMENTACAO
                        // leitura linha a linha
                        while (memFile.hasNextLine()) {

                            try {
                                String line = memFile.nextLine();
                                line = StringUtil.removeSpecialCharsToUC(line);

                                if (cont < 10)  putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", jStatus, logger);



                                ////////////////////////////////////////////////////////////////////////////////
                                ///////////////////////////////////////////////////////////// INICIO DOS PADROES
                                ////////////////////////////////////////////////////////////////////////////////


                                //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~----~
                                //LEITURA PADRAO ARQUIVOS .OFX
                                //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
                                if (nomeArquivo.toUpperCase().contains(".OFX")) {
                                    tipoPlanilha = "EXTRATO-OFX";     putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", new JSONObject(), logger);
                                    JSONObject jDados = new JSONObject();
                                    jDados.put("CODEMPRESA", codEmpresa);
                                    jDados.put("TIPOLANCAMENTO", tipoLancamento);
                                    jDados.put("NOMEEMPRESA",    nomeEmpresa);
                                    jDados.put("NOMEARQUIVO",    nomeArquivo);
                                    if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) jDados.put("CHECKNUM", "CHECKNUM");	//usar para retornar o documento do OFX no complemento02
                                    readOFXDefault(memFile, jDados, dbIOCont, logger);
                                    jStatus = new JSONObject();
                                    putStatus(dirName, "", jStatus, logger);
                                    break;
                                } // Fim  -> Captura de Dados quando Tipo Planilha -> ".OFX"
                                // ----------------------------------------------------------------------------------------------------------

                                

                                //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
                                //                      LEITURA PADRAO DE DUPLICATAS
                                //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
                                if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE")){

                                    JSONObject jDados               = new JSONObject();

                                    jDados.put("erpContabilidade",  roteiroCRM.optString("erpContabilidade"));
                                    jDados.put("CODEMPRESA",        codEmpresa);
                                    jDados.put("NOMEARQUIVO",       nomeArquivo);
                                    jDados.put("LINE",              line);
                                    jDados.put("PRIMEIRAVEZ",       primeiraVezDuplicata);   jDados.put("DIRNAME",      		dirName);
                                    jDados.put("TIPOPLANILHA",      tipoPlanilha);
                                    jDados.put("TIPOLANCAMENTO",    tipoLancamento);

                                    primeiraVezDuplicata = leituraDuplicataPadrao(jDados, memFile, mapaVariavel, dbIOCont, logger);

                                    if(!primeiraVezDuplicata){
                                        jStatus = new JSONObject();
                                        putStatus(dirName, "", jStatus, logger);
                                        break;
                                    }
                                }
                                // ----------------------------------------------------------------------------------------------------------

                                ////////////////////////////////////////////////////////////////////////////////
                                //////////////////////////////////////////////////////////////// FIM DOS PADROES
                                ////////////////////////////////////////////////////////////////////////////////

                                // #DOCUMENTACAO
                                // lipeza de variaveis e de indices ao mudar de TIPOPLANILHA
                                JSONObject jDadosObj = new JSONObject();
                                if(!tipoPlanilha.equals(getTipoPlanilha(line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj))){
                                    inomeOrigem			= -1;		nomeOrigem		= "";
                                    idataMovimento		= -1;		dataMovimento	= "";
                                    inomePortador		= -1;		nomePortador	= "";
                                    idocumento			= -1;		documento		= "";
                                    icpfCnpj			= -1;		cpfCnpj			= "";
                                    icodCcOrigem		= -1;       codCcOrigem		= "";
                                    icomplemento01		= -1;      	complemento01	= "";
                                    icomplemento02		= -1;      	complemento02	= "";
                                    icomplemento03		= -1;      	complemento03	= "";
                                    icomplemento04		= -1;      	complemento04	= "";
                                    icomplemento05		= -1;      	complemento05	= "";
                                    icomplemento06		= -1;      	complemento06	= "";
                                    ivalorDocumento		= -1;		complemento07	= "";
                                    ivalorAlternativo	= -1;		complemento08	= "";
                                    ivalorJuros			= -1;		complemento09	= "";
                                    ivalorDesconto		= -1;		complemento10	= "";
                                    ivalorMulta			= -1;
                                    ivalorPagamento		= -1;
                                    idataFake			= -1;
                                }
                                // #DOCUMENTACAO
                                // busca tipoplanilha e indices da planilhas secundarias
                                tipoPlanilha = getTipoPlanilha(line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj);
                                if(!tipoPlanilha.equals("MOVIMENTO")){
                                    roteiroCRM = buscaRoteiro("getRoteiro"+tipoPlanilha, logger);
                                    inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
                                    idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
                                    inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
                                    idocumento      = getIndice("documento", idocumento, roteiroCRM);
                                    ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
                                    ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
                                    ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
                                    ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
                                    icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
                                    ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
                                    ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
                                    icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
                                    icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
                                    icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
                                    icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
                                    icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
                                    icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
                                    icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
                                    icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
                                    icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
                                    icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
                                    idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
                                    icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);

                                    zerar			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());

                                    // Em casos onde a planilha secund?ria precisa de uma aba espec?fica descomentar essa linha
                                    // if(!roteiroCRM.optString("Abas_Especificas").contains(String.valueOf(porAba))) continue;

                                }


                                // #DOCUMENTACAO
                                // tratamento de "Agrupar Colunas Excel" e "Agrupar a partir da coluna"

                                try {
                                    fazerShrinkDelimitandoPosicoes(roteiroCRM, memFile);
                                } catch (IllegalArgumentException e) {
                                    //TODO: handle exception
                                    erroShrink = true;
                                    logger.logError("Deu ruim no shrink \n"+e);
                                    break;
                                }
                                /////////////////////////////
                                // VALIDACAO POR CABECALHO //
                                /////////////////////////////

                                inomeOrigem		= getIndiceCabecalho("nomeOrigem", inomeOrigem, memFile, roteiroCRM);
                                idataMovimento	= getIndiceCabecalho("dataMovimento", idataMovimento, memFile, roteiroCRM);
                                inomePortador	= getIndiceCabecalho("nomePortador", inomePortador, memFile, roteiroCRM);
                                idocumento		= getIndiceCabecalho("documento", idocumento, memFile, roteiroCRM);
                                ivalorDocumento	= getIndiceCabecalho("valorDocumento", ivalorDocumento, memFile, roteiroCRM);
                                ivalorJuros		= getIndiceCabecalho("valorJuros", ivalorJuros, memFile, roteiroCRM);
                                ivalorDesconto	= getIndiceCabecalho("valorDesconto", ivalorDesconto, memFile, roteiroCRM);
                                ivalorMulta		= getIndiceCabecalho("valorMulta", ivalorMulta, memFile, roteiroCRM);
                                ivalorAlternativo = getIndiceCabecalho("valorAlternativo", ivalorAlternativo, memFile, roteiroCRM);
                                ivalorPagamento	= getIndiceCabecalho("valorPagamento", ivalorPagamento, memFile, roteiroCRM);
                                icodCcOrigem	= getIndiceCabecalho("codCcOrigem", icodCcOrigem, memFile, roteiroCRM);

                                icomplemento01	= getIndiceCabecalho("complemento01", icomplemento01, memFile, roteiroCRM);
                                icomplemento02	= getIndiceCabecalho("complemento02", icomplemento02, memFile, roteiroCRM);
                                icomplemento03	= getIndiceCabecalho("complemento03", icomplemento03, memFile, roteiroCRM);
                                icomplemento04	= getIndiceCabecalho("complemento04", icomplemento04, memFile, roteiroCRM);
                                icomplemento05	= getIndiceCabecalho("complemento05", icomplemento05, memFile, roteiroCRM);
                                icomplemento06	= getIndiceCabecalho("complemento06", icomplemento06, memFile, roteiroCRM);
                                icomplemento07	= getIndiceCabecalho("complemento07", icomplemento07, memFile, roteiroCRM);
                                icomplemento08	= getIndiceCabecalho("complemento08", icomplemento08, memFile, roteiroCRM);
                                icomplemento09	= getIndiceCabecalho("complemento09", icomplemento09, memFile, roteiroCRM);
                                icomplemento10	= getIndiceCabecalho("complemento10", icomplemento10, memFile, roteiroCRM);
                                idataFake		= getIndiceCabecalho("dataFake", idataFake, memFile, roteiroCRM);
                                icpfCnpj		= getIndiceCabecalho("cpfCnpj", icpfCnpj, memFile, roteiroCRM);

                                isLinhaPrincipal = false;
                                ignorarAntes = false;

                                JSONObject histobj = new JSONObject();
                                lerAposPrincipal = roteiroCRM.optString("lerAposPrincipal").toUpperCase();

                                // #DOCUMENTACAO
                                // ignorar antes
                                if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO")) {

                                    histobj.put("nomeOrigem", getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger));
                                    histobj.put("documento", getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger));
                                    histobj.put("complemento01", getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger));
                                    histobj.put("complemento02", getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger));
                                    histobj.put("complemento03", getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger));
                                    histobj.put("complemento04", getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger));
                                    histobj.put("complemento05", getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger));
                                    histobj.put("complemento06", getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger));
                                    histobj.put("nomePortador", getCampoString(nomePortador,	inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger));
                                    histobj.put("dataMovimento", "");
                                    histobj.put("mesAnoAnterior", "");
                                    histobj.put("mesAno2Anterior", "");
                                    histobj.put("mesAnoAtual", "");
                                    histobj.put("contaMovimento", "");
                                    histobj.put("contaPortador", "");
                                    histobj.put("contaDebito", "");
                                    histobj.put("contaCredito", "");
                                    histobj.put("contaJuros", contaJuros);
                                    histobj.put("contaDesconto", contaDesconto);
                                    histobj.put("contaMulta", contaMulta);
                                    histobj.put("valorDocumento", "");
                                    histobj.put("valorJuros", "");
                                    histobj.put("valorDesconto", "");
                                    histobj.put("valorMulta","");
                                    histobj.put("codFilial", "");
                                    histobj.put("numeroAba", String.valueOf(porAba));
                                    histobj.put("tipoPlanilha", tipoPlanilha);
                                    histobj.put("nomeArquivo", nomeArquivo.toUpperCase());

                                    ignorarAntes = getTratarLinhaIgnorar(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento,
                                            getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger),
                                            getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger), histobj);

                                    if (ignorarAntes) continue;

                                    double valorValido = 0;
                                    try{valorValido = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                                    catch (Exception vlrd) { valorValido = 0; }

                                    if(ivalorDocumento < 0 && ivalorPagamento >= 0){
                                        try{valorValido = Math.abs(memFile.getDoubleField(ivalorPagamento));}
                                        catch (Exception vlrd) { valorValido = 0; }
                                    }


                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&  valorValido > 0) isLinhaPrincipal = true;
                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !histobj.optString("nomeOrigem").equals("")) isLinhaPrincipal = true;

                                }

                                if (naoLeMais) continue;
                                if (tipoPlanilha.equals("")) continue;


                                // #DOCUMENTACAO
                                // leitura de xlsx e csv
                                if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || (!roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA ("))) {
                                    zerar 			  = !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());

                                    // #Fabrica(2019-05-20)
                                    try{
                                        dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
                                        dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                    }catch(Exception e){
                                        // dataMovimento   = "";
                                        // dataLote        = "";
                                    }

                                    // leitura de data mantida por seguranca
                                    // String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
                                    // if (!dataString.equals("")) {
                                    // 	String dataMovimentoAux	  = getCampoDate(dataString);
                                    // 	if (dataMovimentoAux.contains("/")) {
                                    // 		dataMovimento     = getCampoDate(dataString);
                                    // 		dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");

                                    // 	}
                                    // }

                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals("")) isLinhaPrincipal = true;

                                    nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger);
                                    nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger);
                                    documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger);

                                    complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);
                                    if(tipoPlanilha.equals("MOVIMENTO") && ((!complemento01.contains("VENDA") && !complemento01.contains("EXPORTA")) && (!complemento01.contains("IMPOSTO") && !complemento01.contains("TAXA")))) continue;
                                    complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);
                                    complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);
                                    complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);
                                    complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);

                                    complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);
                                    complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, logger);
                                    complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, logger);
                                    complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, logger);
                                    complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, logger);
                                    cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, logger);
                                    codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, logger);

                                    historico		= "";
                                    parcelaDoc      = 1;

                                    valorDocumento	= 0;
                                    valorJuros		= 0;
                                    valorDesconto	= 0;
                                    valorMulta		= 0;
                                    valorPagamento	= 0;

                                    debitoCredito 	= "";
                                    valorAlternativo = 0;

                                    if(ivalorJuros >=0){
                                        try{valorJuros = Math.abs(memFile.getDoubleField(ivalorJuros));}
                                        catch (Exception vlrj) { valorJuros = 0;}
                                    }
                                    if(ivalorDesconto >=0){
                                        try{valorDesconto = Math.abs(memFile.getDoubleField(ivalorDesconto));}
                                        catch(Exception vlrd) {valorDesconto = 0;}
                                    }
                                    if(ivalorMulta >=0){
                                        try{valorMulta = Math.abs(memFile.getDoubleField(ivalorMulta));}
                                        catch(Exception vlrm) {valorMulta = 0;}
                                    }

                                    //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
                                    if(ivalorDocumento >=0){
                                        try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                                        catch (Exception vlrd) { valorDocumento = 0; }
                                    }

                                    if(ivalorPagamento >=0){
                                        try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
                                        catch(Exception vlrp) {valorPagamento = 0;}
                                    }

                                    if(ivalorAlternativo >= 0){
                                        try{valorAlternativo = memFile.getDoubleField(ivalorAlternativo);}
                                        catch (Exception vlrd) { valorAlternativo = 0; }
                                    }

                                    if (tipoLancamento.equals("PAGAR"))
                                        if (ivalorAlternativo != -1) 			debitoCredito = "EXTRATO-DEBITO";

                                    if (tipoLancamento.equals("RECEBER"))
                                        if (ivalorAlternativo != -1) 			debitoCredito = "EXTRATO-CREDITO";


                                    // fazer regra quando tiver valor documento e alternativo na mesma coluna
                                    String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
                                    if (!tratarComoValorAlternativo.equals("")) {
                                        if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                        if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                        if(ivalorAlternativo >= 0) valorDocumento = valorAlternativo;
                                    }else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes
                                        if(valorDocumento == 0 && ivalorAlternativo >= 0){
                                            if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                            if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                            valorDocumento = valorAlternativo;
                                        }
                                    }

                                    //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
                                    if(ivalorDocumento < 0 && valorDocumento == 0){
                                        if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
                                        else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
                                    }
                                    if(valorDocumento>0 && ivalorJuros < 0 && ivalorDesconto < 0 && valorPagamento > 0){
                                        if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
                                        if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
                                    }

                                    valorDocumento = Math.abs(valorDocumento);

                                    // ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&  valorDocumento > 0) isLinhaPrincipal = true;

                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&
                                            lerAposPrincipal.equals("") && valorDocumento == 0) {
                                        continue;
                                    }

                                }


                                // #DOCUMENTACAO
                                // leitura de TXT
                                if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && roteiroCRM.optString("dataMovimento").endsWith(")")) {

                                    String dataString = getStringTXT(roteiroCRM.optString("dataMovimento").toUpperCase(), line, objetoParametro).trim();
                                    dataMovimento	  = getCampoDate(dataString);
                                    dataLote		  = getCampoDate(dataString, "", "yyyy-MM");

                                    complemento01 = getStringTXT(roteiroCRM.optString("complemento01").toUpperCase(), line, objetoParametro);
                                    if(tipoPlanilha.equals("MOVIMENTO") && ((!complemento01.contains("VENDA") && !complemento01.contains("EXPORTA")) && (!complemento01.contains("IMPOSTO") && !complemento01.contains("TAXA")))) continue;
                                    complemento02 = getStringTXT(roteiroCRM.optString("complemento02").toUpperCase(), line, objetoParametro);
                                    complemento03 = getStringTXT(roteiroCRM.optString("complemento03").toUpperCase(), line, objetoParametro);
                                    complemento04 = getStringTXT(roteiroCRM.optString("complemento04").toUpperCase(), line, objetoParametro);
                                    complemento05 = getStringTXT(roteiroCRM.optString("complemento05").toUpperCase(), line, objetoParametro);
                                    complemento06 = getStringTXT(roteiroCRM.optString("complemento06").toUpperCase(), line, objetoParametro);
                                    complemento07 = getStringTXT(roteiroCRM.optString("complemento07").toUpperCase(), line, objetoParametro);
                                    complemento08 = getStringTXT(roteiroCRM.optString("complemento08").toUpperCase(), line, objetoParametro);
                                    complemento09 = getStringTXT(roteiroCRM.optString("complemento09").toUpperCase(), line, objetoParametro);
                                    complemento10 = getStringTXT(roteiroCRM.optString("complemento10").toUpperCase(), line, objetoParametro);
                                    cpfCnpj		  = getStringTXT(roteiroCRM.optString("cpfCnpj").toUpperCase(), line, objetoParametro);

                                    nomePortador  = getStringTXT(roteiroCRM.optString("portador").toUpperCase(), line, objetoParametro);
                                    documento     = getStringTXT(roteiroCRM.optString("documentoNF").toUpperCase(), line, objetoParametro);
                                    codCcOrigem   = getStringTXT(roteiroCRM.optString("centroCusto").toUpperCase(), line, objetoParametro);
                                    nomeOrigem    = getStringTXT(roteiroCRM.optString("fornecedor").toUpperCase(), line, objetoParametro);


                                    valorDocumento = getDoubleTXT(roteiroCRM.optString("valorDocumento").toUpperCase(), line, objetoParametro);
                                    valorJuros	   = getDoubleTXT(roteiroCRM.optString("valorJuros").toUpperCase(), line, objetoParametro);
                                    valorDesconto  = getDoubleTXT(roteiroCRM.optString("valorDesconto").toUpperCase(), line, objetoParametro);
                                    valorMulta 	   = getDoubleTXT(roteiroCRM.optString("valorMulta").toUpperCase(), line, objetoParametro);
                                    valorPagamento = getDoubleTXT(roteiroCRM.optString("valorPagamento").toUpperCase(), line, objetoParametro);

                                    if (tipoLancamento.equals("PAGAR"))
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
                                            debitoCredito = "EXTRATO-DEBITO";

                                    if (tipoLancamento.equals("RECEBER"))
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
                                            debitoCredito = "EXTRATO-CREDITO";

                                    // fazer regra quando tiver valor documento e alternativo na mesma coluna
                                    String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
                                    if (!tratarComoValorAlternativo.equals("")) {
                                        if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                        if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")) valorDocumento = valorAlternativo;
                                    }else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes
                                        if(valorDocumento == 0 && roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")){
                                            if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                            if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                            valorDocumento = valorAlternativo;
                                        }
                                    }

                                    if(!roteiroCRM.optString("valorDocumento").toUpperCase().contains("COLUNA") && valorDocumento == 0){
                                        if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
                                        else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
                                    }
                                    if(valorDocumento > 0 && !roteiroCRM.optString("valorJuros").toUpperCase().contains("COLUNA") && !roteiroCRM.optString("valorDesconto").toUpperCase().contains("COLUNA") && valorPagamento > 0){
                                        if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
                                        if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
                                    }

                                    valorDocumento = Math.abs(valorDocumento);

                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals(""))  isLinhaPrincipal = true;
                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && valorDocumento > 0)		  isLinhaPrincipal = true;
                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !nomeOrigem.equals("")) isLinhaPrincipal = true;
                                }


                                // #DOCUMENTACAO
                                // mes ano anterior
                                if(dataMovimento.length() > 9){
                                    mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
                                    anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
                                    mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                                    mesRef	= mesRef - 1;
                                    if (mesRef	== 0) {
                                        mesRef	= 12;
                                        anoRef	= anoRef - 1;
                                    }
                                    mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                    mesRef	= mesRef - 1;
                                    if (mesRef	== 0) {
                                        mesRef	= 12;
                                        anoRef	= anoRef - 1;
                                    }
                                    mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                }
                                //---~---~---~---~---~---~-


                                //##########################################################

                                // #DOCUMENTACAO
                                // filtro de datas (parametro definido por integracao no CRM, e informado a cada processamento de arquivos)
                                if (nomeArquivo.toUpperCase().contains("FILTRO_")) filtro = validaFiltro(nomeArquivo, dataMovimento);
                                if (!filtro) continue;

                                valorTotalDoc   += valorDocumento;
                                valorTotalJuros += valorJuros;
                                valorTotalDesc  += valorDesconto;

                                if (documento.contains(".") && documento.contains("E")) {
                                    documento = removerNotacaoCientificaExcel(documento);
                                }

                                // #DOCUMENTACAO
                                // cpfCnpj
                                boolean aceitaCpf = true;

                                if(!cpfCnpj.equals("")){
                                    if(Boolean.parseBoolean(roteiroCRM.optString("cnpjSomenteNumeros").toLowerCase().trim())){
                                        if(!aceitaCpf)	cpfCnpj = trataCpfCnpj(cpfCnpj, true, false);
                                        else			cpfCnpj = trataCpfCnpj(cpfCnpj);
                                    }
                                    if(!Boolean.parseBoolean(roteiroCRM.optString("cnpjSomenteNumeros").toLowerCase().trim())){
                                        if(!aceitaCpf)	cpfCnpj = trataCpfCnpj(cpfCnpj, false, false);
                                        else			cpfCnpj = trataCpfCnpj(cpfCnpj, false, true);
                                    }
                                }

                                // #DOCUMENTACAO
                                // ajustes fornecedor/cliente e portador
                                if (nomeOrigem.equals("") && !roteiroCRM.optString("lerAposPrincipal").toUpperCase().contains("FORNECEDOR")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
                                nomeOrigem = nomeOrigem.trim();
                                nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").trim();
                                nomeOrigem = stringNormalizer(nomeOrigem, true);

                                if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();
                                nomePortador = nomePortador.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").trim();
                                nomePortador = stringNormalizer(nomePortador, true);

                                if(dataMovimento.equals("")) continue;
                                // quando for ler linha principal zerar as variaveis que vem depois da principal para nao sobrepor campos.
                                if(isLinhaPrincipal) {
                                    // #DOCUMENTACAO
                                    // cont define que eh um novo lancamento (normalmente uma nova linha)
                                    cont++;

                                    if (lerAposPrincipal.contains("FORNECEDOR"))	nomeOrigem = "";
                                    if (lerAposPrincipal.contains("DOCUMENTO"))		documento = "";
                                    if (lerAposPrincipal.contains("PORTADOR")) 		nomePortador = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO01")) complemento01 = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO02")) complemento02 = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO03")) complemento03 = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO04")) complemento04 = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO05")) complemento05 = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO06")) complemento06 = "";

                                }
                                if(cont == 0) continue;

                                histobj.put("nomeOrigem", nomeOrigem);					histobj.put("documento", documento);
                                histobj.put("complemento01", complemento01);			histobj.put("complemento02", complemento02);
                                histobj.put("complemento03", complemento03);			histobj.put("complemento04", complemento04);
                                histobj.put("complemento05", complemento05);			histobj.put("complemento06", complemento06);
                                histobj.put("complemento07", complemento07);			histobj.put("complemento08", complemento08);
                                histobj.put("complemento09", complemento09);			histobj.put("complemento10", complemento10);
                                histobj.put("dataMovimento", dataMovimento);			histobj.put("mesAnoAnterior", mesAnoAnterior);
                                histobj.put("mesAno2Anterior", mesAno2Anterior);		histobj.put("mesAnoAtual", mesAnoAtual);
                                histobj.put("nomePortador", nomePortador);				histobj.put("contaMovimento", contaMovimento);
                                histobj.put("contaPortador", contaPortador);	   		histobj.put("contaDebito", "");
                                histobj.put("contaCredito", "");						histobj.put("contaJuros", contaJuros);
                                histobj.put("contaDesconto", contaDesconto);			histobj.put("contaMulta", contaMulta);
                                histobj.put("valorDocumento", valorDocumento);			histobj.put("tipoPlanilha", tipoPlanilha);
                                histobj.put("valorJuros", valorJuros);   				histobj.put("valorDesconto", valorDesconto);
                                histobj.put("valorMulta", valorMulta); 				    histobj.put("codFilial", codFilial);
                                histobj.put("nomeArquivo", nomeArquivo.toUpperCase()); // foi ajustado

                                // #DOCUMENTACAO
                                // TRATA PLANILHA OU LANCAMENTO EXPECIFICO COMO EXTRATO
                                tratarComoExtrato = getTratarComoExtrato(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
                                nomeOrigem = nomeOrigem.replaceAll("  ", " ").trim();
                                if (tratarComoExtrato) {
                                    if (nomeOrigem.length() > 199) nomeOrigem = cutString(nomeOrigem, 0, 180); // #Fabrica(2019-10-03) @Becker
                                    JSONObject jDados = new JSONObject();
                                    jDados.put("PORTADOR",    		nomePortador);
                                    jDados.put("EMPRESA",     		codEmpresa);
                                    jDados.put("DATAMOVIMENTO",	 	dataMovimento);
                                    jDados.put("NOMEARQUIVO",       debitoCredito+nomeArquivo.toUpperCase()); // #DOCUMENTACAO EVITA PROBLEMA DE TRANSFERENCIAS NO MESMO ARQUIVO
                                    jDados.put("NOMEORIGEM",    	nomeOrigem);
                                    jDados.put("VALORDOCUMENTO",    valorDocumento);
                                    jDados.put("COMPLEMENTO01",     complemento02);
                                    jDados.put("DEBITO-CREDITO",    debitoCredito);
                                    jDados.put("CONT",  			String.valueOf(cont));
                                    boolean primExtrato = insertIOExtrato(jDados, dbIOCont, logger );
                                    jStatus = new JSONObject();
                                    putStatus(dirName, "", jStatus, logger);
                                    continue;
                                }

                                debitoCredito = ""; // zera aqui para n?o confundir com extratos bancarios.


                                // #DOCUMENTACAO
                                // trata lancamento como juros (de outro lancamento)
                                complemento10 = "";
                                tratarComoJuros = getTratarComoJuros(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
                                if (tratarComoJuros) {
                                    complemento10 = dataMovimento + "-" + documento + "-JUROS";
                                    ttJuros ttJ    = (ttJuros)mapaJuros.get(complemento10);
                                    if (ttJ == null) {
                                        ttJ  = new ttJuros();
                                        ttJ.documento  = documento;
                                        ttJ.valorJur   = valorDocumento;
                                        ttJ.valorLido  = 0;
                                    }
                                    mapaJuros.put(complemento10,ttJ);
                                    continue;
                                }

                                // #DOCUMENTACAO
                                // trata lancamento como desconto (de outro lancamento)
                                tratarComoDesconto = getTratarComoDesconto(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
                                if (tratarComoDesconto) {
                                    complemento10  = dataMovimento + "-" + documento + "-DESCONTO";
                                    ttDesconto ttD    = (ttDesconto)mapaDesconto.get(complemento10);

                                    if(valorDocumento == 0) continue;

                                    if (ttD == null) {
                                        ttD  = new ttDesconto();
                                        ttD.documento  = documento;
                                        ttD.valorDesc  = valorDocumento;
                                        ttD.valorLido  = 0;
                                    }
                                    mapaDesconto.put(complemento10,ttD);
                                    continue;
                                }

                                int restoLinha = 0;
                                restoLinha = (cont % 100);
                                if (restoLinha == 0) putStatus(dirName, "02--Etapa 2 de 4 - " + String.valueOf(cont) + "--" + tipoLancamento + ".status", jStatus, logger);


                                String contLinhaTexto = String.valueOf(cont);
                                contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
                                String consolidaClass = StringUtil.leftPad(String.valueOf(porAba), 02, "0") + contLinhaTexto;

                                classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

                                //alterado para evitar problemas de lote (maiusculo)
                                lote = nomeEmpresa + "_" + codEmpresa + "__" + nomeArquivo  + "__" + dataLote + "_" + tipoLancamento;
                                chave = lote + "-" + String.valueOf(porAba) + "-" + contLinhaTexto;
                                // lote = nomeEmpresa + "_" + codEmpresa + "_" + nomeArquivo  + "_" + dataLote + "_" + tipoLancamento;

                                if(chave.length() > 200)  chave = chave.substring(0, 199);

                                // #DOCUMENTACAO
                                ////////////////////////////////////////////////////////////// ACUMULA ANTES
                                histobj.put("nomeOrigem", nomeOrigem);
                                histobj.put("documento", documento);
                                histobj.put("complemento01", complemento01);
                                histobj.put("complemento02", complemento02);
                                histobj.put("complemento03", complemento03);
                                histobj.put("complemento04", complemento04);
                                histobj.put("complemento05", complemento05);
                                histobj.put("complemento06", complemento06);
                                histobj.put("nomePortador", nomePortador);
                                histobj.put("dataMovimento", dataMovimento);
                                histobj.put("mesAnoAnterior", mesAnoAnterior);
                                histobj.put("mesAno2Anterior", mesAno2Anterior);
                                histobj.put("mesAnoAtual", mesAnoAtual);
                                histobj.put("valorDocumento", valorDocumento);
                                histobj.put("valorJuros", valorJuros);
                                histobj.put("valorDesconto", valorDesconto);
                                histobj.put("valorMulta",valorMulta);
                                histobj.put("tipoPlanilha", tipoPlanilha);
                                histobj.put("nomeArquivo", nomeArquivo.toUpperCase());

                                String testeChave = getRegrasParaAcumular(lote, chave, tipoLancamento, documento, nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
                                if(testeChave.toUpperCase().contains("ACUMULAANTES") || testeChave.toUpperCase().contains("ACUMULARANTES")) {
                                    chave = testeChave;
                                    if(chave.length() > 180) chave = cutString(chave, 0, 179);
                                    acumulouAntes = true;
                                }
                                ////////////////////////////////////////////////////////////////////////////////////
                                String key = chave  + "-CTB";
                                nomeOrigem = nomeOrigem.replaceAll("  "," ").trim();


                                // #DOCUMENTACAO
                                // insere numa tabela temporaria
                                ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                if (ttMov2 == null) {
                                    ttMov2 = new ttMovimentoPadrao();
                                    ttMov2.lote              = lote;
                                    ttMov2.codEmpresa        = codEmpresa;
                                    ttMov2.nomeEmpresa       = nomeEmpresa;
                                    ttMov2.dataMovimento     = dataMovimento;
                                    ttMov2.tipoMovimento     = "CTB";
                                    ttMov2.tipoLancamento    = tipoLancamento;
                                    ttMov2.historico         = historico;
                                    ttMov2.contaJuros        = contaJuros;
                                    ttMov2.contaMulta        = contaMulta;
                                    ttMov2.contaDesconto     = contaDesconto;
                                    ttMov2.centroCusto       = codCcOrigem;
                                    ttMov2.cpfCnpj           = cpfCnpj;
                                    ttMov2.chave             = chave + "-CTB";
                                    ttMov2.classificacao     = classificacao;
                                    ttMov2.codFilial         = codFilial;
                                    ttMov2.complemento07     = complemento07;
                                    ttMov2.complemento08     = complemento08;
                                    ttMov2.complemento09     = complemento09;
                                    ttMov2.complemento10     = complemento10;
                                    ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                    ttMov2.tipoPlanilha      = tipoPlanilha;
                                    ttMov2.chaveExtrato      = chaveExtrato;
                                    ttMov2.debitoCredito     = debitoCredito;
                                    ttMov2.contLinha         = contLinhaTexto;
                                    ttMov2.historicoMulta    = "";
                                    ttMov2.historicoJuros    = "";
                                    ttMov2.historicoDesconto = "";
                                    ttMov2.contaDebito       = "";
                                    ttMov2.contaCredito      = "";
                                    ttMov2.naturezaContabil  = "";
                                    ttMov2.contador 		 = 0;
                                    ttMov2.parcelaDoc        = parcelaDoc;
                                    ttMov2.abaPlanilha       = String.valueOf(porAba);

                                    if(!lerAposPrincipal.contains("FORNECEDOR"))	ttMov2.nomeOrigem    = nomeOrigem;
                                    if(!lerAposPrincipal.contains("DOCUMENTO")) 	ttMov2.documento 	 = documento;
                                    if(!lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06;


                                }

                                ///  -------------------------------------------------------------------------------------------------------
                                ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                ///  if (!complemento02.equals("")) ttMov2.complemento02 = complemento02;
                                ///  -------------------------------------------------------------------------------------------------------

                                // #DOCUMENTACAO
                                // acumula linhas secundarias ou apenas l? as secundarias
                                boolean acumulaSegundaLinha = true;

                                if(acumulaSegundaLinha){
                                    if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = (ttMov2.nomeOrigem    + " " + nomeOrigem).trim();
                                    if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = (ttMov2.documento + " " + documento).trim();
                                    if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = (ttMov2.nomePortador  + " " + nomePortador).trim();
                                    if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = (ttMov2.complemento01 + " " + complemento01).trim();
                                    if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = (ttMov2.complemento02 + " " + complemento02).trim();
                                    if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = (ttMov2.complemento03 + " " + complemento03).trim();
                                    if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = (ttMov2.complemento04 + " " + complemento04).trim();
                                    if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = (ttMov2.complemento05 + " " + complemento05).trim();
                                    if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = (ttMov2.complemento06 + " " + complemento06).trim();
                                }
                                if(!acumulaSegundaLinha){
                                    if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = nomeOrigem.trim();
                                    if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = documento.trim();
                                    if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador.trim();
                                    if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01.trim();
                                    if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02.trim();
                                    if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03.trim();
                                    if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04.trim();
                                    if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05.trim();
                                    if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06.trim();
                                }

                                ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
                                ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
                                ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
                                ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

                                leuFinanceiro = true;
                                mapaVariavel.put(key,ttMov2);

                            } catch (Exception e) {
                                logger.logError("EndpointA:", e);
                            }
                        } // while
                    }finally {

						/*if (memFile != null) { //closeFile
							try {memFile.closeFile(); }
							catch (Exception ex) { }
						}*/ //closeFile

                    }
                }

            }
            try{
                FileUtil.moveToDir(dirName+"/"+nomeArquivo, backupDirName);
            }catch(Exception ee){}

        }
    } catch (Exception ee) {
        putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
        logger.logError("EndpointA: ", ee);
    }

    if(erroShrink){
        putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
        throw new Exception();
    }
    // --------------------------------------------------------------------------------------------------------------------
    // #DOCUMENTACAO
    // BUSCA INFORMACAO DE EXTRATOS SALVOS
    if (leuFinanceiro && cruzaExtrato.contains("TRUE") || (tipoPlanilha.contains("EXTRATO") && cruzaExtrato.contains("FALSE")) ||
            (Cruza_Extrato_com_Extrato.contains("TRUE") && cruzaExtrato.contains("FALSE")) ||
            (Cruza_Extrato_com_Extrato.contains("FALSE") && cruzaExtrato.contains("FALSE"))) {

        try {
            JSONArray extratoEmpresa = getExtratosEmpresa(codEmpresa, dbIOCont, logger);

            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                for (int t=0; t<extratoEmpresa.length(); t++) {

                    JSONObject recMov = extratoEmpresa.optJSONObject(t);

                    recMov.put("CODEMPRESA", codEmpresa);
                    recMov.put("NOMEEMPRESA", nomeEmpresa);

                    //QUANDO FOR CRUZAMENTO DE EXTRATO, MANTER NOME UNICO NO ARQUIVO FINAL.
                    if (leuFinanceiro && cruzaExtrato.contains("TRUE")) {
                        recMov.put("NOMEARQUIVO", nomeArquivo);
                    }
                    else {
                        recMov.put("NOMEARQUIVO", "");
                    }

                    recMov.put("TIPOLANCAMENTO", tipoLancamento);
                    recMov.put("CONTAMOVIMENTO", "");
                    recMov.put("CONTAPORTADOR", "");
                    recMov.put("CONTLINHATEXTO", String.valueOf(t));

                    ttMovimentoPadrao ttMovExtrato = getMovimentoExtrato(recMov, logger);
                    if (nomeArquivo.toUpperCase().contains("FILTRO_")){
                        boolean filtro = validaFiltro(nomeArquivo, ttMovExtrato.dataMovimento);
                        if(!filtro) continue;
                    }
                    mapaVariavel.put(ttMovExtrato.chave, ttMovExtrato);
                    apagaExtrato    = true;

                }
            }
        }
        catch (Exception xx) {
            logger.logInfo("ATENCAO - PROBLEMA NA LEITURA DE EXTRATO - BANCO");
        }

    } // if tipo planilha nao igual extrato
    // --------------------------------------------------------------------------------------------------------------------
    // #DOCUMENTACAO
    // INICIO DAS ITERACOES
    StringBuilder txtFiscal     = new StringBuilder();
    StringBuilder txtFornecedor = new StringBuilder();
    StringBuilder txtPortador   = new StringBuilder();
    String nomePortadorAnterior = "";
    if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB")) txtFiscal.append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // #Fabrica(2019-08-13) @Vini


    int contRegra = -1;
    try {
        Iterator itExtrato = mapaVariavel.keySet().iterator();
        while (itExtrato.hasNext()) {
            String chaveExtrato     = "";

            String key = (String)itExtrato.next();
            ttMovimentoPadrao ttMov = (ttMovimentoPadrao)mapaVariavel.get(key);

            if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
                roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
            }else{
                roteiroCRM = getRoteiro();
            }

            // #DOCUMENTACAO
            // TRATA LOTES (MAIUSCULO e MINUSCULO)
            if(ttMov.lote.lastIndexOf("__") > ttMov.lote.indexOf("__")){
                ttMov.lote = nomeEmpresa +"_"+ codEmpresa +"_"+  cutString(ttMov.lote, ttMov.lote.indexOf("__"), ttMov.lote.lastIndexOf("__")).toLowerCase() +"_"+ ttMov.lote.substring(ttMov.lote.lastIndexOf("__"));
            }
            // #DOCUMENTACAO
            // EVITA GERAR 2 ARQUIVOS QUANDO TEM TRATAR COMO EXTRATO
            ttMov.lote = ttMov.lote.replace(ttMov.debitoCredito,"").replace("extrato-debito","").replace("extrato-credito","").replace("___","_").replace("__","_");

            // #DOCUMENTACAO
            // JUNCAO DOS LANCAMENTOS COM OS JUROS E DESCONTOS (TRATAR COMO JUROS OU DESCONTO)
            String chaveJuros = ttMov.dataMovimento + "-" + ttMov.documento + "-JUROS";
            ttJuros ttJ  = (ttJuros)mapaJuros.get(chaveJuros);
            if (ttJ != null && ttJ.valorLido == 0) {
                ttMov.valorJuros  = ttJ.valorJur;
                ttJ.valorLido     = 1;
                mapaJuros.put(chaveJuros,ttJ);

            }

            String chaveDesconto = ttMov.dataMovimento + "-" + ttMov.documento + "-DESCONTO";
            ttDesconto ttD  = (ttDesconto)mapaDesconto.get(chaveDesconto);
            if (ttD != null && ttD.valorLido == 0) {
                ttMov.valorDesconto  = ttD.valorDesc;
                ttD.valorLido     = 1;
                mapaDesconto.put(chaveDesconto,ttD);

            }
            contRegra++;
            int restoLinha = 0;
            restoLinha = (contRegra % 100);
            if (restoLinha == 0) putStatus(dirName, "03--Etapa 3 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);

            classificaPlano     = roteiroCRM.optString("classificaPlano");
            classificaFornec    = roteiroCRM.optString("classificaFornec");
            cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
            Cruza_Extrato_com_Extrato = roteiroCRM.optString("Cruza_Extrato_com_Extrato").toUpperCase();
            String integraFiscal = roteiroCRM.optString("Integracao_fiscal").toUpperCase();

            if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) continue;
            if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-DEBITO")) continue;

            // ------------------------------------------------------------------------------------------------------------------
            // 	 		INICIA PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------
            String DATAMOVIMENTO   = "";
            String PORTADOR        = "";
            String CHAVE           = "";
            boolean jaCruzou       = false;


            // #DOCUMENTACAO
            // EXTRATO COM EXTRATO
            if (Cruza_Extrato_com_Extrato.contains("TRUE") && ttMov.tipoPlanilha.contains("EXTRATO")) {

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);
                if (ttMov.valorDocumento == 0) continue;

                JSONArray extratoEmpresa = new JSONArray();
                String transferencia = "NAO";

                if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-DEBITO"))  transferencia = "SIM";
                if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) transferencia = "SIM";

                if (transferencia.equals("SIM")) {
                    for (int xx = 0;xx<1;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;

                            if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
                                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                    .param(chaveExtrato + "%")
                                    .param(0)
                                    .param(ttMov.nomeArquivo.toUpperCase())
                                    .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    JSONObject recMov = extratoEmpresa.optJSONObject(0);

                    DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
                    PORTADOR        = recMov.optString("PORTADOR");
                    CHAVE           = recMov.optString("CHAVE");

                    ttMov.complemento04 = ttMov.nomeOrigem;
                    ttMov.nomeOrigem    = PORTADOR;
                    ttMov.dataMovimento = DATAMOVIMENTO;
                    ttMov.tipoPlanilha  = "EXTRATO-TRANSFERENCIA";

                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(1)
                            .param(CHAVE)
                            .execute();
                    jaCruzou = true;

                }
            }

            // #DOCUMENTACAO
            // EXTRATO COM PLANILHA
            if (cruzaExtrato.contains("TRUE")  && !jaCruzou) {

                Conta_Fixa_Cruzamento_Extrato  = roteiroCRMPrincipal.optString("Conta_Fixa_Cruzamento_Extrato");

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Date dataMovimentoDateMenosUm   = new Date();
                Date dataMovimentoDateMenosDois = new Date();
                Date dataMovimentoDateMenosTres = new Date();
                Date dataMovimentoDateMaisUm    = new Date();
                Date dataMovimentoDateMaisDois  = new Date();
                Date dataMovimentoDateMaisTres  = new Date();

                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm   = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm    = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois  = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres  = cal.getTime();

                if (ttMov.valorDocumento == 0) continue;

                JSONArray extratoEmpresa = new JSONArray();

                String transferencia = "NAO";

                if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
                    for (int xx = 0;xx<7;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;
                            if (xx ==1) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisUm, "dd/MM/yyyy");
                            if (xx ==2) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosUm, "dd/MM/yyyy");
                            if (xx ==3) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisDois, "dd/MM/yyyy");
                            if (xx ==4) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosDois, "dd/MM/yyyy");
                            if (xx ==5) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisTres, "dd/MM/yyyy");
                            if (xx ==6) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosTres, "dd/MM/yyyy");


                            if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
                                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                    .param(chaveExtrato + "%")
                                    .param(0)
                                    .param(ttMov.nomeArquivo.toUpperCase())
                                    .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    JSONObject recMov = extratoEmpresa.optJSONObject(0);

                    DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
                    PORTADOR        = recMov.optString("PORTADOR");
                    CHAVE           = recMov.optString("CHAVE");
                    if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) ttMov.complemento02 = recMov.optString("COMPLEMENTO"); //checknum

                    ttMov.nomePortador  = PORTADOR;
                    ttMov.dataMovimento = DATAMOVIMENTO;

                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(1)
                            .param(CHAVE)
                            .execute();

                }

            }


            // ------------------------------------------------------------------------------------------------------------------
            // 	 		FINALO DO PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------




            classificacao = "";

            String key2 = ttMov.chave;

            if(ttMov.dataMovimento.length() > 9){
                mesRef  = Integer.parseInt(ttMov.dataMovimento.substring(3,5));
                anoRef  = Integer.parseInt(ttMov.dataMovimento.substring(6,10));
                mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                mesRef  = mesRef - 1;
                if (mesRef  == 0) {
                    mesRef  = 12;
                    anoRef  = anoRef - 1;
                }
                mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                mesRef  = mesRef - 1;
                if (mesRef  == 0) {
                    mesRef  = 12;
                    anoRef  = anoRef - 1;
                }
                mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
            }

            String trimestreMesAnoAnterior	    = "";
            String trimestreMesAnoAtual   	    = "";
            String descricaoPlanoContaPortador  = "";
            String descricaoPlanoContaMovimento = "";

            // #DOCUMENTACAO
            // TRIMESTRE
            if (mesAnoAnterior.startsWith("01") || mesAnoAnterior.startsWith("02") || mesAnoAnterior.startsWith("03")) trimestreMesAnoAnterior = "1. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("04") || mesAnoAnterior.startsWith("05") || mesAnoAnterior.startsWith("06")) trimestreMesAnoAnterior = "2. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("07") || mesAnoAnterior.startsWith("08") || mesAnoAnterior.startsWith("09")) trimestreMesAnoAnterior = "3. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("10") || mesAnoAnterior.startsWith("11") || mesAnoAnterior.startsWith("12")) trimestreMesAnoAnterior = "4. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAtual.startsWith("01") || mesAnoAtual.startsWith("02") || mesAnoAtual.startsWith("03")) trimestreMesAnoAtual = "1. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("04") || mesAnoAtual.startsWith("05") || mesAnoAtual.startsWith("06")) trimestreMesAnoAtual = "2. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("07") || mesAnoAtual.startsWith("08") || mesAnoAtual.startsWith("09")) trimestreMesAnoAtual = "3. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("10") || mesAnoAtual.startsWith("11") || mesAnoAtual.startsWith("12")) trimestreMesAnoAtual = "4. Trimestre/" + mesAnoAtual.substring(3);


            if (ttMov.nomeOrigem.equals("")) ttMov.nomeOrigem = ttMov.complemento01 + " " + ttMov.dataMovimento + " R$" + String.valueOf(ttMov.documento);
            ttMov.nomeOrigem = ttMov.nomeOrigem.trim();
            if (ttMov.nomePortador.equals("")) ttMov.nomePortador = "EM BRANCO";

            contaJuros        = roteiroCRM.optString("contaFixaJuros");
            contaFixaCredito  = roteiroCRM.optString("contaFixaCredito");
            contaFixaDebito   = roteiroCRM.optString("contaFixaDebito");
            contaDesconto     = roteiroCRM.optString("contaFixaDesconto");
            contaMulta        = roteiroCRM.optString("contaFixaMulta");



            contaMovimento = "";
            contaPortador  = "";


            if(ttMov.tipoLancamento.contains("PAGAR")) {
                contaMovimento = contaFixaDebito;
                contaPortador  = contaFixaCredito;
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                contaPortador  = contaFixaDebito;
                contaMovimento = contaFixaCredito;
            }

            // Quando pede para cruzar extrato e nao encontra relacionamento com o extrato
            // joga conta fixa de extrato em DEBITO quando for extato e CREDITO quando for planilha
            if ((cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO")) && PORTADOR.equals("")) {
                if (ttMov.tipoPlanilha.contains("EXTRATO"))  contaMovimento  = Conta_Fixa_Cruzamento_Extrato;
                if (!ttMov.tipoPlanilha.contains("EXTRATO")) contaPortador   = Conta_Fixa_Cruzamento_Extrato;
            }


            ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

            contaMovimento    = getConta09(contaMovimento, ttMov.nomeOrigem,  ttMov.documento, "", ttMov.complemento01,  ttMov.complemento02,  ttMov.complemento03, "",  ttMov.centroCusto);
            contaPortador     = getConta09(contaPortador, "", "", ttMov.nomePortador, "", "", "", ttMov.nomeArquivo, "");
            ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, "", ttMov.centroCusto);
            ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                    ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                    ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);

            ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

            JSONObject histobj = new JSONObject();

            histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
            histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
            histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
            histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
            histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
            histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
            histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
            histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
            histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

            ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getReplaceTermos("complemento08", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getReplaceTermos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getReplaceTermos("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getReplaceTermos("nomePortador",  ttMov.nomePortador,   histobj);

            ttMov.complemento01 = getLimpaCampos("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getLimpaCampos("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getLimpaCampos("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getLimpaCampos("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getLimpaCampos("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getLimpaCampos("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getLimpaCampos("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getLimpaCampos("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getLimpaCampos("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getLimpaCampos("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getLimpaCampos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getLimpaCampos("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getLimpaCampos("nomePortador",  ttMov.nomePortador,   histobj);

            histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
            histobj.put("nomePortador", ttMov.nomePortador);

            ttMov.complemento01 = getLimpaCamposAvancado("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getLimpaCamposAvancado("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getLimpaCamposAvancado("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getLimpaCamposAvancado("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getLimpaCamposAvancado("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getLimpaCamposAvancado("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getLimpaCamposAvancado("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getLimpaCamposAvancado("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getLimpaCamposAvancado("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getLimpaCamposAvancado("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getLimpaCamposAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getLimpaCamposAvancado("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getLimpaCamposAvancado("nomePortador",  ttMov.nomePortador,   histobj);

            ttMov.complemento01 = getReplaceTermosAvancado("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getReplaceTermosAvancado("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getReplaceTermosAvancado("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getReplaceTermosAvancado("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getReplaceTermosAvancado("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getReplaceTermosAvancado("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getReplaceTermosAvancado("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getReplaceTermosAvancado("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getReplaceTermosAvancado("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getReplaceTermosAvancado("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getReplaceTermosAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getReplaceTermosAvancado("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getReplaceTermosAvancado("nomePortador",  ttMov.nomePortador,   histobj);

            histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
            histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
            histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
            histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
            histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
            histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
            histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
            histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
            histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

            contaMovimento = getContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaPortador  = getContaPortador(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if(roteiroCRM.optString("gravaCnpjMovimento").toUpperCase().contains("TRUE")){
                if(contaMovimento.equals("")) {
                    if(!ttMov.cpfCnpj.equals("")){
                        contaMovimento = ttMov.cpfCnpj;
                        if(roteiroCRM.optString("erpContabilidade").toUpperCase().contains("SCI UNICO") && !ttMov.cpfCnpj.equals(""))
                            contaMovimento = ttMov.cpfCnpj + "P";
                    }
                }
                else {ttMov.cpfCnpj = "";}
            }
            regraContaMovimento  = getRegraContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


            double valorPrincipal 	 = getValorPrincipal("", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            if (valorPrincipal> 0 && ttMov.valorDocumento > valorPrincipal) {
                ttMov.valorJuros     = ttMov.valorDocumento - valorPrincipal;
                ttMov.valorDocumento = valorPrincipal;
            }

            ttMov.contaJuros        = getContaJuros(contaJuros,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaDesconto     = getContaDesconto(contaDesconto,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaMulta        = getContaMulta(contaMulta,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            tabelaContabil   		= getTabelaContabil("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);



            boolean regraCRM = false;
            if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;

            //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---

            if (!contaMovimento.equals("")){

                ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
                if (ttP == null) {
                    ttP  = new ttPlano();
                    ttP.descricaoPlano = "";
                    ttP.contaAnalitica = "";


                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                            .fields("DESCRICAOPLANO,CONTAANALITICA")
                            .param(codEmpresa)
                            .param(contaMovimento)
                            .queryUnique();

                    if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
                        dbIOCont.insert("IO_PLANOCONTA")
                                .fields("CODEMPRESA,CONTACONTABIL")
                                .param(codEmpresa)
                                .param(contaMovimento)
                                .execute();
                    } else {
                        ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
                        ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
                    }

                    ttP.contaContabil     = contaMovimento;
                    mapaPlano.put(contaMovimento,ttP);


                }
            }

            if (contaMovimento.equals("")){
                try {

                    ttFornecedor ttF  = (ttFornecedor)mapaFornecedor.get(ttMov.nomeOrigem);
                    if (ttF == null) {
                        ttF  = new ttFornecedor();

                        JSONObject ret = buscaConta(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, ttMov.tipoLancamento, logger, dbIOCont);
                        if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = ret.optString("contaDebito");
                        if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = ret.optString("contaCredito");
                        if (contaMovimento == null || contaMovimento.trim().length() == 0) {
                            contaMovimento = "";
                        }
                        ttF.contaMovimento = contaMovimento;
                        ttF.nomeOrigem     = ttMov.nomeOrigem;
                        mapaFornecedor.put(ttMov.nomeOrigem,ttF);


                    } else {
                        contaMovimento = ttF.contaMovimento;
                    }
                }
                catch  (Exception Ee) {continue;}
            }

            if(roteiroCRM.optString("erpContabilidade").contains("DEXION")){
                if (contaMovimento.equals("")) {
                    JSONObject descricaoPlano = dbIOCont.sql("SELECT CONTACONTABIL FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOPLANO LIKE ?")
                            .fields("CONTACONTABIL")
                            .param(codEmpresa)
                            .param(ttMov.cpfCnpj + "%")
                            .queryUnique();
                    contaMovimento = descricaoPlano.optString("CONTACONTABIL").trim();
                }
            }

            if (contaPortador.equals("")) {
                try {


                    ttFornecedor ttF  = (ttFornecedor)mapaFornecedor.get(ttMov.nomePortador+"PORT");
                    if (ttF == null) {
                        ttF  = new ttFornecedor();

                        JSONArray portadorDePara =  findPortador(dbIOCont, codEmpresa, ttMov.nomePortador);
                        if (portadorDePara != null && portadorDePara.length() > 0) {
                            JSONObject ret = portadorDePara.optJSONObject(0);
                            contaPortador = ret.optString("CONTACONTABIL").trim();
                        }

                        ttF.contaMovimento = contaPortador;
                        ttF.nomeOrigem     = ttMov.nomePortador + "PORT";
                        mapaFornecedor.put(ttMov.nomePortador + "PORT",ttF);


                    } else {
                        contaPortador = ttF.contaMovimento;
                    }


                }
                catch  (Exception Ee) {}
            }

            String contaTipoFornecedor = "999333";

            boolean eFornecedor = false;
            String  razaoSocial = ttMov.nomeOrigem;
            String  razaoSocialDuplicata = ttMov.nomeOrigem;
            if (contaMovimento.toUpperCase().contains("FISCAL"))  eFornecedor = true;

            if (!contaMovimento.equals("")){

                ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
                if (ttP == null) {
                    ttP  = new ttPlano();
                    ttP.descricaoPlano = "";
                    ttP.contaAnalitica = "";

                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                            .fields("DESCRICAOPLANO,CONTAANALITICA")
                            .param(codEmpresa)
                            .param(contaMovimento)
                            .queryUnique();


                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO") && descricaoPlano.has("CONTAANALITICA") ) {

                        ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
                        ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");

                    }

                    ttP.contaContabil     = contaMovimento;
                    mapaPlano.put(contaMovimento,ttP);
                }

                descricaoPlanoContaMovimento = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
                if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
                    razaoSocial = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
                }

                // Joga no nome do fornecedor o que esta no plano de contas
                if (!classificaPlano.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaPlano))) {
                    ttMov.nomeOrigem = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
                }
                if (ttP.descricaoPlano.length() < 2 || ttP.descricaoPlano.equals("") || ttP.descricaoPlano == null) {
                    eFornecedor = true;
                }

                if (razaoSocial.length() < 4) razaoSocial = ttMov.nomeOrigem;

                if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
                    eFornecedor = true;
                }


            }

            if (!contaPortador.equals("")){

                ttPlano ttP  = (ttPlano)mapaPlano.get(contaPortador);
                if (ttP == null) {

                    ttP  = new ttPlano();
                    ttP.descricaoPlano = "";
                    ttP.contaAnalitica = "";
                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                            .fields("DESCRICAOPLANO,CONTAANALITICA")
                            .param(codEmpresa)
                            .param(contaPortador)
                            .queryUnique();

                    if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
                        dbIOCont.insert("IO_PLANOCONTA")
                                .fields("CODEMPRESA,CONTACONTABIL")
                                .param(codEmpresa)
                                .param(contaPortador)
                                .execute();
                    } else {
                        ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
                        ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
                    }

                    ttP.contaContabil     = contaPortador;
                    mapaPlano.put(contaPortador,ttP);
                }
                descricaoPlanoContaPortador = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
            }

            if(ttMov.tipoLancamento.contains("PAGAR")) {
                ttMov.contaDebito  = contaMovimento;
                ttMov.contaCredito = contaPortador;
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                ttMov.contaCredito  = contaMovimento;
                ttMov.contaDebito   = contaPortador;
            }
            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
                objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                if(ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);
                mapaVariavel.put(key,ttMov);
                continue;
            }
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
                objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                if(ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);
                mapaVariavel.put(key,ttMov);
                continue;
            }
            String parcelaAtualeFinal = "";
            String parcelaAtual       = "";

            int parcelaBase = getParcelaBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            int totalParcelas = getTotalParcelas(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            String mesAnoBase = getMesAnoBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);



            if (!mesAnoBase.equals("") && parcelaBase > 0) parcelaAtual       = String.valueOf(getParcelaFinanciamento(mesAnoAtual, mesAnoBase,parcelaBase, totalParcelas));
            if (!mesAnoBase.equals("")) parcelaAtualeFinal = parcelaAtual.trim() + "/" + String.valueOf(totalParcelas).trim();

            ttMov.historico = getHistorico(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);



            histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);
            histobj.put("contaDebito", ttMov.contaDebito);
            histobj.put("contaCredito", ttMov.contaCredito);
            histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("contaDesconto", ttMov.contaDesconto);
            histobj.put("parcelaAtual", parcelaAtual);
            histobj.put("parcelaAtualeFinal", parcelaAtualeFinal);
            histobj.put("trimestreMesAnoAnterior", trimestreMesAnoAnterior);
            histobj.put("trimestreMesAnoAtual", trimestreMesAnoAtual);
            histobj.put("descricaoPlanoMovimento", descricaoPlanoContaMovimento.toUpperCase());
            histobj.put("descricaoPlanoPortador", descricaoPlanoContaPortador.toUpperCase());

            if(roteiroCRM.optString("Realizar_Busca_Plano").equals("TRUE")){

                // #Fabrica(2019-08-27) @Vini
                JSONObject fornecFilial = new JSONObject();
                String cAnalitica = "";
                String auxNomeOrig = "";
                auxNomeOrig = ttMov.nomeOrigem.replaceAll("-","").replaceAll("/","").replaceAll("\\.","").replaceAll("[0-9]*", "").replaceAll("\\s+","").replaceAll("ME","").replaceAll("EPP","").replaceAll("LTDA","").replaceAll("EIRELI","").replaceAll("SA","").trim();
                if (auxNomeOrig.length()> 11) auxNomeOrig = cutString(auxNomeOrig,0,10);
                //pesquisa no banco de dados pela descricao continua para pegar a classifica??o usada na nova regra
                fornecFilial = dbIOCont.sql("SELECT CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOCONTINUA LIKE ?")
                        .fields("CONTAANALITICA")
                        .param(codEmpresa)
                        .param(auxNomeOrig+"%")
                        .queryUnique();
                cAnalitica = fornecFilial.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim();
                histobj.put("classificacao", cAnalitica); // classificacao para criacao de regra
            }

            ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            regraHistorico = getRegraHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!ttMov.historicoJuros.contains("JUROS")) ttMov.historicoJuros = "JUROS REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoJuros = getHistorico(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoJuros = getHistoricoJuros(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!ttMov.historicoDesconto.contains("DESCONTO")) ttMov.historicoDesconto = "DESCONTO REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoDesconto = getHistorico(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoDesconto = getHistoricoDesconto(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (ttMov.historicoMulta.equals("")) ttMov.historicoMulta = "MULTA REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoMulta = getHistorico(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoMulta = getHistoricoMulta(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                    ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                    ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);

            if (!ttMov.codFilial.equals("")) {
                ttMov.historico 		= ttMov.historico 			 + " Filial:" + ttMov.codFilial;
                ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Filial:" + ttMov.codFilial;
                ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Filial:" + ttMov.codFilial;
                ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Filial:" + ttMov.codFilial;
            }
            String codParticipante   = getParticipante("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                    ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                    ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);

            if (!codParticipante.equals("")) {
                ttMov.historico 		= ttMov.historico			 + " Participante:" + codParticipante;
                ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Participante:" + codParticipante;
                ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Participante:" + codParticipante;
                ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Participante:" + codParticipante;
            }

            ttMov.historico 		= ttMov.historico.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
            ttMov.historicoJuros 	= ttMov.historicoJuros.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
            ttMov.historicoDesconto = ttMov.historicoDesconto.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
            ttMov.historicoMulta 	= ttMov.historicoMulta.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();

            if(roteiroCRMPrincipal.optString("erpContabilidade").equals("JBSOFTWARE")){
                ttMov.historico += "GPLCTO:" + ttMov.contLinha;
                ttMov.historicoJuros += "GPLCTO:" + ttMov.contLinha;
                ttMov.historicoDesconto += "GPLCTO:" + ttMov.contLinha;
                ttMov.historicoMulta += "GPLCTO:" + ttMov.contLinha;
            }

            // ------------------------------------------------
            //           GERA ARQUIVO PARA O FISCAL
            // ------------------------------------------------
            ttMov.documento = ttMov.documento.trim();
            if (ttMov.documento.startsWith("0")) {
                for (int xx=0;xx<10;xx++) {
                    if (ttMov.documento.length() > 1 && ttMov.documento.startsWith("0")) ttMov.documento = ttMov.documento.substring(1);
                }
            }

            JSONObject jDescricaoDupl = new JSONObject();
            if (eFornecedor)   jDescricaoDupl.put("TIPO","FORNECEDOR");

            if(integraFiscal.contains("TRUE") && ttMov.tipoPlanilha.contains("MOVIMENTO") && !razaoSocial.equals("") && !ttMov.documento.equals("") && !regraCRM && !contaMovimento.equals("")){

                apagaStatus = true;

                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("QUESTOR")) {

                    JSONObject jDados = new JSONObject();
                    jDados.put("CODEMPRESA",     codEmpresa);

                    // usando a filial do questor em duplicatas em aberto
                    if (roteiroCRMPrincipal.optString("Usa_Filial_Questor").toUpperCase().equals("TRUE"))  jDados.put("CODEMPRESA",     codEmpresa + "-%");

                    //jDados.put("DATAVENCIMENTO", ttMov.complemento06); //Descomentar, para fazer a baixa com uso da data de vencimento
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORMULTA",     ttMov.valorMulta);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

                    // #Fabrica(2019-05-20)
                    // Descomentar a proxima linha para testar a razaoSocial do movimento com a jDescricaoDupl.optString("RAZAOSOCIAL") que vem das duplicatas em aberto!
                    // if (jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, razaoSocial);
                    // #Fabrica(2019-07-30)
                    // Descomentar a proxima linha para testar o codigo de filial do movimento com a jDescricaoDupl.optString("SITUACAO") que vem das duplicatas em aberto! OBS: Lembrando que deve existir regra de c?digo filial no CRM
                    // if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorFilial(jDescricaoDupl, ttMov.codFilial);
                    // #Fabrica(2019-07-31)
                    // Descomentar a proxima linha para testar data de vencimento  a jDescricaoDupl.optString("DATAVENCIMENTO") que vem das duplicatas em aberto! OBS: Complemento06, deve estar lendo a data de vencimento da planilha financeira
                    // if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorDataVencimento(jDescricaoDupl, ttMov.complemento06);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

                    double valorSaldoDuplicata2 = 0;
                    if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

                    valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
                    ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {

                        if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){

                            if (roteiroCRMPrincipal.optString("Usa_Filial_Questor").toUpperCase().equals("TRUE"))  {
                                txtFiscal.append(cutString(jDescricaoDupl.optString("CODEMPRESA"), "-"));
                            }
                            else {
                                txtFiscal.append(jDescricaoDupl.optString("CODEMPRESA"));
                            }

                            txtFiscal.append(";");
                            txtFiscal.append("1;");
                            txtFiscal.append(jDescricaoDupl.optString("CHAVEDUPLICATA"));
                            txtFiscal.append(";");
                            txtFiscal.append(jDescricaoDupl.optString("PARCELADOC"));
                            // quando o formato da parcela deve ser igual ao duplicatas em aberto (questor) comentar linha acima e descomentar a linha abaixo
                            //txtFiscal.append(jDescricaoDupl.optString("PARCELADOCORIGINAL"));
                            txtFiscal.append(";");
                            txtFiscal.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
                            txtFiscal.append(";");
                            txtFiscal.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
                            txtFiscal.append(";");
                            txtFiscal.append(jDescricaoDupl.optString("DUPLICATA"));
                            txtFiscal.append(";");
                            txtFiscal.append(jDescricaoDupl.optString("VALORFINAL").replaceAll("\\.", ","));
                            txtFiscal.append(";");
                            txtFiscal.append(jDescricaoDupl.optString("VALORFINALJUROS").replaceAll("\\.", ","));
                            txtFiscal.append(";");
                            txtFiscal.append(jDescricaoDupl.optString("TABELACONTABIL"));
                            txtFiscal.append(";");
                            txtFiscal.append(jDescricaoDupl.optString("CODIGOFORNECEDOR"));
                            txtFiscal.append(";");
                            txtFiscal.append(jDescricaoDupl.optString("VALORFINALDESCONTO").replaceAll("\\.", ","));
                            txtFiscal.append(";");
                            txtFiscal.append(jDescricaoDupl.optString("VALORFINALMULTA").replaceAll("\\.", ","));
                            txtFiscal.append("\r\n");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                            continue;
                        } else {

                            if(cabecalhoNaoEncontrada){
                                txtFornecedor.append("Codigo");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Fornecedor/Cliente");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Duplicata");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Data");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Valor bruto");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Valor liquido");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Banco");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Obs:");
                                txtFornecedor.append("\r\n");
                                cabecalhoNaoEncontrada = false;
                            }
                            String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
                            jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
                            txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.nomePortador);
                            txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
                            txtFornecedor.append("\r\n");


                            jDescricaoDupl.put("TIPO","FORNECEDOR");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                            continue;
                        }
                    }
                }

                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("MAKROWEB")) {

                    JSONObject jDados = new JSONObject();
                    jDados.put("CODEMPRESA",     codEmpresa);
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");


                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {

                        // double diferencaValores = ((ttMov.valorDocumento - jDescricaoDupl.optDouble("VALORPARCELA")) / ttMov.valorDocumento) * 100;

                        // if(diferencaValores > 0 && diferencaValores < 3){
                        //     ttMov.valorJuros 	 = ttMov.valorDocumento - jDescricaoDupl.optDouble("VALORPARCELA");
                        //     ttMov.valorJuros = ttMov.valorJuros * 10;
                        //     ttMov.valorDocumento = jDescricaoDupl.optDouble("VALORPARCELA");

                        // }
                        // if(diferencaValores < 0 && diferencaValores > -3){
                        //     ttMov.valorDesconto  = jDescricaoDupl.optDouble("VALORPARCELA") - ttMov.valorDocumento;
                        //     ttMov.valorDesconto = ttMov.valorDesconto * 10;
                        // 	ttMov.valorDocumento = jDescricaoDupl.optDouble("VALORPARCELA");
                        // }
                        ttMov.parcelaDoc     = jDescricaoDupl.optInt("PARCELADOC");
                        ttMov.valorDesconto  = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDesconto));
                        ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento));
                        ttMov.valorJuros 	 = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorJuros));

                        String valorDescontoAux  = String.valueOf(ttMov.valorDesconto);
                        String valorDocumentoAux = String.valueOf(ttMov.valorDocumento);
                        String valorJurosAux 	 = String.valueOf(ttMov.valorJuros);
                        // if(cutString(String.valueOf(ttMov.valorJuros), String.valueOf(ttMov.valorJuros).lastIndexOf("\\.")+1).length() != 2)
                        //  valorJurosAux = String.valueOf(ttMov.valorJuros)+"0";
                        // if(cutString(String.valueOf(ttMov.valorDocumento), String.valueOf(ttMov.valorDocumento).lastIndexOf("\\.")+1).length() != 2) valorDocumentoAux = String.valueOf(ttMov.valorDocumento)+"0";
                        // if(cutString(String.valueOf(ttMov.valorDesconto), String.valueOf(ttMov.valorDesconto).lastIndexOf("\\.")+1).length() != 2) valorDescontoAux = String.valueOf(ttMov.valorDesconto)+"0";
                        double valorAux = ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros;
                        String valorCalcAux = "";
                        // #Fabrica(2019-08-06) @Vini
                        if(cutString(String.valueOf(valorAux), String.valueOf(valorAux).lastIndexOf("\\.")+1).length() != 2) valorCalcAux = String.valueOf(valorAux)+"0";
                        if (!String.format("%.2f", ttMov.valorDocumento).equals(jDescricaoDupl.optString("VALORPARCELA"))) {
                            jDescricaoDupl.put("TIPO", "FORNECEDOR");
                        } else {
                            txtFiscal.append(StringUtil.leftPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 14,  "0"));
                            txtFiscal.append(StringUtil.leftPad(ttMov.documento, 8, "0"));
                            txtFiscal.append(StringUtil.leftPad(String.valueOf(ttMov.parcelaDoc), 2, "0"));
                            txtFiscal.append(StringUtil.leftPad(valorDocumentoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
                            txtFiscal.append(ttMov.dataMovimento.replaceAll("/",""));
                            txtFiscal.append(StringUtil.leftPad(valorDescontoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
                            txtFiscal.append(StringUtil.leftPad(valorJurosAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
                            txtFiscal.append(StringUtil.leftPad(valorCalcAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
                            txtFiscal.append(StringUtil.leftPad(ttMov.contaCredito, 9,  "0"));
                            txtFiscal.append("\r\n");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                            continue;
                        }
                    }
                }

                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) {
                    JSONObject jDados = new JSONObject();
                    jDados.put("CODEMPRESA",     codEmpresa);

                    //jDados.put("DATAVENCIMENTO", ttMov.complemento06); //Descomentar, para fazer a baixa com uso da data de vencimento
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORMULTA",     ttMov.valorMulta);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

                    double valorSaldoDuplicata2 = 0;
                    if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

                    valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
                    ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {

                        if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
                            if(geraCabecalhoCordilheira) {
                                txtFiscal.append("DATA DE VENCIMENTO;DATA DO PAGAMENTO;CNPJ DO CLIENTE;DOCUMENTO;NOME/RAZAO;NUMERO DA PARCELA;VALOR ORIGINAL;VALOR PAGO;VALOR JUROS;VALOR DESCONTO;FORMA DE PAGAMENTO;NUMERO DA NOTA");
                                txtFiscal.append("\r\n");
                                geraCabecalhoCordilheira = false;
                            }

                            txtFiscal.append(jDescricaoDupl.optString("DATAVENCIMENTO"));
                            txtFiscal.append(";");
                            txtFiscal.append(ttMov.dataMovimento);
                            txtFiscal.append(";");
                            txtFiscal.append(ttMov.cpfCnpj);
                            // quando o formato da parcela deve ser igual ao duplicatas em aberto (questor) comentar linha acima e descomentar a linha abaixo
                            //txtFiscal.append(jDescricaoDupl.optString("PARCELADOCORIGINAL"));
                            txtFiscal.append(";");
                            txtFiscal.append(ttMov.documento);
                            txtFiscal.append(";");
                            txtFiscal.append(ttMov.nomeOrigem);
                            txtFiscal.append(";");
                            txtFiscal.append(jDescricaoDupl.optString("PARCELADOC"));
                            txtFiscal.append(";");
                            txtFiscal.append(jDescricaoDupl.optString("VALORPARCELA").replaceAll("\\.",","));
                            txtFiscal.append(";");
                            txtFiscal.append(String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto)).replaceAll("\\.",","));
                            txtFiscal.append(";");
                            txtFiscal.append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",","));
                            txtFiscal.append(";");
                            txtFiscal.append(String.format("%.2f",ttMov.valorDesconto).replaceAll("\\.",","));
                            txtFiscal.append(";");
                            txtFiscal.append(jDescricaoDupl.optString("TABELACONTABIL"));
                            txtFiscal.append(";");
                            txtFiscal.append(ttMov.documento);
                            txtFiscal.append("\r\n");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                            continue;
                        } else {

                            if(cabecalhoNaoEncontrada){
                                txtFornecedor.append("Codigo");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Fornecedor/Cliente");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Duplicata");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Data");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Valor bruto");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Valor liquido");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Banco");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Obs:");
                                txtFornecedor.append("\r\n");
                                cabecalhoNaoEncontrada = false;
                            }
                            String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
                            jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
                            txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.nomePortador);
                            txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
                            txtFornecedor.append("\r\n");


                            jDescricaoDupl.put("TIPO","FORNECEDOR");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                            continue;
                        }
                    }
                }

                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CUCA-FRESCA")) {

                    JSONObject jDados = new JSONObject();
                    jDados.put("CODEMPRESA",     codEmpresa);

                    // usando a filial do questor em duplicatas em aberto

                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORMULTA",     ttMov.valorMulta);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

                    double valorSaldoDuplicata2 = 0;
                    if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

                    valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
                    ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {

                        if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){


                            String separadorFiscal = "";
                            String dataVencimento  = "";
                            //String parcela		   = "1";
                            String duplicataParcela = jDescricaoDupl.optString("DUPLICATA")+"/"+String.valueOf(ttMov.parcelaDoc);

                            txtFiscal.append(cnpjEmpresa);
                            txtFiscal.append("    ");

                            if(tipoLancamento.contains("PAGAR"))	txtFiscal.append("E");
                            if(tipoLancamento.contains("RECEBER"))	txtFiscal.append("S");

                            txtFiscal.append(StringUtil.rightPad(jDescricaoDupl.optString("DATAVENCIMENTO"), 10, " ")); //lendo do duplicatasem aberto
                            txtFiscal.append(StringUtil.rightPad(jDescricaoDupl.optString("SITUACAO"), 5, " ")); //especie
                            txtFiscal.append(StringUtil.rightPad("", 3, " ")); //serie

                            txtFiscal.append(StringUtil.rightPad("", 2, " ")); //sub-serie
                            txtFiscal.append(StringUtil.leftPad(ttMov.documento, 9, "0"));
                            txtFiscal.append(StringUtil.leftPad("", 9, "0"));

                            txtFiscal.append(StringUtil.rightPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 18, " ")); // preciso criar a leitura do CNPJ do cliente, est? sendo usado o objeto "CODIGOFORNECEDOR" para guardar essa informa??o
                            txtFiscal.append(StringUtil.leftPad(duplicataParcela, 21, "0"));
                            txtFiscal.append(StringUtil.leftPad(dataVencimento, 10, " ")); //data do vencimento

                            txtFiscal.append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0")); //? preciso criar a leitura do valor ? baixar, est? sendo usado o objeto "VALORPARCELA" para guardar no banco



                            if(contaPortador.length() > 1){
                                contaPortador = contaPortador.substring(0, contaPortador.length()-1) + "-" + contaPortador.substring(contaPortador.length()-1);
                                if(contaPortador.length() > 5) contaPortador = contaPortador.substring(0, contaPortador.length()-5) + "." + contaPortador.substring(contaPortador.length()-5);
                            }

                            txtFiscal.append(StringUtil.leftPad(contaPortador, 9, "0")); //a conta do banco
                            txtFiscal.append(StringUtil.rightPad(ttMov.centroCusto, 4, " "));

                            // txtFiscal.append(StringUtil.rightPad(ttMov.historico, 3, ""));
                            if(tipoLancamento.contains("PAGAR"))	txtFiscal.append(StringUtil.rightPad("10", 3, " ")); //10 pagamento fornecedor
                            if(tipoLancamento.contains("RECEBER"))	txtFiscal.append(StringUtil.rightPad("11", 3, " ")); // 11 recebimento duplicata

                            txtFiscal.append(StringUtil.leftPad("", 15, " "));	//numero do cheque na planilha
                            txtFiscal.append(StringUtil.rightPad(ttMov.dataMovimento, 10, " "));

                            txtFiscal.append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0"));
                            txtFiscal.append(StringUtil.leftPad(String.format("%.2f", ttMov.valorJuros), 13, "0"));
                            txtFiscal.append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDesconto), 13, "0"));

                            txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // correcao monetaria
                            txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // despesas/receitas
                            txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // Base de Calculo Retencao

                            txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // IRRF Retido
                            txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // PIS Retido
                            txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido

                            txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // CSLL Retido
                            txtFiscal.append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido
                            txtFiscal.append("    "); //n?o encontrado o c?digo da receita

                            txtFiscal.append("\r\n");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                            continue;
                        } else {

                            if(cabecalhoNaoEncontrada){
                                txtFornecedor.append("Codigo");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Fornecedor/Cliente");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Duplicata");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Data");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Valor bruto");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Valor liquido");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Banco");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Obs:");
                                txtFornecedor.append("\r\n");
                                cabecalhoNaoEncontrada = false;
                            }
                            String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
                            jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
                            txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.nomePortador);
                            txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
                            txtFornecedor.append("\r\n");


                            jDescricaoDupl.put("TIPO","FORNECEDOR");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                            continue;
                        }
                    }
                }

                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {


                    JSONObject jDados = new JSONObject();
                    jDados.put("CODEMPRESA",     codEmpresa);
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
                    jDados.put("OBSERVACAO", 	 ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     99);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORMULTA",     ttMov.valorMulta);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);

                    String chaveParcela = ttMov.documento + "-PARCELA";
                    ttParcelaDominio ttP    = (ttParcelaDominio)mapaParcelaDominio.get(chaveParcela);
                    if (ttP == null) {
                        ttP  			= new ttParcelaDominio();
                        ttP.documento   = ttMov.documento;
                        ttP.ultimaParcela = 0;
                    }
                    ttP.ultimaParcela++;

                    mapaParcelaDominio.put(chaveParcela,ttP);

                    jDados.put("PARCELADOC", ttP.ultimaParcela);
                    jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");



                    String chaveDuplicata = "";
                    if (jDescricaoDupl.has("CODIGOFORNECEDOR")) chaveDuplicata = ttMov.codEmpresa + "-ESPECIAL-" + jDescricaoDupl.optString("CODIGOFORNECEDOR") + "-" + ttMov.documento + "-SEG-";


                    String serie = "";
                    String subSerie = "";
                    String especie = "";
                    double valorSegmento = 0;

                    JSONArray recordsDup = new JSONArray();

                    if(!chaveDuplicata.equals("")){
                        try {
                            String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? ";
                            recordsDup = dbIOCont.sql(sql)
                                    .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
                                    .param(chaveDuplicata + "%")
                                    .debug(logger)
                                    .query();

                        } catch (Exception e1) {
                            logger.logInfo("ERROR: " + e1.getMessage());
                        }
                    }
					/* EXEMPLO DE COMO TEM QUE SAIR

					|0000|07701892000105|
					|5100|39||0|21338|15/08/2017|14/08/2017|0|||180,00|||||||||||||
					|5110|15/08/2017|3612|434|180,00|5|21338 ATLANTA ALARMES -  MONITOL MONIT. TOLEDO LTDA.||418|
					*/

                    JSONObject recordsDupSeg = new JSONObject();
                    if (recordsDup.length() > 0) recordsDupSeg = recordsDup.optJSONObject(0);

                    if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
                        serie   = recordsDupSeg.optString("SERIE");
                        especie = recordsDupSeg.optString("CHAVEDUPLICATA");
                    }

                    double valorSaldoDuplicata = 0;
                    double valorSomaSegmentos  = 0;

                    // soma os segmentos pois eles nao sao baixados. Ou seja, se pago um valor parcial no dominio soma dos segmentos
                    // continua sendo o valor origial (total) da nota fiscal
                    // utilizado para achar a proporcao do valor para cada segmento
                    for (int seg =0; seg<recordsDup.length(); seg ++) {
                        recordsDupSeg =  recordsDup.optJSONObject(seg);
                        if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
                            valorSomaSegmentos = valorSomaSegmentos + DecimalUtil.toDecimal(String.format("%.2f", recordsDupSeg.optDouble("VALORPARCELA")));
                        }
                    }

                    boolean leuDuplicata = false;

                    // valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
                    if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));
                    if (valorSomaSegmentos > 0) valorSaldoDuplicata = valorSomaSegmentos;

                    valorSaldoDuplicata  = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata));
                    ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                    double diferencaParcela = DecimalUtil.toDecimal(String.format("%.2f", DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento )) - valorSomaSegmentos));

                    if (!especie.equals("") || !serie.equals("")) {


                        if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) {

                            for (int seg =0; seg<recordsDup.length(); seg ++) {

                                recordsDupSeg =  recordsDup.optJSONObject(seg);
                                String segmento = "";

                                if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
                                    serie   	  = recordsDupSeg.optString("SERIE");
                                    subSerie   	  = recordsDupSeg.optString("SITUACAO");      // GUARDA SUB SERIE
                                    especie 	  = recordsDupSeg.optString("CHAVEDUPLICATA");
                                    valorSegmento = recordsDupSeg.optDouble("VALORPARCELA");
                                    segmento      = recordsDupSeg.optString("CHAVE");
                                    if (segmento.contains("-SEG-")) {
                                        segmento = cutString(segmento, "-SEG-");
                                        segmento = cutString(segmento, 0, "-");
                                    }
                                }

                                if(segmento.equals("0")){
                                    if(seg>0) continue;
                                    valorSomaSegmentos = DecimalUtil.toDecimal(String.format("%.2f",valorSegmento));
                                    diferencaParcela = 0;
                                }

                                // (zerado para validacao)
                                diferencaParcela = 0;

                                //if (subSerie.equals("")) subSerie = "0";

                                String codContabil = "";
                                if(ttMov.tipoLancamento.contains("PAGAR")) {
                                    ttMov.contaDebito  = contaMovimento;
                                    ttMov.contaCredito = contaPortador;
                                    codContabil = "5100";
                                }
                                if(ttMov.tipoLancamento.contains("RECEBER")) {
                                    ttMov.contaDebito   = contaPortador;
                                    ttMov.contaCredito  = contaMovimento;
                                    codContabil = "5200";
                                    if(especie.equals("39")) codContabil = "5300";
                                }

                                String delimitador = "|";
                                String tipoSerie = delimitador + codContabil + delimitador + especie + delimitador + serie + delimitador + subSerie + delimitador;

                                if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                                    txtFiscal.append(tipoSerie);
                                    txtFiscal.append(jDescricaoDupl.optString("DUPLICATA"));
                                    txtFiscal.append(delimitador);
                                    txtFiscal.append(jDescricaoDupl.optString("DATAVENCIMENTO"));
                                    txtFiscal.append(delimitador);
                                    txtFiscal.append(ttMov.dataMovimento);
                                    txtFiscal.append(delimitador);
                                    txtFiscal.append(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))).replaceAll("\\.",","));
                                    txtFiscal.append(delimitador);
                                    if (seg == 0) txtFiscal.append(jDescricaoDupl.optString("VALORFINALJUROS").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal.append("0");
                                    txtFiscal.append(delimitador);
                                    if (seg == 0) txtFiscal.append(jDescricaoDupl.optString("VALORFINALMULTA").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal.append("0");
                                    txtFiscal.append(delimitador);
                                    if (seg == 0) txtFiscal.append(jDescricaoDupl.optString("VALORFINALDESCONTO").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal.append("0");
                                    // txtFiscal.append("||||||||||");
                                    // if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal.append("||");
                                    txtFiscal.append("||||||||");
                                    if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal.append("||||");

                                    if(ttMov.tipoLancamento.contains("PAGAR")) {
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(jDescricaoDupl.optString("CPFCNPJ"));
                                        txtFiscal.append(delimitador);
                                    }
                                    txtFiscal.append(segmento);
                                    txtFiscal.append(delimitador);
                                    //txtFiscal.append(jDescricaoDupl.optString("OBSERVACAO"));	// FEITO PARA SPEROTO VANZELLA
                                    //txtFiscal.append(delimitador);
                                    txtFiscal.append("\r\n");


                                    if (ttMov.valorDocumento > ttMov.valorDesconto) {
                                        codContabil = codContabil.replaceAll("00","10");

                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(codContabil);
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(ttMov.dataMovimento);
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(ttMov.contaDebito);
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(ttMov.contaCredito);
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))).replaceAll("\\.",","));
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append("");
                                        if(ttMov.historico.contains("CodigoHistorico")) txtFiscal.append(cutString(ttMov.historico, "CodigoHistorico:", " "));
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(cutString(ttMov.historico, 0 ,"Codigo"));
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append("");
                                        txtFiscal.append(delimitador + codEmpresa + delimitador);
                                        txtFiscal.append("\r\n");
                                    }

                                    if (ttMov.valorDesconto > 0 && seg == 0) {

                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(codContabil);
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(ttMov.dataMovimento);
                                        txtFiscal.append(delimitador);
                                        if(ttMov.tipoLancamento.contains("PAGAR")) {
                                            txtFiscal.append(ttMov.contaDebito);
                                            txtFiscal.append(delimitador);
                                            txtFiscal.append(contaDesconto);
                                        }
                                        if(ttMov.tipoLancamento.contains("RECEBER")) {
                                            txtFiscal.append(contaDesconto);
                                            txtFiscal.append(delimitador);
                                            txtFiscal.append(ttMov.contaCredito);
                                        }
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(String.format("%.2f", ttMov.valorDesconto).replaceAll("\\.",","));
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append("");
                                        if(ttMov.historicoDesconto.contains("CodigoHistorico")) txtFiscal.append(cutString(ttMov.historicoDesconto, "CodigoHistorico:", " "));
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(cutString(ttMov.historicoDesconto, 0 ,"Codigo"));

                                        txtFiscal.append(delimitador);
                                        txtFiscal.append("");
                                        txtFiscal.append(delimitador + codEmpresa + delimitador);
                                        txtFiscal.append("\r\n");
                                    }

                                    if (ttMov.valorJuros > 0  && seg == 0) {
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(codContabil);
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(ttMov.dataMovimento);
                                        txtFiscal.append(delimitador);
                                        if(ttMov.tipoLancamento.contains("PAGAR")) {
                                            txtFiscal.append(contaJuros);
                                            txtFiscal.append(delimitador);
                                            txtFiscal.append(ttMov.contaDebito);
                                        }
                                        if(ttMov.tipoLancamento.contains("RECEBER")) {
                                            txtFiscal.append(ttMov.contaCredito);
                                            txtFiscal.append(delimitador);
                                            txtFiscal.append(contaJuros);
                                        }
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",","));
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append("");
                                        if(ttMov.historicoJuros.contains("CodigoHistorico")) txtFiscal.append(cutString(ttMov.historicoJuros, "CodigoHistorico:", " "));
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(cutString(ttMov.historicoJuros, 0 ,"Codigo"));
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append("");
                                        txtFiscal.append(delimitador + codEmpresa + delimitador);
                                        txtFiscal.append("\r\n");
                                    }

                                    if (ttMov.valorMulta > 0 && seg == 0) {
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(codContabil);
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(ttMov.dataMovimento);
                                        txtFiscal.append(delimitador);
                                        if(ttMov.tipoLancamento.contains("PAGAR")) {
                                            txtFiscal.append(contaMulta);
                                            txtFiscal.append(delimitador);
                                            txtFiscal.append(ttMov.contaDebito);
                                        }
                                        if(ttMov.tipoLancamento.contains("RECEBER")) {
                                            txtFiscal.append(ttMov.contaCredito);
                                            txtFiscal.append(delimitador);
                                            txtFiscal.append(contaMulta);
                                        }
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(String.format("%.2f", ttMov.valorMulta).replaceAll("\\.",","));
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append("");
                                        if(ttMov.historicoMulta.contains("CodigoHistorico")) txtFiscal.append(cutString(ttMov.historicoMulta, "CodigoHistorico:", " "));
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append(cutString(ttMov.historicoMulta, 0 ,"Codigo"));
                                        txtFiscal.append(delimitador);
                                        txtFiscal.append("");
                                        txtFiscal.append(delimitador + codEmpresa + delimitador);
                                        txtFiscal.append("\r\n");
                                    }

                                    diferencaParcela = 0;

                                    geraFiscal = true;
                                    loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                                    eFornecedor = false;
                                    leuDuplicata = true;

                                }
                            }
                            if (leuDuplicata) continue;
                        } else {
                            if(cabecalhoNaoEncontrada){
                                txtFornecedor.append("Codigo");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Fornecedor/Cliente");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Duplicata");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Data");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Valor bruto");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Valor liquido");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Banco");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Obs:");
                                txtFornecedor.append("\r\n");
                                cabecalhoNaoEncontrada = false;
                            }
                            String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
                            jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
                            txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.nomePortador);
                            txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata));
                            txtFornecedor.append("\r\n");

                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                        }
                    }
                    else {
                        if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                            jDescricaoDupl.put("TIPO","FORNECEDOR"); // se nao acha serie vai para duplicatas nao encontradas
                            eFornecedor = true;
                        }
                    }
                }


                if (eFornecedor) {

                    dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
                    contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");


                    if(dupliNaoEncontContabil){
                        contaMovimento = contaTemp;
                        if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
                        if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

                        histobj.put("contaMovimento", contaMovimento);
                        ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


                    }else{
                        if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FORNECEDOR")) {
                            if(cabecalhoNaoEncontrada){
                                txtFornecedor.append("Codigo");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Fornecedor/Cliente");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Duplicata");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Data");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Valor bruto");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Valor liquido");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Banco");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Obs:");
                                txtFornecedor.append("\r\n");
                                cabecalhoNaoEncontrada = false;
                            }
                            String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                            String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);


                            jDescricaoDupl.put("NOMEORIGEM",     ttMov.nomeOrigem);
                            jDescricaoDupl.put("DOCUMENTO",      ttMov.documento);
                            jDescricaoDupl.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                            jDescricaoDupl.put("VALORFINAL",  valorFinal);
                            jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);

                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(jDescricaoDupl.optString("NOMEORIGEM"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(jDescricaoDupl.optString("DOCUMENTO"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(jDescricaoDupl.optString("VALORFINAL").replaceAll("\\.",","));
                            txtFornecedor.append(";");
                            txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.nomePortador);
                            txtFornecedor.append(";");
                            txtFornecedor.append("Duplicata nao encontrada no Fiscal ");
                            txtFornecedor.append("\r\n");


                            geraFiscal = true;
                            loteFiscal = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                            continue;

                        }
                    }
                }
            }
            boolean ctFiscal = false;
            if(ttMov.tipoLancamento.contains("PAGAR")	&& ttMov.contaDebito.toUpperCase().contains("FISCAL")) ctFiscal = true;
            if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.contaCredito.toUpperCase().contains("FISCAL")) ctFiscal = true;

            dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
            contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");

            if(contaMovimento.toUpperCase().contains("FISCAL") || ctFiscal) {
                contaMovimento = contaTemp;
                if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
                if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

                histobj.put("contaMovimento", contaMovimento);
                ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            }

            if (!contaMovimento.equals("")){

                ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
                if (ttP == null) {

                    ttP  = new ttPlano();
                    ttP.descricaoPlano = "";
                    ttP.contaAnalitica = "";

                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO,CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                            .fields("DESCRICAOPLANO,CONTAANALITICA")
                            .param(codEmpresa)
                            .param(contaMovimento)
                            .queryUnique();

                    if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
                        dbIOCont.insert("IO_PLANOCONTA")
                                .fields("CODEMPRESA,CONTACONTABIL")
                                .param(codEmpresa)
                                .param(contaMovimento)
                                .execute();
                    } else {
                        ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
                        ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
                    }
                    ttP.contaContabil     = contaMovimento;
                    mapaPlano.put(contaMovimento,ttP);


                }
            }
            //Tratamento para inverter conta em lencamento simples feito para JBSOFTWARE
            if (roteiroCRM.optString("erpContabilidade").contains("JBSOFTWARE")){
                if(ttMov.contaDebito.contains("INVERTE") && !ttMov.contaCredito.contains("INVERTE")) ttMov.contaCredito = ttMov.contaCredito+ "INVERTE";
                if(!ttMov.contaDebito.contains("INVERTE") && ttMov.contaCredito.contains("INVERTE")) ttMov.contaDebito = ttMov.contaDebito+ "INVERTE";
            }

            chave = ttMov.chave;
            //chave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            String testeChave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
            if(!testeChave.toUpperCase().contains("ACUMULAANTES") && !testeChave.toUpperCase().contains("ACUMULARANTES")) chave = testeChave;

            if(chave.length() > 180) chave = cutString(chave, 0, 179);

            chave = chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";
            ttMov.chave = ttMov.chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";

            apagaStatus = true;
            String keyAc = chave;

            ttMovimentoPadrao ttMov3       = (ttMovimentoPadrao)mapaOficial.get(keyAc);
            if (ttMov3  == null) {
                ttMov3                = new ttMovimentoPadrao(ttMov);
                ttMov3.valorDesconto   = 0;
                ttMov3.valorJuros      = 0;
                ttMov3.valorDocumento  = 0;
                ttMov3.valorMulta      = 0;
                ttMov3.documento       = "";
            }
            if (ttMov3.documento.equals("")) {
                ttMov3.documento         = ttMov.documento;
            } else ttMov3.documento = ttMov3.documento + ", " + ttMov.documento;

            ttMov3.valorDesconto     = ttMov3.valorDesconto   + ttMov.valorDesconto;
            ttMov3.valorDocumento    = ttMov3.valorDocumento  + ttMov.valorDocumento;
            ttMov3.valorMulta        = ttMov3.valorMulta      + ttMov.valorMulta;
            ttMov3.valorJuros        = ttMov3.valorJuros      + ttMov.valorJuros;
            ttMov3.chave = chave;

            if (!ttMov.chave.equals(chave)) ttMov3.contador = 3;

            // for?a lancamento aberto no FB software
            if (roteiroCRM.optString("erpContabilidade").contains("JBSOFTWARE")) ttMov3.contador = 3;

            mapaVariavel.put(key,ttMov);
            mapaOficial.put(keyAc,ttMov3);

            ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
            if (ttLot       == null) {
                ttLot       = new ttLote();
                ttLot.lote  = ttMov.lote;
            }
            mapaLote.put(ttMov.lote,ttLot);

            if(ttMov.tipoPlanilha.contains("EXTRATO") || ttMov.tipoPlanilha.contains("CARTAO")){
                if(roteiroCRMPrincipal.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;
            }else if(roteiroCRM.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;

            if  ((ttMov.valorJuros > 0 || ttMov.valorDesconto > 0 || ttMov.valorMulta > 0 || ttMov3.contador == 3) && !ttMov.tipoPlanilha.equals("NAO LER")) {
                chave = chave.replaceAll("CTB","CTBPORT");
                key = chave;
                ttMovimentoPadrao ttMov2       = (ttMovimentoPadrao)mapaOficial.get(key);
                if (ttMov2  == null) {
                    ttMov2                = new ttMovimentoPadrao(ttMov);
                    ttMov2.contador        = 0;
                    ttMov2.valorDesconto   = 0;
                    ttMov2.valorJuros      = 0;
                    ttMov2.valorDocumento  = 0;
                    ttMov2.valorMulta      = 0;
                }
                ttMov2.tipoMovimento     = "CTBPORT";
                ttMov2.valorDesconto     = ttMov2.valorDesconto   + ttMov.valorDesconto;
                ttMov2.valorMulta        = ttMov2.valorMulta      + ttMov.valorMulta;
                ttMov2.valorJuros        = ttMov2.valorJuros      + ttMov.valorJuros;
                ttMov2.chave             = chave;
                ttMov2.chaveExtrato      = "";
                ttMov2.documento         = ttMov3.documento;
                ttMov2.classificacao     = ttMov.classificacao;
                ttMov2.valorDocumento    = ttMov2.valorDocumento + ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta;
                ttMov2.contador          = ttMov2.contador + ttMov3.contador;
                if(tipoLancamento.contains("PAGAR")){
                    ttMov2.naturezaContabil  = "C";
                    ttMov2.contaDebito       = "";
                    ttMov2.contaCredito      = ttMov.contaCredito;
                }
                if(tipoLancamento.contains("RECEBER")){
                    ttMov2.naturezaContabil  = "D";
                    ttMov2.contaDebito       = ttMov.contaDebito;
                    ttMov2.contaCredito      = "";
                }
                ttMov2.historico = getHistoricoPortador(contaPortador, ttMov2.historico, ttMov2.tipoLancamento, ttMov2.documento, ttMov2.nomeOrigem, histobj);
                String tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem, histobj);
                if(!tratarDiv.equals("")){
                    String filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                    if(tratarDiv.contains("FORNECEDOR"))    ttMov3.historico = cutString(ttMov3.historico,0,"Filial:") + "Filial:"+filial;
                    if(tratarDiv.contains("JUROS"))         ttMov3.historicoJuros = cutString(ttMov3.historico,0,"Filial:") + "Filial:"+filial;
                    if(tratarDiv.contains("MULTA"))         ttMov3.historicoMulta = cutString(ttMov3.historico,0,"Filial:") + "Filial:"+filial;
                    if(tratarDiv.contains("PORTADOR"))      ttMov2.historico = cutString(ttMov2.historico,0,"Filial:") + "Filial:"+filial;
                    if(tratarDiv.contains("DESCONTO"))      ttMov2.historicoDesconto = cutString(ttMov2.historico,0,"Filial:") + "Filial:"+filial;
                }

                mapaOficial.put(key,ttMov2);
                ttMov3.classificacao = ttMov2.classificacao;
                mapaOficial.put(keyAc,ttMov3);
            }
        }


        //-------------------------------------------------------------------------
        // GERA OS ARQUICOS PARA BAIXA DE DUPLICATAS -- FISCAL
        //-------------------------------------------------------------------------
        if (geraFiscal) {

            String auxExtencao = ".txt";
            if(roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) auxExtencao = ".csv";
            String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal + auxExtencao;
            FileWriter writer = new FileWriter(filename);
            writer.writeNewFile(txtFiscal.toString());

            loteFiscal = loteFiscal.replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");

            filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal + ".csv";
            writer = new FileWriter(filename);
            writer.writeNewFile(txtFornecedor.toString());
        }


        //-------------------------------------------------------------------------
        //--- DESABILITAR AQUI SOMENTE SE O BANCO DE DADOS CONTIVER TABELA IO_RAZAO
        //-------------------------------------------------------------------------


        StringBuilder ResumoTxt = new StringBuilder();
        String rn = "\r\n";
        ResumoTxt = new StringBuilder();
        ResumoTxt.append("");
        ResumoTxt.append(rn);

        ResumoTxt.append("STATUS;");
        ResumoTxt.append("DATA;TIPO DATA;");
        ResumoTxt.append("VALOR;");
        ResumoTxt.append("DOCUMENTO;");
        ResumoTxt.append("CLIENTE/FORNECEDOR;");
        ResumoTxt.append("PORTADOR;");
        ResumoTxt.append("COMPLEMENTO01;");
        ResumoTxt.append("COMPLEMENTO02;");
        ResumoTxt.append("COMPLEMENTO03;");
        ResumoTxt.append("COMPLEMENTO04;");
        ResumoTxt.append("COMPLEMENTO05;");
        ResumoTxt.append("COMPLEMENTO06;;CTA DEBITO ENCONTRADA;CTA CREDITO ENCONTRADA;REGRA CONTA CRM;HISTORICO;REGRA HISTORICO;;");
        ResumoTxt.append("DATA;");
        ResumoTxt.append("DEBITO;");
        ResumoTxt.append("CLASS DEB;");
        ResumoTxt.append("NOME CONTA;");
        ResumoTxt.append("CREDITO;");
        ResumoTxt.append("CLASS CRED;");
        ResumoTxt.append("NOME CONTA;");
        ResumoTxt.append("VALOR;");
        ResumoTxt.append("HISTORICO;");
        ResumoTxt.append("ORIGEM");

        StringBuilder txtDePara = new StringBuilder();

        txtDePara.append("DATA;VALOR;FORNECEDOR/CLIENTE;PORTADOR;CONTA DEBITO;CONTACREDITO;DOCUMENTO;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;C.CUSTO;ARQUIVO");
        txtDePara.append("\r\n");

        mapaVariavel		= new HashMap();

        if (apagaStatus) {
            jStatus = new JSONObject();
            putStatus(dirName, "", jStatus, logger);
        }

        // =======================================================================================
        // * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base
        // =======================================================================================


        Iterator itLote = mapaLote.keySet().iterator();
        while (itLote.hasNext()) {

            String key = (String)itLote.next();
            ttLote ttLot = (ttLote)mapaLote.get(key);
            lote = ttLot.lote;

            try {
                if (dbIOCont != null) {
                    dbIOCont.closeConnection();
                    dbIOCont = null;
                }
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                        .where("LOTE=?")
                        .param(lote)
                        .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }
        }

        contRegra = -1;
        Iterator it = mapaOficial.keySet().iterator();
        while (it.hasNext()) {
            String chaveExtrato     = "";

            String key = (String)it.next();
            ttMovimentoPadrao ttMov = new ttMovimentoPadrao();
            try {
                ttMov = (ttMovimentoPadrao)mapaOficial.get(key);
            }
            catch (Exception xx) { continue;}

            if (ttMov.tipoPlanilha.equals("NAO LER")) continue;


            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                if(tipoLancamento.contains("PAGAR") && ttMov.debitoCredito.equals("EXTRATO-CREDITO")) continue;
                if(tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.equals("EXTRATO-DEBITO"))  continue;

            }
            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) continue;
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) continue;

            ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();

            contRegra++;
            int restoLinha = 0;
            restoLinha = (contRegra % 100);
            if (restoLinha == 0) putStatus(dirName, "04--Etapa 4 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);

            if(tipoLancamento.contains("PAGAR")){
                ttMov.naturezaContabil = "D";
                if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "C";
            }
            if(tipoLancamento.contains("RECEBER")){
                ttMov.naturezaContabil = "C";
                if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "D";
            }

            JSONObject extratoEmpresa = new JSONObject();


            // CASO A LINHA DO EXTATO JA TENHA SIDO LIDA PELA PLANILHA DE PAGAMENTOS, DEVE SER IGNORADA
            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                chaveExtrato = ttMov.chaveExtrato;

                extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? ")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato + "%")
                        .queryUnique();

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    if (extratoEmpresa.has("EXTRATOLIDO")) {

                        double extratoLido = extratoEmpresa.optDouble("EXTRATOLIDO");

                        if (extratoLido == 1) continue;

                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(1)
                                .param(chaveExtrato)
                                .execute();

                    }
                }

            }


            // -----------------------------------------------------------------------------------------------------------
            // COMPARA COM RAZAO APENAS QUANDO O NOME DO ARQUIVO CONTIVER OTTIMIZZA, ASSIM FICA MAIS RAPIDA A INTEGRACAO
            // QUANDO O CLIENTE FINAL ESTIVER RODANDO.
            // -----------------------------------------------------------------------------------------------------------

            if (!ttMov.tipoMovimento.equals("CTBPORT") && ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) {

                String tipoData = "MOVIMENTO";

                comparaRazao = true;


                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Date dataMovimentoDateMenosUm= new Date();
                Date dataMovimentoDateMenosDois= new Date();
                Date dataMovimentoDateMenosTres= new Date();
                Date dataMovimentoDateMaisUm= new Date();
                Date dataMovimentoDateMaisDois= new Date();
                Date dataMovimentoDateMaisTres= new Date();

                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres = cal.getTime();

                if (ttMov.valorDocumento == 0) continue;

                String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                valorFinal = valorFinal.replaceAll("\\.",",");

                JSONArray registro = new JSONArray();

                for (int xx = 0;xx<5;xx++) {
                    try {
                        Date dataLeitura = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                        if (xx ==1) {dataLeitura = dataMovimentoDateMaisUm; tipoData = "D+1";}
                        if (xx ==2) {dataLeitura = dataMovimentoDateMenosUm; tipoData = "D-1";}
                        if (xx ==3) {dataLeitura = dataMovimentoDateMaisDois; tipoData = "D+2";}
                        if (xx ==4) {dataLeitura = dataMovimentoDateMenosDois; tipoData = "D-2";}

                        registro = dbIOCont.sql("SELECT CONTADEBITO,CONTACREDITO,HISTORICO FROM IO_RAZAO WHERE CODEMPRESA = ? AND DATAMOVIMENTO = ? AND VALORDOCUMENTO = ?")
                                .fields("CONTADEBITO,CONTACREDITO,HISTORICO")
                                .param(codEmpresa)
                                .param(dataLeitura)
                                .param(ttMov.valorDocumento)
                                .query();

                        if (registro != null && registro.length() > 0) break;
                    }
                    catch (Exception xx) {
                        break;
                    }
                }



                JSONObject histobj = new JSONObject();
                ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01, histobj);
                ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02, histobj);
                ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03, histobj);
                ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04, histobj);
                ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05, histobj);
                ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06, histobj);
                ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07, histobj);
                ttMov.complemento08 = getReplaceTermos("complemento09", ttMov.complemento08, histobj);
                ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09, histobj);
                ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10, histobj);
                ttMov.nomeOrigem = getReplaceTermos("nomeOrigem", ttMov.nomeOrigem, histobj);
                ttMov.documento = getReplaceTermos("documento", ttMov.documento, histobj);
                ttMov.nomePortador = getReplaceTermos("nomePortador", ttMov.nomePortador, histobj);

                histobj.put("nomeOrigem", ttMov.nomeOrigem); histobj.put("documento", ttMov.documento);
                histobj.put("complemento01", ttMov.complemento01); histobj.put("complemento02", ttMov.complemento02);
                histobj.put("complemento03", ttMov.complemento03); histobj.put("complemento04", ttMov.complemento04);
                histobj.put("complemento05", ttMov.complemento05); histobj.put("complemento06", ttMov.complemento06);
                histobj.put("complemento07", ttMov.complemento07); histobj.put("complemento08", ttMov.complemento08);
                histobj.put("complemento09", ttMov.complemento09); histobj.put("complemento10", ttMov.complemento10);
                histobj.put("dataMovimento", ttMov.dataMovimento); histobj.put("mesAnoAnterior", mesAnoAnterior);
                histobj.put("mesAno2Anterior", mesAno2Anterior); histobj.put("mesAnoAtual", mesAnoAtual);
                histobj.put("nomePortador", ttMov.nomePortador); histobj.put("contaMovimento", contaMovimento);
                histobj.put("contaPortador", contaPortador); histobj.put("contaDebito", "");
                histobj.put("contaCredito", ""); histobj.put("contaJuros", ttMov.contaJuros);
                histobj.put("contaDesconto", ttMov.contaDesconto); histobj.put("contaMulta", ttMov.contaMulta);
                histobj.put("centroCusto", ttMov.centroCusto); histobj.put("valorDocumento", ttMov.valorDocumento);
                histobj.put("valorJuros", ttMov.valorJuros); histobj.put("valorDesconto", ttMov.valorDesconto);
                histobj.put("valorMulta", ttMov.valorMulta); histobj.put("codFilial", ttMov.codFilial);
                histobj.put("tipoPlanilha", ttMov.tipoPlanilha); histobj.put("numeroAba", ttMov.abaPlanilha);

                String contaPrincipal = "";
                String contraSecundaria = "";

                if (tipoLancamento.contains("PAGAR")) {
                    contaPrincipal = ttMov.contaDebito;
                    contraSecundaria = ttMov.contaCredito;

                }
                if (tipoLancamento.contains("RECEBER")) {
                    contaPrincipal = ttMov.contaCredito;
                    contraSecundaria = ttMov.contaDebito;
                }

                regraContaMovimento = getRegraContaMovimento(contaPrincipal, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
                regraHistorico = getRegraHistoricoRegra(contaPrincipal, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

                if (registro != null && registro.length() > 0) {
                    for (int t=0; t<registro.length(); t++) {

                        JSONObject recMov = registro.optJSONObject(t);
                        String contaDebitoRazao = recMov.optString("CONTADEBITO");
                        String contaCreditoRazao = recMov.optString("CONTACREDITO");
                        String historicoRazao = recMov.optString("HISTORICO");

                        String descricaoCredito = "";
                        String descricaoDebito = "";
                        String classificacaoDebito = "";
                        String classificacaoCredito = "";

                        JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                                .fields("DESCRICAOPLANO,CONTAANALITICA")
                                .param(codEmpresa)
                                .param(contaDebitoRazao)
                                .queryUnique();

                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                        }
                        if (descricaoPlano != null && descricaoPlano.has("CONTAANALITICA")) {
                            classificacaoDebito = descricaoPlano.optString("CONTAANALITICA");
                        }

                        descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                                .fields("DESCRICAOPLANO,CONTAANALITICA")
                                .param(codEmpresa)
                                .param(contaCreditoRazao)
                                .queryUnique();

                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoCredito = descricaoPlano.optString("DESCRICAOPLANO");
                        }
                        if (descricaoPlano != null && descricaoPlano.has("CONTAANALITICA")) {
                            classificacaoCredito = descricaoPlano.optString("CONTAANALITICA");
                        }

                        ResumoTxt.append("\r\n");

                        if (registro.length() == 1) ResumoTxt.append("ENCONTRADO;");
                        if (registro.length() > 1) ResumoTxt.append("REPETIDO;");
                        ResumoTxt.append(ttMov.dataMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(tipoData);
                        ResumoTxt.append(";");
                        ResumoTxt.append(valorFinal);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.documento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomeOrigem);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomePortador);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento01);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento02);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento03);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento04);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento05);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.complemento06);
                        ResumoTxt.append(";;");

                        ResumoTxt.append(ttMov.contaDebito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.contaCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(regraContaMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.historico);
                        ResumoTxt.append(";");
                        ResumoTxt.append(regraHistorico);
                        ResumoTxt.append(";;");

                        ResumoTxt.append(ttMov.dataMovimento);
                        ResumoTxt.append(";");
                        ResumoTxt.append(contaDebitoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(classificacaoDebito);
                        ResumoTxt.append(";");


                        ResumoTxt.append(descricaoDebito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(contaCreditoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(classificacaoCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(descricaoCredito);
                        ResumoTxt.append(";");
                        ResumoTxt.append(valorFinal);
                        ResumoTxt.append(";");
                        ResumoTxt.append(historicoRazao);
                        ResumoTxt.append(";");
                        ResumoTxt.append(ttMov.nomeArquivo);
                        ResumoTxt.append(";");

                        objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                        objetoRoteiro.put("CHAVE", ttMov.chave + contaDebitoRazao);

                        objetoRoteiro.put("contaCreditoRazao", contaCreditoRazao);
                        objetoRoteiro.put("contaDebitoRazao", contaDebitoRazao);
                        objetoRoteiro.put("historicoRazao", historicoRazao);
                        objetoRoteiro.put("regraConta", regraContaMovimento);
                        objetoRoteiro.put("regraHistorico", regraHistorico);
                        objetoRoteiro.put("codigoHistorico", "");

                        objetoRoteiro.put("classificacaoDebito", classificacaoDebito);
                        objetoRoteiro.put("classificacaoCredito", classificacaoDebito);
                        objetoRoteiro.put("descricaoDebito", descricaoDebito);
                        objetoRoteiro.put("descricaoCredito", descricaoCredito);



                        if(ttMov.tipoMovimento.equals("CTB")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);
                    }
                }
                else {
                    ResumoTxt.append("\r\n");
                    ResumoTxt.append("NAO ENCONTRADO;");
                    ResumoTxt.append(ttMov.dataMovimento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(tipoData);
                    ResumoTxt.append(";");
                    ResumoTxt.append(valorFinal);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.documento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.nomeOrigem);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.nomePortador);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento01);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento02);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento03);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento04);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento05);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.complemento06);
                    ResumoTxt.append(";;");

                    ResumoTxt.append(ttMov.contaDebito);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.contaCredito);
                    ResumoTxt.append(";");
                    ResumoTxt.append(regraContaMovimento);
                    ResumoTxt.append(";");
                    ResumoTxt.append(ttMov.historico);
                    ResumoTxt.append(";");
                    ResumoTxt.append(regraHistorico);
                    ResumoTxt.append(";;");
                    ResumoTxt.append(ttMov.nomeArquivo);
                    ResumoTxt.append(";");
                    objetoRoteiro = getObjetoRoteiro(ttMov, objetoRoteiro, logger);
                    if(ttMov.tipoMovimento.equals("CTB")) insertIORoteiro(dbIOCont, objetoRoteiro, logger);

                }
            }

            if(tipoLancamento.contains("PAGAR")){

                if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "C";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "D";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "C";
                if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
            }
            if(tipoLancamento.contains("RECEBER")){
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "D";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "C";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "D";
                if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
            }

            if (roteiroCRM.optString("erpContabilidade").contains("DOMINIO")) {
                if(tipoLancamento.contains("PAGAR")){

                    if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
                    if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
                    if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
                    if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

                    if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
                    if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
                }
                if(tipoLancamento.contains("RECEBER")){
                    if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
                    if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
                    if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
                    if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

                    if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
                    if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
                }
            }

            String classificacaoFinal = classificacao + ttMov.classificacao + "01";

            if ((classificacao.startsWith("X") || roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) && ttMov.tipoMovimento.equals("CTBPORT")) { continue;}


            if (classificacao.startsWith("X")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", ttMov.tipoMovimento);
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("CONTADEBITO", ttMov.contaDebito);
                js.put("CONTACREDITO", ttMov.contaCredito);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave  + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");

                if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
                if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
                criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);

                //records.put(js);
                if (!ttMov.centroCusto.equals("")) {

                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("CONTADEBITO", ttMov.contaDebito);
                    rec3.put("CONTACREDITO", ttMov.contaCredito);
                    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");

                    recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
                    criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);

                    //records.put(rec3);
                }
                continue;
            }

            String classJur = "";
            String classDes = "";
            String classMul = "";

            if(tipoLancamento.contains("PAGAR")){
                if(classificacao.startsWith("C") || classificacao.startsWith("V")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
                    classDes = classificacao + ttMov.classificacao + "02";
                    classJur = classificacao + ttMov.classificacao + "04";
                    classMul = classificacao + ttMov.classificacao + "05";
                }
                if(classificacao.startsWith("D")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    classDes = classificacao + ttMov.classificacao + "05";
                    classJur = classificacao + ttMov.classificacao + "02";
                    classMul = classificacao + ttMov.classificacao + "03";
                }
            }


            if(tipoLancamento.contains("RECEBER")){
                if(classificacao.startsWith("D") || classificacao.startsWith("V")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
                    classDes = classificacao + ttMov.classificacao + "02";
                    classJur = classificacao + ttMov.classificacao + "04";
                    classMul = classificacao + ttMov.classificacao + "05";
                }
                if(classificacao.startsWith("C")){
                    if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
                    if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                    classDes = classificacao + ttMov.classificacao + "05";
                    classJur = classificacao + ttMov.classificacao + "02";
                    classMul = classificacao + ttMov.classificacao + "03";
                }
            }



            if (ttMov.tipoMovimento.equals("CTBPORT")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTBPORT");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTBPORT");
                js.put("CLASSIFICACAO", classificacaoFinal);

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                }

                recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBPORT");
                if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
                if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
                criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBPORT", js);

                //records.put(js);
            }
            if (ttMov.tipoMovimento.equals("CTB")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTB");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                    if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTACREDITO", ttMov.contaCredito);
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                    if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTADEBITO", ttMov.contaDebito);

                }

                recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");
                if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
                if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
                criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);

                //records.put(js);
                if (!ttMov.centroCusto.equals("")) {
                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("CONTADEBITO", ttMov.contaDebito);
                    rec3.put("CONTACREDITO", ttMov.contaCredito);
                    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");

                    recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
                    criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);
                    //records.put(rec3);
                }


                if (ttMov.valorJuros > 0)  {
                    classificacaoFinal = classJur;
                    JSONObject jsJUR = new JSONObject(js.toString());
                    jsJUR.put("LOTE", ttMov.lote);
                    jsJUR.put("CNPJEMPRESA", cnpjEmpresa);
                    jsJUR.put("DOCUMENTO", ttMov.documento);
                    jsJUR.put("CODEMPRESA", ttMov.codEmpresa);
                    jsJUR.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsJUR.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsJUR.put("TIPOMOVIMENTO", "CTBJUR");
                    jsJUR.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsJUR.put("HISTORICO", ttMov.historicoJuros);
                    jsJUR.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsJUR.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsJUR.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsJUR.put("VALORJUROS", ttMov.valorJuros);
                    jsJUR.put("VALORMULTA", ttMov.valorMulta);
                    jsJUR.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsJUR.put("CENTROCUSTO", ttMov.centroCusto);
                    jsJUR.put("NATUREZACONTABIL", "D");
                    jsJUR.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsJUR.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsJUR.put("SERIE", ttMov.serie);
                    jsJUR.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsJUR.put("CHAVE", ttMov.chave + "-CTBJUR");
                    jsJUR.put("CLASSIFICACAO", classificacaoFinal);

                    jsJUR.put("COMPLEMENTO01", ttMov.complemento01);
                    jsJUR.put("COMPLEMENTO02", ttMov.complemento02);
                    jsJUR.put("COMPLEMENTO03", ttMov.complemento03);
                    jsJUR.put("COMPLEMENTO04", ttMov.complemento04);
                    jsJUR.put("COMPLEMENTO05", ttMov.complemento05);
                    jsJUR.put("COMPLEMENTO06", ttMov.complemento06);
                    jsJUR.put("COMPLEMENTO07", ttMov.complemento07);
                    jsJUR.put("COMPLEMENTO08", ttMov.complemento08);
                    jsJUR.put("COMPLEMENTO09", ttMov.complemento09);
                    jsJUR.put("COMPLEMENTO10", ttMov.complemento10);
                    jsJUR.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsJUR.put("CONTADEBITO",  ttMov.contaJuros);
                        jsJUR.put("CONTACREDITO", "");
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTACREDITO", ttMov.contaCredito);

                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsJUR.put("CONTADEBITO",  "");
                        jsJUR.put("CONTACREDITO", ttMov.contaJuros);
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTADEBITO", ttMov.contaDebito);

                    }


                    recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJUR");
                    criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJUR", jsJUR);


                    //records.put(jsJUR);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsJUR.toString());
                        rec3.put("CONTADEBITO", ttMov.contaDebito);
                        rec3.put("CONTACREDITO", ttMov.contaCredito);
                        rec3.put("TIPOMOVIMENTO", "CTBJURCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBJURCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBJURCC");
                        recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJURCC");
                        criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJURCC", rec3);
                        // records.put(rec3);
                    }
                }
                if (ttMov.valorDesconto > 0)  {
                    classificacaoFinal = classDes;
                    JSONObject jsDES = new JSONObject(js.toString());
                    jsDES.put("LOTE", ttMov.lote);
                    jsDES.put("CNPJEMPRESA", cnpjEmpresa);
                    jsDES.put("DOCUMENTO", ttMov.documento);
                    jsDES.put("CODEMPRESA", ttMov.codEmpresa);
                    jsDES.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsDES.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsDES.put("TIPOMOVIMENTO", "CTBDES");
                    jsDES.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsDES.put("HISTORICO", ttMov.historicoDesconto);
                    jsDES.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsDES.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsDES.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsDES.put("VALORJUROS", ttMov.valorJuros);
                    jsDES.put("VALORMULTA", ttMov.valorMulta);
                    jsDES.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsDES.put("CENTROCUSTO", ttMov.centroCusto);
                    jsDES.put("NATUREZACONTABIL", "C");
                    jsDES.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsDES.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsDES.put("SERIE", ttMov.serie);
                    jsDES.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsDES.put("CHAVE", ttMov.chave + "-CTBDES");
                    jsDES.put("CLASSIFICACAO", classificacaoFinal);

                    jsDES.put("COMPLEMENTO01", ttMov.complemento01);
                    jsDES.put("COMPLEMENTO02", ttMov.complemento02);
                    jsDES.put("COMPLEMENTO03", ttMov.complemento03);
                    jsDES.put("COMPLEMENTO04", ttMov.complemento04);
                    jsDES.put("COMPLEMENTO05", ttMov.complemento05);
                    jsDES.put("COMPLEMENTO06", ttMov.complemento06);
                    jsDES.put("COMPLEMENTO07", ttMov.complemento07);
                    jsDES.put("COMPLEMENTO08", ttMov.complemento08);
                    jsDES.put("COMPLEMENTO09", ttMov.complemento09);
                    jsDES.put("COMPLEMENTO10", ttMov.complemento10);
                    jsDES.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsDES.put("CONTADEBITO", "");
                        jsDES.put("CONTACREDITO", ttMov.contaDesconto);
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTADEBITO", ttMov.contaCredito);

                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsDES.put("CONTADEBITO",  ttMov.contaDesconto);
                        jsDES.put("CONTACREDITO", "");
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTACREDITO", ttMov.contaDebito);

                    }


                    recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDES");
                    criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDES", jsDES);

                    //records.put(jsDES);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsDES.toString());
                        rec3.put("CONTADEBITO", ttMov.contaDebito);
                        rec3.put("CONTACREDITO", ttMov.contaCredito);
                        rec3.put("TIPOMOVIMENTO", "CTBDESCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBDESCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBDESCC");
                        recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDESCC");
                        criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDESCC", rec3);
                        // records.put(rec3);
                    }
                }
                if (ttMov.valorMulta > 0)  {
                    classificacaoFinal = classMul;
                    JSONObject jsMUL = new JSONObject(js.toString());
                    jsMUL.put("LOTE", ttMov.lote);
                    jsMUL.put("CNPJEMPRESA", cnpjEmpresa);
                    jsMUL.put("DOCUMENTO", ttMov.documento);
                    jsMUL.put("CODEMPRESA", ttMov.codEmpresa);
                    jsMUL.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsMUL.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsMUL.put("TIPOMOVIMENTO", "CTBMUL");
                    jsMUL.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsMUL.put("HISTORICO", ttMov.historicoMulta);
                    jsMUL.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsMUL.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsMUL.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsMUL.put("VALORJUROS", ttMov.valorJuros);
                    jsMUL.put("VALORMULTA", ttMov.valorMulta);
                    jsMUL.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsMUL.put("CENTROCUSTO", ttMov.centroCusto);
                    jsMUL.put("NATUREZACONTABIL", "D");
                    jsMUL.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsMUL.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsMUL.put("SERIE", ttMov.serie);
                    jsMUL.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsMUL.put("CHAVE", ttMov.chave + "-CTBMUL");
                    jsMUL.put("CLASSIFICACAO", classificacaoFinal);

                    jsMUL.put("COMPLEMENTO01", ttMov.complemento01);
                    jsMUL.put("COMPLEMENTO02", ttMov.complemento02);
                    jsMUL.put("COMPLEMENTO03", ttMov.complemento03);
                    jsMUL.put("COMPLEMENTO04", ttMov.complemento04);
                    jsMUL.put("COMPLEMENTO05", ttMov.complemento05);
                    jsMUL.put("COMPLEMENTO06", ttMov.complemento06);
                    jsMUL.put("COMPLEMENTO07", ttMov.complemento07);
                    jsMUL.put("COMPLEMENTO08", ttMov.complemento08);
                    jsMUL.put("COMPLEMENTO09", ttMov.complemento09);
                    jsMUL.put("COMPLEMENTO10", ttMov.complemento10);
                    jsMUL.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsMUL.put("CONTADEBITO",  ttMov.contaMulta);
                        jsMUL.put("CONTACREDITO", "");
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTACREDITO", ttMov.contaCredito);

                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsMUL.put("CONTADEBITO",  "");
                        jsMUL.put("CONTACREDITO", ttMov.contaMulta);
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTADEBITO", ttMov.contaDebito);

                    }


                    recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMUL");
                    criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMUL", jsMUL);

                    //records.put(jsMUL);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsMUL.toString());
                        rec3.put("CONTADEBITO", ttMov.contaDebito);
                        rec3.put("CONTACREDITO", ttMov.contaCredito);
                        rec3.put("TIPOMOVIMENTO", "CTBMULCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBMULCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBMULCC");
                        recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMULCC");
                        criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMULCC", rec3);
                        //records.put(rec3);
                    }
                }
            }
        }

        if (apagaExtrato) {
            dbIOCont.delete("IO_EXTRATO")
                    .where("CODEMPRESA=?")
                    .param(codEmpresa)
                    .execute();
        }

        // resumo comparativo com razao

        if (comparaRazao) {

            String filenameRazao = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_APOS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +".csv";
            FileWriter writerRazao = new FileWriter(filenameRazao);
            writerRazao.writeNewFile(ResumoTxt.toString());
        }


        //-------------------------------------------------------------------------------------
        // GERA ARQUIVO COM CONTAS NAO ENCONTRADAS
        //-------------------------------------------------------------------------------------
        String filename = backupDirName + "/ARQUIVO_APOIO_" + tipoLancamento + ".csv";
        // Cria o arquivo de DE-PARA FORNECEDOR
        FileWriter writer = new FileWriter(filename);
        writer.writeNewFile(txtDePara.toString());


        Iterator ite = mapaLote.keySet().iterator();
        while (ite.hasNext()) {

            String key = (String)ite.next();
            ttLote ttLot = (ttLote)mapaLote.get(key);
            // =======================================================================================
            // * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base *
            // =======================================================================================
            lote = ttLot.lote;

            ultimoJS = new JSONObject();
            ultimoJS.put("LOTE", lote);
            ultimoJS.put("DOCUMENTO", "");
            ultimoJS.put("CODEMPRESA", codEmpresa);
            ultimoJS.put("NOMEEMPRESA", nomeEmpresa);
            ultimoJS.put("DATAMOVIMENTO", "");
            ultimoJS.put("TIPOMOVIMENTO", "");
            ultimoJS.put("TIPOLANCAMENTO", "");
            ultimoJS.put("CONTADEBITO", "LOTE_ENCERRADO");
            ultimoJS.put("CONTACREDITO", "LOTE_ENCERRADO");
            ultimoJS.put("HISTORICO", "");
            ultimoJS.put("VALORLIQUIDACAO", 0);
            ultimoJS.put("VALORDOCUMENTO", 0);
            ultimoJS.put("VALORDESCONTO", 0);
            ultimoJS.put("VALORJUROS", 0);
            ultimoJS.put("VALORMULTA", 0);
            ultimoJS.put("NOMEPORTADOR", "");
            ultimoJS.put("CENTROCUSTO", "");
            ultimoJS.put("NATUREZACONTABIL", "");
            ultimoJS.put("NOMEORIGEM", "");
            ultimoJS.put("CPFCNPJ", "");
            ultimoJS.put("SERIE", "");
            ultimoJS.put("STATUSMOVIMENTO", 0);
            ultimoJS.put("CHAVE","LOTE_ENCERRADO " + lote );
            ultimoJS.put("CLASSIFICACAO", "LOTE_ENCERRADO");
            ultimoJS.put("STATUSMOVIMENTO", 1);
            records.put(ultimoJS);
            // Resumo Planilha
            try {
                String dirName1 = dirName.substring(0, dirName.lastIndexOf("/"))+"/DePara/";
                File file = new File(dirName1);
                try {
                    String diretorio = dirName1;
                    File file2 = new File(diretorio);
                    File[] files = file2.listFiles();
                    if (FileUtil.dirHasFiles(diretorio)) {
                        for (File fl: files) {
                            if (fl.isFile()){
                                if(fl.getName().contains(lote) && fl.getName().toLowerCase().endsWith(".csv") && !fl.getName().startsWith("OK_") ){
                                    // ELIMINA ARQUIVO IMPORTADO
                                    file = new File(dirName1);
                                    if (file.exists()){
                                        FileUtil.deleteFile(dirName1+fl.getName());
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception ee) {
                    logger.logError(ee);
                }
            }catch (Exception e) {
                logger.logError(e);
            }
        }

    } catch (Exception ee) {
        logger.logError("EndpointA: ", ee);
    } finally {
        if (dbIOCont != null) {
            dbIOCont.closeConnection();
        }
    }

    return records;
}

class ttLote {
    public String lote;
    public ttLote(){}
    public ttLote(ttLote tt){
        lote=tt.lote;
    }
}




class ttJuros {
    public String documento;
    public double valorJur;
    public int valorLido;
    public ttJuros(){}
    public ttJuros(ttJuros ttJ){
        documento = ttJ.documento;
        valorLido = ttJ.valorLido;
        valorJur  = ttJ.valorJur;
    }
}

class ttDesconto {
    public String documento;
    public double valorDesc;
    public int valorLido;
    public ttDesconto(){}
    public ttDesconto(ttDesconto ttD){
        documento  = ttD.documento;
        valorDesc  = ttD.valorDesc;
        valorLido  = ttD.valorLido;
    }
}


class ttPlano {
    public String contaContabil;
    public String descricaoPlano;
    public String contaAnalitica;
    public ttPlano(){}
    public ttPlano(ttPlano ttP){
        contaContabil = ttP.contaContabil;
        descricaoPlano = ttP.descricaoPlano;
        contaAnalitica = ttP.contaAnalitica;
    }
}

class ttFornecedor {
    public String nomeOrigem;
    public String contaMovimento;
    public ttFornecedor(){}
    public ttFornecedor(ttFornecedor ttF){
        nomeOrigem 	 = ttF.nomeOrigem;
        contaMovimento = ttF.contaMovimento;
    }
}


public void criaMovimento(DataBase dbIO, JSONObject recordRec, String chave, JSONObject js) {

    if (recordRec != null)  {
        try {
            updateMovimento(dbIO, js);
        } catch (Exception eUpdateMovimento) {
            logger.logError("EndpointB: Erro ao Atualizar Movimento", eUpdateMovimento);
        }
    } else {
        try {
            insertMovimento(dbIO, js);
        } catch (Exception eInsertMovimento) {
            logger.logError("EndpointB: Erro ao fazer insert no Movimento", eInsertMovimento);
        }
    }
}


public int getIndiceRoteiro(String nomeCampo, JSONObject roteiroIndice) {

    int validaCampo = -1;
    try {
        if (!roteiroIndice.optString(nomeCampo).equals("")) {
            try {
                validaCampo = Integer.parseInt(roteiroIndice.optString(nomeCampo).replaceAll("@","").trim());
            }
            catch (Exception xx) { validaCampo = -1;}
        }
    }
    catch (Exception xx) {validaCampo = -1;}
    return  validaCampo;

}












































































//## CODIGO GERADO A PARTIR DAS REGRAS NO SALESFORCE ##
//## NAO ALTERAR DAQUI ATE O FINAL DO SCRIPT!!!!     ##
public JSONObject getRoteiro() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2019-117036");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q1C000007zOmqQAE");
    js.put("idContabilidade", "a091500001N2Rvm");
    js.put("CnpjContabilidade", "77.812.196/0001-43");
    js.put("CnpjEmpresa", "09.476.234/0001-84");
    js.put("fornecedor", "3");
    js.put("dataMovimento", "0");
    js.put("portador", "NOME DO ARQUIVO");
    js.put("documentoNF", "2");
    js.put("valorDocumento", "4");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "1");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("valorAlternativo", "");
    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("dataFake", "");

    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "4697");
    js.put("contaFixaJuros", "2680");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "TRUE");
    js.put("cruzaExtrato", "FALSE");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "TRUE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "FALSE");
    js.put("ValidaFornecedorFiscal", "0");
    js.put("Integracao_contratos", "false");
    js.put("Usa_Filial_Questor", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "CARTOES");
    js.put("Planilhas_Padroes", "Extrato_Itau_Excel;Extratos OFX;Extrato_CEF_TXT;Extrato_Cef_Excel;Extrato_Itau_Txt;Extrato_CEF_PDF;Extrato_ITAU_PDF;Extrato_ItauConsolidado_PDF;Extrato_Stone_Excel;Extrato_Stone_PDF;Extrato_Cef_Html;FrancesinhaItau_PDF;Francesinha_Cef_PDF;FrancesinhaItau_CSV");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".CSV - TEXTO EXPORTADO EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");

    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("especiaisBaixaFiscal", "");
    js.put("Arredonda", "false");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");
    js.put("Coluna_Valor_Duplicata_Dominio", "9");
    js.put("delimitadorDoArquivo", "");
    js.put("agrupaArquivos", "FALSE");

    js.put("X001_ROB", "");
    js.put("X002_Despesas", "");
    js.put("X003_Despesas_Detalhe", "");
    js.put("X004_Geracao_Caixa_Mes", "");
    js.put("X005_Geracao_Caixa_Acumulado", "");
    js.put("X006_Despesas_sobre_Faturamento", "");
    js.put("X007_Lucro", "");
    js.put("X008_Deducoes_Receitas", "");
    js.put("X009_CMV", "");
    js.put("X010_CPV", "");
    js.put("X011_CSP", "");
    js.put("X012_Indicador", "");
    js.put("X013_Indicador", "");
    js.put("X014_Indicador", "");
    js.put("X015_Indicador", "");
    js.put("X016_Indicador", "");
    js.put("X017_Indicador", "");
    js.put("X018_Indicador", "");
    js.put("X019_Indicador", "");
    js.put("X020_Indicador", "");
    js.put("X021_Indicador", "");

    js.put("X015_Label", "");
    js.put("X016_Label", "");
    js.put("X017_Label", "");
    js.put("X018_Label", "");
    js.put("X019_Label", "");
    js.put("X020_Label", "");
    js.put("Email_Logo", "FINANCEIRO@AGROFRONTEIRA.COM.BR;COMERCIAL@AGROFRONTEIRA.COM.BR;LETICIA.C@DEPAULACONTADORES.COM.BR;DERSEUDEPAULA@DEPAULACONTADORES.COM.BR;SUPORTE@OTTIMIZZA.COM.BR");
    js.put("BuscaCnpjCRM", "FALSE");
    js.put("Idioma", "PORTUGUES");
    js.put("Ordem_dos_Indicadores", "");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Gera_LOG", "false");
    js.put("Gera_LOG_PARAMETROS", "");

    return js;
}

public JSONObject getRoteiroAAABIQBENEFICIOS2() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0766238");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q6R000007KVpsQAG");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "77.812.196/0001-43");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "0");
    js.put("dataMovimento", "2");
    js.put("portador", "-1");
    js.put("documentoNF", "");
    js.put("valorDocumento", "4");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "BIQ BENEFICIOS");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "4*#0,0557;15+#0,79");
    js.put("Rotulos_Para_Valores_Extras", "TARIFA1;TARIFA2");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroAAACARTAO_MERCADOPAGO3() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2024-03124935");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q6R000007KVpsQAG");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "77.812.196/0001-43");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "20");
    js.put("dataMovimento", "0");
    js.put("portador", "-1");
    js.put("documentoNF", "");
    js.put("valorDocumento", "21");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "CARTAO MERCADO PAGO");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "16-21");
    js.put("Rotulos_Para_Valores_Extras", "TARIFA");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroAAACARTAO_MERCADOPAGO14() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2024-05135883");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q6R000007KVpsQAG");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "77.812.196/0001-43");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "20");
    js.put("dataMovimento", "0");
    js.put("portador", "-1");
    js.put("documentoNF", "");
    js.put("valorDocumento", "21");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "TRUE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "CARTAO MERCADO PAGO 1");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "22+23;24");
    js.put("Rotulos_Para_Valores_Extras", "TARIFA;FRETE");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroAAACARTAO_MERCADOPAGO25() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2024-05136169");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q6R000007KVpsQAG");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "77.812.196/0001-43");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "10");
    js.put("dataMovimento", "0");
    js.put("portador", "-1");
    js.put("documentoNF", "");
    js.put("valorDocumento", "11");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "8");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "TRUE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "CARTAO MERCADO PAGO 2");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "12+13;14");
    js.put("Rotulos_Para_Valores_Extras", "TARIFA;FRETE");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroAAACARTAO_MERCADOPAGO36() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2024-05136173");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q6R000007KVpsQAG");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "77.812.196/0001-43");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "15");
    js.put("dataMovimento", "0");
    js.put("portador", "-1");
    js.put("documentoNF", "");
    js.put("valorDocumento", "16");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "TRUE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "CARTAO MERCADO PAGO 3");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "17+18;19");
    js.put("Rotulos_Para_Valores_Extras", "TARIFA;FRETE");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroAAACARTAO_VRBENEFICIOS7() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2024-04131281");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q6R000007KVpsQAG");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "77.812.196/0001-43");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "PRODUTO");
    js.put("dataMovimento", "DATA");
    js.put("portador", "-1");
    js.put("documentoNF", "");
    js.put("valorDocumento", "VALOR");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "TRUE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "VR BENEFICIOS");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "5*#0,0685");
    js.put("Rotulos_Para_Valores_Extras", "TARIFA");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroAAAIFOOD8() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0766227");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q6R000007KVpsQAG");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "77.812.196/0001-43");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "-1");
    js.put("dataMovimento", "DATA");
    js.put("portador", "-1");
    js.put("documentoNF", "");
    js.put("valorDocumento", "10");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "NOME DO CARTAO");
    js.put("complemento02", "VENDA OU TARIFA");
    js.put("complemento03", "FORMAS DE PAGAMENTO");
    js.put("complemento04", "TIPO DE LANCAMENTO");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "TRUE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "IFOOD");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "FORMAS DE PAGAMENTO");
    js.put("Rotulo_Complemento_04", "TIPO DE LANCAMENTO");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroAAASHOPEE9() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0766247");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q6R000007KVpsQAG");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "77.812.196/0001-43");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "11");
    js.put("dataMovimento", "9");
    js.put("portador", "-1");
    js.put("documentoNF", "");
    js.put("valorDocumento", "40");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "SHOPEE");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "35");
    js.put("Rotulos_Para_Valores_Extras", "TARIFA");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroAANETSHOES_CARTAO10() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2024-04131751");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q6R000007KVpsQAG");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "77.812.196/0001-43");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "1");
    js.put("dataMovimento", "4");
    js.put("portador", "0");
    js.put("documentoNF", "");
    js.put("valorDocumento", "7");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "2");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "CARTAO NETSHOES DE PAULA");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "8*#0,21;9");
    js.put("Rotulos_Para_Valores_Extras", "TAXA;TAXA FRETE");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroAAVENDAS_GRANITO11() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2024-02118163");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q6R000007KVpsQAG");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "77.812.196/0001-43");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "4");
    js.put("dataMovimento", "1");
    js.put("portador", "-1");
    js.put("documentoNF", "");
    js.put("valorDocumento", "11");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "VENDAS GRANITO 2");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroAPADRAOITAUAUTMAIS12() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2024-01112508");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q6R000007KVpsQAG");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "77.812.196/0001-43");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "-1");
    js.put("dataMovimento", "1");
    js.put("portador", "#COLUNA B CONTEM (CONTA:) COLUNA C");
    js.put("documentoNF", "");
    js.put("valorDocumento", "2");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "ITAU AUT MAIS");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "2;8");
    js.put("Rotulos_Para_Valores_Extras", "APLICACAO;RENDIMENTO BRUTO");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroAVENDAS_GRANITO13() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-11102472");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q6R000007KVpsQAG");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "77.812.196/0001-43");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "2");
    js.put("dataMovimento", "0");
    js.put("portador", "-1");
    js.put("documentoNF", "");
    js.put("valorDocumento", "3");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "VENDAS GRANITO");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "6");
    js.put("Rotulos_Para_Valores_Extras", "TAXA");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroAVENDAS_TICKET14() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-11102459");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q6R000007KVpsQAG");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "77.812.196/0001-43");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "23");
    js.put("dataMovimento", "5");
    js.put("portador", "-1");
    js.put("documentoNF", "");
    js.put("valorDocumento", "30");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "VENDAS TICKET");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroBAPADRAOMOVIMENTOQUESTOREMPREC115() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0986187");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q6R000007KVpsQAG");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "77.812.196/0001-43");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "3");
    js.put("dataMovimento", "#COLUNA B CONTEM(DATA DE RECEBIMENTO)");
    js.put("portador", "7");
    js.put("documentoNF", "2");
    js.put("valorDocumento", "11");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "5");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "7");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "true");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "PADRAO QUESTOR EMP. RECEBIMENTOS");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "ORIGEM");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public JSONObject getRoteiroPADRAOMOVIMENTOOMIEREC116() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2022-0118830");
    js.put("idRoteiro", "a0A1C00000t9Rzs");
    js.put("idEmpresa", "a0q6R000007KVpsQAG");
    js.put("idContabilidade", "a096R00002eOoeD");
    js.put("CnpjContabilidade", "00.000.000/0000-07");
    js.put("CnpjEmpresa", "77.812.196/0001-43");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "5");
    js.put("dataMovimento", "3");
    js.put("portador", "CONTA CORRENTE");
    js.put("documentoNF", "13");
    js.put("valorDocumento", "-1");
    js.put("valorJuros", "JUROS");
    js.put("valorDesconto", "DESCONTO");
    js.put("valorMulta", "MULTA");
    js.put("valorPagamento", "RECEBIDO");
    js.put("complemento01", "CATEGORIA");
    js.put("complemento02", "PROJETO");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Depaula");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Agroexportadoranova");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "true");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "PADRAO OMIE RECEBIMENTOS");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "CATEGORIA");
    js.put("Rotulo_Complemento_02", "PROJETO");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public String getTipoPlanilha(String line, String tipoPlanilha, String nomeArquivo, JSONObject jDadosObj) {
    boolean achouTipo = true;
    achouTipo = false;
    if (achouTipo) return "";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("BIQ")) achouTipo = true;
    if (achouTipo) return "AAABIQBENEFICIOS2";
    achouTipo = true;
    String [] campos3 = "FECHA DE COMPRA;FECHA DE ACREDITACION;FECHA DE LIBERACION DEL DINERO".split(";");
    for (int x=0;x<campos3.length;x++) {
        if (!line.contains(campos3[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "AAACARTAO_MERCADOPAGO3";
    achouTipo = true;
    String [] campos4 = "DATA DA COMPRA (DATE_CREATED)|MOTIVOS DE RECUSA (REJECTION_CAUSES)|PLATAFORMA DE PAGAMENTO (SUB_UNIT)|CANAL DE VENDA (BUSINESS_UNIT)".split(";");
    for (int x=0;x<campos4.length;x++) {
        if (!line.contains(campos4[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "AAACARTAO_MERCADOPAGO14";
    achouTipo = true;
    String [] campos5 = "DATA DA COMPRA (DATE_CREATED);DATA DE CREDITACAO (DATE_APPROVED);DATA DE LIBERACAO DO DINHEIRO (DATE_RELEASED)|CODIGO DO PRODUTO (ITEM_ID)|DESCRICAO DA OPERACAO (REASON)".split(";");
    for (int x=0;x<campos5.length;x++) {
        if (!line.contains(campos5[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "AAACARTAO_MERCADOPAGO25";
    achouTipo = true;
    String [] campos6 = "DATA DA COMPRA;NOME DA CONTRAPARTE;APELIDO;PRODUTO;STATUS;DETALHE;VALOR DO PRODUTO".split(";");
    for (int x=0;x<campos6.length;x++) {
        if (!line.contains(campos6[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "AAACARTAO_MERCADOPAGO36";
    achouTipo = true;
    String [] campos7 = "CNPJ|DATA INICIAL|DATA FINAL".split(";");
    for (int x=0;x<campos7.length;x++) {
        if (!line.contains(campos7[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "AAACARTAO_VRBENEFICIOS7";
    achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("IFOOD")) achouTipo = true;
    if (achouTipo) return "AAAIFOOD8";
    achouTipo = true;
    String [] campos9 = "ID DO PEDIDO;STATUS DO PEDIDO;STATUS DA DEVOLUCAO / REEMBOLSO;NUMERO DE RASTREAMENTO;OPCAO DE ENVIO".split(";");
    for (int x=0;x<campos9.length;x++) {
        if (!line.contains(campos9[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "AAASHOPEE9";
    achouTipo = true;
    String [] campos10 = "TIPO DO PEDIDO;DESCONTO TOTAL;SITE ORIGEM DA VENDA;ID SELLER;NOME DO PRODUTO".split(";");
    for (int x=0;x<campos10.length;x++) {
        if (!line.contains(campos10[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "AANETSHOES_CARTAO10";
    achouTipo = true;
    String [] campos11 = "ID GRANITO|DATA E HORA|PDV|TIPO|BANDEIRA|CARTAO|MEIO DE CAPTURA|DOCUMENTO VINCULADO|COD. AUTORIZACAO|COD. TRANSACAO|ID PEDIDO E-COMMERCE|VALOR|STATUS".split(";");
    for (int x=0;x<campos11.length;x++) {
        if (!line.contains(campos11[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "AAVENDAS_GRANITO11";
    achouTipo = true;
    String [] campos12 = "EXTRATO CONSOLIDADO MENSAL APLIC AUT MAIS".split(";");
    for (int x=0;x<campos12.length;x++) {
        if (!line.contains(campos12[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "APADRAOITAUAUTMAIS12";
    achouTipo = true;
    String [] campos13 = "DATA PAGAMENTO;DATA TRANSACAO;TIPO;VALOR BRUTO;QTDE DE PARCELAS;NUMERO DA PARCELA;TAXA;TAXA ANTECIPACAO;VALOR LIQUIDO;ID TRANSACAO;MEIO DE CAPTURA;PEDIDO".split(";");
    for (int x=0;x<campos13.length;x++) {
        if (!line.contains(campos13[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "AVENDAS_GRANITO13";
    achouTipo = true;
    String [] campos14 = "NUMERO;DATA CORTE;DATA CRED/DEB;COD. ESTABELECIMENTO;DATA TRANSACAO;DATA POSTAGEM".split(";");
    for (int x=0;x<campos14.length;x++) {
        if (!line.contains(campos14[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "AVENDAS_TICKET14";
    achouTipo = true;
    String [] campos15 = "RELATORIO DE RECEBIMENTOS POR DATA DE RECEBIMENTO".split(";");
    for (int x=0;x<campos15.length;x++) {
        if (!line.contains(campos15[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "BAPADRAOMOVIMENTOQUESTOREMPREC115";
    achouTipo = true;
    String [] campos16 = "MINHA EMPRESA (NOME FANTASIA);MINHA EMPRESA (RAZAO SOCIAL);MINHA EMPRESA (CNPJ);DATA DE CREDITO OU DEBITO (NO EXTRATO);CNPJ/CPF;CLIENTE;TAGS".split(";");
    for (int x=0;x<campos16.length;x++) {
        if (!line.contains(campos16[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "PADRAOMOVIMENTOOMIEREC116";
    achouTipo = true;
    return tipoPlanilha;
}
public String getConta(String nomeOrigem, String documento, String nomePortador,
                       String complemento01, String complemento02, String complemento03, 
                       String nomeArquivo, String codCentroCusto) {
    String conta = "";
    String complemento04 = "";
    String complemento05 = "";
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("NUTRICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "7317";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("NUTRICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("NUTRICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TOTAL")) {
        conta = "IGNORAR";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("NUTRICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PRE-DATADO")) {
        conta = "ignorar";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("NUTRICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("NUTRICARD")) {
        conta = "ignorar";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TICKET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TICKET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "7241";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMERICANEXPRESS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "4948";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMERICANEXPRESS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BOTICARIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "verJaqueline";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BOTICARIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SODEXO")) {
        conta = "7212";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966";
    }
    return conta;
}
public String getConta09(String contaMovimento, String nomeOrigem, String documento, 
                       String nomePortador, String complemento01, String complemento02, 
                       String complemento03, String nomeArquivo, String codCentroCusto) {
    String conta = contaMovimento;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("NUTRICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "7317INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("NUTRICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("NUTRICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TOTAL")) {
        conta = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("NUTRICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PRE-DATADO")) {
        conta = "ignorar";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("NUTRICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("NUTRICARD")) {
        conta = "ignorar";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TICKET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TICKET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "7241";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMERICANEXPRESS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "4948INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMERICANEXPRESS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BOTICARIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "verJaquelineINVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BOTICARIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SODEXO")) {
        conta = "7212INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966INVERTE";
    }
    return conta;
}
public String getContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("XXXBAPADRAOMOVIMENTOQUESTOREMPREC1") &&
        StringUtil.removeSpecialCharsToUC(complemento06).equals("")) { //ROT-2023-0986187
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("BAPADRAOMOVIMENTOQUESTOREMPREC1") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("")) { //ROT-2023-0986187
        conta = "FISCAL";
        contaMovimento = "FISCAL";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) { //ROT-2023-1093778
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) { //ROT-2023-1097268
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("APADRAOITAUAUTMAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) { //ROT-2024-01112508
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) { //ROT-2024-05135883
        conta = "8065";
        contaMovimento = "8065";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE")) { //ROT-2024-05135883
        conta = "8064";
        contaMovimento = "8064";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) { //ROT-2024-05135883
        conta = "5";
        contaMovimento = "5";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) { //ROT-2024-05136169
        conta = "8065";
        contaMovimento = "8065";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE")) { //ROT-2024-05136169
        conta = "8064";
        contaMovimento = "8064";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) { //ROT-2024-05136169
        conta = "5";
        contaMovimento = "5";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) { //ROT-2024-05136173
        conta = "8065";
        contaMovimento = "8065";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE")) { //ROT-2024-05136173
        conta = "8064";
        contaMovimento = "8064";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) { //ROT-2024-05136173
        conta = "5";
        contaMovimento = "5";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SUMUP") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("DEPOSIT")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CIELO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("CANCELADA")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("LOJA")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPERACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("STONE") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("VOUCHER")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAGSEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELADA")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SIPAG") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("-")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAMENTO DE PEDIDO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ESTORNO POR CANCELAMENTO DE PEDIDO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SUMUP") &&
        !StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("EFETUADO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "8064INVERTE";
        contaMovimento = "8064INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2023-0140950
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SIPAG") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "7221INVERTE";
        contaMovimento = "7221INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SIPAG") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) { //ROT-2017-111943
        conta = "7221INVERTE";
        contaMovimento = "7221INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SIPAG") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "7221";
        contaMovimento = "7221";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD")) { //ROT-2017-111943
        conta = "5";
        contaMovimento = "5";
        return conta;
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TESTE")) {
        conta = "TESTE";
        contaMovimento = "TESTE";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TESTE")) {
        conta = "TESTE";
        contaMovimento = "TESTE";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TESTE")) {
        conta = "TESTE";
        contaMovimento = "TESTE";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("DEPOSITO")) {
        conta = "5";
        contaMovimento = "5";
    }
    if (complemento01.contains("RESSARCIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "5339";
        contaMovimento = "5339";
    }
    if (nomeOrigem.contains("TESTE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "TESTE";
        contaMovimento = "TESTE";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TESTE")) {
        conta = "TESTE";
        contaMovimento = "TESTE";
    }
    if (nomeOrigem.contains("TESTE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "TESTE";
        contaMovimento = "TESTE";
    }
    if (complemento01.contains("DEPOSITO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "5";
        contaMovimento = "5";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("RESSARCIMENTO")) {
        conta = "5339";
        contaMovimento = "5339";
    }
    if (nomeOrigem.contains("VENDA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EXPORTACAO")) {
        conta = "5166";
        contaMovimento = "5166";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CREDITO") && nomeOrigem.contains("CIELO")) {
        conta = "4949";
        contaMovimento = "4949";
    }
    if (nomeOrigem.contains("DEBITO") && nomeOrigem.contains("CIELO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "5340";
        contaMovimento = "5340";
    }
    if (nomeOrigem.contains("CIELO") && nomeOrigem.contains("PARC") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4949";
        contaMovimento = "4949";
    }
    if (complemento01.contains("EXPORTA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("VENDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "5166";
        contaMovimento = "5166";
    }
    if (nomeOrigem.contains("EXPORTACAO") && nomeOrigem.contains("VENDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "5166";
        contaMovimento = "5166";
    }
    if (nomeOrigem.contains("CIELO") && nomeOrigem.contains("CREDITO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4949";
        contaMovimento = "4949";
    }
    if (nomeOrigem.contains("CIELO") && nomeOrigem.contains("DEBITO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "5340";
        contaMovimento = "5340";
    }
    if (nomeOrigem.contains("PARC") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CIELO")) {
        conta = "4949";
        contaMovimento = "4949";
    }
    if (complemento01.contains("VENDA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("EXPORTA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "5166";
        contaMovimento = "5166";
    }
    if (nomeOrigem.contains("EXPORTACAO") && tipoPlanilha.contains("MOVIMENTO") && nomePortador.contains("CAIXA") && nomeOrigem.contains("VENDA")) {
        conta = "5166";
        contaMovimento = "5166";
    }
    if (nomeOrigem.contains("EXPORTACAO") && nomePortador.contains("CAIXA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VENDA")) {
        conta = "5166";
        contaMovimento = "5166";
    }
    if (nomeOrigem.contains("VENDA") && nomeOrigem.contains("EXPORTACAO") && nomePortador.contains("CAIXA") && nomePortador.contains("ECONOMICA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "20153";
        contaMovimento = "20153";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VENDA") && nomeOrigem.contains("EXPORTACAO") && nomePortador.contains("CAIXA") && nomePortador.contains("ECONOMICA")) {
        conta = "20153";
        contaMovimento = "20153";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("TAXA") && complemento01.contains("IMPOSTO")) {
        conta = "4939";
        contaMovimento = "4939";
    }
    if (complemento01.contains("IMPOSTO") && complemento01.contains("TAXA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4939";
        contaMovimento = "4939";
    }
    if (nomeOrigem.contains("IMPOSTOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TAXAS") && nomeOrigem.contains("E")) {
        conta = "4940";
        contaMovimento = "4940";
    }
    if (nomeOrigem.contains("IMPOSTOS") && nomeOrigem.contains("E") && nomeOrigem.contains("TAXAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4940";
        contaMovimento = "4940";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CIELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "5";
        contaMovimento = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CIELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "6751";
        contaMovimento = "6751";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("STONE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "5";
        contaMovimento = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("STONE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "7237";
        contaMovimento = "7237";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("PAGSEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "7425INVERTE";
        contaMovimento = "7425INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("PAGSEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) { //ROT-2017-111943
        conta = "7425INVERTE";
        contaMovimento = "7425INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("PAGSEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("PAGSEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("SAFRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "7447INVERTE";
        contaMovimento = "7447INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("SAFRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SUMUP") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "7490INVERTE";
        contaMovimento = "7490INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SUMUP") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SUMUP") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FALH")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CABAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "7221INVERTE";
        contaMovimento = "7221INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CABAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ALELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "8062INVERTE";
        contaMovimento = "8062INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ALELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AIQFOME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "8048INVERTE";
        contaMovimento = "8048INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AIQFOME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) { //ROT-2020-058689
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) { //ROT-2021-0311455
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BIQBENEFICIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "8226INVERTE";
        contaMovimento = "8226INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BIQBENEFICIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PRODUTO")) { //ROT-2017-111943
        conta = "10046INVERTE";
        contaMovimento = "10046INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIO")) { //ROT-2017-111943
        conta = "10046INVERTE";
        contaMovimento = "10046INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIO")) { //ROT-2017-111943
        conta = "4253INVERTE";
        contaMovimento = "4253INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("QUANT") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RESERV")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "10099INVERTE";
        contaMovimento = "10099INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) { //ROT-2021-0512280
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("YAPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "10051INVERTE";
        contaMovimento = "10051INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("YAPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) { //ROT-2021-0612672
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BONUS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "10069INVERTE";
        contaMovimento = "10069INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BONUS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IPIRANGA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "10043INVERTE";
        contaMovimento = "10043INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IPIRANGA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TOTAL")) { //ROT-2017-111943
        conta = "10047INVERTE";
        contaMovimento = "10047INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COMISSAO")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FRETE")) { //ROT-2017-111943
        conta = "10047INVERTE";
        contaMovimento = "10047INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PRECO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ITEM")) { //ROT-2017-111943
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "8071INVERTE";
        contaMovimento = "8071INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("REEMBOLSO")) { //ROT-2017-111943
        conta = "8071";
        contaMovimento = "8071";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("REEMBOLSO")) { //ROT-2017-111943
        conta = "4966";
        contaMovimento = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVADO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MELHOR ENVIO")) { //ROT-2017-111943
        conta = "8071";
        contaMovimento = "8071";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVADO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FACEBOOK")) { //ROT-2017-111943
        conta = "8071";
        contaMovimento = "8071";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RECEBIMENTO")) { //ROT-2017-111943
        conta = "8064INVERTE";
        contaMovimento = "8064INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("GESTAO")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENVIO")) { //ROT-2017-111943
        conta = "4253INVERTE";
        contaMovimento = "4253INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SAQUE")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RENDIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRUTO")) { //ROT-2017-111943
        conta = "8064INVERTE";
        contaMovimento = "8064INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RENDA")) { //ROT-2017-111943
        conta = "5118INVERTE";
        contaMovimento = "5118INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEVOLUCAO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COMPRA")) { //ROT-2017-111943
        conta = "5INVERTE";
        contaMovimento = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) { //ROT-2020-079383
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REDECARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RECEBIMENTO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REDECARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "5005INVERTE";
        contaMovimento = "5005INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REDECARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "5";
        contaMovimento = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO")) { //ROT-2017-111943
        conta = "5INVERTE";
        contaMovimento = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "8244";
        contaMovimento = "8244";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GATEWAY")) { //ROT-2017-111943
        conta = "10001INVERTE";
        contaMovimento = "10001INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("CONCEITO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("GATEWAY")) { //ROT-2017-111943
        conta = "10001INVERTE";
        contaMovimento = "10001INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PICPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "8062INVERTE";
        contaMovimento = "8062INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PICPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PICPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) { //ROT-2021-0612733
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BIN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO SICREDI - BIN")) { //ROT-2017-111943
        conta = "7440INVERTE";
        contaMovimento = "7440INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BIN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO SICREDI - BIN")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("INFINITE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "8358INVERTE";
        contaMovimento = "8358INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("INFINITE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) { //ROT-2022-0421802
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GATEWAY")) { //ROT-2017-111943
        conta = "10001INVERTE";
        contaMovimento = "10001INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) { //ROT-2022-1033321
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENVIO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FULFILLMENT")) { //ROT-2017-111943
        conta = "4253INVERTE";
        contaMovimento = "4253INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENVIO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FULFILLMENT")) { //ROT-2017-111943
        conta = "4253";
        contaMovimento = "4253";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RECEBIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DESCONTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CONTRAPARTE")) { //ROT-2017-111943
        conta = "2893";
        contaMovimento = "2893";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PIX")) { //ROT-2017-111943
        conta = "8064";
        contaMovimento = "8064";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAYLY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAYLY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "8064INVERTE";
        contaMovimento = "8064INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("GESTAO")) { //ROT-2017-111943
        conta = "8064";
        contaMovimento = "8064";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CROSS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DOCKING")) { //ROT-2017-111943
        conta = "4545INVERTE";
        contaMovimento = "4545INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CROSS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DOCKING")) { //ROT-2017-111943
        conta = "4545";
        contaMovimento = "4545";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).equals("PAGAMENTO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAABIQBENEFICIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) { //ROT-2017-111943
        conta = "8226";
        contaMovimento = "8226";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAABIQBENEFICIOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) { //ROT-2017-111943
        conta = "5";
        contaMovimento = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAASHOPEE") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) { //ROT-2017-111943
        conta = "5";
        contaMovimento = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAASHOPEE") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) { //ROT-2017-111943
        conta = "10092";
        contaMovimento = "10092";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("YAPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("VENDA")) { //ROT-2017-111943
        conta = "10051INVERTE";
        contaMovimento = "10051INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("YAPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AVENDAS_GRANITO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) { //ROT-2017-111943
        conta = "5";
        contaMovimento = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AVENDAS_GRANITO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TAXA")) { //ROT-2017-111943
        conta = "8503";
        contaMovimento = "8503";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AZUL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "5";
        contaMovimento = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AZUL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "10013";
        contaMovimento = "10013";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("GRANITO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "5";
        contaMovimento = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("GRANITO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "8503";
        contaMovimento = "8503";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) { //ROT-2024-03128218
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "7021INVERTE";
        contaMovimento = "7021INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) { //ROT-2017-111943
        conta = "7021INVERTE";
        contaMovimento = "7021INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_VRBENEFICIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) { //ROT-2017-111943
        conta = "7316INVERTE";
        contaMovimento = "7316INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_VRBENEFICIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) { //ROT-2017-111943
        conta = "5";
        contaMovimento = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "7212";
        contaMovimento = "7212";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA")) { //ROT-2017-111943
        conta = "4966INVERTE";
        contaMovimento = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO")) { //ROT-2017-111943
        conta = "4966";
        contaMovimento = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("XXXBAPADRAOMOVIMENTOQUESTOREMPREC1") &&
        StringUtil.removeSpecialCharsToUC(complemento06).equals("")) { //ROT-2023-0986187
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) { //ROT-2023-1093778
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) { //ROT-2023-1097268
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("APADRAOITAUAUTMAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) { //ROT-2024-01112508
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) { //ROT-2024-05135883
        conta = "8065";
        contaMovimento = "8065";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE")) { //ROT-2024-05135883
        conta = "8064";
        contaMovimento = "8064";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) { //ROT-2024-05135883
        conta = "5";
        contaMovimento = "5";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) { //ROT-2024-05136169
        conta = "8065";
        contaMovimento = "8065";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE")) { //ROT-2024-05136169
        conta = "8064";
        contaMovimento = "8064";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) { //ROT-2024-05136169
        conta = "5";
        contaMovimento = "5";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) { //ROT-2024-05136173
        conta = "8065";
        contaMovimento = "8065";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE")) { //ROT-2024-05136173
        conta = "8064";
        contaMovimento = "8064";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) { //ROT-2024-05136173
        conta = "5";
        contaMovimento = "5";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SUMUP") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("DEPOSIT")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CIELO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("CANCELADA")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("LOJA")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPERACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("STONE") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("VOUCHER")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAGSEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELADA")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SIPAG") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("-")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAMENTO DE PEDIDO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ESTORNO POR CANCELAMENTO DE PEDIDO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SUMUP") &&
        !StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("EFETUADO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2023-0140950
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD")) { //ROT-2017-111943
        conta = "5";
        contaMovimento = "5";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CIELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RECEBIMENTO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("STONE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RECEBIMENTO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOIP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) { //ROT-2017-111943
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOIP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) { //ROT-2017-111943
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGUECOM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RECEBIMENTO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOOZ") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELADA")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SUMUP") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FALH")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SENFF") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RECEBIMENTO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IFOOD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) { //ROT-2017-111943
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) { //ROT-2020-058689
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) { //ROT-2021-0311455
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) { //ROT-2021-0311491
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("QUANT") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RESERV")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) { //ROT-2021-0512280
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) { //ROT-2021-0612672
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PRECO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ITEM")) { //ROT-2017-111943
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SAQUE")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) { //ROT-2020-079383
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REDECARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RECEBIMENTO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PICPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) { //ROT-2021-0612733
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) { //ROT-2022-0421802
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) { //ROT-2022-1033321
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).equals("PAGAMENTO")) { //ROT-2017-111943
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) { //ROT-2024-03128218
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    return conta;
}
public String getContaMovimento2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getRegraContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("XXXBAPADRAOMOVIMENTOQUESTOREMPREC1") &&
        StringUtil.removeSpecialCharsToUC(complemento06).equals("")) {
        conta = "Quando Tipo Planilha contem 'XXXBAPADRAOMOVIMENTOQUESTOREMPREC1', Complemento (06) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("BAPADRAOMOVIMENTOQUESTOREMPREC1") &&
        !StringUtil.removeSpecialCharsToUC(documento).equals("")) {
        conta = "Quando Tipo Planilha contem 'BAPADRAOMOVIMENTOQUESTOREMPREC1', Documento/NF nao contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'FISCAL'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'PIX ENVIADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGARME2', Complemento (06) nao contem 'PAGA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PUNTO2', Complemento (06) nao contem 'PAGO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'VALOR', Fornecedor/Cliente contem 'LIQUIDADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("APADRAOITAUAUTMAIS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) {
        conta = "Quando Tipo Planilha contem 'APADRAOITAUAUTMAIS', Complemento (05) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'AAACARTAO_MERCADOPAGO', Complemento (05) contem 'TARIFA', CONTA MOVIMENTO SERA = '8065' PORT: '4966'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE")) {
        conta = "Quando Tipo Planilha contem 'AAACARTAO_MERCADOPAGO', Complemento (05) contem 'FRETE', CONTA MOVIMENTO SERA = '8064' PORT: '4253'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) {
        conta = "Quando Tipo Planilha contem 'AAACARTAO_MERCADOPAGO', Complemento (05) contem 'EM BRANCO', CONTA MOVIMENTO SERA = '5' PORT: '8064'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'AAACARTAO_MERCADOPAGO', Complemento (05) contem 'TARIFA', CONTA MOVIMENTO SERA = '8065' PORT: '4966'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE")) {
        conta = "Quando Tipo Planilha contem 'AAACARTAO_MERCADOPAGO', Complemento (05) contem 'FRETE', CONTA MOVIMENTO SERA = '8064' PORT: '4253'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) {
        conta = "Quando Tipo Planilha contem 'AAACARTAO_MERCADOPAGO', Complemento (05) contem 'EM BRANCO', CONTA MOVIMENTO SERA = '5' PORT: '8064'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'AAACARTAO_MERCADOPAGO3', Complemento (05) contem 'TARIFA', CONTA MOVIMENTO SERA = '8065' PORT: '4966'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE")) {
        conta = "Quando Tipo Planilha contem 'AAACARTAO_MERCADOPAGO3', Complemento (05) contem 'FRETE', CONTA MOVIMENTO SERA = '8064' PORT: '4253'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) {
        conta = "Quando Tipo Planilha contem 'AAACARTAO_MERCADOPAGO3', Complemento (05) contem 'EM BRANCO', CONTA MOVIMENTO SERA = '5' PORT: '8064'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SUMUP") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("DEPOSIT")) {
        conta = "Quando Complemento (01) contem 'SUMUP', Complemento (06) contem 'DEPOSIT', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CIELO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("CANCELADA")) {
        conta = "Quando Complemento (01) contem 'CIELO', Complemento (06) contem 'CANCELADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("LOJA")) {
        conta = "Quando Tipo Planilha contem 'AAAIFOOD', Complemento (03) contem 'LOJA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OPERACAO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'PAGARME', Fornecedor/Cliente contem 'OPERACAO', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("STONE") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("VOUCHER")) {
        conta = "Quando Tipo Planilha contem 'STONE', Complemento (06) contem 'VOUCHER', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAGSEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELADA")) {
        conta = "Quando Tipo Planilha contem 'PAGSEGURO', Complemento (03) contem 'CANCELADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SIPAG") &&
        StringUtil.removeSpecialCharsToUC(complemento06).contains("-")) {
        conta = "Quando Tipo Planilha contem 'SIPAG', Complemento (06) contem '-', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAMENTO DE PEDIDO")) {
        conta = "Quando Tipo Planilha contem 'AAAIFOOD', Complemento (04) contem 'CANCELAMENTO DE PEDIDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ESTORNO POR CANCELAMENTO DE PEDIDO")) {
        conta = "Quando Tipo Planilha contem 'AAAIFOOD', Complemento (04) contem 'ESTORNO POR CANCELAMENTO DE PEDIDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SUMUP") &&
        !StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("EFETUADO")) {
        conta = "Quando Tipo Planilha contem 'SUMUP', Complemento (02) nao contem 'VENDA', Complemento (04) nao contem 'EFETUADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '8064' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '8064'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AME1', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SIPAG") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'SIPAG', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7221' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SIPAG") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "Quando Complemento (01) contem 'SIPAG', Complemento (02) contem 'VENDA', Complemento (02) contem 'DEBITO', CONTA MOVIMENTO SERA = '7221' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SIPAG") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'SIPAG', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '7221' PORT: '4966'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (04) nao contem 'PAGAMENTO', Complemento (04) nao contem 'ASSINATURA', Complemento (04) nao contem 'SAQUE', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (03) nao contem 'APROVAD', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD")) {
        conta = "Quando Tipo Planilha contem 'AAAIFOOD', CONTA MOVIMENTO SERA = '5' PORT: '7986'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CIELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RECEBIMENTO")) {
        conta = "Quando Complemento (01) contem 'CIELO', Complemento (02) contem 'RECEBIMENTO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CIELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'CIELO', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '5' PORT: '6751'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CIELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'CIELO', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '6751' PORT: '4966'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("STONE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RECEBIMENTO")) {
        conta = "Quando Complemento (01) contem 'STONE', Complemento (02) contem 'RECEBIMENTO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("STONE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'STONE', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '5' PORT: '7237'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("STONE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'STONE', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '7237' PORT: '4966'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ELAVON") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'ELAVON', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7105' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ELAVON") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "Quando Complemento (01) contem 'ELAVON', Complemento (02) contem 'VENDA', Complemento (02) contem 'DEBITO', CONTA MOVIMENTO SERA = '7104' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ELAVON") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'ELAVON', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7105'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ELAVON") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "Quando Complemento (01) contem 'ELAVON', Complemento (02) contem 'TARIFA', Complemento (02) contem 'DEBITO', CONTA MOVIMENTO SERA = '4966' PORT: '7104'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("PAGSEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Portador contem 'PAGSEGURO', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7425' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("PAGSEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "Quando Portador contem 'PAGSEGURO', Complemento (02) contem 'VENDA', Complemento (02) contem 'DEBITO', CONTA MOVIMENTO SERA = '7425' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("PAGSEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Portador contem 'PAGSEGURO', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7425'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("PAGSEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "Quando Portador contem 'PAGSEGURO', Complemento (02) contem 'TARIFA', Complemento (02) contem 'DEBITO', CONTA MOVIMENTO SERA = '4966' PORT: '7425'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'GETNET', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7021' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "Quando Complemento (01) contem 'GETNET', Complemento (02) contem 'VENDA', Complemento (02) contem 'DEBITO', CONTA MOVIMENTO SERA = '7021' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'GETNET', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7021'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "Quando Complemento (01) contem 'GETNET', Complemento (02) contem 'TARIFA', Complemento (02) contem 'DEBITO', CONTA MOVIMENTO SERA = '4966' PORT: '7021'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOIP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) {
        conta = "Quando Complemento (01) contem 'MOIP', Fornecedor/Cliente contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOIP") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'MOIP', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7424' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOIP") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "Quando Complemento (01) contem 'MOIP', Complemento (02) contem 'VENDA', Complemento (02) contem 'DEBITO', CONTA MOVIMENTO SERA = '7424' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOIP") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'MOIP', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7424'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOIP") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "Quando Complemento (01) contem 'MOIP', Complemento (02) contem 'TARIFA', Complemento (02) contem 'DEBITO', CONTA MOVIMENTO SERA = '4966' PORT: '7424'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOIP") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) {
        conta = "Quando Complemento (01) contem 'MOIP', Fornecedor/Cliente contem 'REEMBOLSO', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO-SICREDI") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("STONE")) {
        conta = "Quando Tipo Planilha contem 'EXTRATO-SICREDI', Fornecedor/Cliente contem 'STONE', CONTA MOVIMENTO SERA = '7237' PORT: '23'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGUECOM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RECEBIMENTO")) {
        conta = "Quando Complemento (01) contem 'PAGUECOM', Complemento (02) contem 'RECEBIMENTO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGUECOM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'PAGUECOM', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7440' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGUECOM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEBITO")) {
        conta = "Quando Complemento (01) contem 'PAGUECOM', Complemento (02) contem 'VENDA', Complemento (03) contem 'DEBITO', CONTA MOVIMENTO SERA = '7440' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGUECOM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'PAGUECOM', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7440'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGUECOM") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEBITO")) {
        conta = "Quando Complemento (01) contem 'PAGUECOM', Complemento (02) contem 'TARIFA', Complemento (03) contem 'DEBITO', CONTA MOVIMENTO SERA = '4966' PORT: '7440'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("SAFRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Portador contem 'SAFRA', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7447' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("SAFRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Portador contem 'SAFRA', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7447'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOOZ") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELADA")) {
        conta = "Quando Complemento (01) contem 'MOOZ', Complemento (04) contem 'CANCELADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOOZ") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'MOOZ', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '6775' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOOZ") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "Quando Complemento (01) contem 'MOOZ', Complemento (02) contem 'VENDA', Complemento (02) contem 'DEBITO', CONTA MOVIMENTO SERA = '6775' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOOZ") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'MOOZ', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '6775'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MOOZ") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "Quando Complemento (01) contem 'MOOZ', Complemento (02) contem 'TARIFA', Complemento (02) contem 'DEBITO', CONTA MOVIMENTO SERA = '4966' PORT: '6775'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SUMUP") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'SUMUP', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7490' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SUMUP") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'SUMUP', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7490'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SEMPARAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'SEMPARAR', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '10267' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SEMPARAR") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'SEMPARAR', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '10267'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("GOODCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'GOODCARD', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7242' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("GOODCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'GOODCARD', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7242'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SUMUP") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FALH")) {
        conta = "Quando Tipo Planilha contem 'SUMUP', Complemento (04) contem 'FALH', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SENFF") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RECEBIMENTO")) {
        conta = "Quando Complemento (01) contem 'SENFF', Complemento (02) contem 'RECEBIMENTO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SENFF") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'SENFF', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7248' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SENFF") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'SENFF', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7248'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("COOPER") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'COOPER', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7243' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("COOPER") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'COOPER', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7243'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("GREENCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'GREENCARD', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7247' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("GREENCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'GREENCARD', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7247'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'POLICARD', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7246' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'POLICARD', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7246'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ABRAPETITE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'ABRAPETITE', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7245' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ABRAPETITE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'ABRAPETITE', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7245'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MASTERFARMA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'MASTERFARMA', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7338' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MASTERFARMA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'MASTERFARMA', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7338'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CABAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'CABAL', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7221' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CABAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'CABAL', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7221'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CALCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'CALCARD', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7446' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CALCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'CALCARD', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7446'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IFOOD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'IFOOD', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7986' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IFOOD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'IFOOD', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BENVISA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'BENVISA', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7987' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BENVISA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'BENVISA', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7987'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TRIOCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'TRIOCARD', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7319' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TRIOCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'TRIOCARD', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7319'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("EXPORTA")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (01) contem 'VENDA', Complemento (01) contem 'EXPORTA', CONTA MOVIMENTO SERA = '5166'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IMPOSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA")) {
        conta = "Quando Complemento (01) contem 'IMPOSTO', Complemento (01) contem 'TAXA', CONTA MOVIMENTO SERA = '4939'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("VALECARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'VALECARD', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7417' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("VALECARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'VALECARD', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7417'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ALELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Tipo Planilha contem 'ALELO', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '8062' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ALELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'ALELO', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '8062'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("OPERACIONAL")) {
        conta = "Quando Complemento (01) contem 'ALELO', Complemento (02) contem 'TARIFA', Complemento (02) contem 'OPERACIONAL', CONTA MOVIMENTO SERA = '8062' PORT: '4966'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("UBER") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("EATS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'UBER', Complemento (01) contem 'EATS', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '10015' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("UBER") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("EATS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'UBER', Complemento (01) contem 'EATS', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '10015'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("UBER") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("EATS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CONTRIBUICAO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("CLIENTE")) {
        conta = "Quando Complemento (01) contem 'UBER', Complemento (01) contem 'EATS', Complemento (02) contem 'CONTRIBUICAO', Complemento (02) contem 'CLIENTE', CONTA MOVIMENTO SERA = '10015' PORT: '2893'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AIQFOME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'AIQFOME', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '8048' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AIQFOME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'AIQFOME', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '8048'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("VRALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'VRALIMENTACAO', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7316' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("VRALIMENTACAO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'VRALIMENTACAO', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7316'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'STELO', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7251' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'STELO', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7251'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DETODOS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'DETODOS', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '10005' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DETODOS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'DETODOS', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '10005'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO1', Complemento (04) nao contem 'CONFIRMED', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO2', Complemento (04) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_DETODOS', Complemento (03) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("HOTMART") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'HOTMART', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '10040' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("HOTMART") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'HOTMART', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '10040'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (04) nao contem 'COMPLETO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("VSCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'VSCARD', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '10200' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("VSCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'VSCARD', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '10200'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BIQBENEFICIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'BIQBENEFICIO', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '8226' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BIQBENEFICIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'BIQBENEFICIO', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '8226'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PRODUTO")) {
        conta = "Quando Complemento (01) contem 'AMAZON', Complemento (03) contem 'CUSTO', Complemento (03) contem 'PRODUTO', CONTA MOVIMENTO SERA = '10046' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIO")) {
        conta = "Quando Complemento (01) contem 'AMAZON', Complemento (04) contem 'ENVIO', CONTA MOVIMENTO SERA = '10046' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'AMAZON', Complemento (03) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '10046'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIO")) {
        conta = "Quando Complemento (01) contem 'AMAZON', Complemento (03) contem 'TARIFA', Complemento (04) contem 'ENVIO', CONTA MOVIMENTO SERA = '4253' PORT: '10046'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("QUANT") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("RESERV")) {
        conta = "Quando Complemento (01) contem 'AMAZON', Complemento (04) contem 'QUANT', Complemento (04) contem 'RESERV', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) {
        conta = "Quando Complemento (01) contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'REEMBOLSO', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'DINHEIRO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'VIA LOJA', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (04) nao contem 'EM BRANCO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (05) contem 'NAO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'PRATO', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '10099' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'PRATO', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '10099'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) {
        conta = "Quando Tipo Planilha contem 'PRATO', Complemento (01) contem 'PRATO', Complemento (03) nao contem 'CART', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("YAPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'YAPAY', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '10051' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("YAPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'YAPAY', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '10051'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_POLICARD', Complemento (03) contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BONUS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'BONUS', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '10069' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BONUS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'BONUS', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '10069'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IPIRANGA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'IPIRANGA', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '10043' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IPIRANGA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'IPIRANGA', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '10043'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TOTAL")) {
        conta = "Quando Complemento (01) contem 'DAFITI', Complemento (03) contem 'TOTAL', CONTA MOVIMENTO SERA = '10047' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COMISSAO")) {
        conta = "Quando Complemento (01) contem 'DAFITI', Complemento (03) contem 'COMISSAO', CONTA MOVIMENTO SERA = '4966' PORT: '10047'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FRETE")) {
        conta = "Quando Complemento (01) contem 'DAFITI', Complemento (03) contem 'FRETE', CONTA MOVIMENTO SERA = '10047' PORT: '2885'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PRECO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ITEM")) {
        conta = "Quando Complemento (01) contem 'DAFITI', Complemento (03) contem 'PRECO', Complemento (03) contem 'ITEM', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'PAYPAL', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '8071' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'PAYPAL', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '8071'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("REEMBOLSO")) {
        conta = "Quando Complemento (01) contem 'PAYPAL', Complemento (02) contem 'VENDA', Complemento (03) contem 'REEMBOLSO', CONTA MOVIMENTO SERA = '8071' PORT: '5'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("REEMBOLSO")) {
        conta = "Quando Complemento (01) contem 'PAYPAL', Complemento (02) contem 'TARIFA', Complemento (03) contem 'REEMBOLSO', CONTA MOVIMENTO SERA = '4966' PORT: '8071'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVADO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MELHOR ENVIO")) {
        conta = "Quando Complemento (01) contem 'PAYPAL', Complemento (02) contem 'VENDA', Complemento (03) contem 'PRE', Complemento (03) contem 'APROVADO', Complemento (04) contem 'MELHOR ENVIO', CONTA MOVIMENTO SERA = '8071' PORT: '4253'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVADO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FACEBOOK")) {
        conta = "Quando Complemento (01) contem 'PAYPAL', Complemento (02) contem 'VENDA', Complemento (03) contem 'PRE', Complemento (03) contem 'APROVADO', Complemento (04) contem 'FACEBOOK', CONTA MOVIMENTO SERA = '8071' PORT: '4084'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RECEBIMENTO")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'RECEBIMENTO', CONTA MOVIMENTO SERA = '8064' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("GESTAO")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'CUSTO', Complemento (03) contem 'GESTAO', CONTA MOVIMENTO SERA = '4966' PORT: '8064'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENVIO")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'TARIFA', Complemento (03) contem 'ENVIO', CONTA MOVIMENTO SERA = '4253' PORT: '8064'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("SAQUE")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'SAQUE', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RENDIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRUTO")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'RENDIMENTO', Complemento (03) contem 'BRUTO', CONTA MOVIMENTO SERA = '8064' PORT: '2893'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RENDA")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'IMPOSTO', Complemento (03) contem 'RENDA', CONTA MOVIMENTO SERA = '5118' PORT: '8064'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEVOLUCAO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COMPRA")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'DEVOLUCAO', Complemento (03) contem 'COMPRA', CONTA MOVIMENTO SERA = '5' PORT: '8064'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '2', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '3', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '4', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '5', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '6', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '7', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '8', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '9', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AIQFOME1', Fornecedor/Cliente contem 'CANCELADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REDECARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("RECEBIMENTO")) {
        conta = "Quando Complemento (01) contem 'REDECARD', Complemento (02) contem 'RECEBIMENTO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REDECARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'REDECARD', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '5005' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REDECARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'REDECARD', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '5005'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'PAGARME', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '5' PORT: '8244'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO")) {
        conta = "Quando Complemento (01) contem 'PAGARME', Complemento (02) contem 'ESTORNO', CONTA MOVIMENTO SERA = '5' PORT: '10001'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'PAGARME', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '8244' PORT: '4966'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GATEWAY")) {
        conta = "Quando Complemento (01) contem 'PAGARME', Complemento (02) contem 'ESTORNO', Fornecedor/Cliente contem 'GATEWAY', CONTA MOVIMENTO SERA = '10001' PORT: '4966'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("CONCEITO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO")) {
        conta = "Quando Complemento (01) contem 'PAGARME', Fornecedor/Cliente contem 'TRANSFERENCIA', Complemento (06) nao contem 'CONCEITO', Complemento (02) contem 'ESTORNO', CONTA MOVIMENTO SERA = 'IGNORAR'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("GATEWAY")) {
        conta = "Quando Complemento (01) contem 'PAGARME', Complemento (02) contem 'ESTORNO', Complemento (03) contem 'GATEWAY', CONTA MOVIMENTO SERA = '10001' PORT: '4966'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PICPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'PICPAY', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '8062' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PICPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'PICPAY', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '8062'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PICPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO")) {
        conta = "Quando Complemento (01) contem 'PICPAY', Complemento (04) contem 'NAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_STONE2', Complemento (04) contem 'CANCELAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BIN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO SICREDI - BIN")) {
        conta = "Quando Complemento (01) contem 'BIN', Complemento (02) contem 'VENDA', Fornecedor/Cliente nao contem 'CARTAO SICREDI - BIN', CONTA MOVIMENTO SERA = '7440' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BIN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO SICREDI - BIN")) {
        conta = "Quando Complemento (01) contem 'BIN', Complemento (02) contem 'TARIFA', Fornecedor/Cliente nao contem 'CARTAO SICREDI - BIN', CONTA MOVIMENTO SERA = '4966' PORT: '7440'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '10', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '11', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '12', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '13', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '14', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '15', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '16', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '17', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '18', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("INFINITE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'INFINITE', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '8358' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("INFINITE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'INFINITE', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '8358'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_BMGCARD', Complemento (04) contem 'NAO', Complemento (04) contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GATEWAY")) {
        conta = "Quando Complemento (01) contem 'PAGARME', Complemento (02) contem 'ESTORNO', Fornecedor/Cliente contem 'GATEWAY', CONTA MOVIMENTO SERA = '10001' PORT: '4966'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_REDECARD3', Complemento (06) nao contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENVIO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FULFILLMENT")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'CUSTO', Complemento (03) contem 'ENVIO', Complemento (03) contem 'FULFILLMENT', CONTA MOVIMENTO SERA = '4253' PORT: '8064'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENVIO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FULFILLMENT")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'CANCELAMENTO', Complemento (03) contem 'ENVIO', Complemento (03) contem 'FULFILLMENT', CONTA MOVIMENTO SERA = '4253' PORT: '8064'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RECEBIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DESCONTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CONTRAPARTE")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'RECEBIMENTO', Complemento (03) contem 'DESCONTO', Complemento (03) contem 'CONTRAPARTE', CONTA MOVIMENTO SERA = '2893' PORT: '8064'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PIX")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'TRANSFERENCIA', Complemento (03) contem 'VIA', Complemento (03) contem 'PIX', CONTA MOVIMENTO SERA = '8064' PORT: '4869'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAYLY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'PAYLY', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '8064'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAYLY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Tipo Planilha contem 'PAYLY', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '8064' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("GESTAO")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'CANCELAMENTO', Complemento (03) contem 'CUSTO', Complemento (03) contem 'GESTAO', CONTA MOVIMENTO SERA = '8064' PORT: '5'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CROSS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DOCKING")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'CUSTO', Complemento (03) contem 'CROSS', Complemento (03) contem 'DOCKING', CONTA MOVIMENTO SERA = '4545' PORT: '8064'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CROSS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DOCKING")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'CANCELAMENTO', Complemento (03) contem 'CROSS', Complemento (03) contem 'DOCKING', CONTA MOVIMENTO SERA = '4545' PORT: '8064'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).equals("PAGAMENTO")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) igual a 'PAGAMENTO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAABIQBENEFICIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'AAABIQBENEFICIOS', Complemento (05) contem 'TARIFA', CONTA MOVIMENTO SERA = '8226' PORT: '4966'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAABIQBENEFICIOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'AAABIQBENEFICIOS', Complemento (05) nao contem 'TARIFA', CONTA MOVIMENTO SERA = '5' PORT: '8226'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAASHOPEE") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'AAASHOPEE', Complemento (05) nao contem 'TARIFA', CONTA MOVIMENTO SERA = '5' PORT: '10092'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAASHOPEE") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'AAASHOPEE', Complemento (05) contem 'TARIFA', CONTA MOVIMENTO SERA = '10092' PORT: '4966'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("YAPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("VENDA")) {
        conta = "Quando Complemento (01) contem 'YAPAY', Complemento (05) contem 'VENDA', CONTA MOVIMENTO SERA = '10051' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("YAPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'YAPAY', Complemento (05) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '10051'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AVENDAS_GRANITO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) {
        conta = "Quando Tipo Planilha contem 'AVENDAS_GRANITO', Complemento (05) contem 'EM BRANCO', CONTA MOVIMENTO SERA = '5' PORT: '8503'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AVENDAS_GRANITO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TAXA")) {
        conta = "Quando Tipo Planilha contem 'AVENDAS_GRANITO', Complemento (05) contem 'TAXA', CONTA MOVIMENTO SERA = '8503' PORT: '4966'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AZUL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Tipo Planilha contem 'AZUL', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '5' PORT: '10013'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AZUL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'AZUL', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '10013' PORT: '4966'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("GRANITO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Tipo Planilha contem 'GRANITO', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '5' PORT: '8503'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("GRANITO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'GRANITO', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '8503' PORT: '4966'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_DOM1', Complemento (04) nao contem 'ENTRADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Portador contem 'GETNET', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '7021' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "Quando Portador contem 'GETNET', Complemento (02) contem 'VENDA', Complemento (02) contem 'DEBITO', CONTA MOVIMENTO SERA = '7021' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Portador contem 'GETNET', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7021'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "Quando Portador contem 'GETNET', Complemento (02) contem 'TARIFA', Complemento (02) contem 'DEBITO', CONTA MOVIMENTO SERA = '4966' PORT: '7021'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_VRBENEFICIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) {
        conta = "Quando Tipo Planilha contem 'AAACARTAO_VRBENEFICIOS', Complemento (05) contem 'EM BRANCO', CONTA MOVIMENTO SERA = '7316' PORT: '5'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_VRBENEFICIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'AAACARTAO_VRBENEFICIOS', Complemento (05) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '7316'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "Quando Tipo Planilha contem 'SODEXO', Complemento (02) contem 'VENDA', CONTA MOVIMENTO SERA = '5' PORT: '7212'";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "Quando Tipo Planilha contem 'SODEXO', Complemento (02) contem 'TARIFA', CONTA MOVIMENTO SERA = '7212' PORT: '4966'";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'TARIFA', CONTA MOVIMENTO SERA = '4966' PORT: '8064'INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO")) {
        conta = "Quando Complemento (01) contem 'MERCADOLIVRE', Complemento (03) contem 'TARIFA', Complemento (03) contem 'CANCELAMENTO', CONTA MOVIMENTO SERA = '4966' PORT: '8064'";
    }
    return conta;
}
public String getContaPortador(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "4966";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE")) {
        conta = "4253";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) {
        conta = "8064";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "4966";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE")) {
        conta = "4253";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) {
        conta = "8064";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "4966";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE")) {
        conta = "4253";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) {
        conta = "8064";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "8064INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SIPAG") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SIPAG") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SIPAG") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD")) {
        conta = "7986";
        return conta;
    }
    if (nomePortador.contains("CEF - 2540  /  003  /  00001225-0")) {
        conta = "696969";
        contaMovimento = "696969";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CIELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "6751";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CIELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("STONE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "7237";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("STONE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("NUTRICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("NUTRICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "7317INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TICKET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "7241";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("TICKET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("PAGSEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("PAGSEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("PAGSEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "7425INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("PAGSEGURO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "7425INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMERICANEXPRESS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMERICANEXPRESS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4948INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BOTICARIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BOTICARIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "verJaquelineINVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("SAFRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("SAFRA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "7447INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SUMUP") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SUMUP") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "7490INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CABAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CABAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "7221INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ALELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("ALELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "8062INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AIQFOME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AIQFOME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "8048INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(nomePortador).contains("SODEXO")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "7212INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BIQBENEFICIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BIQBENEFICIO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "8226INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PRODUTO")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIO")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA")) {
        conta = "10046INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIO")) {
        conta = "10046INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "10099INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("YAPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("YAPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "10051INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BONUS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BONUS") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "10069INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IPIRANGA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IPIRANGA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "10043INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TOTAL")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COMISSAO")) {
        conta = "10047INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FRETE")) {
        conta = "2885INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "8071INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("REEMBOLSO")) {
        conta = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("REEMBOLSO")) {
        conta = "8071";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVADO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("MELHOR ENVIO")) {
        conta = "4253";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVADO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("FACEBOOK")) {
        conta = "4084";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RECEBIMENTO")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("GESTAO")) {
        conta = "8064INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENVIO")) {
        conta = "8064INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RENDIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRUTO")) {
        conta = "2893INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RENDA")) {
        conta = "8064INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEVOLUCAO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("COMPRA")) {
        conta = "8064INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REDECARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("REDECARD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "5005INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "8244";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO")) {
        conta = "10001INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GATEWAY")) {
        conta = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("GATEWAY")) {
        conta = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PICPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PICPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "8062INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BIN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO SICREDI - BIN")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("BIN") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO SICREDI - BIN")) {
        conta = "7440INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("INFINITE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("INFINITE") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "8358INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GATEWAY")) {
        conta = "4966INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENVIO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FULFILLMENT")) {
        conta = "8064INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("ENVIO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("FULFILLMENT")) {
        conta = "8064";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("RECEBIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DESCONTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CONTRAPARTE")) {
        conta = "8064";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PIX")) {
        conta = "4869";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAYLY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "8064INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAYLY") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("GESTAO")) {
        conta = "5";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CROSS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DOCKING")) {
        conta = "8064INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CROSS") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DOCKING")) {
        conta = "8064";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAABIQBENEFICIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAABIQBENEFICIOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "8226";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAASHOPEE") &&
        !StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "10092";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAASHOPEE") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("YAPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("YAPAY") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "10051INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AVENDAS_GRANITO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) {
        conta = "8503";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AVENDAS_GRANITO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TAXA")) {
        conta = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AZUL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "10013";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AZUL") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("GRANITO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "8503";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("GRANITO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "7021INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(nomePortador).contains("GETNET") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("DEBITO")) {
        conta = "7021INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_VRBENEFICIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) {
        conta = "5INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_VRBENEFICIOS") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "7316INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        conta = "7212";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SODEXO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        conta = "4966";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA")) {
        conta = "8064INVERTE";
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO")) {
        conta = "8064";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "4966";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE")) {
        conta = "4253";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) {
        conta = "8064";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "4966";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE")) {
        conta = "4253";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) {
        conta = "8064";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA")) {
        conta = "4966";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE")) {
        conta = "4253";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("")) {
        conta = "8064";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD")) {
        conta = "7986";
        return conta;
    }
    return conta;
}
public String getContaPortador2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros2(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros3(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros4(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros5(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros6(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaDesconto(String contaDesconto, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaDesconto;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMulta(String contaMulta, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("cntaJuros");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMulta;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public boolean getTratarComoExtrato(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoExtrato = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoExtrato;
}
public boolean getTratarComoDesconto(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoDesconto = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoDesconto;
}
public boolean getTratarComoJuros(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoJuros = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoJuros;
}
public boolean getTratarLinhaIgnorar(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarIgnoraLinha = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarIgnoraLinha;
}
public String getTratarValorAlternativo(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoAlternativo  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoAlternativo;
}
public String getTratarComoDiv(String documento, String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoDiv  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoDiv;
}
public String getCodigoClassificacao(String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String documento   = objHistorico.optString("documento");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoClassificacao  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoClassificacao;
}
public String getModificaData(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoData  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoData;
}
public String getCampoFiscal(String parametro, JSONObject objHistorico) {
    String especie         = objHistorico.optString("especie");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String returnaCodigo  = "";

    return returnaCodigo.trim();
}
public int getContadorCabecalho(int contador, String line) {
    return contador;
}
public double getValorPrincipal(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorPrincipal = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return valorPrincipal;
}
public String getHistorico(String conta, String histParam, String tipoLancamento, String nomeOrigem, String documento, 
                           String nomePortador, String complemento01, String complemento02, String complemento03, 
                           String nomeArquivo, String codCentroCusto) {
    String historico = "";
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getRegraHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAACARTAO_MERCADOPAGO3, Complemento (05) contem TARIFA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") && StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAACARTAO_MERCADOPAGO3, Complemento (05) contem FRETE, HISTORICO = MERCADO PAGO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") && StringUtil.removeSpecialCharsToUC(complemento05).equals(""))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAACARTAO_MERCADOPAGO3, Complemento (05) contem EM BRANCO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("RECEBIMENTO"))  historico = "HISTORICO POR REGRA = Quando Complemento (02) contem recebimento, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO"))  historico = "HISTORICO POR REGRA = Quando Complemento (02) contem venda, Tipo Planilha contem CARTAO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Complemento (02) contem tarifa, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PL.CIELO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem PL.CIELO, HISTORICO = ALUGUEL EQUIPTO. CIELO Mes-Ano Anterior";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO-SICREDI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("STONE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO-SICREDI, Fornecedor/Cliente contem STONE, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("VENDA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("EXPORTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem VENDA, Complemento (01) contem EXPORTA, HISTORICO = NF N Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("IMPOSTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem IMPOSTO, Complemento (01) contem TAXA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("UBER") && StringUtil.removeSpecialCharsToUC(complemento01).contains("EATS") && StringUtil.removeSpecialCharsToUC(complemento02).contains("CONTRIBUICAO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("CLIENTE"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem UBER, Complemento (01) contem EATS, Complemento (02) contem CONTRIBUICAO, Complemento (02) contem CLIENTE, HISTORICO = CONTRIBUICAO DO CLIENTE APLICATIVO UBER EATS";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALELO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(complemento02).contains("OPERACIONAL"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem ALELO, Complemento (02) contem TARIFA, Complemento (02) contem OPERACIONAL, HISTORICO = TARIFA EXTRA OPERACIONAL";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TOTAL"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem DAFITI, Complemento (03) contem TOTAL, HISTORICO = DAFITI";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") && StringUtil.removeSpecialCharsToUC(complemento03).contains("COMISSAO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem DAFITI, Complemento (03) contem COMISSAO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") && StringUtil.removeSpecialCharsToUC(complemento03).contains("FRETE"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem DAFITI, Complemento (03) contem FRETE, HISTORICO = VENDAS DAFITI";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("RECEBIMENTO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem MERCADOLIVRE, Complemento (03) contem RECEBIMENTO, HISTORICO = MERCADO LIVRE";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem MERCADOLIVRE, Complemento (03) contem TARIFA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("GESTAO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem MERCADOLIVRE, Complemento (03) contem CUSTO, Complemento (03) contem GESTAO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ENVIO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem MERCADOLIVRE, Complemento (03) contem TARIFA, Complemento (03) contem ENVIO, HISTORICO = MERCADO LIVRE";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("RENDIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("BRUTO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem MERCADOLIVRE, Complemento (03) contem RENDIMENTO, Complemento (03) contem BRUTO, HISTORICO = VENDAS MERCADO LIVRE";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("RENDA"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem MERCADOLIVRE, Complemento (03) contem IMPOSTO, Complemento (03) contem RENDA, HISTORICO = SOBRE VENDAS MERCADO LIVRE";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ENVIO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("FULFILLMENT"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem MERCADOLIVRE, Complemento (03) contem CUSTO, Complemento (03) contem ENVIO, Complemento (03) contem Fulfillment, HISTORICO = Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("VENDA"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem MERCADOLIVRE, Complemento (03) contem CANCELAMENTO, Complemento (03) contem TARIFA, Complemento (03) contem VENDA, HISTORICO = CANCELAMENTO DE TARIFA DE VENDA MERCADO LIVRE";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ENVIO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem MERCADOLIVRE, Complemento (03) contem CANCELAMENTO, Complemento (03) contem ENVIO, Complemento (03) contem TARIFA, HISTORICO = CANCELAMENTO DE TARIFA DE ENVIO MERCADO LIVRE    INVERTECONTA";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PRODUTO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem AMAZON, Complemento (03) contem CUSTO, Complemento (03) contem PRODUTO, HISTORICO = AMAZON";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") && StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem AMAZON, Complemento (04) contem ENVIO, HISTORICO = REF. ENVIO AMAZON";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem AMAZON, Complemento (03) contem TARIFA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem AMAZON, Complemento (03) contem TARIFA, Complemento (04) contem ENVIO, HISTORICO = VENDAS AMAZON";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("YAPAY") && StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem YAPAY, Complemento (02) contem VENDA, HISTORICO = YAPAY";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") && StringUtil.removeSpecialCharsToUC(complemento03).contains("REEMBOLSO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem PAYPAL, Complemento (03) contem REEMBOLSO, HISTORICO = Complemento (03) Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVADO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem PAYPAL, Complemento (03) contem PRE, Complemento (03) contem APROVADO, HISTORICO = Complemento (04)";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem PAGARME, Complemento (02) contem ESTORNO, HISTORICO = ESTORNO PAGARME";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GATEWAY"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem PAGARME, Complemento (02) contem ESTORNO, Fornecedor/Cliente contem GATEWAY, HISTORICO = TRANSFERENCIA PAGARME";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("GATEWAY"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem PAGARME, Complemento (02) contem ESTORNO, Complemento (03) contem GATEWAY, HISTORICO = TRANSFERENCIA PAGARME";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IFOOD") && StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MERCHANT"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem IFOOD, Complemento (02) contem VENDA, Complemento (03) contem MERCHANT, HISTORICO = INCENTIVO PROMOCIONAL RECEBIDO VIA LOJA";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL2") && StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IFOOD"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CARTAO_IFOOD_EXCEL2, Complemento (02) contem VENDA, Complemento (03) contem IFOOD, HISTORICO = VIA IFOOD";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL2") && StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MOVILE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem CARTAO_IFOOD_EXCEL2, Complemento (02) contem VENDA, Complemento (03) contem MOVILE, HISTORICO = VIA IFOOD";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("DEVOLUCAO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("COMPRA"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem MERCADOLIVRE, Complemento (03) contem DEVOLUCAO, Complemento (03) contem COMPRA, HISTORICO = DEVOLUCAO DE VENDA MERCADO LIVRE";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PIX"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem MERCADOLIVRE, Complemento (03) contem TRANSFERENCIA, Complemento (03) contem VIA, Complemento (03) contem PIX, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAYLY") && StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem PAYLY, Complemento (02) contem VENDA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAYLY") && StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem PAYLY, Complemento (02) contem TARIFA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CROSS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("DOCKING"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem MERCADOLIVRE, Complemento (03) contem CUSTO, Complemento (03) contem CROSS, Complemento (03) contem DOCKING, HISTORICO = FRETE CROSS DOCKING";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CROSS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("DOCKING"))  historico = "HISTORICO POR REGRA = Quando Complemento (01) contem MERCADOLIVRE, Complemento (03) contem CANCELAMENTO, Complemento (03) contem CROSS, Complemento (03) contem DOCKING, HISTORICO = CANCELAMENTO FRETE CROSS DOCKING";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAAIFOOD, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAABIQBENEFICIOS") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAABIQBENEFICIOS, Complemento (05) contem TARIFA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAABIQBENEFICIOS") && !StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAABIQBENEFICIOS, Complemento (05) nao contem TARIFA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAASHOPEE") && !StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAASHOPEE, Complemento (05) nao contem TARIFA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAASHOPEE") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAASHOPEE, Complemento (05) contem TARIFA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AVENDAS_GRANITO") && StringUtil.removeSpecialCharsToUC(complemento05).equals(""))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AVENDAS_GRANITO, Complemento (05) contem EM BRANCO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AVENDAS_GRANITO") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TAXA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AVENDAS_GRANITO, Complemento (05) contem TAXA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AZUL") && StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AZUL, Complemento (02) contem VENDA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AZUL") && StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AZUL, Complemento (02) contem TARIFA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_VRBENEFICIOS") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAACARTAO_VRBENEFICIOS, Complemento (05) contem TARIFA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(complemento05).equals("") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_VRBENEFICIOS"))  historico = "HISTORICO POR REGRA = Quando Complemento (05) contem EM BRANCO, Tipo Planilha contem AAACARTAO_VRBENEFICIOS, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO2") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAACARTAO_MERCADOPAGO2, Complemento (05) contem TARIFA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO2") && StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAACARTAO_MERCADOPAGO2, Complemento (05) contem FRETE, HISTORICO = MERCADO PAGO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO2") && StringUtil.removeSpecialCharsToUC(complemento05).equals(""))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAACARTAO_MERCADOPAGO2, Complemento (05) contem EM BRANCO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO1") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAACARTAO_MERCADOPAGO1, Complemento (05) contem TARIFA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO1") && StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAACARTAO_MERCADOPAGO1, Complemento (05) contem FRETE, HISTORICO = MERCADO PAGO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO1") && StringUtil.removeSpecialCharsToUC(complemento05).equals(""))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem AAACARTAO_MERCADOPAGO1, Complemento (05) contem EM BRANCO, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MERCADOPAGO") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MERCADOPAGO, Complemento (05) contem TARIFA, HISTORICO =";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MERCADOPAGO") && StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MERCADOPAGO, Complemento (05) contem FRETE, HISTORICO = MERCADO PAGO";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MERCADOPAGO") && StringUtil.removeSpecialCharsToUC(complemento05).equals(""))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MERCADOPAGO, Complemento (05) contem EM BRANCO, HISTORICO =";
    

    return historico.replaceAll("  "," ").trim();
}
public int getParcelaBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public int getTotalParcelas(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public String getMesAnoBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String mesAnoBase = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return mesAnoBase;
}
public double getTaxaTarifa(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorTaxaTarifa = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMERICANEXPRESSXXXXX") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) {
        valorTaxaTarifa = 3.0;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SENFF") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        valorTaxaTarifa = 0.04;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SERGIOGREENCARDXXXX") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        valorTaxaTarifa = 0.05;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ABRAPETITEXX") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        valorTaxaTarifa = 0.05;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IFOOD") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        valorTaxaTarifa = 0.11;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AIQFOME") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        valorTaxaTarifa = 0.03;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("SODEXOXX") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        valorTaxaTarifa = 0.069;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DEBITO")) {
        valorTaxaTarifa = 0.0199;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("VISTA")) {
        valorTaxaTarifa = 0.0319;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PARC")) {
        valorTaxaTarifa = 0.0379;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("VISTA")) {
        valorTaxaTarifa = 0.0319;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PARC")) {
        valorTaxaTarifa = 0.0379;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATOXXXX") &&
        StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA")) {
        valorTaxaTarifa = 0.02;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_VRALIMENTACAO1")) {
        valorTaxaTarifa = 0.063;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SENFF")) {
        valorTaxaTarifa = 0.04;
    }
    return valorTaxaTarifa;
}
public String getHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:264";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") && StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE"))  historico = "MERCADO PAGO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:392";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO3") && StringUtil.removeSpecialCharsToUC(complemento05).equals(""))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("RECEBIMENTO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:263";
    
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:264";
    
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PL.CIELO"))  historico = "ALUGUEL EQUIPTO. CIELO" + " " + mesAnoAnterior + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO-SICREDI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("STONE"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:263";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("VENDA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("EXPORTA"))  historico = "NF N" + " " + documento + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:242";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("IMPOSTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:255";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("UBER") && StringUtil.removeSpecialCharsToUC(complemento01).contains("EATS") && StringUtil.removeSpecialCharsToUC(complemento02).contains("CONTRIBUICAO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("CLIENTE"))  historico = "CONTRIBUICAO DO CLIENTE APLICATIVO UBER EATS"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:350";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("ALELO") && StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(complemento02).contains("OPERACIONAL"))  historico = "TARIFA EXTRA OPERACIONAL"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:240";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TOTAL"))  historico = "DAFITI"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") && StringUtil.removeSpecialCharsToUC(complemento03).contains("COMISSAO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:264";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") && StringUtil.removeSpecialCharsToUC(complemento03).contains("FRETE"))  historico = "VENDAS DAFITI"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:392";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("RECEBIMENTO"))  historico = "MERCADO LIVRE"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:264";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("GESTAO"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:264";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ENVIO"))  historico = "MERCADO LIVRE"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:392";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("RENDIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("BRUTO"))  historico = "VENDAS MERCADO LIVRE"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:1121";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IMPOSTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("RENDA"))  historico = "SOBRE VENDAS MERCADO LIVRE"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:202";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ENVIO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("FULFILLMENT"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("VENDA"))  historico = "CANCELAMENTO DE TARIFA DE VENDA MERCADO LIVRE"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ENVIO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA"))  historico = "CANCELAMENTO DE TARIFA DE ENVIO MERCADO LIVRE"  + " " + ""  + " " + ""  + " " + ""  + " " + "INVERTECONTA" + "";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PRODUTO"))  historico = "AMAZON"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") && StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIO"))  historico = "REF. ENVIO AMAZON"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:264";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(complemento04).contains("ENVIO"))  historico = "VENDAS AMAZON"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:392";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("YAPAY") && StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA"))  historico = "YAPAY"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") && StringUtil.removeSpecialCharsToUC(complemento03).contains("REEMBOLSO"))  historico = "" + " " + complemento03 + " " + "" + " " + complemento04 + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAYPAL") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVADO"))  historico = "" + " " + complemento04 + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO"))  historico = "ESTORNO PAGARME"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GATEWAY"))  historico = "TRANSFERENCIA PAGARME"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:429";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME") && StringUtil.removeSpecialCharsToUC(complemento02).contains("ESTORNO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("GATEWAY"))  historico = "TRANSFERENCIA PAGARME"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:429";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("IFOOD") && StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MERCHANT"))  historico = "INCENTIVO PROMOCIONAL RECEBIDO VIA LOJA"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL2") && StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("IFOOD"))  historico = "VIA IFOOD"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL2") && StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MOVILE"))  historico = "VIA IFOOD"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("DEVOLUCAO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("COMPRA"))  historico = "DEVOLUCAO DE VENDA MERCADO LIVRE"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PIX"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:504";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAYLY") && StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PAYLY") && StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:264";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CUSTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CROSS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("DOCKING"))  historico = "FRETE CROSS DOCKING"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:236";
    
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CANCELAMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CROSS") && StringUtil.removeSpecialCharsToUC(complemento03).contains("DOCKING"))  historico = "CANCELAMENTO FRETE CROSS DOCKING"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:236";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAABIQBENEFICIOS") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:264";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAABIQBENEFICIOS") && !StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAASHOPEE") && !StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAASHOPEE") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:264";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AVENDAS_GRANITO") && StringUtil.removeSpecialCharsToUC(complemento05).equals(""))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AVENDAS_GRANITO") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TAXA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:264";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AZUL") && StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AZUL") && StringUtil.removeSpecialCharsToUC(complemento02).contains("TARIFA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:264";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_VRBENEFICIOS") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:264";
    
    if (StringUtil.removeSpecialCharsToUC(complemento05).equals("") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_VRBENEFICIOS"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO2") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:264";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO2") && StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE"))  historico = "MERCADO PAGO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:392";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO2") && StringUtil.removeSpecialCharsToUC(complemento05).equals(""))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO1") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:264";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO1") && StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE"))  historico = "MERCADO PAGO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:392";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_MERCADOPAGO1") && StringUtil.removeSpecialCharsToUC(complemento05).equals(""))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MERCADOPAGO") && StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA"))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:264";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MERCADOPAGO") && StringUtil.removeSpecialCharsToUC(complemento05).contains("FRETE"))  historico = "MERCADO PAGO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:392";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MERCADOPAGO") && StringUtil.removeSpecialCharsToUC(complemento05).equals(""))  historico = ""  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:262";
    

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra3(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra4(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra5(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra6(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getCentroCusto(String CentroCusto, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto) {
          String retornaCentroCusto = CentroCusto;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaCentroCusto;
}
public String getTabelaContabil(String TabelaContabil, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaTabelaContabil = TabelaContabil;
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaTabelaContabil;
}
public String getParticipante(String participante, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaParticipantePai = participante;
    complemento04 = "";
    complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaParticipantePai;
}
public String getFilial(String codFilial, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto, String filial) {
          String retornaFilial = codFilial;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaFilial;
}
public String getRegrasParaAcumular(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;


if (StringUtil.removeSpecialCharsToUC(complemento01).contains("MERCADOLIVRE")) lote = loteParam + "ACUMULAR-DO-CARTAO-MERCADO-LIVRE"+dataMovimento+"-"+complemento03+"-"+contaMovimento;
    
if (StringUtil.removeSpecialCharsToUC(complemento01).contains("AMAZON")) lote = loteParam + "ACUMULAR-DO-CARTAO-AMAZON"+dataMovimento+"-"+complemento04+"-"+contaMovimento;
    
if (StringUtil.removeSpecialCharsToUC(complemento01).contains("PAGARME")) lote = loteParam + "ACUMULAR-DO-CARTAO-PAGARME"+dataMovimento+"-"+contaMovimento+"-"+contaPortador+"-"+complemento02+"-"+nomeOrigem;
    
if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL2") && StringUtil.removeSpecialCharsToUC(complemento02).contains("VENDA")) lote = loteParam + "Acumular-cartao-Ifood"+dataMovimento+"-"+contaMovimento+"-"+contaPortador+"-"+complemento03;
    
if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAAIFOOD")) lote = loteParam + "ACUMULAR"+dataMovimento;
    
if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO")) lote = loteParam + "ACUMULAR"+dataMovimento+"-"+contaMovimento+"-"+contaPortador;
    

    return lote.trim();
}
public String getRegrasParaAcumularPortador(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String  getReplaceTermos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = "";
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return parametro2.trim();
}
public String  getReplaceTermosAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double numeroAba  		= objHistorico.optDouble("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("DAFITI") && parametro.equals("complemento03")) lote = lote.replace("COMMISSION","COMISSAO");
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("DABITO") && parametro.equals("complemento03")) lote = lote.replace("DABITO","DEBITO");
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("CRADITO") && parametro.equals("complemento03")) lote = lote.replace("CRADITO","CREDITO");

    return lote.trim();
}
public String  getLimpaCampos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");

    return lote.trim();
}
public String  getLimpaCamposAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL2") && parametro.equals("complemento03")) lote = cutString(lote,"+"); //ROT-2017-111943
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL2") && parametro.equals("complemento03")) lote = cutString(lote,"+"); //ROT-2017-111943

    return lote.trim();
}
public String getTipoGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String graph = "";

    //feito para manter o legado sem problemas, sera sobreposto por regras! ;-)
    //tipos esperados: Column, Multiple_Column_Stacked, Multiple_Columns, Line, Multiple_Lines, Pie, Donut
    //Card refere-se ao Lucro/Prejuizo
    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    if (complemento01.startsWith("07") || complemento01.startsWith("12")) graph = "CardChart";

    if (complemento01.startsWith("01") || complemento01.startsWith("02") || complemento01.startsWith("04") || 
    	complemento01.startsWith("08") || complemento01.startsWith("09") || complemento01.startsWith("10") || 
    	complemento01.startsWith("11") || complemento01.startsWith("21"))  graph = "ColumnChart";

    if (complemento01.startsWith("15") || complemento01.startsWith("16") || complemento01.startsWith("17")) 
    	graph = "ColumnChartStacked";

    if (complemento01.startsWith("05") || complemento01.startsWith("06")) graph = "LineChart";

    if (complemento01.startsWith("18") || complemento01.startsWith("19") || complemento01.startsWith("20")) 
    	graph = "LineChartMultiple";

    if (complemento01.startsWith("03") || complemento01.startsWith("13") || complemento01.startsWith("14")) 
    	graph = "DonutChart";

    return graph;
}
public String getSimboloValor(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String simboloValor = "R$";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return simboloValor.replaceAll("Nenhum","");
}
public String getSeriesGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String series = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return series;
}
public String getTituloGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String Titulo_Grafico = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return Titulo_Grafico;
}
public String getColunaAlternativa(String parametro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String retornaColunas  = "";

    return retornaColunas.replace(",",";").trim();
}
//FINALPARAMETRIZACAOREGRAS
