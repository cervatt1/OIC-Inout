{import: io_contabil.Database};
{import: io_contabil.RegrasSemCartoes};
{import: io_contabil.Duplicatas};
{import: io_contabil.Util};
{import: io_contabil.RunExtratosECartoes};
{import: io_contabil.Ottimizza_MeuCaixa};
{import: io_contabil.Lancamentos};
{import: io_contabil.TemplateUtils};
{import: io_contabil.OICUtils};


{import: io_contabil.Classes.Extrato};
// TEMPLATE 15.03.2023
// Colocado tipoPlanilha no Lote Encerrado
// colocado para trocar XLSX por CSV se marcado no roteiro 
 
public JSONArray run(InoutLogger logger) throws Exception {

	JSONArray  records  = new JSONArray();
	JSONObject ultimoJS = new JSONObject();

	// gera seguranca nas conexoes com Heroku
	// Create a trust manager that does not validate certificate chains
	javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[] {
		new javax.net.ssl.X509TrustManager(){
			public java.security.cert.X509Certificate[] getAcceptedIssuers(){ return null; }

			public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) { }

			public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) { }
		}
	};

	// Install the all-trusting trust manager
	try {
		javax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext.getInstance("TLS");
		sc.init(null, trustAllCerts, new java.security.SecureRandom());
		javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
	} catch (Exception e) {
		// 
	}
	
	
	// Carrega as propriedades
	SysProperties props = SysProperties.getInstance();
	SysProperties propsEmp = SysProperties.getInstance();
	JSONObject roteiroCRMPrincipal = getRoteiro();
	JSONObject roteiroCRM = getRoteiro();
	JSONObject jStatus = new JSONObject();
	
 
	props.load("contabil/" + roteiroCRM.optString("contabilidade") + "/contabil.properties");
	propsEmp.load("contabil/" + roteiroCRM.optString("contabilidade") + "/empresa.properties");

	//Conectar na Base de Dados IO_CONTABIL.
	DataBase dbIOCont = null;
	//Contectar na Base de Dados depara do heroku(nuvem)
	DBPostgreSQL dbIODepara = null;

 	String empresa = getNomeEmpresa();
	
	
	String codEmpresa = props.get(empresa + "_COD_EMPRESA");
	 
	if (codEmpresa == null) {
		empresa = propsEmp.get("NOME_EMPRESA").toUpperCase();
		codEmpresa = props.get(empresa + "_COD_EMPRESA");		
	}
	
	//#2303-002125
	//codEmpresa que sera utilizado para consultar o plano de contas
	String codEmpresaPlanoContas = codEmpresa;
	if (roteiroCRM.optString("contabilidade").toUpperCase().contains("CONTIBEMASSESSORIA")) {
		codEmpresaPlanoContas = "000";
	}
	//2312-024058
	if (roteiroCRM.optString("contabilidade").toUpperCase().contains("SETEC")) {
		codEmpresaPlanoContas = "000";
	}
 
	String tipoProduto = "";
	try {
		tipoProduto = props.get(empresa + "_TIPO_PRODUTO");
	} catch (Exception xx) {tipoProduto = "OIC_PACOTE";}
	
	
	if (tipoProduto.equals("")) tipoProduto = "OIC_PACOTE";
	if (tipoProduto.contains("IMPLANTA")) tipoProduto = "OIC_PACOTE";
	if (tipoProduto.contains("AVULSO")) tipoProduto = "OIC_PACOTE";
	
 	
	String processaOud = "";
	try {
		processaOud = props.get("PROCESSA_OUD");
	} catch (Exception e) {processaOud = "FALSE";}
	if (processaOud.equals("")) processaOud = "FALSE";

	String ERPContabil = props.get("ERP_CONTABILIDADE");
	String nomeEmpresa = props.get(empresa + "_NOME_EMPRESA");
	String cnpjEmpresa = props.get(empresa + "_CNPJ_EMPRESA");
	String emailResponsavel = props.get(empresa + "_EMAIL_RESPONSAVEL");
	String emailCanal = props.get("EMAIL_CANAL");
	String statusCRM = props.get(empresa + "_STATUS_CRM");
	String fornecedorUnico = props.get("FORNECEDOR_UNICO");
	
	String fazLcdpr = "";
	
	try {
		fazLcdpr = props.get(empresa+"_EQUIPE_FECHAMENTO");
	} catch (Exception e) {fazLcdpr = "FALSE";}

	if (fazLcdpr.toUpperCase().contains("LCDPR")) fazLcdpr = "TRUE";
	if (fazLcdpr.equals("")) fazLcdpr = "FALSE";
 	
	String mantemArquivo = propsEmp.get("MANTEM_ARQUIVO");
	if (mantemArquivo == null) mantemArquivo = "";
	
	String tipoLancamento = getNomeRota();
	if (tipoLancamento.toUpperCase().contains("PAGAS"))    tipoLancamento = "PAGAR";
	if (tipoLancamento.toUpperCase().contains("RECEBIDA")) tipoLancamento = "RECEBER";


	String compDirName = nomeEmpresa + "_#" + codEmpresa;
	String dirName = "";
	if (tipoLancamento.contains("PAGAR"))   dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/APagar";
	if (tipoLancamento.contains("RECEBER")) dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/AReceber";

	String backupDirName = dirName + "/Processado";

	boolean erroShrink = false;
	boolean geraCabecalhoCordilheira = true;
	boolean cabecalhoNaoEncontrada        = true;
	boolean apagaExtrato        = false;
	boolean apagaContaT         = false;
	boolean geraRegraPortador   = false;
	boolean comparaRazao        = false;
	boolean fazConciliacao		= false;
	boolean encontrouComplemento = true;
	boolean criaCabecalhoConciliacao = true;
	
	String tipoEmail            = "";
	String arquivoAgora         = tipoLancamento + "-" + DateUtil.dateToString(new Date(),"yyyyMMddhhmm");
	int    contadorArquivo      = 0;

	HashMap mapaLote			= new HashMap();
	HashMap mapaJuros   		= new HashMap();
	HashMap mapaPlano   		= new HashMap();
	HashMap mapaDePara			= new HashMap();
	HashMap mapaArquivo 		= new HashMap();
	HashMap mapaOficial			= new HashMap();
	HashMap mapaDesconto		= new HashMap();
	HashMap mapaVariavel		= new HashMap();
	HashMap mapaDocumento 		= new HashMap();
	HashMap mapaPartPlano 		= new HashMap();
	HashMap mapaFornecedor 		= new HashMap();
	HashMap mapaParticipante	= new HashMap();
	HashMap mapaParcelaDominio	= new HashMap();
	HashMap mapaConciliacao 	= new HashMap();

	JSONObject recordF = new JSONObject();


	String cruzaExtrato			= "";
	String Cruza_Extrato_com_Extrato = "";
	String mesAnoAnterior		= "";
	String mesAno2Anterior		= "";
	String mesAnoAtual			= "";
	int mesRef					= 0;
	int anoRef					= 0;
	String contaJuros			= "";
	String contaDesconto		= "";
	String contaMulta			= "";
	String contaTransitoria		= "";
	String contaEmpresaBranco	= "";
	String movimentoPortador	= "";
	String contaFixaDebito		= "";
	String contaFixaCredito		= "";
	String contaPortador		= "";		//pg - cred | rec - deb
	String contaMovimento		= "";		//pg - deb | rec - cred
	String tabelaContabil       = "";
	String dataMovimento        = "";
	String classificaPlano      = "";
	String classificaFornec     = "";
	String loteConciliacao 		= "";

	boolean geraFiscal			= false;
	String [] loteFiscal		= new String[20];
	boolean apagaStatus         = false;

	String Conta_Fixa_Cruzamento_Extrato = "";
	String contaInvertida	= "";
	String contaBuscaPlano	= "";
	String nomeArquivo      = "";
	String chave			= "";
	String classificacao	= "";
	String dataLote			= DateUtil.dateToString(new Date(),"yyyy-MM");
	String lote						= "";
 	String regraContaMovimento 		= "";
	String regraHistorico 			= "";
	String separadorCsv				= ";";
	String separadorTxt				= "";
	String tipoPlanilha				= "";
	String contaTemp				= "";
	String mesesdoAno			    = "JAN;FEV;MAR;ABR;MAI;JUN;JUL;AGO;SET;OUT;NOV;DEZ";
	boolean primeiroArquivo 		= true;
	boolean primeiraVezDuplicata	= true;
	boolean acumulouAntes			= false;
	boolean leuFinanceiro			= false;
	boolean dupliNaoEncontContabil	= false;
	boolean forcarPartidaDobrada	= false;
	boolean temOFX					= false;
	boolean temFiltro				= false;
	boolean temFiscal  				= false;
	boolean temLinhas               = false;
	boolean temIgnorar              = false;
	boolean logs = false;
	StringBuilder logsTxt = new StringBuilder();
	
	int abaConvertida = 0;
	
	String retornaPadroes = "";
	
	String zerarColAlternativo		= "";
	JSONObject deParaObj 			= new JSONObject();
	logger.logDebug("Templatetemp Empresa -> " + nomeEmpresa);
	//logger.logDebug("Padrao empresa " + mantemArquivo);
	try {

		// #DOCUMENTACAO
		// FOR leitura dos arquivos das extensoes abaixo
		// altera-se aqui para NAO LER xlsx por exemplo
		
		// liberado em 25/11/2020 @DiMaz
		// se precisar alterar somente as quantidades qX e qY 
		// cada unidade processa cerca de 3 arquivos ou seja 3 no qY processa uns 9 arquivos excel e uns 9 pdf por vez.
		// aumentar muito o XLSX pode causar TRAVAMENTOS
		int qX	= 9;	//ofx,csv,txt
		int qY	= 3;	//xlsx,pdf
		int qTotal = (qX*3)+(qY*2);
		String extensao = "";
		for(int extArquivo = 0; extArquivo < qTotal; extArquivo++) {
			if (extArquivo < qX)									extensao = ".ofx,.OFX,.omc,.OMC,.html,.HTML,.ret,.RET";
			if (extArquivo >= qX && extArquivo < (2*qX))			extensao = ".pdf,.PDF";
			if (extArquivo >= (2*qX) && extArquivo < (2*qX+qY))		extensao = ".xlsx,.XLSX";
			if (extArquivo >= (2*qX+qY) && extArquivo < (3*qX+qY))	extensao = ".txt,.TXT,.ret,.RET";
			if (extArquivo >= (3*qX+qY))							extensao = ".csv,.CSV"; 
			
			if (roteiroCRMPrincipal.has("ignoraExel") && roteiroCRMPrincipal.optString("ignoraExel").toUpperCase().equals("TRUE")) {
				extensao = extensao.replace(".XLSX",".CSV").replace(".xlsx",".csv");
			}			
			boolean ignoraAbas = false;
			
			// ------------------------------------------------------------------------------------------
			// colocado para nao ler pelo template mais de 3 planilhas xlsx por rodada
			// Motivo: quando tem planilha grande em excel para ler na personalizada
			// o sistema roda varias vezes a leitura da planilha no template e depois tudo de novo na personalizada.
			if (mantemArquivo.equals("SIM") && extensao.contains(".XLSX") && extArquivo > 20) continue;
			// ------------------------------------------------------------------------------------------
 
			for (int porAba = 0; porAba < 60; porAba++) {

				// #DOCUMENTACAO
				// tratamento de abas vindas do CRM
				
				String apagaArquivo		= backupDirName;
				String abasEspecificas	= roteiroCRMPrincipal.optString("Abas_Especificas");
				abasEspecificas 		= abasEspecificas.replace(",",";"); 

				if (mantemArquivo.equals("SIM")) abasEspecificas = "0;1;2;3;4;5;6;7;8;9;10";
				// if (mantemArquivo.equals("SIM")) abasEspecificas = "0;1";
				if (!extensao.contains("XLSX") || ignoraAbas)  abasEspecificas = "";

				// liberado em 25/11/2020 @DiMaz
				// tratar js.put("Abas_Especificas", "0-60");
				// grande numero de abas pode travar o nosso sistema
				String abasFor = "";
				if (!abasEspecificas.contains(";") && abasEspecificas.contains("-") && abasEspecificas.length() <= 7) {
					try {
						int a = Integer.parseInt(abasEspecificas.substring(0,abasEspecificas.indexOf("-")));
						int b = Integer.parseInt(abasEspecificas.substring(abasEspecificas.indexOf("-")+1));
						for (int k = a; k <= b; k++){
							if (k < b) abasFor += k+";";
							else abasFor += k;
						}
					} catch (Exception fr) {}
					if(!abasFor.equals("")) abasEspecificas = abasFor;
				}

				
				if (abasEspecificas.equals("")) {
					if (porAba > 0) break;
				}
				if (!abasEspecificas.equals("")) {
					if (!abasEspecificas.contains(String.valueOf(porAba))) {
						continue;
					}

					String ultimaAba = abasEspecificas;
					if (ultimaAba.contains(";")) ultimaAba = ultimaAba.substring(ultimaAba.lastIndexOf(";")+1).trim();
					if (!ultimaAba.equals(String.valueOf(porAba)) && extensao.contains(".XLSX")) apagaArquivo = null;
				}

				// #DOCUMENTACAO
				// auto ajuste do separador de CSV e TXt
				
 
 				if(extensao.contains("CSV"))  separadorCsv = verificaSeparador(separadorCsv, dirName, extensao, props, logger);
  				if(extensao.contains("TXT"))  separadorTxt = verificaSeparador(separadorTxt, dirName, extensao, props, logger);
				
 
 				
				// #DOCUMENTACAO
				// carregamento do arquivo
				
				if (mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) apagaArquivo = null;
				// salva arquivo no hasmap para posterior eliminacao 

				
				FilesLoader fileLoader = new FilesLoader(dirName, extensao, apagaArquivo, true, logger);
				int[] abas = {porAba};
				fileLoader.setSheetsToRead(abas);
				try {
					fileLoader.loadFiles();
				} catch (Exception e) {
					// logger.logDebug("NAO CONVERTEU PDF " + e.getMessage());
					File file2 = new File(dirName);
					
					File []  arquivoParaConverter = file2.listFiles();
					if (FileUtil.dirHasFiles(dirName)) {
						for (File fl: arquivoParaConverter) {
							if (fl.getName().toUpperCase().contains(".PDF")) {
								LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
								// String idConversor  = TemplateUtils.getIdLote(fl.getName());
								// logger.logDebug("FOI PRO CONVERSORANTES " + fl.getName());
								boolean deubom = false;
								deubom = buscaProtocoloConversor("", apiWeb, tipoLancamento.toLowerCase(), fl.getName(), logger);
								try { 
									FileUtil.deleteFile(fl);
								} catch (Exception XX) {}

								if (deubom) break;
							}
						}
					}
				}
				try { forcarPartidaDobrada	= Boolean.parseBoolean(roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toLowerCase().trim()); } 
				catch (Exception bl) {forcarPartidaDobrada = false;}
				
				//2304-003551. Quando utiliza esse ERP ? obrigado a sem em partida dobrada.
				if (roteiroCRMPrincipal.optString("erpContabilidade").equals("DOMINIO2") || roteiroCRMPrincipal.optString("erpContabilidade").equals("ALTERDATA") || roteiroCRMPrincipal.optString("erpContabilidade").equals("CORDILHEIRA") || roteiroCRMPrincipal.optString("erpContabilidade").equals("LEDWARE")) {
                    forcarPartidaDobrada = true;
                }
				
				for (MemoryFile memFile: fileLoader.getMemFiles()) {
				
					// caso arquivo tenha mais de 250.000 linhas sera ignorado  . Xavier e Mello em 07.06.2023
					if (memFile.getTotalLines() > 250000 ){
						temLinhas = true;
						break;
					}			

					nomeArquivo = memFile.getFilename().replace("%","");
					
					if (nomeArquivo.toUpperCase().startsWith("ABA_")) {
						
						abaConvertida = TemplateUtils.verificaAba(nomeArquivo);
						abasEspecificas = roteiroCRMPrincipal.optString("Abas_Especificas");
						
						// logger.logDebug("ACE " + nomeArquivo + " | " + abaConvertida + " | " + abasEspecificas);
						
						if (!abasEspecificas.equals("")) {
							if (!abasEspecificas.contains(String.valueOf(abaConvertida))) continue;
						}
					} else abaConvertida = porAba;
				
					contadorArquivo++;

					
					// =======================  =================   =======================
					// =======================  VARIAVEIS PADROES   =======================
					// =======================  =================   =======================
					String historico      = "";

					String codCcOrigem    = "";
					String cpfCnpj        = "";
					String nomeOrigem     = "";
					String nomePortador   = "";
					String nomePortador2  = "";
					String documento      = "";
					int    parcelaDoc     = 1;
					double valorDocumento = 0.00;
					double valorPagamento = 0.00;
					double valorDesconto  = 0.00;
					double valorJuros     = 0.00;
					double valorMulta     = 0.00;
					double valorAlternativo = 0;
					
					int icodCcOrigem    = -1;
					int icpfCnpj        = -1;
					int inomeOrigem     = -1;
					int inomePortador   = -1;
					int idocumento      = -1;
					int idataMovimento  = -1;
					int ivalorDocumento = -1;
					int ivalorAlternativo = -1;
					int ivalorPagamento = -1;
					int ivalorDesconto  = -1;
					int ivalorJuros     = -1;
					int ivalorMulta     = -1;
					int icomplemento01  = -1;
					int icomplemento02  = -1;
					int icomplemento03	= -1;
					int icomplemento04  = -1;
					int icomplemento05	= -1;
					int icomplemento06	= -1;
					int icomplemento07	= -1;
					int icomplemento08	= -1;
					int icomplemento09	= -1;
					int icomplemento10	= -1;
					int idataFake		= -1;

					String contaGetConta	= "";
					contaPortador	= "";		//pg - cred | rec - deb
					contaMovimento	= "";		//pg - deb | rec - cred 

					String complemento01	= "";
					String complemento02	= "";
					String complemento03	= "";
					String complemento04	= "";
					String complemento05	= "";
					String complemento06	= "";
					String complemento07	= "";
					String complemento08	= "";
					String complemento09	= "";
					String complemento10	= "";
					String codCentroCusto	= "";
					String codFilial        = "";

					double valorTotalDoc	= 0.0;
					double valorTotalJuros	= 0.0;
					double valorTotalDesc	= 0.0;
					
					double [] valorDocumentoArray = {0,0,0,0,0,0,0,0,0,0};  

					String classJur			= "";
					String classDes			= "";
					String classMul			= "";

					String codErroString	= "";
					int cont				= 0;
					String linhasProblema	= "";
					String idEmpresa        = "";
					String idRoteiro  	    = "";

					String histAux			= "";
					String anoData			= "";
					boolean zerar			= true;
					boolean filtro			= true;
					

					String lerAposPrincipal   = "";
					boolean isLinhaPrincipal  = false;
					boolean ignorarAntes	  = false;
					boolean tratarComoExtrato = false;
					boolean tratarComoDesconto = false;
					boolean tratarComoJuros = false;

					dataMovimento        = "";

					double partidaDobradaJuros		= 0;
					double partidaDobradaDesconto	= 0;
					double partidaDobradaMulta		= 0;
					double valorSomaArray			= 0;

					String numSeparadorDuplicata = ""; //convertido em int depois
					
					StringBuilder cabecalhoPlanilha = new StringBuilder();
					StringBuilder cabecalhoRegra    = new StringBuilder(); // quarda pemanente as 9 primeiras linhas de cada planilha / aba
					
					int  	      contadorCabecalho = 0; 
					
					// #DOCUMENTACAO
					// definicao de separador do arquivo
					// se ouver separador em TXT deve ser tratado caso a caso
					// evitar usar tabulacao como separador 
					
					if(extensao.contains(".xlsx,.XLSX")) memFile.setFieldSeparator("\\|");
					if(extensao.contains(".pdf,.PDF"))   memFile.setFieldSeparator("\\|");
					if(extensao.contains(".csv,.CSV"))	 memFile.setFieldSeparator(separadorCsv);
					if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(separadorTxt);
					
					// if (codEmpresa.equals("9999")) memFile.setFieldSeparator(";");
					
					if (nomeArquivo.toUpperCase().contains(".PDF")) {
						
						// logger.logDebug("ARREPENDE " + nomeArquivo /*memFile.getLines().toString().contains("##$%#&") +*/  + " | " +  memFile.getLines().toString().toUpperCase());
						boolean rodaConversorNovo = TemplateUtils.verificaConversorNovo(StringUtil.removeSpecialCharsToUC(memFile.getLines().toString()).toUpperCase());
						
						if (rodaConversorNovo) {
							LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
							String idConversor  = TemplateUtils.getIdLote(nomeArquivo);
							// logger.logDebug("FOI PRO CONVERSOR1 " + nomeArquivo);
							boolean deubom = false;
							deubom = buscaProtocoloConversor(idConversor, apiWeb, tipoLancamento.toLowerCase(), nomeArquivo, logger);
							
							if (deubom) {
								File file2 = new File(dirName);
						
								File []  arquivoParaConverter = file2.listFiles();
								if (FileUtil.dirHasFiles(dirName)) {
									for (File fl: arquivoParaConverter) {
										if (fl.getName().toUpperCase().contains(".PDF")) {
											try { 
												FileUtil.deleteFile(fl);
											} catch (Exception XX) {}

											break;
										}
									}
								}
							}
							continue;
						}
					}
					
 					
					if(roteiroCRMPrincipal.has("delimitadorDoArquivo") && !roteiroCRMPrincipal.optString("delimitadorDoArquivo").equals("")) {
						if(extensao.contains(".txt,.TXT")) memFile.setFieldSeparator(roteiroCRMPrincipal.optString("delimitadorDoArquivo"));
					}
					
					//nao pode usar o line contem  ';' pois nao existe line neste ponto ainda.
					if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO")) {
						if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(";");
					}
 					
					String abaArquivo = String.valueOf(abaConvertida);
					if (abaConvertida == 0) abaArquivo = "0";

					// colocado para nao importar 2x o mesmo arquivo e mesma aba
					ttArquivo ttArq    = (ttArquivo)mapaArquivo.get(abaArquivo+"-"+nomeArquivo+"-"+abaArquivo);
					if (ttArq          == null) {
						ttArq          = new ttArquivo();
						ttArq.arquivo  = abaArquivo+"-"+nomeArquivo+"-"+abaArquivo;
					
					} else continue;
					mapaArquivo.put(abaArquivo+"-"+nomeArquivo+"-"+abaArquivo,ttArq);
					
					// putStatus(dirName, "01--Etapa 1 de 4--" + tipoLancamento + ".status", jStatus, logger);
					// logger.logDebug("NAAQ " + nomeArquivo.toUpperCase() + " | " + extensao + " | " + separadorCsv);
	
					// #DOCUMENTACAO
					// conecta ao BANCO DE DADOS
					if (dbIOCont == null) {
						dbIOCont = connectIOContabil(props, logger);
					}

					if (dbIODepara == null) {
						dbIODepara = connectDeParaDb(logger);
					}
					
					if(primeiroArquivo) {
						limparIORoteiro(codEmpresa, tipoLancamento, dbIOCont, logger);
						primeiroArquivo = false;
					}

					//########################################################################

					contaJuros		    = roteiroCRM.optString("contaFixaJuros");
					contaFixaCredito    = roteiroCRM.optString("contaFixaCredito");
					contaFixaDebito     = roteiroCRM.optString("contaFixaDebito");
					contaDesconto 	    = roteiroCRM.optString("contaFixaDesconto");
					contaMulta		    = roteiroCRM.optString("contaFixaMulta");
					idEmpresa      	    = roteiroCRM.optString("idEmpresa");
					idRoteiro   	    = roteiroCRM.optString("idRoteiro");
					movimentoPortador   = roteiroCRM.optString("movimentoPortador");
					classificaPlano     = roteiroCRM.optString("classificaPlano");
					classificaFornec    = roteiroCRM.optString("classificaFornec");
					cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
					Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
					numSeparadorDuplicata   = roteiroCRM.optString("Coluna_Valor_Duplicata_Dominio");

					tipoPlanilha = "MOVIMENTO";
					boolean enviaEmailExtrato = false;
					boolean naoLeMais = false;

					tipoEmail = "CLIENTE";
					if (nomeArquivo.toUpperCase().contains("OTTIMIZZA"))  tipoEmail = "CANAL";
					if (nomeArquivo.toUpperCase().contains("OTTIMIZZAF")) tipoEmail = "SUPORTE";

					String debitoCredito   		 = "";
					String chaveExtrato    		 = ""; 

					//if(roteiroCRM.has("contaBuscaPlano"))contaBuscaPlano = roteiroCRM.optString("contaBuscaPlano"); 

					// =======================  ========================   =======================
					// =======================  VARIAVEIS PERSONALIZADAS   =======================
					// =======================  ========================   =======================


					JSONObject objetoParametro = new JSONObject();

					// #DOCUMENTACAO
					// busca de indices da planilha principal
					if (tipoPlanilha.equals("MOVIMENTO")) {
						roteiroCRM = getRoteiro();

						inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
						idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
						inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
						idocumento      = getIndice("documento", idocumento, roteiroCRM);
						ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
						ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
						ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
						ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
						icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
						ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
						ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
						icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
						icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
						icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
						icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
						icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
						icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
						icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
						icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
						icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
						icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
						idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
						icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);
						
						zerar 			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
					}
					jStatus = new JSONObject();
					// logger.logDebug("PUTSTATUS 524 " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba + " | " + memFile.getTotalValidLines());
					if (memFile.getTotalValidLines() > 0) {
						// logger.logDebug("PUTSTATUS 527 " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba + " | " + memFile.getTotalValidLines());
						putStatus(dirName, "", jStatus, logger);
					}
					try{
						// #DOCUMENTACAO
						// leitura linha a linha
						while (memFile.hasNextLine()) {
							// logger.logDebug("PUTSTATUS WHILE " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba);
							try {
								String line = memFile.nextLine();
								line = StringUtil.removeSpecialCharsToUC(line);
								
								// logger.logDebug("Line -> "+tipoPlanilha + "<<>>" + porAba + "<<>>" + cutString(line,0,30));
								// logger.logDebug("TP = "+tipoPlanilha+" | LN = "+line);
								
								contadorCabecalho++;
								if (contadorCabecalho<15) {
									cabecalhoPlanilha.append(line).append(" "); 
									cabecalhoRegra.append(stringNormalizer(line.replaceAll("\\|","").replaceAll("\"","").replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replaceAll("  ", " "), true)).append(" "); 
								}
								else {
									cabecalhoPlanilha = new StringBuilder();
									
									// ganha performance nao tendo que ler a planilha vezes pelo template se nao for roteiro secundario 
									if (mantemArquivo.equals("SIM") && tipoPlanilha.equals("MOVIMENTO") && abaConvertida > 2) ignoraAbas = true;
								}
								// logger.logDebug("PUTSTATUS 550");
								if (cont < 10)   putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + "-" + cont + ".status", jStatus, logger);  
								   

								////////////////////////////////////////////////////////////////////////////////
								///////////////////////////////////////////////////////////// INICIO DOS PADROES
								////////////////////////////////////////////////////////////////////////////////
								
								JSONObject jDadosPadrao = new JSONObject();
								jDadosPadrao.put("TIPOLANCAMENTO", tipoLancamento).put("NOMEEMPRESA",nomeEmpresa)
											.put("CODEMPRESA", codEmpresa).put("CONTABILIDADE", roteiroCRM.optString("contabilidade"))
											.put("NOMEARQUIVO", nomeArquivo);
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								//LEITURA PADRAO ARQUIVOS .OMC
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--								
								if (nomeArquivo.toUpperCase().contains(".OMC")) {
 
									tipoPlanilha = "OTT-MEUCAIXA";
									jDadosPadrao.put("TIPOPLANILHA",   tipoPlanilha);
 
									mapaVariavel = readOttimizzaMeuCaixa(memFile, dbIOCont, jDadosPadrao, mapaVariavel, logger);
									jStatus = new JSONObject();
									putStatus(dirName, "",  new JSONObject(), logger);
									// salva arquivo no hasmap para posterior eliminacao 
									ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
									if (ttArq          == null) {
										ttArq          = new ttArquivo();
										ttArq.arquivo  = nomeArquivo;
										
									}
									mapaArquivo.put(nomeArquivo,ttArq);
									// double tempoInicio1 = System.currentTimeMillis();
									// logger.logDebug("Tempo Rota2; " + String.format("%.2f", (System.currentTimeMillis() - tempoInicio1) / 1000));
									break;
								}

								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								//LEITURA PADRAO ARQUIVOS .OFX
								//--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
								
								// quando se mantem o arquivo, somente devem ser processados arquivos padroes
								// planilhas do rotiero movimento (principal), OFX e demais devem ficar para a rota normal
								// logger.logDebug("NAOFX NO TEMPLATES " + nomeArquivo.toUpperCase() + " | " + mantemArquivo + " | " +tipoProduto);
								if (nomeArquivo.toUpperCase().contains(".OFX")) {
									
									if (!mantemArquivo.equals("SIM") || !tipoProduto.equals("OIC_PACOTE")) {
										tipoPlanilha = "EXTRATO-OFX";
										

										// quando o OFX vem em apenas 1 linha todas as informacoes
										// quebramos linha e geramos um novo arquivo para gerar como um ofx normal
										if (line.contains("ACCTID")) {
											String fileOfx = dirName + "/" + nomeArquivo.toLowerCase().replaceAll(".ofx","_2.ofx");
											FileWriter writer = new FileWriter(fileOfx);
											writer.writeNewFile(line.replaceAll("><",">\r\n<"));	
										}
										putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", new JSONObject(), logger);     putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", jStatus, logger);
										jDadosPadrao.put("CODEMPRESA", codEmpresa).put("TIPOLANCAMENTO", tipoLancamento)
													.put("NOMEEMPRESA", nomeEmpresa).put("NOMEARQUIVO", nomeArquivo);
										if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) jDadosPadrao.put("CHECKNUM", "CHECKNUM");	//usar para retornar o documento do OFX no complemento02
										readOFXDefault(memFile, jDadosPadrao, dbIOCont, logger);
										jStatus = new JSONObject();
										// logger.logDebug("PUTSTATUS 615");
										putStatus(dirName, "",  new JSONObject(), logger);
										temOFX = true;
										break;
									}
									
									// quando FOR OFX e estiver rodando pelo template
									// e a empresa for OIC pacote rodar pela especifica, entao foi dado um break para agili
									if (mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
										break;
									}
									
								}
								
								// quando se mantem o arquivo, somente devem ser processados arquivos padroes
								// planilhas do roteiro movimento (principal), OFX e demais devem ficar para a rota normal
								// if(codEmpresa.equals("3673")){
									// logger.logDebug("mAATEMPLATE " + mantemArquivo + " | " + tipoProduto + " | " + apagaArquivo + " | " + roteiroCRM.optString("Planilhas_Padroes") + " | " + tipoPlanilha + " | " + tipoProduto);									
								// }
 								/*if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null  || (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE"))) {
								// if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && abaConvertida == 0)  // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

 
									JSONObject variaveis = new JSONObject();
									variaveis.put("line", 			line);
									variaveis.put("anoData", 		anoData); 
									variaveis.put("dirName", 		dirName);
									variaveis.put("jStatus", 		jStatus);
									variaveis.put("extensao", 		extensao);
									variaveis.put("codEmpresa", 	codEmpresa);
									variaveis.put("nomeArquivo", 	nomeArquivo);
									variaveis.put("nomeEmpresa", 	nomeEmpresa);
									variaveis.put("nomePortador", 	nomePortador);
									variaveis.put("tipoPlanilha", 	tipoPlanilha);
									variaveis.put("complemento01", 	complemento01);
									variaveis.put("complemento02", 	complemento02);
									variaveis.put("nomePortador2", 	nomePortador2);
									variaveis.put("tipoLancamento", tipoLancamento);
									variaveis.put("cabecalhoPlanilha", cabecalhoPlanilha.toString());																		
																		
									String retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);
									
									//logger.logDebug("CHAMOU O TEMPLATE " + retornaPadroes);
 
									JSONObject objRetorno = new JSONObject(retornaPadroes);
									if (objRetorno.has("tipoRetorno")) {
										anoData        = objRetorno.optString("anoData");
										retornaPadroes = objRetorno.optString("tipoRetorno");
										nomePortador   = objRetorno.optString("nomePortador").trim();
										complemento01  = objRetorno.optString("complemento01").trim();
										nomePortador2  = objRetorno.optString("nomePortador2").trim();
									}
									// logger.logDebug("NP2 == "+nomePortador2);
									if (retornaPadroes.equals("continue")) continue;
									if (retornaPadroes.equals("break"))   {
										jStatus = new JSONObject();
										logger.logDebug("PUTSTATUS 657");
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								}*/
								
								if (!cabecalhoPlanilha.toString().equals("") && (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null  || (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")))) {
								// if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && abaConvertida == 0)  // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

									JSONObject variaveis = new JSONObject();
									variaveis.put("line", line).put("anoData", anoData).put("dirName", dirName).put("jStatus", jStatus)
											 .put("extensao", extensao).put("codEmpresa", codEmpresa).put("nomeArquivo", nomeArquivo)
											 .put("nomeEmpresa", nomeEmpresa).put("nomePortador", nomePortador).put("tipoPlanilha", tipoPlanilha)
											 .put("complemento01", complemento01).put("complemento02", complemento02)
											 .put("nomePortador2", nomePortador2).put("tipoLancamento", tipoLancamento)
											 .put("cabecalhoPlanilha", cabecalhoPlanilha.toString());									
									
									// if (codEmpresa.contains("104")) {
										// roteiroCRM.put("Planilhas_Padroes", "Extrato_C6Bank_PDF");
									// }
									
									// logger.logDebug("nome do arquivo " + nomeArquivo);
									
									retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);
									
									
									// logger.logDebug("retorna padroes -> " + retornaPadroes);
									
									
									// logger.logDebug("CHAMOU O TEMPLATE " + retornaPadroes);
 
									JSONObject objRetorno = new JSONObject(retornaPadroes);
									if (objRetorno.has("tipoRetorno")) {
										anoData        = objRetorno.optString("anoData");
										retornaPadroes = objRetorno.optString("tipoRetorno");
										nomePortador   = objRetorno.optString("nomePortador").trim();
										complemento01  = objRetorno.optString("complemento01").trim();
										nomePortador2  = objRetorno.optString("nomePortador2").trim();
									}
									
									// logger.logDebug("NP23 " + nomePortador + " | " + nomePortador2);
									
									// logger.logDebug("NP2 ==== "+nomePortador2);
									if (retornaPadroes.equals("continue")) continue;
									if (retornaPadroes.equals("break"))   {
										jStatus = new JSONObject();
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								}

								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~-
								//                      LEITURA PADRAO DE DUPLICATAS
								//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~-
								if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && !mantemArquivo.equals("SIM")){

 
									jDadosPadrao.put("erpContabilidade", roteiroCRMPrincipal.optString("erpContabilidade"))
												.put("LINE", line).put("PRIMEIRAVEZ", primeiraVezDuplicata).put("DIRNAME", dirName)
												.put("TIPOPLANILHA", tipoPlanilha).put("TIPOLANCAMENTO", tipoLancamento);
									
									if (!numSeparadorDuplicata.equals("")) jDadosPadrao.put("NUMSEPARADOR", numSeparadorDuplicata);
									
									if (!roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("NAO USAR")) {
										jDadosPadrao.put("CONTROLAPARCELA",  true);  

									} 
 
									primeiraVezDuplicata = leituraDuplicataPadrao(jDadosPadrao, memFile, mapaVariavel, dbIOCont, logger);

									if(!primeiraVezDuplicata){
										jStatus = new JSONObject();
										// logger.logDebug("PUTSTATUS 687");
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								} 
								
								if (cont < 2) {
									// logger.logDebug(StringUtil.removeSpecialCharsToUC(memFile.getLines().toString()));
									if (TemplateUtils.verificaConciliacao(StringUtil.removeSpecialCharsToUC(memFile.getLines().toString()))) {
										mapaConciliacao = leituraConciliacao(mapaConciliacao, memFile, logger);
										fazConciliacao = true;
										break;
									}
								}

								//implementa leitura do arquivo de participantes lcdpr
								if (roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO") && !mantemArquivo.equals("SIM")) {
									if (fazLcdpr.equals("TRUE") && cont < 2) {
										if (memFile.getLines().toString().toUpperCase().contains("RELACAO DE PARTICIPANTES DA ATIVIDADE RURAL")){
											mapaParticipante = leituraLivroCaixaDigitalProdutorRural(mapaParticipante, memFile, logger);
											break;
										}
									}
									/// BUSCA COTNRATOS EM ABERTO (RECEBIMENTOS) PARA BAIXA DE CONTRATOS IMOBILIARIOS
									if(roteiroCRM.optString("Integracao_contratos").toUpperCase().contains("TRUE")) {
										
										if (line.contains("DOCUMENTO") && 
											line.contains("EMISSAO") && 
											line.contains("V. PARCELA") && 
											line.contains("DEVOLUCAO") && 
											line.contains("SALDO") && 
											line.contains("SITUACAO")) {
											

											tipoPlanilha = "DUPLICATA-DOMINIO"; 

											if(primeiraVezDuplicata) limparIODuplicataTipoPlanilha(codEmpresa, dbIOCont, tipoPlanilha, logger);

											JSONObject jIndices = new JSONObject();
												
											jIndices.put("IVENCIMENTO", 9).put("INOMEORIGEM", 4).put("IDUPLICATA", 4).put("IVALORPARCELA", 12)
													.put("CODEMPRESA", codEmpresa).put("TIPOPLANILHA", tipoPlanilha);

											primeiraVezDuplicata = inserirIODuplicata_DominioPlanilha02(jIndices, memFile, dbIOCont, logger);
											primeiraVezDuplicata = false;
											jStatus = new JSONObject();
											// logger.logDebug("PUTSTATUS 730");
											putStatus(dirName, "", jStatus, logger);

											break;
										}
									}
								}
																
								
									
								////////////////////////////////////////////////////////////////////////////////
								//////////////////////////////////////////////////////////////// FIM DOS PADROES
								////////////////////////////////////////////////////////////////////////////////
								
								// #DOCUMENTACAO
								// lipeza de variaveis e de indices ao mudar de TIPOPLANILHA
								// logger.logDebug("CPTS " + cabecalhoPlanilha.toString());
								JSONObject jDadosObj = new JSONObject();
								if(!tipoPlanilha.equals(getTipoPlanilha(cabecalhoPlanilha.toString() + " " + line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj))){
									inomeOrigem			= -1;		nomeOrigem		= "";
									idataMovimento		= -1;		dataMovimento	= "";
									inomePortador		= -1;		nomePortador	= "";
									idocumento			= -1;		documento		= "";
									icpfCnpj			= -1;		cpfCnpj			= "";
									icodCcOrigem		= -1;       codCcOrigem		= "";
									icomplemento01		= -1;      	complemento01	= "";
									icomplemento02		= -1;      	complemento02	= "";
									icomplemento03		= -1;      	complemento03	= "";
									icomplemento04		= -1;      	complemento04	= "";
									icomplemento05		= -1;      	complemento05	= "";
									icomplemento06		= -1;      	complemento06	= "";
									ivalorDocumento		= -1;		complemento07	= "";
									ivalorAlternativo	= -1;		complemento08	= "";
									ivalorJuros			= -1;		complemento09	= "";
									ivalorDesconto		= -1;		complemento10	= "";
									ivalorMulta			= -1;
									ivalorPagamento		= -1;
									idataFake			= -1;
								}
								// #DOCUMENTACAO
								// busca tipoplanilha e indices da planilhas secundarias
								
								tipoPlanilha = getTipoPlanilha(cabecalhoPlanilha.toString() + " " + line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj);
								// if(codEmpresa.equals("214")){
									// logger.logDebug("214 = TP -> "+tipoPlanilha+" | LN = "+line);
								// }
								
								if (nomeArquivo.toUpperCase().contains(".PDF") && !nomeArquivo.toUpperCase().contains(".CSV")) {
									if (TemplateUtils.verificaConversorNovoTipoPlanilha(tipoPlanilha)) {
										LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
										String idConversor  = TemplateUtils.getIdLote(nomeArquivo);
										// logger.logDebug("FOI PRO CONVERSOR1 " + nomeArquivo);
										boolean deubom = false;
										deubom = buscaProtocoloConversor(idConversor, apiWeb, tipoLancamento.toLowerCase(), nomeArquivo, logger);
										
										if (deubom) {
											File file2 = new File(dirName);
									
											File []  arquivoParaConverter = file2.listFiles();
											if (FileUtil.dirHasFiles(dirName)) {
												for (File fl: arquivoParaConverter) {
													if (fl.getName().toUpperCase().contains(".PDF")) {
														try {
															FileUtil.deleteFile(fl);
														} catch (Exception XX) {}
														break;
													}
												}
											}
										}
										continue;
									}
								}
								
								//#2306-007459
								if(tipoPlanilha.contains("CARTAO_SIPAG7") && extensao.contains("CSV")){
									memFile.setFieldSeparator(";");
								}
 
								if(!tipoPlanilha.equals("MOVIMENTO")){
									roteiroCRM = buscaRoteiro("getRoteiro"+tipoPlanilha, logger);
									inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
									idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
									inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
									idocumento      = getIndice("documento", idocumento, roteiroCRM);
									ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
									ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
									ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
									ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
									icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
									ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
									ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
									icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
									icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
									icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
									icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
									icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
									icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
									icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
									icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
									icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
									icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
									idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
									icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);
									
									zerar			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
									
									
									// Em casos onde a planilha secund?ria precisa de uma aba espec?fica descomentar essa linha
									if(!roteiroCRM.optString("Abas_Especificas").equals("") && !roteiroCRM.optString("Abas_Especificas").contains(String.valueOf(abaConvertida))) continue;

								}
								
								if(nomeArquivo.toUpperCase().contains("OTTIMIZZA")){
									if(!logsTxt.toString().contains("MANTEMARQUIVO"))logsTxt.append("STATUS;DATA;VALOR;DOCUMENTO;CLIENTE/FORNECEDOR;PORTADOR;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;COMPLEMENTO06;TIPOPLANILHA;MANTEMARQUIVO;PROCESSAOUD;LINHA;");
									logs = true;
								}

								// #DOCUMENTACAO
								// tratamento de "Agrupar Colunas Excel" e "Agrupar a partir da coluna"
								try {
									fazerShrinkDelimitandoPosicoes(roteiroCRM, memFile);
								} catch (IllegalArgumentException e) {
									//TODO: handle exception
									erroShrink = true;
									logger.logError("Deu ruim no shrink \n"+e);
									break;
								}
								/////////////////////////////
								// VALIDACAO POR CABECALHO //
								/////////////////////////////
 

 								inomeOrigem		= getIndiceCabecalho("nomeOrigem", inomeOrigem, memFile, roteiroCRM);
								idataMovimento	= getIndiceCabecalho("dataMovimento", idataMovimento, memFile, roteiroCRM);
								inomePortador	= getIndiceCabecalho("nomePortador", inomePortador, memFile, roteiroCRM);
								idocumento		= getIndiceCabecalho("documento", idocumento, memFile, roteiroCRM);
								ivalorDocumento	= getIndiceCabecalho("valorDocumento", ivalorDocumento, memFile, roteiroCRM);
								ivalorJuros		= getIndiceCabecalho("valorJuros", ivalorJuros, memFile, roteiroCRM);
								ivalorDesconto	= getIndiceCabecalho("valorDesconto", ivalorDesconto, memFile, roteiroCRM);
								ivalorMulta		= getIndiceCabecalho("valorMulta", ivalorMulta, memFile, roteiroCRM);
								ivalorAlternativo = getIndiceCabecalho("valorAlternativo", ivalorAlternativo, memFile, roteiroCRM);
								ivalorPagamento	= getIndiceCabecalho("valorPagamento", ivalorPagamento, memFile, roteiroCRM);
								icodCcOrigem	= getIndiceCabecalho("codCcOrigem", icodCcOrigem, memFile, roteiroCRM);
								
								icomplemento01	= getIndiceCabecalho("complemento01", icomplemento01, memFile, roteiroCRM);
								icomplemento02	= getIndiceCabecalho("complemento02", icomplemento02, memFile, roteiroCRM);
								icomplemento03	= getIndiceCabecalho("complemento03", icomplemento03, memFile, roteiroCRM);
								icomplemento04	= getIndiceCabecalho("complemento04", icomplemento04, memFile, roteiroCRM);
								icomplemento05	= getIndiceCabecalho("complemento05", icomplemento05, memFile, roteiroCRM);
								icomplemento06	= getIndiceCabecalho("complemento06", icomplemento06, memFile, roteiroCRM);
								icomplemento07	= getIndiceCabecalho("complemento07", icomplemento07, memFile, roteiroCRM);
								icomplemento08	= getIndiceCabecalho("complemento08", icomplemento08, memFile, roteiroCRM);
								icomplemento09	= getIndiceCabecalho("complemento09", icomplemento09, memFile, roteiroCRM);
								icomplemento10	= getIndiceCabecalho("complemento10", icomplemento10, memFile, roteiroCRM);
								idataFake		= getIndiceCabecalho("dataFake", idataFake, memFile, roteiroCRM);
								icpfCnpj		= getIndiceCabecalho("cpfCnpj", icpfCnpj, memFile, roteiroCRM);
								
								isLinhaPrincipal = false;
								ignorarAntes = false;

								JSONObject histobj = new JSONObject();
								lerAposPrincipal = roteiroCRM.optString("lerAposPrincipal").toUpperCase();

								// #DOCUMENTACAO
								// ignorar antes
								if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO")) {

									histobj.put("nomeOrigem", getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger));
									histobj.put("documento", getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger));
									histobj.put("complemento01", getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger));
									histobj.put("complemento02", getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger));
									histobj.put("complemento03", getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger));
									histobj.put("complemento04", getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger));
									histobj.put("complemento05", getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger));
									histobj.put("complemento06", getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger));
									histobj.put("nomePortador", getCampoString(nomePortador,	inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger));
									histobj.put("dataMovimento", "").put("mesAnoAnterior", "").put("mesAno2Anterior", "")
										   .put("mesAnoAtual", "").put("contaMovimento", "").put("contaPortador", "").put("contaDebito", "")
										   .put("contaCredito", "").put("contaJuros", contaJuros).put("contaDesconto", contaDesconto)
										   .put("contaMulta", contaMulta).put("valorDocumento", "").put("valorJuros", "")
										   .put("valorDesconto", "").put("valorMulta","").put("codFilial", "")
										   .put("numeroAba", String.valueOf(abaConvertida)).put("tipoPlanilha", tipoPlanilha)
										   .put("nomeArquivo", nomeArquivo.toUpperCase());

									ignorarAntes = getTratarLinhaIgnorar(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento,
																		 getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger),
																		 getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger), histobj);

									if (ignorarAntes) continue;

									double valorValido = 0;
									try{valorValido = Math.abs(memFile.getDoubleField(ivalorDocumento));}
									catch (Exception vlrd) { valorValido = 0; }

									if(ivalorDocumento < 0 && ivalorPagamento >= 0){
										try{valorValido = Math.abs(memFile.getDoubleField(ivalorPagamento));}
										catch (Exception vlrd) { valorValido = 0; }
									}


									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&  valorValido > 0) isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !histobj.optString("nomeOrigem").equals("")) isLinhaPrincipal = true;

								}

								if (naoLeMais) continue;
								if (tipoPlanilha.equals("")) continue;
								

								// #DOCUMENTACAO
								// leitura de xlsx e csv
								if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || (!roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA ("))) {
									zerar 			  = !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
 									
									// #Fabrica(2019-05-20)
									if (tipoPlanilha.contains("OTTCARTAO")) {
										try{
											String auxMes 	  = getMonth(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "));
											if(auxMes.length() == 2 && !auxMes.equals(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "))){
												dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "), auxMes).replaceAll(" ", "/");
											}else if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).length() > 11 
											 && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains("/") 
											 && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains(",")
											 && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains(":")){
												dataMovimento     = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), 0, memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).lastIndexOf("/")+5);
											}else{
												dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
											} 											
											 
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
										}catch(Exception e){
											// dataMovimento   = "";
											// dataLote        = "";
										}
									}
									
									if (!tipoPlanilha.contains("OTTCARTAO")) {
										// #Fabrica(2019-05-20)
										try{
											dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
											 
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
										}catch(Exception e){
											// dataMovimento   = "";
											// dataLote        = "";
										}
									}
									if (tipoLancamento.contains("PAGAR")&& memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA RECEBIMENTO") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("DOCUMENTO")
										&& memFile.getStringFieldRemoveEspCharsUpper(2).contains("CLIENTE /  DESCRICAO RECEITA") && memFile.getStringFieldRemoveEspCharsUpper(3).contains("DETALHES DO RECEBIMENTO")
										&& memFile.getStringFieldRemoveEspCharsUpper(4).contains("VALOR ORIGINAL") && memFile.getStringFieldRemoveEspCharsUpper(5).contains("VALOR RECEBIDO")
										&& memFile.getStringFieldRemoveEspCharsUpper(6).contains("BANCO (PORTADOR)") && memFile.getStringFieldRemoveEspCharsUpper(7).contains("CATEGORIA (RECEITA)")){
										break;
									}
									
									// logger.logDebug("TP -> "+tipoPlanilha+" - Empresa -> "+nomeEmpresa+" - DM -> "+line);
									
									
 								   
									// leitura de data mantida por seguranca
									// String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger).trim();
									// if (!dataString.equals("")) {
									// 	String dataMovimentoAux	  = getCampoDate(dataString);
									// 	if (dataMovimentoAux.contains("/")) {
									// 		dataMovimento     = getCampoDate(dataString);
									// 		dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
									// 	}
									// }

									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals("")) isLinhaPrincipal = true;
								
									
									if (!zerarColAlternativo.equals("")) {
										if (zerarColAlternativo.contains("documento"))		documento		= "";
										if (zerarColAlternativo.contains("nomeOrigem"))		nomeOrigem		= "";
										if (zerarColAlternativo.contains("nomePortador"))   nomePortador	= "";
										if (zerarColAlternativo.contains("complemento01"))  complemento01	= "";
										if (zerarColAlternativo.contains("complemento02"))  complemento02	= "";
										if (zerarColAlternativo.contains("complemento03"))  complemento03   = "";
										if (zerarColAlternativo.contains("complemento04"))  complemento04   = "";
										if (zerarColAlternativo.contains("complemento05"))  complemento05   = "";
										if (zerarColAlternativo.contains("complemento06"))  complemento06   = "";
										if (zerarColAlternativo.contains("complemento07"))  complemento07   = "";
										if (zerarColAlternativo.contains("complemento08"))  complemento08   = "";
										if (zerarColAlternativo.contains("complemento09"))  complemento09   = "";
										if (zerarColAlternativo.contains("complemento10"))  complemento10   = "";
									}
									
									nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger);
									nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger);
									documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger);

									complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);
									complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, logger);
									
									if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) {
											try{complemento01     = getDate(complemento01, icomplemento01, line, false, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) {
											try{complemento02     = getDate(complemento02, icomplemento02, line, false, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) {
											try{complemento03     = getDate(complemento03, icomplemento03, line, false, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) {
											try{complemento04     = getDate(complemento04, icomplemento04, line, false, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										}
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) {
											try{complemento05     = getDate(complemento05, icomplemento05, line, false, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										} 
										if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) {
											try{complemento06     = getDate(complemento06, icomplemento06, line, false, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);}
											catch(Exception e){}
										} 
									}
									
									cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, logger);
									codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, logger);

									historico		= "";
									parcelaDoc      = 1;

									valorDocumento	= 0;
									valorDocumentoArray[0] = 0;
									valorDocumentoArray[1] = 0;
									valorDocumentoArray[2] = 0;
									valorDocumentoArray[3] = 0;
									valorDocumentoArray[4] = 0;
									valorDocumentoArray[5] = 0;
									valorDocumentoArray[6] = 0;
									valorDocumentoArray[7] = 0;
									valorDocumentoArray[8] = 0;
									valorDocumentoArray[9] = 0;
									
									valorJuros		= 0;
									valorDesconto	= 0;
									valorMulta		= 0;
									valorPagamento	= 0;
									
									debitoCredito 	= "";
									valorAlternativo = 0;
									
									if(ivalorJuros >=0){
										try{valorJuros = Math.abs(memFile.getDoubleField(ivalorJuros));}
										catch (Exception vlrj) { valorJuros = 0;}
									}
									
									if(ivalorDesconto >=0){
										try{valorDesconto = Math.abs(memFile.getDoubleField(ivalorDesconto));}
										catch(Exception vlrd) {valorDesconto = 0;}
									}
									
									// quando no CRM colocarmos que a coluna de juros eh a mesma de valor desconto 
									// no caso do valor ser negativo, jogaremos zero para juros, ficando o valor absoluto da coluna como desconto
									// no caso do valor ser positivo, jogamos zero em valor desconto, ficando apenas com o valor dos juros
									if((ivalorDesconto == ivalorJuros) && valorJuros > 0 && ivalorJuros > 0){
										try{
											if(memFile.getDoubleField(ivalorDesconto) < 0) valorJuros = 0;
											else valorDesconto = 0;
										} catch(Exception vlrd) {}
									}
									
									if(ivalorMulta >=0){
										try{valorMulta = Math.abs(memFile.getDoubleField(ivalorMulta));}
										catch(Exception vlrm) {valorMulta = 0;}
									}
									
									//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if(ivalorDocumento >=0){
										try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
										catch (Exception vlrd) { valorDocumento = 0; }
									}
									
									// logger.logDebug("TP -> "+ ivalorDocumento + " | " + idataMovimento + " TREM " + 
													// tipoPlanilha+" - Empresa -> "+valorDocumento+" - DM -> "+dataMovimento + " | " + memFile.getStringFieldRemoveEspCharsUpper(0));
									
									if(logs && cont <= 200){
										
										logsTxt.append("\r\n");
										logsTxt.append("ANALISTA AUX").append(";").append(dataMovimento).append(";").append(valorDocumento).append(";")
											   .append(documento).append(";").append(nomeOrigem).append(";").append(nomePortador).append(";").append(complemento01)
											   .append(";").append(complemento02).append(";").append(complemento03).append(";").append(complemento04).append(";")
											   .append(complemento05).append(";").append(complemento06).append(";").append(tipoPlanilha).append(";")
											   .append(mantemArquivo.equals("SIM") ? "LENDO PELO TEMPLATE (SIM)" : "LENDO ESPECIFICO (NAO)").append(";")
											   .append(line).append(";");
																	
									}

									// logger.logDebug("ROTEIRO coluna Extra => " + roteiroCRM.optString("Colunas_de_Valores_Extras") + " |TP => " + tipoPlanilha);
									if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {
										String [] indiceValores = roteiroCRM.optString("Colunas_de_Valores_Extras").split(";");
										valorSomaArray = 0;
										for(int iv = 0; iv < indiceValores.length; iv++) {
											// try{
												// logger.logDebug("IDValores -> " + indiceValores[iv].toString());
												// if(!indiceValores[iv].contains("*") && !indiceValores[iv].contains("/") && !indiceValores[iv].contains("+") && !indiceValores[iv].contains("-") && !indiceValores[iv].contains("#")){
													// logger.logDebug("ENTROU IF");
													// String rotuloColuna = "";
													// String [] rotuloArray  = roteiroCRM.optString("Rotulos_Para_Valores_Extras").split(";");
													// logger.logDebug("ROTULO ARRAY => " +rotuloArray[iv].toString());
													// indiceValores[iv]	= getIndiceCabecalhoExtra(rotuloArray[iv], memFile);
													// logger.logDebug("INDICE dps => " +indiceValores[iv].toString());
												// }
											// }catch(Exception xx){
												// logger.logDebug("CAIU CATCH");
											// }
												
											//ssss
											double denomidador = 0; 
											int indiceDenominador = -1;
											String sinal = "";
											boolean multiplica100 = false;
											boolean divide100 = false;
											
											if (indiceValores[iv].contains("*100")) multiplica100 = true;
											if (indiceValores[iv].contains("/100")) divide100 = true;
											indiceValores[iv] = indiceValores[iv].replace("*100","").replace("/100","");
											
											if (indiceValores[iv].contains("*")) sinal = "*";
											if (indiceValores[iv].contains("/")) sinal = "/";
											if (indiceValores[iv].contains("+")) sinal = "+";
											if (indiceValores[iv].contains("-")) sinal = "-";										

																					
											if (!sinal.equals("") && indiceValores[iv].contains(sinal)) {
 												try {
													if (!indiceValores[iv].contains("#")) {
														denomidador = Math.abs(memFile.getDoubleField(Integer.parseInt(cutString(indiceValores[iv], sinal))));
													}
													else {
														denomidador = DecimalUtil.toDecimal(cutString(indiceValores[iv], "#"));
													}
												} catch (Exception xx) {denomidador = 0;}
												indiceValores[iv] = cutString(indiceValores[iv], 0, sinal);
											} 
											 	
											
											try{
											
												valorDocumentoArray[iv] = Math.abs(memFile.getDoubleField(Integer.parseInt(indiceValores[iv])));
												if (sinal.equals("*") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] * denomidador;
												if (sinal.equals("/") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] / denomidador;
												if (sinal.equals("+") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] + denomidador;
												if (sinal.equals("-") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] - denomidador;
												if (multiplica100) valorDocumentoArray[iv] = valorDocumentoArray[iv] * 100;
												if (divide100)     valorDocumentoArray[iv] = valorDocumentoArray[iv] / 100;
												
 
												
 											}
											catch (Exception vlrd) { 

 
 
												valorDocumentoArray[iv] = 0; 
											}
											
											if(valorDocumentoArray[iv] < 0){
												valorDocumentoArray[iv] = 0;
											} 
											
											valorSomaArray += valorDocumentoArray[iv];
										}
									}
									
									
									if(ivalorPagamento >=0){
										try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
										catch(Exception vlrp) {valorPagamento = 0;}
									}
									
									if(ivalorAlternativo >= 0){
										try{valorAlternativo = memFile.getDoubleField(ivalorAlternativo);}
										catch (Exception vlrd) { valorAlternativo = 0; }
									}
									
									if (tipoLancamento.equals("PAGAR"))
										debitoCredito = "EXTRATO-DEBITO";
									
									if (tipoLancamento.equals("RECEBER"))
										debitoCredito = "EXTRATO-CREDITO";
								
									
									////////////////////////////////////////////////
									////	busca Coluna Alternativa 
									JSONObject obj1 = new JSONObject();
									String validar	= "dataMovimento;nomeOrigem;documento;complemento01;complemento02;complemento03;complemento04;complemento05;complemento06;complemento07;complemento08;complemento09;complemento10;nomePortador;valorDocumento;valorPagamento;valorJuros;valorDesconto;valorMulta";
									obj1.put("validar",			validar);
									obj1.put("documento",		documento);
									obj1.put("nomeOrigem",		nomeOrigem);
									obj1.put("nomePortador",	nomePortador);
									obj1.put("dataMovimento",	dataMovimento);
									obj1.put("complemento01",	complemento01);
									obj1.put("complemento02",	complemento02);
									obj1.put("complemento03",	complemento03);
									obj1.put("complemento04",	complemento04);
									obj1.put("complemento05",	complemento05);
									obj1.put("complemento06",	complemento06);
									obj1.put("complemento07",	complemento07);
									obj1.put("complemento08",	complemento08);
									obj1.put("complemento09",	complemento09);
									obj1.put("complemento10",	complemento10);
									obj1.put("codCentroCusto",	codCcOrigem);
									obj1.put("tipoPlanilha",	tipoPlanilha);
									obj1.put("numeroAba",		String.valueOf(abaConvertida));
									obj1.put("nomeArquivo",		nomeArquivo.toUpperCase());
									JSONObject alternativeObj = getAlternativeDataInt (obj1, memFile);
									String changed = alternativeObj.optString("changeIt");
									
									if(!changed.equals("")) {
										zerarColAlternativo = changed;
										if (changed.contains("dataMovimento")) {
											dataMovimento	= alternativeObj.optString("dataMovimento");
											dataLote		= alternativeObj.optString("dataLote");
										}
										if (changed.contains("documento"))		documento		= alternativeObj.optString("documento");
										if (changed.contains("nomeOrigem"))		nomeOrigem		= alternativeObj.optString("nomeOrigem");
										if (changed.contains("nomePortador"))   nomePortador	= alternativeObj.optString("nomePortador");
										
										if (changed.contains("complemento01"))  complemento01	= alternativeObj.optString("complemento01");
										if (changed.contains("complemento02"))  complemento02	= alternativeObj.optString("complemento02");
										if (changed.contains("complemento03"))  complemento03   = alternativeObj.optString("complemento03");
										if (changed.contains("complemento04"))  complemento04   = alternativeObj.optString("complemento04");
										if (changed.contains("complemento05"))  complemento05   = alternativeObj.optString("complemento05");
										if (changed.contains("complemento06"))  complemento06   = alternativeObj.optString("complemento06");
										if (changed.contains("complemento07"))  complemento07   = alternativeObj.optString("complemento07");
										if (changed.contains("complemento08"))  complemento08   = alternativeObj.optString("complemento08");
										if (changed.contains("complemento09"))  complemento09   = alternativeObj.optString("complemento09");
										if (changed.contains("complemento10"))  complemento10   = alternativeObj.optString("complemento10");
										
										if (changed.contains("valorDocumento"))	valorDocumento	= alternativeObj.optDouble("valorDocumento");
										
										if (changed.contains("valorPagamento"))	valorPagamento  = alternativeObj.optDouble("valorPagamento");
										if (changed.contains("valorDesconto"))	valorDesconto	= alternativeObj.optDouble("valorDesconto");
										if (changed.contains("valorJuros"))		valorJuros		= alternativeObj.optDouble("valorJuros");
										if (changed.contains("valorMulta"))		valorMulta		= alternativeObj.optDouble("valorMulta");
									}
									

									// fazer regra quando tiver valor documento e alternativo na mesma coluna
									String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
									if (!tratarComoValorAlternativo.equals("")) {											
										if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
										if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
										if(ivalorAlternativo >= 0) valorDocumento = valorAlternativo;
									}else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes	
										if(valorDocumento == 0 && ivalorAlternativo >= 0){		
											if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
											if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
											valorDocumento = valorAlternativo;
										}
									}
									// ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if((ivalorDocumento < 0 || tipoPlanilha.contains("PADRAOOTTIMIZZA")) && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}
									if(valorDocumento>0 && ivalorJuros < 0 && ivalorDesconto < 0 && valorPagamento > 0){
										if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
										if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
									}

									valorDocumento = Math.abs(valorDocumento);
									

									
									// ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && (valorDocumento > 0 || valorSomaArray > 0)) isLinhaPrincipal = true;
									
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&
										lerAposPrincipal.equals("") && (valorDocumento == 0 && valorSomaArray == 0)) {
											
										continue;
									}
								}
								
 

								// #DOCUMENTACAO
								// leitura de TXT
								if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && roteiroCRM.optString("dataMovimento").replaceAll(" ", "").toUpperCase().startsWith("COLUNA(") && roteiroCRM.optString("dataMovimento").endsWith(")")) {
  
									String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, roteiroCRM, logger).trim();
  
   
									if (!dataString.equals("") && dataString.contains("/")) {
										String dataMovimentoAux	  = getCampoDate(dataString);
										if (dataMovimentoAux.contains("/")) {
											dataMovimento     = getCampoDate(dataString);
											dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
 										}
									}
  									
  
									// ajusta data quando vem no formato 01012021  
									if (!dataString.equals("") && !dataString.contains("/") && dataString.contains("20")) {
										try {
											Date dts = DateUtil.stringToDate(dataString, "ddMMyyyy");
											dataMovimento = DateUtil.dateToString(dts, "dd/MM/yyyy");
											dataLote = DateUtil.dateToString(dts, "yyyy-MM");
											if (!dataMovimento.contains("/20")) {   // data bichada sera ignorada
												dataMovimento = "";
												continue;
											}
										} catch (Exception dt1) {
											continue;
										}
									}
  
 
									nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, roteiroCRM, logger);
									nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, roteiroCRM, logger);
									documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, roteiroCRM, logger);

									complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, roteiroCRM, logger);
									complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, roteiroCRM, logger);
									complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, roteiroCRM, logger);
									complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, roteiroCRM, logger);
									complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, roteiroCRM, logger);

									complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, roteiroCRM, logger);
									complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, roteiroCRM, logger);
									complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, roteiroCRM, logger);
									complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, roteiroCRM, logger);
									complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, roteiroCRM, logger);
									cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, roteiroCRM, logger);
									codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, 	line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, roteiroCRM, logger);


									valorDocumento = getDoubleTXT2020(roteiroCRM.optString("valorDocumento").toUpperCase(), line, objetoParametro);
									
									if (tipoPlanilha.contains("OTTCARTAO")) {
									    String valorStr = getCampoString("", -1, 	line, false, roteiroCRM.optString("valorDocumento").toUpperCase(), memFile, roteiroCRM, logger);
										if (!valorStr.contains(".") && !valorStr.contains(",")) valorDocumento = valorDocumento / 100;
									}

									valorJuros	   = getDoubleTXT2020(roteiroCRM.optString("valorJuros").toUpperCase(), line, objetoParametro);
									valorDesconto  = getDoubleTXT2020(roteiroCRM.optString("valorDesconto").toUpperCase(), line, objetoParametro);
									valorMulta 	   = getDoubleTXT2020(roteiroCRM.optString("valorMulta").toUpperCase(), line, objetoParametro);
									valorPagamento = getDoubleTXT2020(roteiroCRM.optString("valorPagamento").toUpperCase(), line, objetoParametro);

									if (tipoLancamento.equals("PAGAR")) 
										if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
											debitoCredito = "EXTRATO-DEBITO";
									
									if (tipoLancamento.equals("RECEBER")) 
										if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
											debitoCredito = "EXTRATO-CREDITO";

									// fazer regra quando tiver valor documento e alternativo na mesma coluna
									String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
									if (!tratarComoValorAlternativo.equals("")) {											
										if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
										if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
										if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")) valorDocumento = valorAlternativo;
									}else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes	
										if(valorDocumento == 0 && roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")){		
											if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
											if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
											valorDocumento = valorAlternativo;
										}
									}

									if(!roteiroCRM.optString("valorDocumento").toUpperCase().contains("COLUNA") && valorDocumento == 0){
										if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
										else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
									}
									if(valorDocumento > 0 && !roteiroCRM.optString("valorJuros").toUpperCase().contains("COLUNA") && !roteiroCRM.optString("valorDesconto").toUpperCase().contains("COLUNA") && valorPagamento > 0){
										if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
										if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
									}
									
									//#2305-0004328. Coluna de valor extra para o formato txt
									if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {
                                        valorSomaArray = TemplateUtils.lerValoresExtrasArquivoTxt(valorDocumentoArray, line, roteiroCRM, null);
                                    }
									valorDocumento = Math.abs(valorDocumento);
									
									// if(logs && cont <= 200){
										// logsTxt.append("\r\n");
										
										// logsTxt.append("ANALISTA AUX");												logsTxt.append(";");
										// logsTxt.append(dataMovimento); 												logsTxt.append(";");
										// logsTxt.append(valorDocumento);												logsTxt.append(";");
										// logsTxt.append(documento);													logsTxt.append(";");
										// logsTxt.append(nomeOrigem);													logsTxt.append(";");
										// logsTxt.append(nomePortador);												logsTxt.append(";");
										// logsTxt.append(complemento01);												logsTxt.append(";");
										// logsTxt.append(complemento02);												logsTxt.append(";");
										// logsTxt.append(complemento03);												logsTxt.append(";");
										// logsTxt.append(complemento04);												logsTxt.append(";");
										// logsTxt.append(complemento05);												logsTxt.append(";");
										// logsTxt.append(complemento06);												logsTxt.append(";");
										// logsTxt.append(tipoPlanilha);												
										// if(mantemArquivo.equals("SIM"))logsTxt.append("LENDO PELO TEMPLATE");		logsTxt.append(";");
										// if(mantemArquivo.equals("NAO"))logsTxt.append("LENDO ESPECIFICO");			logsTxt.append(";");
										// logsTxt.append(line);														logsTxt.append(";");
																		
									// }
									
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals(""))  isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && (valorDocumento > 0 || valorSomaArray > 0))		  isLinhaPrincipal = true;
									if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !nomeOrigem.equals("")) isLinhaPrincipal = true;
								}


								// #DOCUMENTACAO
								// mes ano anterior 
								if(dataMovimento.length() > 9){
									mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
									anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
									mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
									mesRef	= mesRef - 1;
									if (mesRef	== 0) {
										mesRef	= 12;
										anoRef	= anoRef - 1;
									}
									mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
								}
								
								// #DOCUMENTACAO
								// filtro de datas (parametro definido por integracao no CRM, e informado a cada processamento de arquivos)
								//if (nomeArquivo.toUpperCase().contains("FILTRO_")) filtro = validaFiltro(nomeArquivo, dataMovimento);
								if (nomeArquivo.toUpperCase().contains("FILTRO_")) {
									temFiltro = true;
									filtro = validaFiltro(nomeArquivo, dataMovimento);
								}
								if (!filtro) continue;

								valorTotalDoc   += valorDocumento;
								valorTotalJuros += valorJuros;
								valorTotalDesc  += valorDesconto;

								if (documento.contains(".") && documento.contains("E")) {
									documento = removerNotacaoCientificaExcel(documento);
								}
								
								// #DOCUMENTACAO
								// cpfCnpj
								boolean aceitaCpf			= true;
								boolean cnpjSomenteNumeros	= Boolean.parseBoolean(roteiroCRM.optString("cnpjSomenteNumeros").toLowerCase().trim());

								if(!cpfCnpj.equals("")) cpfCnpj = trataCpfCnpj(cpfCnpj, cnpjSomenteNumeros, aceitaCpf);
								
								// #DOCUMENTACAO
								// ajustes fornecedor/cliente e portador
								if (nomeOrigem.equals("") && !roteiroCRM.optString("lerAposPrincipal").toUpperCase().contains("FORNECEDOR")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
								nomeOrigem = nomeOrigem.trim();
								
								//Removemos o replace de AMP por conta de um efeito colateral #202212-0022861
								//nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").replaceAll("AMP","").trim();
								nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								// nomeOrigem = stringNormalizer(nomeOrigem, true);
								nomeOrigem = StringUtil.removeSpecialCharsToUC(nomeOrigem);
								
								// 202301-0023496 JWR Coloquei esse balde com o X para remontar o nomeOrigem
								// Descomentar caso d? problema com caracteres especiais
								/*String letrasPermitidas = "ABCDEFGHIJKLMNOPRSTUVWXYZ 0123456789.-/&";
								String nomeOrigemNovo = "";
								for (int xx = 0; xx < nomeOrigem.length(); xx++) {
									if (nomeOrigem.length() > xx) {
										if (letrasPermitidas.contains(nomeOrigem.substring(xx, xx+1))) {
											nomeOrigemNovo = nomeOrigemNovo + nomeOrigem.substring(xx, xx+1);
										}
									}
								}
								nomeOrigem = nomeOrigemNovo;*/

								
								if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();
								nomePortador = nomePortador.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").replaceAll("\\?", "").trim();
								nomePortador = stringNormalizer(nomePortador, true);

								complemento01 = complemento01.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento02 = complemento02.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento03 = complemento03.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento04 = complemento04.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento05 = complemento05.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
								complemento06 = complemento06.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();

								// logger.logDebug("DAMA " + dataMovimento + " | " + valorDocumento + " | " + isLinhaPrincipal);
								if(dataMovimento.equals("")) continue;
								// quando for ler linha principal zerar as variaveis que vem depois da principal para nao sobrepor campos.
								if(isLinhaPrincipal) {
									// #DOCUMENTACAO
									// cont define que eh um novo lancamento (normalmente uma nova linha)
									cont++;

									if (lerAposPrincipal.contains("FORNECEDOR"))	nomeOrigem = "";
									if (lerAposPrincipal.contains("DOCUMENTO"))		documento = "";
									if (lerAposPrincipal.contains("PORTADOR")) 		nomePortador = "";
									if (lerAposPrincipal.contains("COMPLEMENTO01")) complemento01 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO02")) complemento02 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO03")) complemento03 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO04")) complemento04 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO05")) complemento05 = "";
									if (lerAposPrincipal.contains("COMPLEMENTO06")) complemento06 = "";

								}
								
								if(cont == 0) continue;
								
								histobj.put("nomeOrigem", nomeOrigem);					histobj.put("documento", documento);
								histobj.put("complemento01", complemento01);			histobj.put("complemento02", complemento02);
								histobj.put("complemento03", complemento03);			histobj.put("complemento04", complemento04);
								histobj.put("complemento05", complemento05);			histobj.put("complemento06", complemento06);
								histobj.put("complemento07", complemento07);			histobj.put("complemento08", complemento08);
								histobj.put("complemento09", complemento09);			histobj.put("complemento10", complemento10);
								histobj.put("dataMovimento", dataMovimento);			histobj.put("mesAnoAnterior", mesAnoAnterior);
								histobj.put("mesAno2Anterior", mesAno2Anterior);		histobj.put("mesAnoAtual", mesAnoAtual);
								histobj.put("nomePortador", nomePortador);				histobj.put("contaMovimento", contaMovimento);
								histobj.put("contaPortador", contaPortador);	   		histobj.put("contaDebito", "");
								histobj.put("contaCredito", "");						histobj.put("contaJuros", contaJuros);
								histobj.put("contaDesconto", contaDesconto);			histobj.put("contaMulta", contaMulta);
								histobj.put("valorDocumento", valorDocumento);			histobj.put("tipoPlanilha", tipoPlanilha); 
								histobj.put("valorJuros", valorJuros);   				histobj.put("valorDesconto", valorDesconto);
								histobj.put("valorMulta", valorMulta); 				    histobj.put("codFilial", codFilial);
								histobj.put("nomeArquivo", nomeArquivo.toUpperCase()); // foi ajustado 

								//feita limpeza de campo para poder pegar melhor os juros e descontos.
								documento     = getLimpaCamposAvancado("documento", documento, histobj);


								// #DOCUMENTACAO
								// TRATA PLANILHA OU LANCAMENTO EXPECIFICO COMO EXTRATO
								tratarComoExtrato = getTratarComoExtrato(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								nomeOrigem = nomeOrigem.replaceAll("  ", " ").trim();
								if (tratarComoExtrato) {
									if (nomeOrigem.length() > 199) nomeOrigem = cutString(nomeOrigem, 0, 180); // #Fabrica(2019-10-03) @Becker
									JSONObject jDados = new JSONObject();
									jDados.put("PORTADOR",    		nomePortador);
									jDados.put("EMPRESA",     		codEmpresa);
									jDados.put("DATAMOVIMENTO",	 	dataMovimento);
									jDados.put("NOMEARQUIVO",       debitoCredito+nomeArquivo.toUpperCase()); // #DOCUMENTACAO EVITA PROBLEMA DE TRANSFERENCIAS NO MESMO ARQUIVO
									jDados.put("NOMEORIGEM",    	nomeOrigem);
									jDados.put("VALORDOCUMENTO",    valorDocumento);
									jDados.put("COMPLEMENTO01",     complemento02);
									jDados.put("DEBITO-CREDITO",    debitoCredito);
									jDados.put("CONT",  			String.valueOf(cont));
									// logger.logDebug("nomePortador -> " + nomePortador);
									boolean primExtrato = insertIOExtrato(jDados, dbIOCont, logger );
									jStatus = new JSONObject();
									putStatus(dirName, "", jStatus, logger);
									continue;									
								}
								
								debitoCredito = ""; // zera aqui para n?o confundir com extratos bancarios.


								// #DOCUMENTACAO
								// trata lancamento como juros (de outro lancamento)
								complemento10 = "";
								tratarComoJuros = getTratarComoJuros(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								if (tratarComoJuros) {
									complemento10 = dataMovimento + "-" + documento + "-JUROS";
									ttJuros ttJ    = (ttJuros)mapaJuros.get(complemento10);
									if (ttJ == null) {
										ttJ  = new ttJuros();
										ttJ.documento  = documento;
										ttJ.valorJur   = valorDocumento;
										ttJ.valorLido  = 0;
									}
									mapaJuros.put(complemento10,ttJ);
									continue;
								}

								// #DOCUMENTACAO
								// trata lancamento como desconto (de outro lancamento)
								tratarComoDesconto = getTratarComoDesconto(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
								if (tratarComoDesconto) {
									complemento10  = dataMovimento + "-" + documento + "-DESCONTO";
									ttDesconto ttD    = (ttDesconto)mapaDesconto.get(complemento10);

									if(valorDocumento == 0) continue;

									if (ttD == null) {
										ttD  = new ttDesconto();
										ttD.documento  = documento;
										ttD.valorDesc  = valorDocumento;
										ttD.valorLido  = 0;
									}
									mapaDesconto.put(complemento10,ttD);
									continue;
								}

								int restoLinha = 0;
								restoLinha = (cont % 100);
								
								// logger.logDebug("PUTSTATUS 1591");
								if (restoLinha == 0) putStatus(dirName, "02--Etapa 2 de 4 - " + String.valueOf(cont) + "--" + tipoLancamento + ".status", jStatus, logger);


								String contLinhaTexto = String.valueOf(cont);
								contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
								String consolidaClass = StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;

								classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;
								
								
								// quando usa o getColunaAlternativa tem que refatorar o datalote
								dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");								
								
								//alterado para evitar problemas de lote (maiusculo)
								lote = (nomeEmpresa + "_" + codEmpresa + "__" + nomeArquivo  + "__" + dataLote + "_" + tipoLancamento).replaceAll("\\." , "");
								chave = lote + "-" + String.valueOf(abaConvertida) + String.valueOf(contadorArquivo) + "-" + contLinhaTexto;

								// if(codEmpresa.equals("987789")) logger.logDebug("DATA == "+dataMovimento+" | LOTEEE == "+lote.replace("_rodaconversor", "")+" | TP === "+tipoPlanilha+" | COD ROT == "+roteiroCRMPrincipal.optString("codigo"));
								
								if(chave.length() > 200)  chave = chave.substring(0, 199);
								
								// #DOCUMENTACAO
								////////////////////////////////////////////////////////////// ACUMULA ANTES
								histobj.put("nomeOrigem", nomeOrigem);
								histobj.put("documento", documento);
								histobj.put("complemento01", complemento01);
								histobj.put("complemento02", complemento02);
								histobj.put("complemento03", complemento03);
								histobj.put("complemento04", complemento04);
								histobj.put("complemento05", complemento05);
								histobj.put("complemento06", complemento06);
								histobj.put("nomePortador", nomePortador);
								histobj.put("dataMovimento", dataMovimento);
								histobj.put("mesAnoAnterior", mesAnoAnterior);
								histobj.put("mesAno2Anterior", mesAno2Anterior);
								histobj.put("mesAnoAtual", mesAnoAtual);
								histobj.put("valorDocumento", valorDocumento);
								histobj.put("valorJuros", valorJuros);
								histobj.put("valorDesconto", valorDesconto);
								histobj.put("valorMulta",valorMulta);
								histobj.put("tipoPlanilha", tipoPlanilha);
								histobj.put("nomeArquivo", nomeArquivo.toUpperCase());
								histobj.put("line", line.toUpperCase());
								histobj.put("cabecalhoRegra", cabecalhoRegra.toString());
  								
								String modificaData = getModificaData(histobj);
								
								if (modificaData.startsWith("01"))  dataMovimento = getNextDay(dataMovimento, 1, true);
								if (modificaData.startsWith("02"))  dataMovimento = getNextDay(dataMovimento, 2, true);
								if (modificaData.startsWith("03"))  dataMovimento = getNextDay(dataMovimento, 1, false);
								if (modificaData.startsWith("04"))  dataMovimento = getNextDay(dataMovimento, 2, false);
								if (modificaData.startsWith("05"))  dataMovimento = "01/" + cutString(dataMovimento, "/");
								if (modificaData.startsWith("06"))  dataMovimento = getLastDayOfMonth(dataMovimento, true);
								
								
								// METODO QUE REFATORA OS CAMPOS COM BASE NO CABECALHO DO CRM
								// EXEMPLO QUANDO ENCONTRAR #LINE NO CAMPO COMPLEMENTO03, VAMOS JOGAR O LINE NESTE COMPLEMENTO
								// UM COMPLEMENTO02 POR EXEMPLO PODE RECEBER DADOS DE TIPOPLANILHA
								nomeOrigem       = getRefatoraCampo(nomeOrigem, roteiroCRM.optString("fornecedor"), histobj);
								nomePortador     = getRefatoraCampo(nomePortador, roteiroCRM.optString("portador"), histobj);
								documento        = getRefatoraCampo(documento, roteiroCRM.optString("documentoNF"), histobj);
								complemento01    = getRefatoraCampo(complemento01, roteiroCRM.optString("complemento01"), histobj);
								complemento02    = getRefatoraCampo(complemento02, roteiroCRM.optString("complemento02"), histobj);
								complemento03    = getRefatoraCampo(complemento03, roteiroCRM.optString("complemento03"), histobj);
								complemento04    = getRefatoraCampo(complemento04, roteiroCRM.optString("complemento04"), histobj);
								complemento05    = getRefatoraCampo(complemento05, roteiroCRM.optString("complemento05"), histobj);
								complemento06    = getRefatoraCampo(complemento06, roteiroCRM.optString("complemento06"), histobj);
								complemento07    = getRefatoraCampo(complemento07, roteiroCRM.optString("complemento07"), histobj);
								complemento08    = getRefatoraCampo(complemento08, roteiroCRM.optString("complemento08"), histobj);
								complemento09    = getRefatoraCampo(complemento09, roteiroCRM.optString("complemento09"), histobj);
								complemento10    = getRefatoraCampo(complemento10, roteiroCRM.optString("complemento10"), histobj);
								 

								
								String testeChave = getRegrasParaAcumular(lote, chave, tipoLancamento, documento, nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
								if(testeChave.toUpperCase().contains("ACUMULAANTES") || testeChave.toUpperCase().contains("ACUMULARANTES")) {
									chave = testeChave;
									if(chave.length() > 180) chave = cutString(chave, 0, 179);
									acumulouAntes = true;
								}
								////////////////////////////////////////////////////////////////////////////////////
								String key = chave  + "-CTB";
								nomeOrigem = nomeOrigem.replaceAll("  "," ").trim();

								partidaDobradaJuros		= 0;
								partidaDobradaDesconto	= 0;
								partidaDobradaMulta		= 0;

								if (forcarPartidaDobrada) {
									partidaDobradaJuros		= valorJuros;
									partidaDobradaDesconto	= valorDesconto;
									partidaDobradaMulta		= valorMulta;
									valorJuros				= 0;
									valorDesconto			= 0;
									valorMulta				= 0;
								}
								
								if (tipoPlanilha.contains("OTTCARTAO")) {
									
									if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("")) continue;
									if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && dataMovimento.equals("")) continue;
									complemento01 = tipoPlanilha;
									complemento02 = "VENDA";
									
									nomePortador = tipoPlanilha;
									
									// salva arquivo no hasmap para posterior eliminacao 
									ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
									if (ttArq          == null) {
										ttArq          = new ttArquivo();
										ttArq.arquivo  = nomeArquivo;
										
									}
									mapaArquivo.put(nomeArquivo,ttArq);
 									
								} else {
								
									// quando se mantem o arquivo, somente devem ser processados arquivos padroes
									// planilhas do rotiero movimento (principal), OFX e demais devem ficar para a rota normal
									// Trocado para validar se a planilha comeca como movimento - importante por causa da iguacu, Onnegestao, confialtiva que tinham movimento no roteiro secundario e estavam sendo bloqueados
									if (mantemArquivo.equals("SIM") && !tipoPlanilha.contains("PADRAOOTTIMIZZA") && 
									   !roteiroCRM.optString("nomeRelatorioRef").equals("PLANILHA_SIMPLES") && 
									   (tipoPlanilha.contains("SECUNDARIO") || tipoPlanilha.startsWith("MOVIMENTO"))) { //#Soares esteve aqui -> chamado referente a mudan?a: 202210-0019668
									   // Colocado este IF para dar mais performance, ou seja, se ja tiver lido mais de 15 linhas
									   // e planilha for para ser rodada na personalizada
									   // break agiliza a saida da leitura da planilha. Xavier em 19.08
									   if (contadorCabecalho < 15) continue;
									   logs = false;
									   // logger.logDebug("FB");
									   break;
									}
									
									// definido que as planilhas simples que rodam pelo template leem apenas a aba 0
									if (tipoPlanilha.equals("MOVIMENTO") && mantemArquivo.equals("SIM") && 
										porAba > 0 && roteiroCRM.optString("nomeRelatorioRef").equals("PLANILHA_SIMPLES")) { //#Soares esteve aqui -> chamado referente a mudan?a: 202210-0019668
									   
									   logs = false;
									   // logger.logDebug("SB");
									   break;
									}
									
								}
								//#FABRICA 31/08/2022 - @sergio - 202208-0017778
								//Estavamos processando as planilhas padroes sem apaga-las no processo
								//O if abaixo faz com que paguemos a planilha, ap?s processar pelo padrao
								
								// logger.logDebug("TPAQ " + tipoPlanilha);
								
								if(tipoPlanilha.contains("PADRAOOTTIMIZZA")){
									ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
									if (ttArq          == null) {
										ttArq          = new ttArquivo();
										ttArq.arquivo  = nomeArquivo;
										
									}
									mapaArquivo.put(nomeArquivo,ttArq);
									
								}
					
								// logger.logDebug("ANTES ttMov2");
								// #DOCUMENTACAO
								// insere numa tabela temporaria
								ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
								if (ttMov2 == null) {
									ttMov2 = new ttMovimentoPadrao();
									ttMov2.lote              = lote;
									ttMov2.codEmpresa        = codEmpresa;
									ttMov2.nomeEmpresa       = nomeEmpresa;
									ttMov2.dataMovimento     = dataMovimento;
									ttMov2.tipoMovimento     = "CTB";
									ttMov2.tipoLancamento    = tipoLancamento;
									ttMov2.historico         = historico;
									ttMov2.contaJuros        = contaJuros;
									ttMov2.contaMulta        = contaMulta;
									ttMov2.contaDesconto     = contaDesconto;
									ttMov2.centroCusto       = codCcOrigem;
									ttMov2.cpfCnpj           = cpfCnpj;
									ttMov2.chave             = chave + "-CTB";
									ttMov2.classificacao     = classificacao;
									ttMov2.codFilial         = codFilial;
									ttMov2.complemento07     = complemento07;
									ttMov2.complemento08     = complemento08;
									ttMov2.complemento09     = complemento09;
									ttMov2.complemento10     = complemento10;
									ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
									ttMov2.tipoPlanilha      = tipoPlanilha;
									ttMov2.chaveExtrato      = chaveExtrato;
									ttMov2.debitoCredito     = debitoCredito;
									ttMov2.contLinha         = contLinhaTexto;
									ttMov2.historicoMulta    = "";
									ttMov2.historicoJuros    = "";
									ttMov2.historicoDesconto = "";
									ttMov2.contaDebito       = "";
									ttMov2.contaCredito      = "";
									ttMov2.naturezaContabil  = "";
									ttMov2.contador 		 = 0;
									ttMov2.parcelaDoc        = parcelaDoc;
									ttMov2.abaPlanilha       = String.valueOf(abaConvertida);

									if(!lerAposPrincipal.contains("FORNECEDOR"))	ttMov2.nomeOrigem    = nomeOrigem;
									if(!lerAposPrincipal.contains("DOCUMENTO")) 	ttMov2.documento 	 = documento;
									if(!lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador;
									if(!lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01;
									if(!lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02;
									if(!lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03;
									if(!lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04;
									if(!lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05;
									if(!lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06;
									
									// logger.logDebug("TTMOVTP -> "+tipoPlanilha);


								}

								///  -------------------------------------------------------------------------------------------------------
								///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
								///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
								///  if (!complemento02.equals("")) ttMov2.complemento02 = complemento02;
								///  -------------------------------------------------------------------------------------------------------

								// #DOCUMENTACAO
								// acumula linhas secundarias ou apenas l? as secundarias
								boolean acumulaSegundaLinha = true;
								
								if(acumulaSegundaLinha){
									if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = (ttMov2.nomeOrigem    + " " + nomeOrigem).trim();
									if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = (ttMov2.documento + " " + documento).trim();
									if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = (ttMov2.nomePortador  + " " + nomePortador).trim();
									if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = (ttMov2.complemento01 + " " + complemento01).trim();
									if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = (ttMov2.complemento02 + " " + complemento02).trim();
									if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = (ttMov2.complemento03 + " " + complemento03).trim();
									if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = (ttMov2.complemento04 + " " + complemento04).trim();
									if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = (ttMov2.complemento05 + " " + complemento05).trim();
									if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = (ttMov2.complemento06 + " " + complemento06).trim();
								}
								if(!acumulaSegundaLinha){
									if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = nomeOrigem.trim();
									if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = documento.trim();
									if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador.trim();
									if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01.trim();
									if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02.trim();
									if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03.trim();
									if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04.trim();
									if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05.trim();
									if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06.trim();
								}
								
								ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
								ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
								ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
								ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

								leuFinanceiro = true;
								mapaVariavel.put(key,ttMov2);
								
								// logger.logDebug("TEPE " + tipoPlanilha + " | " + roteiroCRM.optString("Colunas_de_Valores_Extras") + " | " + ttMov2.valorDocumento + " | " + ttMov2.dataMovimento);
								
								if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {

									for (int iv =0; iv < 10; iv++) { 
										
										if (valorDocumentoArray[iv] == 0) continue;
										
										String rotuloColuna = "";
										String [] rotuloArray  = roteiroCRM.optString("Rotulos_Para_Valores_Extras").split(";"); 
										
										try {
											rotuloColuna = rotuloArray[iv];
										} 
										catch (Exception xx) {
											continue;
										}
										
										if (rotuloColuna.equals("")) continue;
										
									
										cont++; 
										contLinhaTexto = String.valueOf(cont);
										contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
										consolidaClass = StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;

										classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(abaConvertida) + rotuloColuna + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.dataMovimento = dataMovimento;
										histobj.put("dataMovimento", dataMovimento);
										
										ttTemp.complemento05 = rotuloColuna;
										histobj.put("complemento05", rotuloColuna);
										
										String modificaData2 = getModificaData(histobj);											
										
										if (modificaData2.startsWith("01"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, true);
										if (modificaData2.startsWith("02"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, true);
										if (modificaData2.startsWith("03"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, false);
										if (modificaData2.startsWith("04"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, false);
										if (modificaData2.startsWith("05"))  ttTemp.dataMovimento = "01/" + cutString(dataMovimento, "/");
										if (modificaData2.startsWith("06"))  ttTemp.dataMovimento = getLastDayOfMonth(dataMovimento, true);
										
										ttTemp.valorDocumento   = valorDocumentoArray[iv] ;
										ttTemp.valorDesconto    = 0;
										ttTemp.valorMulta       = 0;
										ttTemp.valorJuros       = 0;

										if (tipoPlanilha.contains("OTTCARTAO")) {
											ttTemp.complemento01 = tipoPlanilha;
											ttTemp.complemento02 = rotuloColuna;
										}
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, rotuloColuna, classificacao);
									}
								}
								
								// Para cartoes, criamos o modelo de gerar tafifa por regra
								if (tipoPlanilha.contains("OTTCARTAO")) {

									histobj.put("complemento02", "TARIFA");
									histobj.put("complemento03", complemento03);
									histobj.put("dataMovimento", dataMovimento);
									histobj.put("complemento05", "TARIFA");									
 									
									double taxaTarifa = getTaxaTarifa("", tipoLancamento, documento, nomeOrigem, histobj);
  									 
									
									if (taxaTarifa > 0) {
										cont++; 
										contLinhaTexto = String.valueOf(cont);
										contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
										consolidaClass = StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;

										classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(abaConvertida) + "TARIFA" + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.dataMovimento = dataMovimento;
										
										
										ttTemp.complemento05 = "TARIFA";
										String modificaData2 = getModificaData(histobj);											
										
										if (modificaData2.startsWith("01"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, true);
										if (modificaData2.startsWith("02"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, true);
										if (modificaData2.startsWith("03"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, false);
										if (modificaData2.startsWith("04"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, false);
										if (modificaData2.startsWith("05"))  ttTemp.dataMovimento = "01/" + cutString(dataMovimento, "/");
										if (modificaData2.startsWith("06"))  ttTemp.dataMovimento = getLastDayOfMonth(dataMovimento, true);
										ttTemp.valorDocumento   = ttTemp.valorDocumento * taxaTarifa;
										ttTemp.valorDesconto    = 0;
										ttTemp.valorMulta       = 0;
										ttTemp.valorJuros       = 0;

 										ttTemp.complemento01 = tipoPlanilha;
										ttTemp.complemento02 = "TARIFA";
										
 										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "TARIFA", classificacao);
									}
								}
								
								

									
								if (forcarPartidaDobrada) {
									if (partidaDobradaJuros		> 0) {
										cont++;
										contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
										consolidaClass	= StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;
										classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

										chave = lote + "-" + String.valueOf(abaConvertida) + "-DOBRADA_JUR-" + contLinhaTexto;
										key = chave  + "-CTB";
										ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
										ttTemp.valorDocumento = partidaDobradaJuros;
										ttTemp.cpfCnpj = "";
										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "JUROS", classificacao);
									}
									
									if (partidaDobradaDesconto	> 0) {
										cont++;
										contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
										consolidaClass	= StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;
										classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

										chave	= lote + "-" + String.valueOf(abaConvertida) + "-DOBRADA_DES-" + contLinhaTexto;
										key		= chave  + "-CTB";
										ttMovimentoPadrao ttTemp	= new ttMovimentoPadrao(ttMov2);
										ttTemp.valorDocumento		= partidaDobradaDesconto;
										ttTemp.cpfCnpj = "";
										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "DESCONTO", classificacao);
									}
									
									if (partidaDobradaMulta		> 0) {
										cont++;
										contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
										consolidaClass	= StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;
										classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

										chave	= lote + "-" + String.valueOf(abaConvertida) + "-DOBRADA_MUL-" + contLinhaTexto;
										key		= chave  + "-CTB";
										ttMovimentoPadrao ttTemp	= new ttMovimentoPadrao(ttMov2);
										ttTemp.valorDocumento		= partidaDobradaMulta;
										ttTemp.cpfCnpj = "";
										
										mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "MULTA", classificacao);
									}
								}								
							} catch (Exception e) {
							}
						} // while
					}finally {
						
						/*if (memFile != null) { //closeFile
							try {memFile.closeFile(); } 
							catch (Exception ex) { }
						}*/ //closeFile
						
					}
				}

			}
			try {
				Iterator itArquivo = mapaArquivo.keySet().iterator();
				while (itArquivo.hasNext()) { 
					String key = (String)itArquivo.next();
					ttArquivo ttArq = (ttArquivo)mapaArquivo.get(key);
					
					try {
		 
						FileUtil.moveToDir(dirName+"/"+ttArq.arquivo, backupDirName);
					} catch (Exception xx) {}
				}
			} catch (Exception xx) {} 
					
			

		}
	} catch (Exception ee) {
		putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
		logger.logError("EndpointA: ", ee);
	}
	
	
	
	try {
		Iterator itArquivo = mapaArquivo.keySet().iterator();
		while (itArquivo.hasNext()) { 
			String key = (String)itArquivo.next();
			ttArquivo ttArq = (ttArquivo)mapaArquivo.get(key);
			
			try {
 
				FileUtil.moveToDir(dirName+"/"+ttArq.arquivo, backupDirName);
			} catch (Exception xx) {}
 		}
	} catch (Exception xx) {} 
			

	if(erroShrink){
		putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
		throw new Exception();
	}
	// --------------------------------------------------------------------------------------------------------------------
	// #DOCUMENTACAO
	// BUSCA INFORMACAO DE EXTRATOS SALVOS
	if (leuFinanceiro && cruzaExtrato.contains("TRUE") || (tipoPlanilha.contains("EXTRATO") && cruzaExtrato.contains("FALSE")) ||
		(Cruza_Extrato_com_Extrato.contains("TRUE") && cruzaExtrato.contains("FALSE")) ||
		(Cruza_Extrato_com_Extrato.contains("FALSE") && cruzaExtrato.contains("FALSE"))) {
			
		   
		try {
			JSONArray extratoEmpresa = getExtratosEmpresa(codEmpresa, dbIOCont, logger);

			if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
				for (int t=0; t<extratoEmpresa.length(); t++) {

					JSONObject recMov = extratoEmpresa.optJSONObject(t);

					recMov.put("CODEMPRESA", codEmpresa);
					recMov.put("NOMEEMPRESA", nomeEmpresa);

					//QUANDO FOR CRUZAMENTO DE EXTRATO, MANTER NOME UNICO NO ARQUIVO FINAL.
					if (leuFinanceiro && cruzaExtrato.contains("TRUE")) {
						recMov.put("NOMEARQUIVO", nomeArquivo);
					}
					else {
						recMov.put("NOMEARQUIVO", "");
					}

					recMov.put("TIPOLANCAMENTO", tipoLancamento).put("CONTAMOVIMENTO", "").put("CONTAPORTADOR", "").put("CONTLINHATEXTO", String.valueOf(t));

					ttMovimentoPadrao ttMovExtrato = getMovimentoExtrato(recMov, logger);					
					if (nomeArquivo.toUpperCase().contains("FILTRO_")){
						boolean filtro = validaFiltro(nomeArquivo, ttMovExtrato.dataMovimento);
						temFiltro = true;
						if(!filtro) continue;
					}
					 
					
					String consolidaClass = StringUtil.leftPad(String.valueOf(t), 06, "0");
					ttMovExtrato.classificacao = ttMovExtrato.dataMovimento.replace("/","").trim() + "5" + consolidaClass;
					
					String leuCnpj = "";
					if (ttMovExtrato.nomeOrigem.contains(".") && ttMovExtrato.nomeOrigem.contains("-")) {
						leuCnpj = getCpfCnpj(ttMovExtrato.nomeOrigem);
						
						if (!leuCnpj.equals("")) {
							ttMovExtrato.nomeOrigem = ttMovExtrato.nomeOrigem.replaceAll(leuCnpj, leuCnpj.replaceAll("\\.","").replaceAll("/","").replaceAll(" ","").replaceAll("-",""));
						}	
					}	
					if (ttMovExtrato.complemento01.contains(".") && ttMovExtrato.complemento01.contains("-")) {
						leuCnpj = getCpfCnpj(ttMovExtrato.complemento01);
						if (!leuCnpj.equals("")) {
							ttMovExtrato.complemento01 = ttMovExtrato.complemento01.replaceAll(leuCnpj, leuCnpj.replaceAll("\\.","").replaceAll(" ","").replaceAll("/","").replaceAll("-",""));
						}
					}
					mapaVariavel.put(ttMovExtrato.chave, ttMovExtrato);
					apagaExtrato    = true;

				}
			}
		}
		catch (Exception xx) {
			// logger.logDebug("ATENCAO - PROBLEMA NA LEITURA DE EXTRATO - BANCO");
		}

	} // if tipo planilha nao igual extrato
	
	// logger.logDebug("ETAPA 03 TEMPLATE ");
	
	// --------------------------------------------------------------------------------------------------------------------
	// #DOCUMENTACAO
	// INICIO DAS ITERACOES
	StringBuilder[] txtFiscal = new StringBuilder[20];
  	for (int i= 0; i < 20; i++) {
		txtFiscal[i] = new StringBuilder("");
		loteFiscal[i] = "";		
	}

	StringBuilder txtFornecedor = new StringBuilder();
	StringBuilder txtPortador   = new StringBuilder();
	StringBuilder txtConciliacao= new StringBuilder();
	String nomePortadorAnterior = "";
	
	// if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB")) txtFiscal[0].append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // #Fabrica(2019-08-13) @Vini
	if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB") && tipoLancamento.contains("PAGAR")) txtFiscal[0].append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // JWR 01022021
	if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB") && tipoLancamento.contains("RECEBER")) txtFiscal[0].append("PGTOCLI").append(cnpjEmpresa).append("\r\n"); // JWR 01022021

	StringBuilder ResumoTxt = new StringBuilder();
	String rn = "\r\n";
	ResumoTxt = new StringBuilder();
	ResumoTxt.append("").append(rn).append(rn);

	ResumoTxt.append("STATUS;DATA;TIPO DATA;VALOR;DOCUMENTO;CLIENTE/FORNECEDOR;PORTADOR;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;COMPLEMENTO06;;CTA DEBITO ENCONTRADA;CTA CREDITO ENCONTRADA;REGRA CONTA CRM;HISTORICO;REGRA HISTORICO;;DATA;DEBITO;CLASS DEB;NOME CONTA;CREDITO;CLASS CRED;NOME CONTA;VALOR;HISTORICO;");
	ResumoTxt.append("ORIGEM");

	StringBuilder txtDePara = new StringBuilder();

	txtDePara.append("DATA;VALOR;FORNECEDOR/CLIENTE;PORTADOR;CONTA DEBITO;CONTACREDITO;DOCUMENTO;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;C.CUSTO;ARQUIVO");
	txtDePara.append("\r\n");
	
	
	// logger.logDebug("DIRNAME " + dirName);
	if (mantemArquivo.equals("SIM")) {
		File fileDepoisLista = new File(dirName);
		File [] filesDepois = fileDepoisLista.listFiles(); 
		
		if (filesDepois.length > 1) putStatus(dirName, "", jStatus, logger);
	}
	// logger.logDebug("TEMPLATE ETAPA 03 ");


	int contRegra = -1;
	
	String loteEtapaTres = "";
	
	
	try {
		Iterator itExtrato = mapaVariavel.keySet().iterator();
		while (itExtrato.hasNext()) {
			String chaveExtrato     = "";

			String key = (String)itExtrato.next();
			ttMovimentoPadrao ttMov = (ttMovimentoPadrao)mapaVariavel.get(key);

			if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
				roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
			}else{
				roteiroCRM = getRoteiro();
			}
			
 			loteEtapaTres = ttMov.lote;
 
			
			// #DOCUMENTACAO
			// TRATA LOTES (MAIUSCULO e MINUSCULO)
			
			if(ttMov.lote.lastIndexOf("__") > ttMov.lote.indexOf("__")){
				ttMov.lote = nomeEmpresa +"_"+ codEmpresa +"_"+ 
				             cutString(ttMov.lote, ttMov.lote.indexOf("__"), ttMov.lote.lastIndexOf("__")).toLowerCase() +"_"+ ttMov.lote.substring(ttMov.lote.lastIndexOf("__"));
			}
			

			// #DOCUMENTACAO
			// EVITA GERAR 2 ARQUIVOS QUANDO TEM TRATAR COMO EXTRATO
			// ajusta o ott_oud__ para poder reprocessar o arquivo automaticamnete pelo portal
			ttMov.lote = ttMov.lote.replace(ttMov.debitoCredito,"").replace("extrato-debito","").replace("extrato-credito","").replace("___","_").replace("__","_");
			if (!ttMov.lote.toLowerCase().contains("ott_oud__") && ttMov.lote.toLowerCase().contains("ott_oud_")) {
				ttMov.lote = ttMov.lote.replace("ott_oud_","ott_oud__");
			}
			
			// #DOCUMENTACAO
			// JUNCAO DOS LANCAMENTOS COM OS JUROS E DESCONTOS (TRATAR COMO JUROS OU DESCONTO)
			String chaveJuros = ttMov.dataMovimento + "-" + ttMov.documento + "-JUROS";
			ttJuros ttJ  = (ttJuros)mapaJuros.get(chaveJuros);
			if (ttJ != null && ttJ.valorLido == 0) {
				ttMov.valorJuros  = ttJ.valorJur;
				ttJ.valorLido     = 1;
				mapaJuros.put(chaveJuros,ttJ);

			}

			String chaveDesconto = ttMov.dataMovimento + "-" + ttMov.documento + "-DESCONTO";
			ttDesconto ttD  = (ttDesconto)mapaDesconto.get(chaveDesconto);
			if (ttD != null && ttD.valorLido == 0) {
				ttMov.valorDesconto  = ttD.valorDesc;
				ttD.valorLido     = 1;
				mapaDesconto.put(chaveDesconto,ttD);

			}
			contRegra++;
			int restoLinha = 0;
			restoLinha = (contRegra % 100);
			//logger.logDebug("ANTES 3 DE 4");
			
			// if (codEmpresa.contains("277")) logger.logDebug("TRESDEQUATRO " + " | " + ttMov.tipoP + ttMov.debitoCredito + " | " +  ttMov.dataMovimento + " | " + ttMov.valorDocumento);
			
 			if (restoLinha == 0) putStatus(dirName, "03--Etapa 3 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
			
			
			// if (codEmpresa.contains("1722")) logger.logDebug("TPPORTTEMPLATE " + ttMov.tipoPlanilha + " | " + ttMov.lote + " | " + ttMov.dataMovimento + " | " + ttMov.tipoLancamento + " | " + ttMov.debitoCredito + " | " + ttMov.dataMovimento + " | " + ttMov.valorDocumento);
			// if (codEmpresa.contains("244")) logger.logDebug("TPPORTTEMPLATE " + ttMov.tipoPlanilha + " | " + ttMov.nomeOrigem);
			
			
			// if(codEmpresa.equals("987789")) logger.logDebug("DATA == "+ttMov.dataMovimento+" | LOTEEE == "+ttMov.lote.replace("rodaconversor", "")+" | TP === "+ttMov.tipoPlanilha);
			if (ttMov.tipoPlanilha.contains("CARTAO")) ttMov.tipoPlanilha = ttMov.tipoPlanilha.replaceAll("[0-9]", "").trim(); //JWR
			
			ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("\'","");
			ttMov.complemento01 = ttMov.complemento01.replaceAll("\'","");
			ttMov.complemento02 = ttMov.complemento02.replaceAll("\'","");
			ttMov.complemento03 = ttMov.complemento03.replaceAll("\'","");
			ttMov.complemento04 = ttMov.complemento04.replaceAll("\'","");
			ttMov.complemento05 = ttMov.complemento05.replaceAll("\'","");
			
			ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
   			ttMov.nomePortador = ttMov.nomePortador.replaceAll("\\|","");
			ttMov.complemento01 = ttMov.complemento01.replaceAll("\\|","");
			
			classificaPlano     = roteiroCRM.optString("classificaPlano");
			classificaFornec    = roteiroCRM.optString("classificaFornec");
			cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
			Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
			String integraFiscal = roteiroCRM.optString("Integracao_fiscal").toUpperCase();
			String integraContrato = roteiroCRM.optString("Integracao_contratos").toUpperCase();
			
			if (codEmpresa.contains("856")) logger.logDebug("PORTADOR " + ttMov.nomeOrigem);

			if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) continue;
			if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-DEBITO")) continue;
			// logger.logDebug("PORTAS1 " + cutString(ttMov.nomePortador.toUpperCase(), "_ID", "_"));
			// logger.logDebug("PORTAS2 " + ttMov.nomePortador);
			if (ttMov.nomePortador.toUpperCase().contains("OTT_OUD") && ttMov.nomePortador.toUpperCase().contains("CEF")) ttMov.nomePortador = cutString(ttMov.nomePortador.toUpperCase(), 0, "OTT_") + " " + cutString(ttMov.nomePortador.toUpperCase(), ttMov.nomePortador.toUpperCase().indexOf(cutString(ttMov.nomePortador.toUpperCase(), "_ID", "_"))+cutString(ttMov.nomePortador.toUpperCase(), "_ID", "_").length()+1);
			
			// logger.logDebug("TIPOS " + tipoPlanilha);
			
			if (ttMov.tipoPlanilha.contains("EXTRATO") || ttMov.tipoPlanilha.contains("FRANCESINHA")) {
				JSONObject histobj = new JSONObject();
				histobj.put("nomeOrigem", ttMov.nomeOrigem).put("documento", ttMov.documento).put("complemento01", ttMov.complemento01).put("complemento02", ttMov.complemento02)
					   .put("complemento03", ttMov.complemento03).put("complemento04", ttMov.complemento04).put("complemento05", ttMov.complemento05)
					   .put("complemento06", ttMov.complemento06).put("nomePortador", ttMov.nomePortador).put("dataMovimento", ttMov.dataMovimento)
					   .put("valorDocumento", ttMov.valorDocumento).put("valorJuros", ttMov.valorJuros).put("valorDesconto", ttMov.valorDesconto)
					   .put("valorMulta",ttMov.valorMulta).put("tipoPlanilha", ttMov.tipoPlanilha);
  								
				String modificaData = getModificaData(histobj);
				
				if (modificaData.startsWith("01"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 1, true);
				if (modificaData.startsWith("02"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 2, true);
				if (modificaData.startsWith("03"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 1, false);
				if (modificaData.startsWith("04"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 2, false);
				if (modificaData.startsWith("05"))  ttMov.dataMovimento = "01/" + cutString(ttMov.dataMovimento, "/");
				if (modificaData.startsWith("06"))  ttMov.dataMovimento = getLastDayOfMonth(ttMov.dataMovimento, true);
			}
 
  
			// ------------------------------------------------------------------------------------------------------------------
			// 	 		INICIA PROCESSO DE CRUZAMENTO COM EXTRATO
			// ------------------------------------------------------------------------------------------------------------------
			String DATAMOVIMENTO   = "";
			String PORTADOR        = "";
			String CHAVE           = "";
			boolean jaCruzou       = false;
			
			ttMov.valorJuros = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorJuros));
			ttMov.valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDesconto));
			ttMov.valorMulta = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorMulta));
			ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento));
			// ajuste 11/2020 @DiMaz
			if (ttMov.valorDocumento == 0) continue;
 

			// #DOCUMENTACAO
			// EXTRATO COM EXTRATO
			if (Cruza_Extrato_com_Extrato.contains("TRUE") && ttMov.tipoPlanilha.contains("EXTRATO")) {

				String tipoData = "MOVIMENTO";
				Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
				Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);
				if (ttMov.valorDocumento == 0) continue;
  

				JSONArray extratoEmpresa = new JSONArray();
				String transferencia = "NAO";

				if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-DEBITO"))  transferencia = "SIM";
				if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) transferencia = "SIM";

				if (transferencia.equals("SIM")) {
					for (int xx = 0;xx<1;xx++) {
						try {
							String dataLeitura = ttMov.dataMovimento;

							if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
							if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

							extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
							.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
							.param(chaveExtrato + "%")
							.param(0)
							.param(ttMov.nomeArquivo.toUpperCase())
							.query();

							if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
								break;
							}
						}
						catch (Exception xx) {
							break;
						}
					}
				}

				if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
					JSONObject recMov = extratoEmpresa.optJSONObject(0);

					DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
					PORTADOR        = recMov.optString("PORTADOR");
					CHAVE           = recMov.optString("CHAVE");

					ttMov.complemento04 = ttMov.nomeOrigem;
					ttMov.nomeOrigem    = PORTADOR;
					ttMov.dataMovimento = DATAMOVIMENTO;
					ttMov.tipoPlanilha  = "EXTRATO-TRANSFERENCIA";

					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(1)
					.param(CHAVE)
					.execute();
					jaCruzou = true;

				}
			}

			// #DOCUMENTACAO
			// EXTRATO COM PLANILHA
			if (cruzaExtrato.contains("TRUE")  && !jaCruzou) {

				Conta_Fixa_Cruzamento_Extrato  = roteiroCRMPrincipal.optString("Conta_Fixa_Cruzamento_Extrato");

				String tipoData = "MOVIMENTO";
				Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
				Date dataMovimentoDateMenosUm   = new Date();
				Date dataMovimentoDateMenosDois = new Date();
				Date dataMovimentoDateMenosTres = new Date();
				Date dataMovimentoDateMaisUm    = new Date();
				Date dataMovimentoDateMaisDois  = new Date();
				Date dataMovimentoDateMaisTres  = new Date();

				Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm   = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm    = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois  = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres  = cal.getTime();

				if (ttMov.valorDocumento == 0) continue;
  

				JSONArray extratoEmpresa = new JSONArray();

				String transferencia = "NAO";

				if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
					for (int xx = 0;xx<7;xx++) {
						try {
							String dataLeitura = ttMov.dataMovimento;
							if (xx ==1) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisUm, "dd/MM/yyyy");
							if (xx ==2) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosUm, "dd/MM/yyyy");
							if (xx ==3) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisDois, "dd/MM/yyyy");
							if (xx ==4) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosDois, "dd/MM/yyyy");
							if (xx ==5) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisTres, "dd/MM/yyyy");
							if (xx ==6) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosTres, "dd/MM/yyyy");


							if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
							if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

							extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
							.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
							.param(chaveExtrato + "%")
							.param(0)
							.param(ttMov.nomeArquivo.toUpperCase())
							.query();

							if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
								break;
							}
						}
						catch (Exception xx) {
							break;
						}
					}
				}

				if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
					JSONObject recMov = extratoEmpresa.optJSONObject(0);

					DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
					PORTADOR        = recMov.optString("PORTADOR");
					CHAVE           = recMov.optString("CHAVE");
					if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) ttMov.complemento02 = recMov.optString("COMPLEMENTO"); //checknum

					ttMov.nomePortador  = PORTADOR;
					ttMov.dataMovimento = DATAMOVIMENTO;

					dbIOCont.update("IO_EXTRATO")
					.fields("EXTRATOLIDO")
					.where("CHAVE = ? ")
					.param(1)
					.param(CHAVE)
					.execute();

				}

			}
			
			if (ttMov.lote.contains("_ancora_")) {
				ttMov.lote = ttMov.lote.replace("_ancora_", "");
			}
			
			if (ttMov.lote.contains("_ANCORA_")) {
				ttMov.lote = ttMov.lote.replace("_ANCORA_", "");
			}


			// ------------------------------------------------------------------------------------------------------------------
			// 	 		FINALO DO PROCESSO DE CRUZAMENTO COM EXTRATO
			// ------------------------------------------------------------------------------------------------------------------




			classificacao = "";

			String key2 = ttMov.chave;

			if(ttMov.dataMovimento.length() > 9){
				mesRef  = Integer.parseInt(ttMov.dataMovimento.substring(3,5));
				anoRef  = Integer.parseInt(ttMov.dataMovimento.substring(6,10));
				mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

				mesRef  = mesRef - 1;
				if (mesRef  == 0) {
					mesRef  = 12;
					anoRef  = anoRef - 1;
				}
				mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
				mesRef  = mesRef - 1;
				if (mesRef  == 0) {
					mesRef  = 12;
					anoRef  = anoRef - 1;
				}
				mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
			}

			String trimestreMesAnoAnterior	    = "";
			String trimestreMesAnoAtual   	    = "";
			String descricaoPlanoContaPortador  = "";
			String descricaoPlanoContaMovimento = "";

			// #DOCUMENTACAO
			// TRIMESTRE
			if (mesAnoAnterior.startsWith("01") || mesAnoAnterior.startsWith("02") || mesAnoAnterior.startsWith("03")) trimestreMesAnoAnterior = "1. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAnterior.startsWith("04") || mesAnoAnterior.startsWith("05") || mesAnoAnterior.startsWith("06")) trimestreMesAnoAnterior = "2. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAnterior.startsWith("07") || mesAnoAnterior.startsWith("08") || mesAnoAnterior.startsWith("09")) trimestreMesAnoAnterior = "3. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAnterior.startsWith("10") || mesAnoAnterior.startsWith("11") || mesAnoAnterior.startsWith("12")) trimestreMesAnoAnterior = "4. Trimestre/" + mesAnoAnterior.substring(3);
			if (mesAnoAtual.startsWith("01") || mesAnoAtual.startsWith("02") || mesAnoAtual.startsWith("03")) trimestreMesAnoAtual = "1. Trimestre/" + mesAnoAtual.substring(3);
			if (mesAnoAtual.startsWith("04") || mesAnoAtual.startsWith("05") || mesAnoAtual.startsWith("06")) trimestreMesAnoAtual = "2. Trimestre/" + mesAnoAtual.substring(3);
			if (mesAnoAtual.startsWith("07") || mesAnoAtual.startsWith("08") || mesAnoAtual.startsWith("09")) trimestreMesAnoAtual = "3. Trimestre/" + mesAnoAtual.substring(3);
			if (mesAnoAtual.startsWith("10") || mesAnoAtual.startsWith("11") || mesAnoAtual.startsWith("12")) trimestreMesAnoAtual = "4. Trimestre/" + mesAnoAtual.substring(3);


			if (ttMov.nomeOrigem.equals("")) ttMov.nomeOrigem = ttMov.complemento01 + " " + ttMov.dataMovimento + " R$" + String.valueOf(ttMov.documento);
			ttMov.nomeOrigem = ttMov.nomeOrigem.trim();
			if (ttMov.nomePortador.equals("")) ttMov.nomePortador = "EM BRANCO";
			if (ttMov.nomePortador.equals("_")) ttMov.nomePortador = "EM BRANCO";
			if (ttMov.nomePortador.equals("-")) ttMov.nomePortador = "EM BRANCO";
			if (ttMov.nomePortador.replaceAll("\\$", "").equals("")) ttMov.nomePortador = "EM BRANCO";
			

			contaJuros        = roteiroCRM.optString("contaFixaJuros");
			contaFixaCredito  = roteiroCRM.optString("contaFixaCredito");
			contaFixaDebito   = roteiroCRM.optString("contaFixaDebito");
			contaDesconto     = roteiroCRM.optString("contaFixaDesconto");
			contaMulta        = roteiroCRM.optString("contaFixaMulta");

			// if(codEmpresa.equals("13")) logger.logDebug("ValorJuros -> " + ttMov.valorJuros + " |contaJuros -> " + contaJuros + " |VAlorMulta -> " + ttMov.valorMulta + " | contaMulta -> " + contaMulta + " |TTMovNO -> " + ttMov.nomeOrigem +  " | ValorDoc -> " + ttMov.valorDocumento);
			

			contaMovimento = "";
			contaPortador  = "";


			if(ttMov.tipoLancamento.contains("PAGAR")) {
				contaMovimento = contaFixaDebito;
				contaPortador  = contaFixaCredito;
			}
			if(ttMov.tipoLancamento.contains("RECEBER")) {
				contaPortador  = contaFixaDebito;
				contaMovimento = contaFixaCredito;
			}
			
			
			
			// exemplo de como vem um registro do complemento_lancaments 
			// 54999667000179-PAG-ANTONIO FLAVIO DE ARAUJO JUNIOR-2021-05-21-180.0
 			
			if (contaMovimento.equals("") && encontrouComplemento){
				try {
				
					String chaveComplemento = cnpjEmpresa.replaceAll("[^0-9]","").trim() + "-" + cutString(ttMov.tipoLancamento, 0, 3) + "-" + ttMov.nomeOrigem + "-" + 
					                          cutString(ttMov.dataMovimento, 6) + "-" + cutString(ttMov.dataMovimento, "/", "/") + "-" + cutString(ttMov.dataMovimento, 0, "/") + "-" + 
											  ttMov.valorDocumento;
											  
 																				
											  
 					ttPlano ttP  = (ttPlano)mapaDePara.get(chaveComplemento); 
					if (ttP == null) {							
						ttP  = new ttPlano(); 
						ttP.descricaoPlano = chaveComplemento;
						ttP.contaAnalitica = "";
						ttP.contaContabil     = "";
						mapaDePara.put(chaveComplemento,ttP);
							
						try{
							deParaObj = findComplementoLancamento(dbIODepara, chaveComplemento);
							}
						catch (Exception e) { 
						}
						if (deParaObj != null && !deParaObj.toString().equals("{}")) {
							if (ttMov.tipoPlanilha.contains("EXTRATO")) {
									ttMov.complemento02 = deParaObj.optString("complemento");
							} else {
								ttMov.complemento01 = deParaObj.optString("complemento");
							}
 							

						} else {
						
							//	 verifica se banco de dados possui ao menos algum lancamento de complemento
							//   se nao encontrar, joga false na encontrouComplemento para ter mais performance e nao buscar no 
							//   banco  de dados a toa
							chaveComplemento = cnpjEmpresa.replaceAll("[^0-9]","").trim() + "-" + cutString(ttMov.tipoLancamento, 0, 2);
							try{
								deParaObj = findComplementoLancamento(dbIODepara, chaveComplemento);
								}
							catch (Exception e) { 
							}
							if (deParaObj == null || deParaObj.toString().equals("{}"))  encontrouComplemento = false;
 						
						}
						

					}  
				} catch  (Exception Ee) {}
			}
			
 
			// Quando pede para cruzar extrato e nao encontra relacionamento com o extrato
			// joga conta fixa de extrato em DEBITO quando for extato e CREDITO quando for planilha
			if ((cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO")) && PORTADOR.equals("")) {
				if (ttMov.tipoPlanilha.contains("EXTRATO"))  contaMovimento  = Conta_Fixa_Cruzamento_Extrato;
				if (!ttMov.tipoPlanilha.contains("EXTRATO")) contaPortador   = Conta_Fixa_Cruzamento_Extrato;
			}


			ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

			contaMovimento    = getConta09(contaMovimento, ttMov.nomeOrigem,  ttMov.documento, "", ttMov.complemento01,  ttMov.complemento02,  ttMov.complemento03, "",  ttMov.centroCusto);
			contaPortador     = getConta09(contaPortador, "", "", ttMov.nomePortador, "", "", "", ttMov.nomeArquivo, "");
			//ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, "", ttMov.centroCusto);
			//2310-017917 - As regras de centro custo tem validacao com o nome do arquivo e n?o funcionava porque nomeArquivo nao estava sendo passado no getCentroCusto
			ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, nomeArquivo, ttMov.centroCusto); 
			ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
										  ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
										  ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);
			if (!ttMov.codFilial.equals("") && roteiroCRMPrincipal.optString("erpContabilidade").equals("CUCA-FRESCA")) ttMov.cpfCnpj = ttMov.codFilial;

			ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

			JSONObject histobj = new JSONObject();

			histobj.put("nomeOrigem", ttMov.nomeOrigem).put("documento", ttMov.documento).put("complemento01", ttMov.complemento01).put("complemento02", ttMov.complemento02)
				   .put("complemento03", ttMov.complemento03).put("complemento04", ttMov.complemento04).put("complemento05", ttMov.complemento05)
				   .put("complemento06", ttMov.complemento06).put("complemento07", ttMov.complemento07).put("complemento08", ttMov.complemento08)
				   .put("complemento09", ttMov.complemento09).put("complemento10", ttMov.complemento10).put("dataMovimento", ttMov.dataMovimento)
				   .put("mesAnoAnterior", mesAnoAnterior).put("mesAno2Anterior", mesAno2Anterior).put("mesAnoAtual", mesAnoAtual).put("nomePortador", ttMov.nomePortador)
				   .put("contaMovimento", contaMovimento).put("contaPortador", contaPortador).put("contaDebito", "").put("contaCredito", "").put("contaJuros", ttMov.contaJuros)
				   .put("contaDesconto", ttMov.contaDesconto).put("contaMulta", ttMov.contaMulta).put("centroCusto", ttMov.centroCusto)
				   .put("valorDocumento", ttMov.valorDocumento).put("valorJuros", ttMov.valorJuros).put("valorDesconto", ttMov.valorDesconto).put("valorMulta", ttMov.valorMulta)
				   .put("codFilial", ttMov.codFilial).put("tipoPlanilha", ttMov.tipoPlanilha).put("numeroAba", ttMov.abaPlanilha).put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

			ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getReplaceTermos("complemento08", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getReplaceTermos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getReplaceTermos("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getReplaceTermos("nomePortador",  ttMov.nomePortador,   histobj);

			ttMov.complemento01 = getLimpaCampos("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getLimpaCampos("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getLimpaCampos("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getLimpaCampos("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getLimpaCampos("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getLimpaCampos("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getLimpaCampos("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getLimpaCampos("complemento09", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getLimpaCampos("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getLimpaCampos("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getLimpaCampos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getLimpaCampos("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getLimpaCampos("nomePortador",  ttMov.nomePortador,   histobj);

			histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
			histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
			histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
			histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
			histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
			histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
			histobj.put("nomePortador", ttMov.nomePortador);

			ttMov.complemento01 = getLimpaCamposAvancado("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getLimpaCamposAvancado("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getLimpaCamposAvancado("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getLimpaCamposAvancado("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getLimpaCamposAvancado("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getLimpaCamposAvancado("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getLimpaCamposAvancado("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getLimpaCamposAvancado("complemento09", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getLimpaCamposAvancado("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getLimpaCamposAvancado("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getLimpaCamposAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getLimpaCamposAvancado("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getLimpaCamposAvancado("nomePortador",  ttMov.nomePortador,   histobj);

			ttMov.complemento01 = getReplaceTermosAvancado("complemento01", ttMov.complemento01,  histobj);
			ttMov.complemento02 = getReplaceTermosAvancado("complemento02", ttMov.complemento02,  histobj);
			ttMov.complemento03 = getReplaceTermosAvancado("complemento03", ttMov.complemento03,  histobj);
			ttMov.complemento04 = getReplaceTermosAvancado("complemento04", ttMov.complemento04,  histobj);
			ttMov.complemento05 = getReplaceTermosAvancado("complemento05", ttMov.complemento05,  histobj);
			ttMov.complemento06 = getReplaceTermosAvancado("complemento06", ttMov.complemento06,  histobj);
			ttMov.complemento07 = getReplaceTermosAvancado("complemento07", ttMov.complemento07,  histobj);
			ttMov.complemento08 = getReplaceTermosAvancado("complemento09", ttMov.complemento08,  histobj);
			ttMov.complemento09 = getReplaceTermosAvancado("complemento09", ttMov.complemento09,  histobj);
			ttMov.complemento10 = getReplaceTermosAvancado("complemento10", ttMov.complemento10,  histobj);
			ttMov.nomeOrigem    = getReplaceTermosAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
			ttMov.documento     = getReplaceTermosAvancado("documento",     ttMov.documento,      histobj);
			ttMov.nomePortador  = getReplaceTermosAvancado("nomePortador",  ttMov.nomePortador,   histobj);

			histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
			histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
			histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
			histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
			histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
			histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
			histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
			histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
			histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
			histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
			histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
			histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
			histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
			histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
			histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
			histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
			histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

			
			// Quando selecionado para controlar parcela, buscar complemento apos a limpeza para poder jogar em parcela
			String parcelaString = "1";
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO01")) parcelaString = ttMov.complemento01;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO02")) parcelaString = ttMov.complemento02;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO03")) parcelaString = ttMov.complemento03;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO04")) parcelaString = ttMov.complemento04;
			if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO05")) parcelaString = ttMov.complemento05;

			try {
				ttMov.parcelaDoc = Integer.parseInt(parcelaString);
			}
			catch (Exception xx) { ttMov.parcelaDoc = 1;}
			
			//Feito para retirar os indices apos o tipoPlanilha, estavam impactando nas regras do oud
			if(!ttMov.tipoPlanilha.equals("")){
				String sequencia = "";
				try{
					sequencia = cutString(ttMov.tipoPlanilha, ttMov.tipoPlanilha.length()-4).replaceAll("[^0-9]", "");
				}catch(Exception s1){}
				if(ttMov.tipoPlanilha.contains(sequencia)){
					try{
						ttMov.tipoPlanilha = cutString(ttMov.tipoPlanilha, 0, sequencia);
						
					}catch(Exception s2){}
				}
			}
			
			// logger.logDebug("TTMS " + ttMov.tipoPlanilha + " | " + ttMov.complemento01 + " | " + ttMov.nomeOrigem + " | " + ttMov.complemento02);
			
		
			contaMovimento = getContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			contaMovimento = getContaMovimento2(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			contaMovimento = getContaMovimento3(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			contaPortador  = getContaPortador(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			
			//#2305-004914. Carrega a chamadas das rotinas getContaMovimento e getContaPortador caso n?o tenha ainda.
			// Classe Principal SC
			Class<?> sc = this.getClass();
			// Instancia da Classe Principal
			Object scInstance = sc.newInstance();
			// Get all Methods from superclass 'SC'.
			java.lang.reflect.Method[] methods = sc.getDeclaredMethods();
			boolean methodFoundPortador = false;
			boolean methodFoundMovimento = false;			
			for(java.lang.reflect.Method method : methods) {
				String methodName = method.getName();				
				methodFoundPortador = false;
				methodFoundMovimento = false;
				if(methodName.toUpperCase().equals("GETCONTAMOVIMENTO4")) {
					methodFoundMovimento = true;
				}
				if(methodName.toUpperCase().equals("GETCONTAMOVIMENTO5")) {
					methodFoundMovimento = true;
				}
				
				if(methodName.toUpperCase().equals("GETCONTAPORTADOR2")) {
					methodFoundPortador = true;
				}
				if(methodName.toUpperCase().equals("GETCONTAPORTADOR3")) {
					methodFoundPortador = true;
				}
				if(methodName.toUpperCase().equals("GETCONTAPORTADOR4")) {
					methodFoundPortador = true;
				}
				
				if(methodFoundMovimento) {					
					// Invoca metodo de getContaMovimento.
					contaMovimento = (String) method.invoke(scInstance, contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
				}
				if(methodFoundPortador) {
					// Invoca metodo de getContaPortador.					
					contaPortador = (String) method.invoke(scInstance, contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
				}
			}
			
			// Soares - Mudanca no template referente a uma parte do chamado =>> 202208-0017982
			
			if(roteiroCRM.optString("gravaCnpjMovimento").toUpperCase().contains("TRUE")){
				if(contaMovimento.equals("")) {
					if(!ttMov.cpfCnpj.equals("")){
						contaMovimento = ttMov.cpfCnpj;
						if((roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().startsWith("SCI") || roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("PROSOFT")) && !ttMov.cpfCnpj.equals(""))
							contaMovimento = ttMov.cpfCnpj + "P";
					}
				}
				else {ttMov.cpfCnpj = "";}
			}
 			
			regraContaMovimento  = getRegraContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			
			// logger.logDebug("CONTINHA "  + contaMovimento + " | " + regraContaMovimento);
			// logger.logDebug("CONTA MOV == "+contaMovimento+" | NO == "+ttMov.nomeOrigem+" | TP = "+ttMov.tipoPlanilha);

			double valorPrincipal 	 = getValorPrincipal("", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			if (valorPrincipal> 0 && ttMov.valorDocumento > valorPrincipal) {
				ttMov.valorJuros     = ttMov.valorDocumento - valorPrincipal;
				ttMov.valorDocumento = valorPrincipal;
			}
			
			ttMov.complemento03 	= ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";
			ttMov.contaJuros        = getContaJuros(contaJuros,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			ttMov.contaDesconto     = getContaDesconto(contaDesconto,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			ttMov.contaMulta        = getContaMulta(contaMulta,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			tabelaContabil   		= getTabelaContabil("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);
			ttMov.complemento03  	= ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();
			// if(roteiroCRM.optString("empresa").toUpperCase().contains("FARMAGIL")){
				// logger.logDebug("TIPO PLANILHINHA == "+ttMov.tipoPlanilha+" | ttMov.contaDesconto - "+ttMov.contaDesconto+" - contaDesconto - "+contaDesconto+" | "+roteiroCRM.optString("contaFixaDesconto"));
			// }
			// logger.logDebug("Contabilidade - "+roteiroCRM.optString("contabilidade")+" - empresa => "+roteiroCRM.optString("empresa"));
			// logger.logDebug("TP - "+tipoPlanilha+" - conta fixa => "+roteiroCRM.optString("contaFixaJuros")+""+roteiroCRM.optString("contaFixaMulta")+""+roteiroCRM.optString("contaFixaDesconto")+"");
			// logger.logDebug("ttMov.contaJuros - "+ttMov.contaJuros+" - ttMov.contaDesconto - "+ttMov.contaDesconto+" - ttMov.contaMulta - "+ttMov.contaMulta);

			// quando for forcada partida dobrada , vamos jogar a conta de juros automaticamente na conta movimento
			if (!contaMovimento.contains("IGNORA")) { // colocado para ignorar os lancamentos de partida dobrada quando o lancamento principal eh ignorado 20122022 JWR
				if (ttMov.chave.contains("DOBRADA_JUR") && !ttMov.contaJuros.equals("")) contaMovimento = ttMov.contaJuros;//#2304-002846
				if (ttMov.chave.contains("DOBRADA_DES")) {
					// invers?o de contas em desconto.
					contaMovimento = contaPortador;
					if (!ttMov.contaDesconto.equals("")) contaPortador = ttMov.contaDesconto;
				}
				if (ttMov.chave.contains("DOBRADA_MUL") && !ttMov.contaMulta.equals("")) contaMovimento = ttMov.contaMulta;
			}
			

			boolean regraCRM = false;
			// logger.logDebug("contaMovimento F -> " + contaMovimento);
			if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;

		   	//---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---

			if (!contaMovimento.equals("")){
			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {					
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";


					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresaPlanoContas)
					.param(cutString(contaMovimento,0, 20))
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresaPlanoContas)
						.param(cutString(contaMovimento,0, 20))
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}		
					ttP.contaContabil     = cutString(contaMovimento,0, 20);
					mapaPlano.put(contaMovimento,ttP);
				}
			}
			
			

			regraCRM = false;
			if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;
			
 			
			if (contaMovimento.equals("")){
				// logger.logDebug("Chegou 2");
				try {
					String classificacaoPlanoContas = getCodigoClassificacao(ttMov.nomeOrigem, histobj); // exemplo: 2.1.1.01.
					JSONObject futureObject = new JSONObject();
					//JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
					futureObject.put("codEmpresaPlano", codEmpresaPlanoContas);
					futureObject.put("fazLcdpr", fazLcdpr);
					JSONObject ret = new JSONObject();
					try {
						ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
					} catch (Exception e) {
						// logger.logDebug("XABU RET " + e.getMessage());
					}
					if (ret != null) {
						if(ttMov.tipoLancamento.contains("PAGAR") && ret.has("contaDebito")) contaMovimento = ret.optString("contaDebito");
						if(ttMov.tipoLancamento.contains("RECEBER") && ret.has("contaCredito")) contaMovimento = ret.optString("contaCredito");
					}
					//JWR 30012024 
					// logger.logDebug("PEGOU PELO PARTICIPAS " + contaMovimento);
					if (roteiroCRMPrincipal.optString("erpContabilidade").equals("JBSOFTWARE") && contaMovimento.contains("P")) contaMovimento = contaMovimento.replaceAll("P", "");
					
					if (contaMovimento == null || contaMovimento.trim().length() == 0) {
						contaMovimento = "";
						
						// CASO NAO ACHOU CONTA EM REGRAS NEM NO DEPARA ATUAL
						// VERIFICA SE E A PRIMEIRA VEZ QUE BUSCA A DESCRICAO NA NUVEM
						// INSERIDO PARA TRATGAR O BUSSOLA 3.0 
						
						ttPlano ttP  = (ttPlano)mapaDePara.get(ttMov.nomeOrigem);
						if (ttP == null) {							
							ttP  = new ttPlano(); 
							ttP.descricaoPlano = ttMov.nomeOrigem;
							ttP.contaAnalitica = "";
	
							ttP.contaContabil     = "";
							mapaDePara.put(ttMov.nomeOrigem,ttP);
							
							// BUSCA DEPARA PREENCHIDO PELO CONTADOR NO BUSSOLA 3.0 
							String cnpjEmpresaRequest = cnpjEmpresa.replaceAll("[^0-9]","").trim();
							String cnpjContabilidadeRequest = roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/","");
							// logger.logDebug("SUJANDO "  + cnpjEmpresaRequest + " | " + cnpjContabilidadeRequest + " | " + ttMov.nomeOrigem);
							// logger.logDebug("SUJANDO 2 = "  + ttMov.valorDocumento + " | " + ttMov.nomeOrigem);
							try{
								// logger.logDebug("ttMov.nomeOrigem -> " + ttMov.nomeOrigem);
								deParaObj = findDeParaDescricao(dbIODepara, cnpjEmpresaRequest, cnpjContabilidadeRequest, ttMov.nomeOrigem);
 								
								}
							catch (Exception e) { 
							}
							if (deParaObj != null ) {
								if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = deParaObj.optString("conta_debito");
								if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = deParaObj.optString("conta_credito");
								// logger.logDebug("contaMovimento -> " + contaMovimento);
								if (contaMovimento == null) contaMovimento = "";
								// logger.logDebug("CONTS " + contaMovimento);
								// Quando cliente inserir a contaT no DEpara Nuvem, vamos apagar no final da rota 
								if (contaMovimento.contains("T")) {
									apagaContaT    = true;
								}
								
								// logger.logDebug("CMM " + contaMovimento + " | " + apagaContaT);
								
								
							}else contaMovimento = "";
							
							
							// SE ENCONTROU DAPARA NA NUVEM GRAVA NO H2 PARA NA PROXIMA VEZ// ACHAR LOCALMENTE O DEPARA
							/*if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("PAGAR")) {
									if (!hasPessoaPag(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("PAGAR")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "",
															contaMovimento, "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "", contaMovimento, "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}
							if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("RECEBER")) {
									if (!hasPessoaRec(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("RECEBER")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento,
													"", "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento, "", "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}*/
							
							// RETIRA  T DA CONTA MOVIMENTO
							contaMovimento = contaMovimento.replaceAll("T", "").replaceAll("t","");
							ttP.contaContabil     = contaMovimento;
							mapaDePara.put(ttMov.nomeOrigem,ttP);
						
						} 
						else {
							contaMovimento = ttP.contaContabil;
						}
						
						
					}  
				} catch  (Exception Ee) {}
			}

			if (fazLcdpr.equals("TRUE")) {
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO") && !contaMovimento.contains("R")) {
					ObjParticipante objParticipante = (ObjParticipante)mapaParticipante.get(ttMov.nomeOrigem);
					if (objParticipante != null) {
						contaMovimento = contaMovimento + "R" + objParticipante.codigoParticipante;
					}
				}
				
		   	}
			

			
 			
			if(roteiroCRMPrincipal.optString("erpContabilidade").contains("DEXION")){
				if (contaMovimento.equals("")) {
						JSONObject descricaoPlano = dbIOCont.sql("SELECT CONTACONTABIL FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOPLANO LIKE ?")
						.fields("CONTACONTABIL")
						.param(codEmpresaPlanoContas)
						.param(ttMov.cpfCnpj + "%")
						.queryUnique();
						contaMovimento = descricaoPlano.optString("CONTACONTABIL").trim();
				}
			}

			if (contaPortador.equals("")) {
				try {
					ttFornecedor ttF  = (ttFornecedor)mapaFornecedor.get(ttMov.nomePortador+"PORT");
					if (ttF == null) {					
						ttF  = new ttFornecedor(); 

						JSONArray portadorDePara =  findPortador(dbIOCont, codEmpresa, ttMov.nomePortador);
						if (portadorDePara != null && portadorDePara.length() > 0) {
							JSONObject ret = portadorDePara.optJSONObject(0);
							contaPortador = ret.optString("CONTACONTABIL").trim();
						}

						ttF.contaMovimento = contaPortador;
						ttF.nomeOrigem     = ttMov.nomePortador + "PORT";
						mapaFornecedor.put(ttMov.nomePortador + "PORT",ttF);
					} else {
						contaPortador = ttF.contaMovimento;
					}
				}
				catch  (Exception Ee) {}
			}

			String contaTipoFornecedor = "999333";

			boolean eFornecedor = false;
			String  razaoSocial = ttMov.nomeOrigem;
			String  razaoSocialDuplicata = ttMov.nomeOrigem;
			if (contaMovimento.toUpperCase().contains("FISCAL"))  eFornecedor = true;

			if (!contaMovimento.equals("")){			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";

					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
								.fields("DESCRICAOPLANO,CONTAANALITICA")
								.param(codEmpresaPlanoContas)
								.param(contaMovimento)
								.queryUnique();

					if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO") && descricaoPlano.has("CONTAANALITICA") ) {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");						
					}
					ttP.contaContabil     = contaMovimento;
					mapaPlano.put(contaMovimento,ttP);
				}

				descricaoPlanoContaMovimento = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
					razaoSocial = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				}

				// Joga no nome do fornecedor o que esta no plano de contas
				if (!classificaPlano.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaPlano))) {
					ttMov.nomeOrigem = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
				}
				if (ttP.descricaoPlano.length() < 2 || ttP.descricaoPlano.equals("") || ttP.descricaoPlano == null) {
					eFornecedor = true;
				}		

				if (razaoSocial.length() < 4) razaoSocial = ttMov.nomeOrigem;

				if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
					eFornecedor = true;
				}  
			}

			if (!contaPortador.equals("")){
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaPortador);
				if (ttP == null) {
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";
					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresaPlanoContas)
					.param(cutString(contaPortador,0, 20))
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresaPlanoContas)
						.param(cutString(contaPortador,0, 20))
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}
					ttP.contaContabil     = cutString(contaPortador,0, 20);
					mapaPlano.put(contaPortador,ttP);
				}
				descricaoPlanoContaPortador = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
			}
			
			if(ttMov.tipoLancamento.contains("PAGAR")) {
				ttMov.contaDebito  = cutString(contaMovimento,0, 20);
				ttMov.contaCredito = cutString(contaPortador,0, 20);
			}
			if(ttMov.tipoLancamento.contains("RECEBER")) {
				ttMov.contaCredito  = cutString(contaMovimento,0, 20);
				ttMov.contaDebito   = cutString(contaPortador,0, 20);
			}
			
			// logger.logDebug("CONTASTEMP " + ttMov.contaDebito + " | " + ttMov.contaCredito);
			
			if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
  				temIgnorar = true;
				ResumoTxt.append("\r\n");
				comparaRazao = true;


				ResumoTxt.append("REGRA DE IGNORAR CONTA MOVIMENTO;");
				ResumoTxt.append(ttMov.dataMovimento).append(";").append(ttMov.dataMovimento).append(";")
						 .append(ttMov.valorDocumento).append(";").append(ttMov.documento).append(";")
						 .append(ttMov.nomeOrigem).append(";").append(ttMov.nomePortador).append(";")
						 .append(ttMov.complemento01).append(";").append(ttMov.complemento02).append(";")
						 .append(ttMov.complemento03).append(";").append(ttMov.complemento04).append(";")
						 .append(ttMov.complemento05).append(";").append(ttMov.complemento06).append(";;")
						 .append(ttMov.contaDebito).append(";").append(ttMov.contaCredito).append(";")
						 .append(regraContaMovimento).append(";").append(ttMov.historico).append(";");
				
				mapaVariavel.put(key,ttMov);
  
				continue;
			}
			if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
				temIgnorar = true;
 				
				ResumoTxt.append("\r\n");
				comparaRazao = true;


				ResumoTxt.append("REGRA DE IGNORAR CONTA MOVIMENTO;").append(ttMov.dataMovimento).append(";").append(ttMov.dataMovimento).append(";")
						 .append(ttMov.valorDocumento).append(";").append(ttMov.documento).append(";").append(ttMov.nomeOrigem).append(";")
						 .append(ttMov.nomePortador).append(";").append(ttMov.complemento01).append(";").append(ttMov.complemento02).append(";")
						 .append(ttMov.complemento03).append(";").append(ttMov.complemento04).append(";").append(ttMov.complemento05).append(";")
						 .append(ttMov.complemento06).append(";;").append(ttMov.contaDebito).append(";").append(ttMov.contaCredito).append(";")
						 .append(regraContaMovimento).append(";").append(ttMov.historico).append(";");
 				
 				mapaVariavel.put(key,ttMov);
  
				continue;
			}
			String parcelaAtualeFinal = "";
			String parcelaAtual       = "";

			int parcelaBase = getParcelaBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			int totalParcelas = getTotalParcelas(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			String mesAnoBase = getMesAnoBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if (!mesAnoBase.equals("") && parcelaBase > 0) parcelaAtual       = String.valueOf(getParcelaFinanciamento(mesAnoAtual, mesAnoBase,parcelaBase, totalParcelas));
			if (!mesAnoBase.equals("")) parcelaAtualeFinal = parcelaAtual.trim() + "/" + String.valueOf(totalParcelas).trim();

			ttMov.historico = getHistorico(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.nomeOrigem,
										   ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
										   ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			
			histobj.put("contaMovimento", contaMovimento).put("contaPortador", contaPortador).put("contaDebito", ttMov.contaDebito)
				   .put("contaCredito", ttMov.contaCredito).put("contaJuros", ttMov.contaJuros).put("contaMulta", ttMov.contaMulta)
				   .put("contaDesconto", ttMov.contaDesconto).put("parcelaAtual", parcelaAtual).put("parcelaAtualeFinal", parcelaAtualeFinal)
				   .put("trimestreMesAnoAnterior", trimestreMesAnoAnterior).put("trimestreMesAnoAtual", trimestreMesAnoAtual).put("descricaoPlanoMovimento", descricaoPlanoContaMovimento.toUpperCase())
				   .put("descricaoPlanoPortador", descricaoPlanoContaPortador.toUpperCase());

			if(roteiroCRM.optString("Realizar_Busca_Plano").equals("TRUE")){

				// #Fabrica(2019-08-27) @Vini
				JSONObject fornecFilial = new JSONObject();
				String cAnalitica = "";
				String auxNomeOrig = "";
				auxNomeOrig = ttMov.nomeOrigem.replaceAll("-","").replaceAll("/","").replaceAll("\\.","").replaceAll("[0-9]*", "").replaceAll("\\s+","").replaceAll("ME","").replaceAll("EPP","").replaceAll("LTDA","").replaceAll("EIRELI","").replaceAll("SA","").trim();
				if (auxNomeOrig.length()> 11) auxNomeOrig = cutString(auxNomeOrig,0,10);
				//pesquisa no banco de dados pela descricao continua para pegar a classifica??o usada na nova regra
				fornecFilial = dbIOCont.sql("SELECT CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOCONTINUA LIKE ?")
				.fields("CONTAANALITICA")
				.param(codEmpresaPlanoContas)
				.param(auxNomeOrig+"%")
				.queryUnique();
				cAnalitica = fornecFilial.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim();                
				histobj.put("classificacao", cAnalitica); // classificacao para criacao de regra
			}

			ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

			ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			
			//yuri - 2309-016305
			boolean methodFoundHistorico = false;
			for(java.lang.reflect.Method method : methods) {
				String methodName = method.getName();				
				methodFoundHistorico = false;
				if(methodName.toUpperCase().equals("GETHISTORICOREGRA2")) {
					methodFoundHistorico = true;
				}
				
				if(methodName.toUpperCase().equals("GETHISTORICOREGRA3")) {
					methodFoundHistorico = true;
				}
				
				if(methodName.toUpperCase().equals("GETHISTORICOREGRA4")) {
					methodFoundHistorico = true;
				}
				
				if(methodFoundHistorico) {					
					// Invoca metodo de getHistoricoRegra
					ttMov.historico = (String) method.invoke(scInstance, contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
				}
			}
			// if(codEmpresa.equals("244")) logger.logDebug("HST == "+ttMov.historico+" | VLR == "+ttMov.valorDocumento);
			
			regraHistorico = getRegraHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
						
			if (!ttMov.historicoJuros.contains("JUROS")) ttMov.historicoJuros = "JUROS REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
			ttMov.historicoJuros = getHistorico(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.nomeOrigem,
												ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
												ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			ttMov.historicoJuros = getHistoricoJuros(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if (!ttMov.historicoDesconto.contains("DESCONTO")) ttMov.historicoDesconto = "DESCONTO REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
			ttMov.historicoDesconto = getHistorico(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.nomeOrigem,
												   ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
												   ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			ttMov.historicoDesconto = getHistoricoDesconto(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			if (ttMov.historicoMulta.equals("")) ttMov.historicoMulta = "MULTA REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
			ttMov.historicoMulta = getHistorico(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.nomeOrigem,
												ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
												ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
			ttMov.historicoMulta = getHistoricoMulta(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

			// quando for forcada partida dobrada , vamos jogar o historico  de juros automaticamente no historico  movimento
			if (ttMov.chave.contains("DOBRADA_JUR")) ttMov.historico = ttMov.historicoJuros;
			if (ttMov.chave.contains("DOBRADA_DES")) ttMov.historico = ttMov.historicoDesconto;
			if (ttMov.chave.contains("DOBRADA_MUL")) ttMov.historico = ttMov.historicoMulta; 
			
			ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
										  ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
										  ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);
										  
			if(!ttMov.codFilial.equals("") && roteiroCRMPrincipal.optString("erpContabilidade").contains("SCI")){
				ttMov.lote = ttMov.codFilial+"_"+ttMov.lote;
			}

			String codParticipante   = getParticipante("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, 
														ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, 
														ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);

			ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

			if (!ttMov.codFilial.equals("")) {
				ttMov.historico 		= ttMov.historico 			 + " Filial:" + ttMov.codFilial;
				ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Filial:" + ttMov.codFilial;
				ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Filial:" + ttMov.codFilial;
				ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Filial:" + ttMov.codFilial;
			}
						
			if (!codParticipante.equals("")) {
				ttMov.historico 		= ttMov.historico			 + " Participante:" + codParticipante;
				ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Participante:" + codParticipante;
				ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Participante:" + codParticipante;
				ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Participante:" + codParticipante;
			}

			ttMov.historico 		= ttMov.historico.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
			ttMov.historicoJuros 	= ttMov.historicoJuros.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
			ttMov.historicoDesconto = ttMov.historicoDesconto.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
			ttMov.historicoMulta 	= ttMov.historicoMulta.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
									
			if(roteiroCRMPrincipal.optString("erpContabilidade").equals("JBSOFTWARE")){
				ttMov.historico += "GPLCTO:" + ttMov.contLinha;
				ttMov.historicoJuros += "GPLCTO:" + ttMov.contLinha;
				ttMov.historicoDesconto += "GPLCTO:" + ttMov.contLinha;
				ttMov.historicoMulta += "GPLCTO:" + ttMov.contLinha;
			}

			// ------------------------------------------------
			//           GERA ARQUIVO PARA O FISCAL
			// ------------------------------------------------
			ttMov.documento = ttMov.documento.trim();
			if (ttMov.documento.startsWith("0")) {
				for (int xx=0;xx<10;xx++) {
					if (ttMov.documento.length() > 1 && ttMov.documento.startsWith("0")) ttMov.documento = ttMov.documento.substring(1);
				}
			}

			JSONObject jDescricaoDupl = new JSONObject();
			if (eFornecedor)   jDescricaoDupl.put("TIPO","FORNECEDOR");

			// Teste 64 kb
			if (fazConciliacao) {
				if (criaCabecalhoConciliacao) {
					txtConciliacao.append("NF;PARC;DIVERGENTE;VALOR A PAGAR;VALOR RAZAO").append("\r\n");
					criaCabecalhoConciliacao = false;
				}

				String chaveConciliacao = ttMov.documento + "-" + cutString(ttMov.complemento01, 0, "/").replaceAll("0","") + "-" + cutString(ttMov.nomeOrigem, 0, 5);
				//000014184-4-INDUS
				// logger.logDebug("CHAVINHA " + chaveConciliacao);
				ObjConciliacao ttConciliacao = (ObjConciliacao) mapaConciliacao.get(chaveConciliacao);

				if (ttConciliacao != null) {
					txtConciliacao.append(ttMov.documento).append(";").append(cutString(ttMov.complemento01, 0, "/").replaceAll("0","")).append(";")
								  .append(ttConciliacao.valorConciliacao == ttMov.valorDocumento ? "CONCILIADO" : "NAO CONCILIADO").append(";")
								  .append(ttMov.valorDocumento).append(";").append(ttConciliacao.valorConciliacao).append("\r\n");

				} else {
					txtConciliacao.append(ttMov.documento).append(";").append(cutString(ttMov.complemento01, 0, "/").replaceAll("0","")).append(";")
								  .append("NAO CONCILIADO").append(";")
								  .append(ttMov.valorDocumento).append(";").append(0).append("\r\n");
				}
				loteConciliacao = nomeEmpresa + "_" + codEmpresa + "_" + "_CONCILIACAO_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + ttMov.tipoLancamento;
			}

			if(integraFiscal.contains("TRUE") && ttMov.tipoPlanilha.contains("MOVIMENTO") && !razaoSocial.equals("") && !ttMov.documento.equals("") && !regraCRM && !contaMovimento.equals("")){
				//Atendimento: 2308-013102 -> Problema ao gerar os relatorios de PELO_FISCAL e Duplicatas nao encontradas
				// eFornecedor = true;
				temFiscal = true;
				apagaStatus = true;
				
				//JWR 02022021 - estava adicionando a parcela no documento para a busca de duplicata em roteiros secundarios.
				//Adicionada a validacao "roteiroCRM.has("usarComplementoParcela")"
				if (roteiroCRM.has("usarComplementoParcela") && !roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("NAO USAR")) {
					ttMov.documento = ttMov.documento + "-" + ttMov.parcelaDoc;
				}
				
				String dataVencimentoTTMov = "";
				
				if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) dataVencimentoTTMov = ttMov.complemento01;
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) dataVencimentoTTMov = ttMov.complemento02; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) dataVencimentoTTMov = ttMov.complemento03; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) dataVencimentoTTMov = ttMov.complemento04; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) dataVencimentoTTMov = ttMov.complemento05; 
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) dataVencimentoTTMov = ttMov.complemento06; 
				}	
					
				 
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("QUESTOR")) {

					JSONObject jDadosAux = new JSONObject();
					jDadosAux.put("CODEMPRESA", codEmpresa).put("DATAVENCTTMOV", dataVencimentoTTMov).put("RAZAOSOCIAL",razaoSocial)
							 .put("TABELACONTABIL", tabelaContabil);
					
					TemplateUtils templateUtil = new TemplateUtils();
					jDescricaoDupl = templateUtil.geraFiscalQuestor(roteiroCRMPrincipal, jDadosAux, jDescricaoDupl, dbIOCont, ttMov, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							
							jDescricaoDupl.put("USAFILIAL", roteiroCRMPrincipal.optString("Usa_Filial_Questor").toUpperCase());
														
							txtFiscal[0].append(TemplateUtils.geraLinhaFiscalQuestor(jDescricaoDupl).toString());

							geraFiscal = true;
							
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
				
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else { //Add dia 02/03/2021 - > Enviar dupli n encontradas p/ contabil questor
							dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
							contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");
							
							if(dupliNaoEncontContabil){
								contaMovimento = contaTemp;
								if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
								if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

								histobj.put("contaMovimento", contaMovimento);
								ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
							}else {
								if(cabecalhoNaoEncontrada){
									txtFornecedor.append("Codigo;Fornecedor/Cliente;Duplicata;Data;Valor bruto;Valor liquido;Banco;Obs:").append("\r\n");
									cabecalhoNaoEncontrada = false;
								}
								String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
								jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
								txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA")).append(";").append(razaoSocialDuplicata).append(";")
											 .append(ttMov.documento).append(";").append(ttMov.dataMovimento).append(";").append(String.format("%.2f", ttMov.valorDocumento))
											 .append(";").append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",",")).append(";").append(ttMov.nomePortador).append(";")
											 .append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2))
											 .append("\r\n");

								jDescricaoDupl.put("TIPO","FORNECEDOR");

								geraFiscal = true;
								loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
								
								if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
								
								if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
								
								ttMov.tipoPlanilha = "NAO LER";
								mapaVariavel.put(key,ttMov);
								continue;
							}
						}
					}
				}

				/*if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("MAKROWEB")) {
					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("VALORMULTA",  ttMov.valorMulta);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
						ttMov.parcelaDoc     = jDescricaoDupl.optInt("PARCELADOC");
						ttMov.valorDesconto  = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDesconto));
						ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento));
						ttMov.valorJuros 	 = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorJuros));
						
						String valorDescontoAux  = preparaDoublePrecisao(String.valueOf(ttMov.valorDesconto));
						String valorDocumentoAux = preparaDoublePrecisao(String.valueOf(ttMov.valorDocumento));
						String valorAcrecimoAux 	 = preparaDoublePrecisao(String.valueOf(ttMov.valorJuros+ttMov.valorMulta));
						
						//#2309-015394
						//double valorAux = ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta;
						//String valorCalcAux = "";
						// #Fabrica(2019-08-06) @Vini
						//valorCalcAux = preparaDoublePrecisao(String.valueOf(DecimalUtil.toDecimal(String.format("%.2f", valorAux))));
						
						// if (!String.format("%.2f", ttMov.valorDocumento).equals(jDescricaoDupl.optString("VALORPARCELA"))) { //<--- antigo
						if (ttMov.valorDocumento > jDescricaoDupl.optDouble("VALORPARCELA")) {
							jDescricaoDupl.put("TIPO", "FORNECEDOR");
						} else {													

							txtFiscal[0].append(StringUtil.leftPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 14,  "0"));
							txtFiscal[0].append(StringUtil.leftPad(cutString(ttMov.documento, 0, "-"), 8, "0"));
							txtFiscal[0].append(StringUtil.leftPad(String.valueOf(ttMov.parcelaDoc), 2, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorDocumentoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(ttMov.dataMovimento.replaceAll("/",""));
							txtFiscal[0].append(StringUtil.leftPad(valorDescontoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorAcrecimoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							//#2309-015394
							//txtFiscal[0].append(StringUtil.leftPad(valorCalcAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorDocumentoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(contaPortador, 9,  "0"));
							txtFiscal[0].append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
					}
				}*/

				/*if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) {
					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					  
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					
					 jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							
							txtFiscal[0].append(TemplateUtils.geraLinhaFiscalCordilheira(jDescricaoDupl, ttMov, geraCabecalhoCordilheira).toString());
							
							geraCabecalhoCordilheira = false;

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(razaoSocialDuplicata);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.documento);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.dataMovimento);
							txtFornecedor.append(";");
							txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
							txtFornecedor.append("\r\n");

							jDescricaoDupl.put("TIPO","FORNECEDOR");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
					}
				}*/

				// if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CUCA-FRESCA")) {

					// JSONObject jDados = new JSONObject();
					// jDados.put("CODEMPRESA",     codEmpresa);
					
					// //usando a filial do questor em duplicatas em aberto
				   
					// jDados.put("RAZAOSOCIAL",    razaoSocial);
					// jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					// jDados.put("DOCUMENTO",      ttMov.documento);
					// jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					// jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					// jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					// jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					// jDados.put("VALORJUROS",     ttMov.valorJuros);
					// jDados.put("VALORMULTA",     ttMov.valorMulta);
					// jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					// jDados.put("TABELACONTABIL", tabelaContabil);
					// jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					// Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					// dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					// double valorSaldoDuplicata2 = 0;
					// if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					// valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					// ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					// if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
					
						// if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
							// String separadorFiscal = "";
							// String dataVencimento  = "";
							// //String parcela		   = "1";
							// String duplicataParcela = jDescricaoDupl.optString("DUPLICATA")+"/"+String.valueOf(ttMov.parcelaDoc);
							
							// txtFiscal[0].append(cnpjEmpresa);
							// txtFiscal[0].append("    ");

							// if(tipoLancamento.contains("PAGAR"))	txtFiscal[0].append("E");
							// if(tipoLancamento.contains("RECEBER"))	txtFiscal[0].append("S");

							// txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("DATAVENCIMENTO"), 10, " ")); //lendo do duplicatasem aberto
							// txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("SITUACAO"), 5, " ")); //especie
							// txtFiscal[0].append(StringUtil.rightPad("", 3, " ")); //serie
							
							// txtFiscal[0].append(StringUtil.rightPad("", 2, " ")); //sub-serie
							// txtFiscal[0].append(StringUtil.leftPad(cutString(ttMov.documento, 0, "-"), 9, "0"));
							// txtFiscal[0].append(StringUtil.leftPad("", 9, "0"));
							
							// txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 18, " ")); // preciso criar a leitura do CNPJ do cliente, est? sendo usado o objeto "CODIGOFORNECEDOR" para guardar essa informa??o
							// txtFiscal[0].append(StringUtil.leftPad(duplicataParcela, 21, "0"));
							// txtFiscal[0].append(StringUtil.leftPad(dataVencimento, 10, " ")); //data do vencimento
							
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0")); //? preciso criar a leitura do valor ? baixar, est? sendo usado o objeto "VALORPARCELA" para guardar no banco
							
							// if(contaPortador.length() > 1){
								// contaPortador = contaPortador.substring(0, contaPortador.length()-1) + "-" + contaPortador.substring(contaPortador.length()-1);
								// if(contaPortador.length() > 5) contaPortador = contaPortador.substring(0, contaPortador.length()-5) + "." + contaPortador.substring(contaPortador.length()-5);
							// }
							
							// txtFiscal[0].append(StringUtil.leftPad(contaPortador, 9, "0")); //a conta do banco
							// txtFiscal[0].append(StringUtil.rightPad(ttMov.centroCusto, 4, " "));
							
							// //txtFiscal[0].append(StringUtil.rightPad(ttMov.historico, 3, ""));	
							// if(tipoLancamento.contains("PAGAR"))	txtFiscal[0].append(StringUtil.rightPad("10", 3, " ")); //10 pagamento fornecedor 
							// if(tipoLancamento.contains("RECEBER"))	txtFiscal[0].append(StringUtil.rightPad("11", 3, " ")); // 11 recebimento duplicata
							
							// txtFiscal[0].append(StringUtil.leftPad("", 15, " "));	//numero do cheque na planilha
							// txtFiscal[0].append(StringUtil.rightPad(ttMov.dataMovimento, 10, " "));
							
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0"));
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorJuros), 13, "0"));
							// txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDesconto), 13, "0"));
							
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // correcao monetaria
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // despesas/receitas
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // Base de Calculo Retencao
							
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // IRRF Retido 
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // PIS Retido 
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido 
							
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // CSLL Retido 
							// txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido 
							// txtFiscal[0].append("    "); //n?o encontrado o c?digo da receita
							
							// txtFiscal[0].append("\r\n");

							// geraFiscal = true;
							// loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							// if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							// ttMov.tipoPlanilha = "NAO LER";
							// mapaVariavel.put(key,ttMov);
							// continue;
						// } else {
							// if(cabecalhoNaoEncontrada){
								// txtFornecedor.append("Codigo");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Fornecedor/Cliente");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Duplicata");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Data");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Valor bruto");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Valor liquido");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Banco");
								// txtFornecedor.append(";");
								// txtFornecedor.append("Obs:");
								// txtFornecedor.append("\r\n");
								// cabecalhoNaoEncontrada = false;
							// }
							// String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							// jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							// txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							// txtFornecedor.append(";");
							// txtFornecedor.append(razaoSocialDuplicata);
							// txtFornecedor.append(";");
							// txtFornecedor.append(ttMov.documento);
							// txtFornecedor.append(";");
							// txtFornecedor.append(ttMov.dataMovimento);
							// txtFornecedor.append(";");
							// txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							// txtFornecedor.append(";");
							// txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							// txtFornecedor.append(";");
							// txtFornecedor.append(ttMov.nomePortador);
							// txtFornecedor.append(";");
							// txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
							// txtFornecedor.append("\r\n");

							// jDescricaoDupl.put("TIPO","FORNECEDOR");

							// geraFiscal = true;
							// loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							// if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
							
							// if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							// ttMov.tipoPlanilha = "NAO LER";
							// mapaVariavel.put(key,ttMov);
							// continue;
						// }
					// }
				// }
				
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {
					JSONObject jDados = new JSONObject();
					
					if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("LER DA DUPLICATA MAIS ANTIGA"))  {
						
						
						if (dataVencimentoTTMov.equals("")) {
						
							JSONObject recordsDupVenc = new JSONObject();  
							try {
								String sql = "SELECT VENCIMENTO FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND IO_DUPLICATA.DUPLICATA = ? ORDER BY VENCIMENTO LIMIT 1"; 
								recordsDupVenc = dbIOCont.sql(sql)
								.setFields("VENCIMENTO")
								.param(codEmpresa)
								.param(ttMov.documento)
								.debug(logger)
								.queryUnique();	

							} catch (Exception e1) {
								// logger.logDebug("ERROR: " + e1.getMessage());
							}
						
							if(recordsDupVenc != null && recordsDupVenc.has("VENCIMENTO")){
								dataVencimentoTTMov = cutString(recordsDupVenc.optString("VENCIMENTO"), 8, 10) + "/" +cutString(recordsDupVenc.optString("VENCIMENTO"), "-", "-") + "/" + cutString(recordsDupVenc.optString("VENCIMENTO"), 0, "-") ;
							}
						}   
						
						
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}else if(!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO")){
						jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					}else if(roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO")){
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					 
					
					
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("OBSERVACAO", 	 ttMov.dataMovimento);
					jDados.put("PARCELADOC",     99);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);

					// Descomentar a proxima linha para testar data de vencimento  a jDescricaoDupl.optString("DATAVENCIMENTO") que vem das duplicatas em aberto! OBS: Complemento06, deve estar lendo a data de vencimento da planilha financeira
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  { 
					   if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorDataVencimento(jDescricaoDupl, dataVencimentoTTMov);
					}

					String chaveParcela = ttMov.documento + "-PARCELA";
					ttParcelaDominio ttP    = (ttParcelaDominio)mapaParcelaDominio.get(chaveParcela);
					if (ttP == null) {
						ttP  			= new ttParcelaDominio();
						ttP.documento   = ttMov.documento;
						ttP.ultimaParcela = 0;
					}
					ttP.ultimaParcela++;
					
					mapaParcelaDominio.put(chaveParcela,ttP);
					
					jDados.put("PARCELADOC", ttP.ultimaParcela);                 
					jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);	

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");
 
					String chaveDuplicata = "";
					if (jDescricaoDupl.has("CODIGOFORNECEDOR")) chaveDuplicata = ttMov.codEmpresa + "-ESPECIAL-" + jDescricaoDupl.optString("CODIGOFORNECEDOR") + "-" + ttMov.documento + "-SEG-";
					
					String serie = "";
					String subSerie = "";
					String especie = "";
					double valorSegmento = 0;

					JSONArray recordsDup = new JSONArray();

					/*
					DESCOMENTAR ESSA LINHA QUANDO TIVER DATA DE VENCIMENTO
					VAI SEPARAR QUANDO ENCONTRAR A DATA DE VENCIMENTO NO BANCO
					COLOCAR O COMPLEMENTO QUE TIVER A DATA DE VENCIMENTO : ttMov.complemento06
					*/
					// if (ttMov.tipoPlanilha.equals("MOVIMENTO")) {
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  { 

						 boolean isData = false;
						 Date dtV = new Date();
						 try{ 
							 dtV = DateUtil.stringToDate(jDescricaoDupl.optString("DATAVENCIMENTO"), "dd/MM/yyyy");
							isData = true; 
							 if(!getCampoDate(DateUtil.dateToString(dtV, "dd/MM/yyyy")).equals(getCampoDate(dataVencimentoTTMov))) isData = false; 
						 } catch(Exception ii){ 
							isData = false; 
						 }
						 if(!chaveDuplicata.equals("")){
							if(isData){
								try {
									String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND IO_DUPLICATA.CHAVE LIKE ? AND VENCIMENTO = ? "; 
									recordsDup = dbIOCont.sql(sql)
									  .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
									  .param(codEmpresa)
									  .param(chaveDuplicata + "%")
									  .param(dtV)
									  .debug(logger)
									  .query();								
								} catch (Exception e1) {
									// logger.logDebug("ERROR: " + e1.getMessage());
								}
							}
							// if(!isData){
								// try {
									// String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? "; 
									// recordsDup = dbIOCont.sql(sql)
									  // .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
									  // .param(chaveDuplicata + "%")
									  // .debug(logger)
									  // .query();								
								// } catch (Exception e1) {
									// logger.logDebug("ERROR: " + e1.getMessage());
								// }
							// }
						 }
					}

					 else  { 
						if(!chaveDuplicata.equals("")){
							try {
								// INSERIDO O WHERE CODEMPRESA = ? PARA CORRE??O DO CHAMADO 202301-0023064.
								String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND IO_DUPLICATA.CHAVE LIKE ? "; 
								recordsDup = dbIOCont.sql(sql)
								  .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
								  .param(codEmpresa)
								  .param(chaveDuplicata + "%")
								  .debug(logger)
								  .query();	

							} catch (Exception e1) {
								logger.logDebug("ERROR: " + e1.getMessage());
							}
						}
					}
					/* EXEMPLO DE COMO TEM QUE SAIR
					
					|0000|07701892000105|
					|5100|39||0|21338|15/08/2017|14/08/2017|0|||180,00|||||||||||||
					|5110|15/08/2017|3612|434|180,00|5|21338 ATLANTA ALARMES -  MONITOL MONIT. TOLEDO LTDA.||418|
					*/

					JSONObject recordsDupSeg = new JSONObject(); 
					if (recordsDup.length() > 0) recordsDupSeg = recordsDup.optJSONObject(0);
					
					if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
						serie   = recordsDupSeg.optString("SERIE");
						especie = recordsDupSeg.optString("CHAVEDUPLICATA");
					}

					double valorSaldoDuplicata = 0;
					double valorSomaSegmentos  = 0;
					
					// soma os segmentos pois eles nao sao baixados. Ou seja, se pago um valor parcial no dominio soma dos segmentos 
					// continua sendo o valor origial (total) da nota fiscal
					// utilizado para achar a proporcao do valor para cada segmento
					for (int seg =0; seg<recordsDup.length(); seg ++) {
						recordsDupSeg =  recordsDup.optJSONObject(seg);
						if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
							valorSomaSegmentos = valorSomaSegmentos + DecimalUtil.toDecimal(String.format("%.2f", recordsDupSeg.optDouble("VALORPARCELA")));
						}		
					}

					boolean leuDuplicata = false;
					
					// valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));
					
					if (jDescricaoDupl.optString("TIPO").equals("FISCAL") && !roteiroCRMPrincipal.optString("validaFornecedorFiscal").equals("")) {
						jDescricaoDupl.put("VALIDAFORNECEDORFISCAL", roteiroCRMPrincipal.optInt("validaFornecedorFiscal"));
						jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem);
					}
					
					if (valorSomaSegmentos > 0) valorSaldoDuplicata = valorSomaSegmentos;

					valorSaldoDuplicata  = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					double diferencaParcela = DecimalUtil.toDecimal(String.format("%.2f", DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento )) - valorSomaSegmentos));
					
					if (!especie.equals("") || !serie.equals("")) {
						if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) {
							double valorTotalBaixado = 0;
							for (int seg =0; seg<recordsDup.length(); seg ++) {
							
								recordsDupSeg =  recordsDup.optJSONObject(seg);
                                String segmento = "";
								
								if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
									serie   	  = recordsDupSeg.optString("SERIE");
									subSerie   	  = recordsDupSeg.optString("SITUACAO");      // GUARDA SUB SERIE 
									especie 	  = recordsDupSeg.optString("CHAVEDUPLICATA");
									valorSegmento = recordsDupSeg.optDouble("VALORPARCELA");
                                    segmento      = recordsDupSeg.optString("CHAVE");
									if (segmento.contains("-SEG-")) {
                                        segmento = cutString(segmento, "-SEG-");
                                        segmento = cutString(segmento, 0, "-");
                                    }	
								}	

                                if(segmento.equals("0")){
                                    if(seg>0) continue;
                                    valorSomaSegmentos = DecimalUtil.toDecimal(String.format("%.2f",valorSegmento));
                                    diferencaParcela = 0;
                                }

								// (zerado para validacao)
								diferencaParcela = 0;

                                //if (subSerie.equals("")) subSerie = "0";

                                String codContabil = "";
                                if(ttMov.tipoLancamento.contains("PAGAR")) {
                                    ttMov.contaDebito  = contaMovimento;
                                    ttMov.contaCredito = contaPortador;
                                    codContabil = "5100";
                                }
                                if(ttMov.tipoLancamento.contains("RECEBER")) {
									ttMov.contaDebito   = contaPortador;
									ttMov.contaCredito  = contaMovimento;
									codContabil = "5200";
									if(especie.equals("39")) codContabil = "5300";
									
									histobj.put("especie", especie);
									String codigoFiscalNovo = getCampoFiscal("", histobj);
									if (!codigoFiscalNovo.equals("")) codContabil = codigoFiscalNovo;
								}

                                String delimitador = "|";
                                String tipoSerie = delimitador + codContabil + delimitador + especie + delimitador + serie + delimitador + subSerie + delimitador;
								
								// if(ttMov.codEmpresa.contains("351")) logger.logDebug("Fiscal pelo Template");
								
                                if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                                    txtFiscal[0].append(tipoSerie);
                                    //txtFiscal[0].append(jDescricaoDupl.optString("DUPLICATA"));
									if(ttMov.tipoLancamento.contains("PAGAR")) { //2311-020947
										txtFiscal[0].append(cutString(jDescricaoDupl.optString("DUPLICATA"), 0, "-"));
									}
									if(ttMov.tipoLancamento.contains("RECEBER")) {
										txtFiscal[0].append(jDescricaoDupl.optString("DUPLICATA"));
									}
									txtFiscal[0].append(delimitador).append(jDescricaoDupl.optString("DATAVENCIMENTO")).append(delimitador)
												.append(ttMov.dataMovimento).append(delimitador);
									
									 
									
									ttDocumento ttDoc    = (ttDocumento)mapaDocumento.get(ttMov.documento+"-"+seg);
									if (ttDoc == null) {
										ttDoc  = new ttDocumento();
										ttDoc.documento  = ttMov.documento;
										ttDoc.valorDocumento  = 0;
 									}
									
									double valorBaixar = 0;
									
									ttDoc.valorDocumento   = ttDoc.valorDocumento + DecimalUtil.toDecimal(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))));
									valorBaixar = DecimalUtil.toDecimal(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))));										
									
  
									if ((valorSegmento - ttDoc.valorDocumento) <= 0.02 && (valorSegmento - ttDoc.valorDocumento) > 0) valorBaixar = valorBaixar  + (valorSegmento - ttDoc.valorDocumento);
									if ((ttDoc.valorDocumento - valorSegmento) <= 0.02 && (ttDoc.valorDocumento - valorSegmento) > 0) valorBaixar = valorBaixar  - (ttDoc.valorDocumento - valorSegmento);
									
									 valorTotalBaixado += valorBaixar; 
									 
 									 
 									
									// calcula se o valor a ser baixado somando os segmentos eh maior que o valor pago pelo cliente
									// quando isto ocorrer, deve-se ajustar no ultimo segmento o valor
									 if ((valorTotalBaixado - ttMov.valorDocumento) <= 0.02 && (valorTotalBaixado - ttMov.valorDocumento) > 0) {
										 valorBaixar = valorBaixar  - (valorTotalBaixado - ttMov.valorDocumento);
										 ttDoc.valorDocumento = ttDoc.valorDocumento  - (valorTotalBaixado - ttMov.valorDocumento);
									 }
									
									 if ((ttMov.valorDocumento - valorTotalBaixado) <= 0.02 && (ttMov.valorDocumento - valorTotalBaixado) > 0) {
										 valorBaixar = valorBaixar  - (ttMov.valorDocumento - valorTotalBaixado);
										 ttDoc.valorDocumento = ttDoc.valorDocumento  - (ttMov.valorDocumento - valorTotalBaixado);
									 }
									 
 									
									mapaDocumento.put(ttMov.documento+"-"+seg,ttDoc);									
									
									txtFiscal[0].append(String.format("%.2f", (valorBaixar)).replaceAll("\\.",","));

                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALJUROS").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALMULTA").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALDESCONTO").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    // txtFiscal[0].append("||||||||||");
                                    // if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal[0].append("||");
                                    txtFiscal[0].append("||||||||");
                                    if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal[0].append("||||");
                                    
									if(ttMov.tipoLancamento.contains("PAGAR")) {
										txtFiscal[0].append(delimitador).append(jDescricaoDupl.optString("CPFCNPJ")).append(delimitador);
									}
									txtFiscal[0].append(segmento).append(delimitador);
                                    //txtFiscal[0].append(jDescricaoDupl.optString("OBSERVACAO"));	// FEITO PARA SPEROTO VANZELLA
                                    //txtFiscal[0].append(delimitador);
                                    txtFiscal[0].append("\r\n");


                                    if (ttMov.valorDocumento > ttMov.valorDesconto) {
										codContabil = codContabil.replaceAll("00","10");

										txtFiscal[0].append(delimitador).append(codContabil).append(delimitador).append(ttMov.dataMovimento).append(delimitador)
													.append(cutString(ttMov.contaDebito.toUpperCase(), 0, "R")).append(delimitador).append(cutString(ttMov.contaCredito.toUpperCase(), 0, "R")).append(delimitador);
										 
										txtFiscal[0].append(String.format("%.2f", (valorBaixar)).replaceAll("\\.",","));

										txtFiscal[0].append(delimitador);
										txtFiscal[0].append("");
										if(ttMov.historico.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historico, "CodigoHistorico:", " "));
										txtFiscal[0].append(delimitador).append(cutString(cutString(ttMov.historico, 0, "Filial:"), 0 ,"Codigo"))
													.append(delimitador).append("").append(delimitador + codEmpresa + delimitador).append("\r\n");
									}

									if (ttMov.valorDesconto > 0 && seg == 0) {

										txtFiscal[0].append(delimitador).append(codContabil).append(delimitador).append(ttMov.dataMovimento)
													.append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal[0].append(ttMov.contaDebito).append(delimitador).append(contaDesconto);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal[0].append(contaDesconto).append(delimitador).append(ttMov.contaCredito);
										}
										txtFiscal[0].append(delimitador).append(String.format("%.2f", ttMov.valorDesconto).replaceAll("\\.",","))
													.append(delimitador).append("");
										if(ttMov.historicoDesconto.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoDesconto, "CodigoHistorico:", " "));
										
										txtFiscal[0].append(delimitador).append(cutString(cutString(ttMov.historicoDesconto, 0, "Filial:"), 0 ,"Codigo"))
													.append(delimitador).append("").append(delimitador + codEmpresa + delimitador).append("\r\n");
									}

									 if (ttMov.valorJuros > 0  && seg == 0) {
										txtFiscal[0].append(delimitador).append(codContabil).append(delimitador).append(ttMov.dataMovimento).append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal[0].append(contaJuros).append(delimitador).append(ttMov.contaDebito);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal[0].append(ttMov.contaCredito).append(delimitador).append(contaJuros);
										}
										txtFiscal[0].append(delimitador).append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",","))
													.append(delimitador).append("");
													
										if(ttMov.historicoJuros.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoJuros, "CodigoHistorico:", " "));
										
										txtFiscal[0].append(delimitador).append(cutString(cutString(ttMov.historicoJuros, 0, "Filial:"), 0 ,"Codigo"))
													.append(delimitador).append("").append(delimitador + codEmpresa + delimitador).append("\r\n");
									}

									 if (ttMov.valorMulta > 0 && seg == 0) {
										txtFiscal[0].append(delimitador).append(codContabil).append(delimitador).append(ttMov.dataMovimento)
													.append(delimitador);
										if(ttMov.tipoLancamento.contains("PAGAR")) {
											txtFiscal[0].append(contaMulta).append(delimitador).append(ttMov.contaDebito);
										}
										if(ttMov.tipoLancamento.contains("RECEBER")) {
											txtFiscal[0].append(ttMov.contaCredito).append(delimitador).append(contaMulta);
										}
										
										txtFiscal[0].append(delimitador).append(String.format("%.2f", ttMov.valorMulta).replaceAll("\\.",","))
													.append(delimitador).append("");
													
										if(ttMov.historicoMulta.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoMulta, "CodigoHistorico:", " "));
										
										txtFiscal[0].append(delimitador).append(cutString(cutString(ttMov.historicoMulta, 0, "Filial:"), 0 ,"Codigo"))
													.append(delimitador).append("").append(delimitador + codEmpresa + delimitador).append("\r\n");
									}

                                    diferencaParcela = 0;

                                    geraFiscal = true;
                                    loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                                    
									if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
									
									eFornecedor = false;
                                    leuDuplicata = true;

                                }
                            }
                            if (leuDuplicata) continue;
                        } else {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo;Fornecedor/Cliente;Duplicata;Data;Valor bruto;Valor liquido;Banco;Obs:")
											 .append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA")).append(";").append(razaoSocialDuplicata).append(";").append(ttMov.documento).append(";")
										 .append(ttMov.dataMovimento).append(";").append(String.format("%.2f", ttMov.valorDocumento)).append(";")
										 .append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",",")).append(";").append(ttMov.nomePortador).append(";")
										 .append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata))
										 .append("\r\n");

                            geraFiscal = true;
                            loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                            
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
                            
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                        }
                    }
                    else {
						if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
							jDescricaoDupl.put("TIPO","FORNECEDOR"); // se nao acha serie vai para duplicatas nao encontradas
							eFornecedor = true;
						}
					}
				}


				if (eFornecedor) {

					dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
					contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");


					if(dupliNaoEncontContabil){
						contaMovimento = contaTemp;
						if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
						if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

						histobj.put("contaMovimento", contaMovimento);
						ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


					}else{
						if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FORNECEDOR")) {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo;Fornecedor/Cliente;Duplicata;Data;Valor bruto;Valor liquido;Banco;Obs:")
											 .append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorFinal = String.format("%.2f", ttMov.valorDocumento);
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							
							
							jDescricaoDupl.put("NOMEORIGEM", ttMov.nomeOrigem).put("DOCUMENTO", ttMov.documento)
										  .put("DATAMOVIMENTO", ttMov.dataMovimento).put("VALORFINAL", valorFinal)
										  .put("VALORLIQUIDO",  valorLiquido);
							
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA")).append(";")
										 .append(jDescricaoDupl.optString("NOMEORIGEM")).append(";")
										 .append(jDescricaoDupl.optString("DOCUMENTO")).append(";")
										 .append(jDescricaoDupl.optString("DATAMOVIMENTO")).append(";")
										 .append(jDescricaoDupl.optString("VALORFINAL").replaceAll("\\.",",")).append(";")
										 .append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",",")).append(";")
										 .append(ttMov.nomePortador).append(";");
										 
							if (jDescricaoDupl.has("FORNECEDORESNAOBATEM")) {
								txtFornecedor.append("Nome do Fornecedor/Cliente nao confere com a duplicata aberta no fiscal ");
							}
							else {
								txtFornecedor.append("Duplicata nao encontrada no Fiscal ");
																
							}							
							txtFornecedor.append("\r\n");


							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							
							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;
							
							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
							
						}
					}
				}
			}
			
			/*	
			if (integraContrato.toUpperCase().equals("TRUE")) {
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {
					String dataVencimentoTTMov = "";
					
 				
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) dataVencimentoTTMov = ttMov.complemento01;
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) dataVencimentoTTMov = ttMov.complemento02; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) dataVencimentoTTMov = ttMov.complemento03; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) dataVencimentoTTMov = ttMov.complemento04; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) dataVencimentoTTMov = ttMov.complemento05; 
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) dataVencimentoTTMov = ttMov.complemento06; 
					}	
					
						
					JSONObject jDados = new JSONObject();
					
					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					else {
						jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					}
					
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("OBSERVACAO", 	 ttMov.dataMovimento);
					jDados.put("PARCELADOC",     99);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
 					
 					try {
						Date dtvenc = DateUtil.stringToDate(dataVencimentoTTMov, "dd/MM/yyyy");	 
				
						jDescricaoDupl = dbIOCont.sql("SELECT CPFCNPJ,CODEMPRESA,RAZAOSOCIAL,CODIGOFORNECEDOR,CHAVE,CHAVEDUPLICATA,DUPLICATA,PARCELA,SERIE,VENCIMENTO,VALORPARCELA,SITUACAO,VALORJUROS,VALORDESCONTO,VALORMULTA,VALORPAGO,VALORTARIFA,OBSERVACAO FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND DUPLICATA = ? AND VALORPARCELA >= ? and VENCIMENTO = ? order by VENCIMENTO   limit 1 ")
						.fields("CPFCNPJ,CODEMPRESA,RAZAOSOCIAL,CODIGOFORNECEDOR,CHAVE,CHAVEDUPLICATA,DUPLICATA,PARCELA,SERIE,VENCIMENTO,VALORPARCELA,SITUACAO,VALORJUROS,VALORDESCONTO,VALORMULTA,VALORPAGO,VALORTARIFA,OBSERVACAO")
						.param(codEmpresa)
						.param(ttMov.documento)
						.param(ttMov.valorDocumento)
						.param(dtvenc)
						.queryUnique();
					} catch (Exception e2) {
						logger.logDebug("ERROR: " + e2.getMessage());
						continue;
					}
					
 					
					if (jDescricaoDupl != null && jDescricaoDupl.has("VALORPARCELA")) { 

 						Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
						dataLote = DateUtil.dateToString(dtL, "yyyy-MM");
	 
						boolean leuDuplicata = false;
						double valorSaldoDuplicata = 0;
						
						// valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
						if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));
						 
 						if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) { 
 
							String codContabil = "5700";								 							
							// |5700|1875|57593981053| | |1|25/02/2021|01/03/2021|5527,28|1649,16||||||

							String delimitador = "|";
							String tipoSerie = delimitador + codContabil + delimitador + ttMov.documento + delimitador + ttMov.complemento01 + delimitador + delimitador + delimitador + ttMov.complemento02  + delimitador;


						 try {
								String dataVencimento = jDescricaoDupl.optString("VENCIMENTO");
								Date dt        = DateUtil.stringToDate(dataVencimento, "yyyy-MM-dd HH:mm:ss");
								dataVencimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
								dataVencimentoTTMov = dataVencimento;
							} catch (Exception e4) {
 							}
								
								
							if(jDescricaoDupl.has("VALORPARCELA")) {
								txtFiscal[0].append(tipoSerie);
								txtFiscal[0].append(dataVencimentoTTMov);
								txtFiscal[0].append(delimitador);
								txtFiscal[0].append(ttMov.dataMovimento);
								txtFiscal[0].append(delimitador);
								txtFiscal[0].append(String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta)).replaceAll("\\.",","));
 								txtFiscal[0].append(delimitador);
							    txtFiscal[0].append(String.format("%.2f", (ttMov.valorJuros)).replaceAll("\\.",","));
								txtFiscal[0].append("||||||");								 
								txtFiscal[0].append("\r\n");

								geraFiscal = true;
								loteFiscal[0]= nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
								eFornecedor = false;
								leuDuplicata = true;

							}
							
 						} else { //Add dia 02/03/2021 - > Enviar dupli n encontradas p/ contabil Dominio
							 
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(razaoSocialDuplicata);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.documento);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.dataMovimento);
							txtFornecedor.append(";");
							txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Valor Contrato " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata));
							txtFornecedor.append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
 							mapaVariavel.put(key,ttMov);
							
						}
					}
					else {
						if(cabecalhoNaoEncontrada){
							txtFornecedor.append("Codigo");
							txtFornecedor.append(";");
							txtFornecedor.append("Fornecedor/Cliente");
							txtFornecedor.append(";");
							txtFornecedor.append("Duplicata");
							txtFornecedor.append(";");
							txtFornecedor.append("Data");
							txtFornecedor.append(";");
							txtFornecedor.append("Valor bruto");
							txtFornecedor.append(";");
							txtFornecedor.append("Valor liquido");
							txtFornecedor.append(";");
							txtFornecedor.append("Banco");
							txtFornecedor.append(";");
							txtFornecedor.append("Obs:");
							txtFornecedor.append("\r\n");
							cabecalhoNaoEncontrada = false;
						}
						String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
						jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
						txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
						txtFornecedor.append(";");
						txtFornecedor.append(razaoSocialDuplicata);
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.documento);
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.dataMovimento);
						txtFornecedor.append(";");
						txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
						txtFornecedor.append(";");
						txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.nomePortador);
						txtFornecedor.append(";");
						txtFornecedor.append("Contrato " + ttMov.documento + " nao encontrado no Dominio ");
						txtFornecedor.append("\r\n");

						geraFiscal = true;
						loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
						if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
 						mapaVariavel.put(key,ttMov);
					}
 				}

			}
			
			*/
			
			boolean ctFiscal = false;
			if(ttMov.tipoLancamento.contains("PAGAR")	&& ttMov.contaDebito.toUpperCase().contains("FISCAL")) ctFiscal = true;
			if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.contaCredito.toUpperCase().contains("FISCAL")) ctFiscal = true;

			dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
			contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");

			if(contaMovimento.toUpperCase().contains("FISCAL") || ctFiscal) {
				contaMovimento = contaTemp;
				if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
				if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

				histobj.put("contaMovimento", contaMovimento);
				ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			}

			if (!contaMovimento.equals("")){
			
				ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
				if (ttP == null) {
					
					ttP  = new ttPlano(); 
					ttP.descricaoPlano = "";
					ttP.contaAnalitica = "";
					
					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO,CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO,CONTAANALITICA")
					.param(codEmpresaPlanoContas)
					.param(cutString(contaMovimento,0, 20))
					.queryUnique();

					if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
						dbIOCont.insert("IO_PLANOCONTA")
						.fields("CODEMPRESA,CONTACONTABIL")
						.param(codEmpresaPlanoContas)
						.param(cutString(contaMovimento,0, 20))
						.execute();
					} else {
						ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
					}					
					ttP.contaContabil     = cutString(contaMovimento,0, 20);
					mapaPlano.put(contaMovimento,ttP);


				}
			}
			 //Tratamento para inverter conta em lencamento simples feito para JBSOFTWARE
			if (roteiroCRMPrincipal.optString("erpContabilidade").contains("JBSOFTWARE") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("TRON") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("MICROSYSTEM")){
				if(ttMov.contaDebito.contains("INVERTE") && !ttMov.contaCredito.contains("INVERTE")) ttMov.contaCredito = ttMov.contaCredito+ "INVERTE";
				if(!ttMov.contaDebito.contains("INVERTE") && ttMov.contaCredito.contains("INVERTE")) ttMov.contaDebito = ttMov.contaDebito+ "INVERTE";
			} 

			chave = ttMov.chave;
			//chave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
			String testeChave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
			if(!testeChave.toUpperCase().contains("ACUMULAANTES") && !testeChave.toUpperCase().contains("ACUMULARANTES")) chave = testeChave;
			
			if(chave.length() > 180) chave = cutString(chave, 0, 179);
			
			chave = chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";
			ttMov.chave = ttMov.chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";

			apagaStatus = true;
			String keyAc = chave;
			
			// logger.logDebug("EMPR " + nomeEmpresa + " | " + tipoProduto + " | " + mantemArquivo + " | " + processaOud);
			
			if (((!tipoProduto.equals("OIC_PACOTE") && mantemArquivo.equals("SIM"))  || processaOud.equals("TRUE")) && !ttMov.lote.toUpperCase().contains("_OUD_")) {
				ttMov.lote = ttMov.lote.replace(codEmpresa +"_",codEmpresa +"_oud_");
			}
			else {
				if (ttMov.nomeArquivo.contains(".omc")) {
					ttMov.lote = ttMov.lote.replace(codEmpresa +"_",codEmpresa +"_oud_");
				}
			}
			
			// logger.logDebug("LOTEE " + ttMov.lote);
 
 			
			
			ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
			if (ttLot       == null) {
				ttLot       = new ttLote();
				ttLot.lote  = ttMov.lote;
				ttLot.tipoPlanilha  = ttMov.tipoPlanilha;
 			}
			mapaLote.put(ttMov.lote,ttLot);		
			

			ttMovimentoPadrao ttMov3       = (ttMovimentoPadrao)mapaOficial.get(keyAc);
			if (ttMov3  == null) {
				ttMov3                = new ttMovimentoPadrao(ttMov);
				ttMov3.valorDesconto   = 0;
				ttMov3.valorJuros      = 0;
				ttMov3.valorDocumento  = 0;
				ttMov3.valorMulta      = 0;
				ttMov3.documento       = "";
			}
			if (ttMov3.documento.equals("")) {
				ttMov3.documento         = ttMov.documento;
			} else { if (!ttMov3.documento.contains(ttMov.documento)) ttMov3.documento = ttMov3.documento + ", " + ttMov.documento; }


			ttMov3.valorDesconto     = ttMov3.valorDesconto   + ttMov.valorDesconto;
			ttMov3.valorDocumento    = ttMov3.valorDocumento  + ttMov.valorDocumento;
			ttMov3.valorMulta        = ttMov3.valorMulta      + ttMov.valorMulta;
			ttMov3.valorJuros        = ttMov3.valorJuros      + ttMov.valorJuros;
			ttMov3.chave = chave;


			// logger.logDebug("ERP =>> "+roteiroCRM.optString("erpContabilidade")+" - ttMov3.contador =>> "+ttMov3.contador);
			String testeChavePortador = getRegrasParaAcumularPortador("", "", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
 			if (!testeChavePortador.equals("")) ttMov3.contador = 3;
			
			if (!ttMov.chave.equals(chave)) ttMov3.contador = 3;

			// for?a lancamento aberto no FB software
			if (roteiroCRMPrincipal.optString("erpContabilidade").contains("JBSOFTWARE") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("TRON") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET") || 
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("DYAD") ||//removido o erp FORTES dessa valida??o - 202301-0023113
			    roteiroCRMPrincipal.optString("erpContabilidade").contains("MICROSYSTEM")) ttMov3.contador = 3;
				
			//logger.logDebug("ERP =>> "+roteiroCRM.optString("erpContabilidade")+" - ttMov3.contador =>> "+ttMov3.contador+" - AGORA E AGORA -> "+roteiroCRMPrincipal.optString("erpContabilidade"));

			mapaVariavel.put(key,ttMov);
			mapaOficial.put(keyAc,ttMov3);			 			
 
			if(ttMov.tipoPlanilha.contains("EXTRATO") || ttMov.tipoPlanilha.contains("CARTAO")){
				if(roteiroCRMPrincipal.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;
			}else if(roteiroCRM.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;
			
			//#2305-005880
			//if (ttMov.tipoPlanilha.contains("OTTCARTAO")) ttMov3.contador = 0;
			if (ttMov.tipoPlanilha.contains("OTTCARTAO") && !roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET")) ttMov3.contador = 0;
			
			// if(ttMov.codEmpresa.contains("68345")) logger.logDebug("VALOR = "+ttMov.valorDocumento+" | DT == "+ttMov.dataMovimento+" | CONT = "+ttMov3.contador+" | CHAVE == "+chave);
 
			
			if  ((ttMov.valorJuros > 0 || ttMov.valorDesconto > 0 || ttMov.valorMulta > 0 || ttMov3.contador == 3) && !ttMov.tipoPlanilha.equals("NAO LER")) {
				chave = chave.replaceAll("CTB","CTBPORT");
				if (!testeChavePortador.equals("")) chave = testeChavePortador;

				key = chave;
				ttMovimentoPadrao ttMov2       = (ttMovimentoPadrao)mapaOficial.get(key);
				if (ttMov2  == null) {
					ttMov2                = new ttMovimentoPadrao(ttMov);
					ttMov2.contador        = 0;
					ttMov2.valorDesconto   = 0;
					ttMov2.valorJuros      = 0;
					ttMov2.valorDocumento  = 0;
					ttMov2.valorMulta      = 0;
					ttMov2.classificacao     = ttMov.classificacao;

				}
				ttMov2.tipoMovimento     = "CTBPORT";
				ttMov2.valorDesconto     = ttMov2.valorDesconto   + ttMov.valorDesconto;
				ttMov2.valorMulta        = ttMov2.valorMulta      + ttMov.valorMulta;
				ttMov2.valorJuros        = ttMov2.valorJuros      + ttMov.valorJuros;
				ttMov2.chave             = chave;
				ttMov2.chaveExtrato      = "";
				ttMov2.documento         = ttMov3.documento;
				ttMov2.valorDocumento    = ttMov2.valorDocumento + ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta;
				ttMov2.contador          = ttMov2.contador + ttMov3.contador;
				if(tipoLancamento.contains("PAGAR") && !ttMov2.tipoPlanilha.contains("OTTCARTAO")) {
					ttMov2.naturezaContabil  = "C";
					ttMov2.contaDebito       = "";
					ttMov2.contaCredito      = ttMov.contaCredito;
				}
				if(tipoLancamento.contains("RECEBER") && !ttMov2.tipoPlanilha.contains("OTTCARTAO")){
					ttMov2.naturezaContabil  = "D";
					ttMov2.contaDebito       = ttMov.contaDebito;
					ttMov2.contaCredito      = "";
				}
				if (ttMov2.valorDocumento == 0) continue; //JWR
				ttMov2.historico = getHistoricoPortador(contaPortador, ttMov2.historico, ttMov2.tipoLancamento, ttMov2.documento, ttMov2.nomeOrigem, histobj);
				
				//Descomentar caso haja problema com a perna de portador do lancamento
				if (!ttMov2.codFilial.equals("") && !ttMov2.historico.contains("Filial:")) ttMov2.historico = ttMov2.historico + " Filial:" + ttMov2.codFilial;
				
				String tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV FORNECEDOR", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("FORNECEDOR"))    ttMov3.historico = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
					if(tratarDiv.contains("PORTADOR"))      ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
  					ttMov3.historicoJuros	 = cutString(ttMov3.historicoJuros,0," Filial:") + " Filial:"+filial;
					ttMov3.historicoMulta 	 = cutString(ttMov3.historicoMulta,0," Filial:") + " Filial:"+filial;
					ttMov3.historicoDesconto = cutString(ttMov3.historicoDesconto,0," Filial:") + " Filial:"+filial;
				}
				
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV DESCONTO", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("DESCONTO"))    ttMov3.historicoDesconto = cutString(ttMov3.historicoDesconto,0," Filial:") + " Filial:"+filial;
				}
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV JUROS", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("JUROS"))    ttMov3.historicoJuros = cutString(ttMov3.historicoJuros,0," Filial:") + " Filial:"+filial;
				}
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV MULTA", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("MULTA"))    ttMov3.historicoMulta = cutString(ttMov3.historicoMulta,0," Filial:") + " Filial:"+filial;
				}
				tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV PORTADOR", histobj);
				if(!tratarDiv.equals("")){
					String filial = "";
					filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
					if(tratarDiv.contains("PORTADOR"))    ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
				}

				mapaOficial.put(key,ttMov2);
				ttMov3.classificacao = ttMov2.classificacao;
				mapaOficial.put(keyAc,ttMov3);
			}
		}
		if(contRegra == -1){
			String codEmp = props.get(empresa + "_COD_EMPRESA");
			String nomeEmp = props.get(empresa + "_NOME_EMPRESA");
			
			String info = tipoPlanilha + ";" + roteiroCRM.optString("codigo");
			compDirName = nomeEmp + "_#" + codEmp;
			String tipoPlanilhaDirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/" + compDirName + "/DePara/Processado/";
			String tipoPlanilhaPath = tipoPlanilhaDirName + "TIPOPLANILHA" + ".txt";
			// inout/contabil/Depaula/vektor_#123/Depara/TIPOPLANILHA.txt
			FileWriter 	arquivoTp = new FileWriter(tipoPlanilhaPath);
			arquivoTp.writeNewFile(info);
			//sssssss
		}


		//-------------------------------------------------------------------------
		// GERA OS ARQUICOS PARA BAIXA DE DUPLICATAS -- FISCAL
		//-------------------------------------------------------------------------
		if (geraFiscal) {

			String auxExtencao = ".txt";
			if(roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) auxExtencao = ".csv";
			String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[0] + auxExtencao;
			FileWriter writer = new FileWriter(filename);
			writer.writeNewFile(txtFiscal[0].toString());
			
			if (nomeArquivo.toUpperCase().contains("_ID") && !loteFiscal[0].contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + tipoLancamento;

			loteFiscal[0] = loteFiscal[0].replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");
			
			filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[0] + ".csv";
			writer = new FileWriter(filename);
			writer.writeNewFile(txtFornecedor.toString());
			
			//JWR 2303-000613 Descomentar para quando utilizar arquivos fiscais separados por filial
			/*if (!loteFiscal[i].equals("") && geraNaoEncontradas) {
				loteFiscal[i] = loteFiscal[i].replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");
				filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[i] + ".csv";
				writer = new FileWriter(filename);
				writer.writeNewFile(txtFornecedor.toString());
				geraNaoEncontradas = false;
			}*/
			
			
		}
		
		// Teste 64 kb
		if (fazConciliacao) {
			String auxExtencao = ".csv";
			String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteConciliacao+auxExtencao;
			FileWriter writer = new FileWriter(filename);
			writer.writeNewFile(txtConciliacao.toString());
		}


		//-------------------------------------------------------------------------
		//--- DESABILITAR AQUI SOMENTE SE O BANCO DE DADOS CONTIVER TABELA IO_RAZAO
		//-------------------------------------------------------------------------


		
		mapaVariavel		= new HashMap();

		if (apagaStatus) {
			jStatus = new JSONObject();
			// logger.logDebug("PUTSTATUS 4745");
			putStatus(dirName, "", jStatus, logger);
		}
		
		// =======================================================================================
		// * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base
		// =======================================================================================
  	   
		
		Iterator itLote = mapaLote.keySet().iterator();
		while (itLote.hasNext()) {

			String key = (String)itLote.next();
			ttLote ttLot = (ttLote)mapaLote.get(key);
			lote = ttLot.lote;

			try {
				if (dbIOCont != null) {
					dbIOCont.closeConnection();
					dbIOCont = null;
				}
				if (dbIOCont == null) {
					dbIOCont = connectIOContabil(props, logger);
				}
				dbIOCont.delete("IO_MOVIMENTO")
				.where("LOTE=?")
				.param(lote)
				.execute();
				
 				if (mantemArquivo.equals("SIM")) {
					 
					dbIOCont.delete("IO_MOVIMENTO")
					.where("LOTE LIKE ? AND LOTE LIKE ? ")
					.param("%" + tipoLancamento + "%")
					.param(nomeEmpresa + "_" + "%")
					
					.execute();
					
				}
				
				if (mantemArquivo.equals("SIM")) {
					 
					dbIOCont.delete("IO_ARQUIVOS")
					.where("LOTE LIKE ? AND LOTE LIKE ? ")
					.param(cutString(lote, 0, "_") + "%")
					.param("%" + tipoLancamento + "%")
					.execute();
					
				}
				
				
			} catch (Exception eDel) {
				logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
			}
		}
		// logger.logDebug("ETAPA 04 TEMPLATE ");
	
	
		contRegra = -1;
		Iterator it = mapaOficial.keySet().iterator();
		while (it.hasNext()) {
			
			String chaveExtrato     = "";

			String key = (String)it.next();
			ttMovimentoPadrao ttMov = new ttMovimentoPadrao();
			try {
				ttMov = (ttMovimentoPadrao)mapaOficial.get(key);
			}
			catch (Exception xx) { continue;}

  
			if (ttMov.tipoPlanilha.equals("NAO LER")) continue;


			if (ttMov.tipoPlanilha.contains("EXTRATO")) {
				if(tipoLancamento.contains("PAGAR") && ttMov.debitoCredito.equals("EXTRATO-CREDITO")) continue;
				if(tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.equals("EXTRATO-DEBITO"))  continue;

			}
			if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
				temIgnorar = true;
				continue;
			}
			if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
				temIgnorar = true;
				continue;
			}
			ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();

			contRegra++;
			int restoLinha = 0;
			restoLinha = (contRegra % 100);
			if (restoLinha == 0) putStatus(dirName, "04--Etapa 4 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
			// quando cliente escolhe para agrupar tudo em um unico lote, mudamos o nome do arquivo.
			
			if (ttMov.valorDocumento == 0) continue;
			
			// logger.logDebug("TPPORTTEMPLATE " + ttMov.tipoPlanilha + " | " + ttMov.lote + " | " + ttMov.dataMovimento + " | " + ttMov.tipoLancamento + " | " + ttMov.debitoCredito);
			// logger.logDebug("PORTAS2 " + ttMov.nomePortador);
			String idLote = cutString(ttMov.lote, "ott_oud", ttMov.lote.indexOf("ott_oud") + 16);//202302-0025707
			
			if (ttMov.lote.contains("ott_oud__id")) idLote = cutString(ttMov.lote, "ott_oud__id", "_");//2308-011361
			if (ttMov.lote.contains("ott_oud_id")) idLote = cutString(ttMov.lote, "ott_oud_id", "_");//2308-011361

			if (roteiroCRMPrincipal.optString("agrupaArquivos").toUpperCase().contains("TRUE")) {
				if (ttMov.lote.contains("_CORA_")) {
					ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_CORA_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
				} 
				
				else {
					if (ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) {

						ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_OTTIMIZZA_PROJETO_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
					}
					else {
						if (ttMov.lote.toUpperCase().contains("_OUD_")) {
	
							ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_ott_oud__id" + idLote + "_" + arquivoAgora  + "_OUD_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
						}
					
						else {
							ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
						
						}
					}
				}
				
				
			}
			
			if (ttMov.lote.toLowerCase().contains("ott_oud_")) ttMov.lote = ttMov.lote.replaceAll("__", "_");
  			
			// logger.logDebug("LOTIZIN " + nomeEmpresa + " | " + ttMov.lote);
			
			ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
			if (ttLot       == null) {
				ttLot       = new ttLote();
				ttLot.lote  = ttMov.lote;
				ttLot.tipoPlanilha  = ttMov.tipoPlanilha;
 			}
			mapaLote.put(ttMov.lote,ttLot);
			

			if(tipoLancamento.contains("PAGAR")){
				ttMov.naturezaContabil = "D";
				if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "C";
			}
			if(tipoLancamento.contains("RECEBER")){
				ttMov.naturezaContabil = "C";
				if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "D";
			}

			JSONObject extratoEmpresa = new JSONObject();

			// CASO A LINHA DO EXTATO JA TENHA SIDO LIDA PELA PLANILHA DE PAGAMENTOS, DEVE SER IGNORADA
			if (ttMov.tipoPlanilha.contains("EXTRATO")) {
				chaveExtrato = ttMov.chaveExtrato;

				extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? ")
				.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
				.param(chaveExtrato + "%")
				.queryUnique();

				if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
					if (extratoEmpresa.has("EXTRATOLIDO")) {

						double extratoLido = extratoEmpresa.optDouble("EXTRATOLIDO");

						if (extratoLido == 1) continue;

						dbIOCont.update("IO_EXTRATO")
						.fields("EXTRATOLIDO")
						.where("CHAVE = ? ")
						.param(1)
						.param(chaveExtrato)
						.execute();

					}
				}

			}


			// -----------------------------------------------------------------------------------------------------------
			// COMPARA COM RAZAO APENAS QUANDO O NOME DO ARQUIVO CONTIVER OTTIMIZZA, ASSIM FICA MAIS RAPIDA A INTEGRACAO
			// QUANDO O CLIENTE FINAL ESTIVER RODANDO.
			// -----------------------------------------------------------------------------------------------------------

			if (!ttMov.tipoMovimento.equals("CTBPORT") && ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) {

				String tipoData = "MOVIMENTO";

				comparaRazao = true;


				Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
				Date dataMovimentoDateMenosUm= new Date();
				Date dataMovimentoDateMenosDois= new Date();
				Date dataMovimentoDateMenosTres= new Date();
				Date dataMovimentoDateMaisUm= new Date();
				Date dataMovimentoDateMaisDois= new Date();
				Date dataMovimentoDateMaisTres= new Date();

				Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois = cal.getTime();
				cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres = cal.getTime();

				if (ttMov.valorDocumento == 0) continue;

				String valorFinal = String.format("%.2f", ttMov.valorDocumento);
				valorFinal = valorFinal.replaceAll("\\.",",");

				JSONArray registro = new JSONArray();

				

				JSONObject histobj = new JSONObject();
				ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01, histobj);
				ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02, histobj);
				ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03, histobj);
				ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04, histobj);
				ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05, histobj);
				ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06, histobj);
				ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07, histobj);
				ttMov.complemento08 = getReplaceTermos("complemento09", ttMov.complemento08, histobj);
				ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09, histobj);
				ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10, histobj);
				ttMov.nomeOrigem = getReplaceTermos("nomeOrigem", ttMov.nomeOrigem, histobj);
				ttMov.documento = getReplaceTermos("documento", ttMov.documento, histobj);
				ttMov.nomePortador = getReplaceTermos("nomePortador", ttMov.nomePortador, histobj);

				histobj.put("nomeOrigem", ttMov.nomeOrigem); histobj.put("documento", ttMov.documento);
				histobj.put("complemento01", ttMov.complemento01); histobj.put("complemento02", ttMov.complemento02);
				histobj.put("complemento03", ttMov.complemento03); histobj.put("complemento04", ttMov.complemento04);
				histobj.put("complemento05", ttMov.complemento05); histobj.put("complemento06", ttMov.complemento06);
				histobj.put("complemento07", ttMov.complemento07); histobj.put("complemento08", ttMov.complemento08);
				histobj.put("complemento09", ttMov.complemento09); histobj.put("complemento10", ttMov.complemento10);
				histobj.put("dataMovimento", ttMov.dataMovimento); histobj.put("mesAnoAnterior", mesAnoAnterior);
				histobj.put("mesAno2Anterior", mesAno2Anterior); histobj.put("mesAnoAtual", mesAnoAtual);
				histobj.put("nomePortador", ttMov.nomePortador); histobj.put("contaMovimento", contaMovimento);
				histobj.put("contaPortador", contaPortador); histobj.put("contaDebito", "");
				histobj.put("contaCredito", ""); histobj.put("contaJuros", ttMov.contaJuros);
				histobj.put("contaDesconto", ttMov.contaDesconto); histobj.put("contaMulta", ttMov.contaMulta);
				histobj.put("centroCusto", ttMov.centroCusto); histobj.put("valorDocumento", ttMov.valorDocumento);
				histobj.put("valorJuros", ttMov.valorJuros); histobj.put("valorDesconto", ttMov.valorDesconto);
				histobj.put("valorMulta", ttMov.valorMulta); histobj.put("codFilial", ttMov.codFilial);
				histobj.put("tipoPlanilha", ttMov.tipoPlanilha); histobj.put("numeroAba", ttMov.abaPlanilha);

				String contaPrincipal = "";
				String contraSecundaria = "";

				if (tipoLancamento.contains("PAGAR")) {
					contaPrincipal = ttMov.contaDebito;
					contraSecundaria = ttMov.contaCredito;

				}
				if (tipoLancamento.contains("RECEBER")) {
					contaPrincipal = ttMov.contaCredito;
					contraSecundaria = ttMov.contaDebito;
				}

				regraContaMovimento = getRegraContaMovimento(contaPrincipal, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
				regraHistorico = getRegraHistoricoRegra(contaPrincipal, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

				 
				ResumoTxt.append("\r\n").append("NAO ENCONTRADO;").append(ttMov.dataMovimento).append(";").append(tipoData).append(";")
						 .append(valorFinal).append(";").append(ttMov.documento).append(";").append(ttMov.nomeOrigem).append(";")
						 .append(ttMov.nomePortador).append(";").append(ttMov.complemento01).append(";").append(ttMov.complemento02).append(";")
						 .append(ttMov.complemento03).append(";").append(ttMov.complemento04).append(";").append(ttMov.complemento05).append(";")
						 .append(ttMov.complemento06).append(";;").append(ttMov.contaDebito).append(";").append(ttMov.contaCredito).append(";")
						 .append(regraContaMovimento).append(";").append(ttMov.historico).append(";").append(regraHistorico).append(";;")
						 .append(ttMov.nomeArquivo).append(";");
				 
			}			
 
			if(tipoLancamento.contains("PAGAR")){

				if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
				if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "C";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "D";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

				if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "C";
				if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
			}
			if(tipoLancamento.contains("RECEBER")){
				if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
				if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "D";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "C";
				if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

				if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "D";
				if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
			}

			if (roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO")) {
				if(tipoLancamento.contains("PAGAR")){

					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

					if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
					if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
				}
				if(tipoLancamento.contains("RECEBER")){
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
					if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
					if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

					if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
					if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
				}
			}

			String classificacaoFinal = classificacao + ttMov.classificacao + "01";
			 

			if ((classificacao.startsWith("X") || roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) && ttMov.tipoMovimento.equals("CTBPORT")) { continue;}
			
			if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
				roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
			}else{
				roteiroCRM = getRoteiro();
			}
			// if(ttMov.codEmpresa.contains("68345")) logger.logDebug("QUATRO " + ttMov.valorDocumento + " | " + ttMov.dataMovimento + " | " + ttMov.tipoPlanilha + " | " + ttMov.tipoMovimento + " | " + roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase());
			// logger.logDebug("AQQQQ " + roteiroCRM.optString("erpContabilidade") + " | " + roteiroCRMPrincipal.optString("erpContabilidade") + " | " + ttMov.complemento05 + " | " + roteiroCRM.optString("Forcar_Partida_Dobrada").toUpperCase() + " | " + roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase() + " | " + ttMov.contaJuros + " | " + ttMov.contaDebito + " | " + ttMov.contaCredito + " | " + classificacao);
			
 
			if (classificacao.startsWith("X")) {
				JSONObject js = new JSONObject();
				js.put("LOTE", ttMov.lote);
				js.put("CNPJEMPRESA", cnpjEmpresa);
				js.put("DOCUMENTO", ttMov.documento);
				js.put("CODEMPRESA", ttMov.codEmpresa);
				js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
				js.put("DATAMOVIMENTO", ttMov.dataMovimento);
				js.put("TIPOMOVIMENTO", ttMov.tipoMovimento);
				js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
				js.put("CONTADEBITO", ttMov.contaDebito);
				js.put("CONTACREDITO", ttMov.contaCredito);
				js.put("HISTORICO", ttMov.historico);
				js.put("VALORDOCUMENTO", ttMov.valorDocumento);
				js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
				js.put("VALORDESCONTO", ttMov.valorDesconto);
				js.put("VALORJUROS", ttMov.valorJuros);
				js.put("VALORMULTA", ttMov.valorMulta);
				js.put("NOMEPORTADOR", ttMov.nomePortador);
				js.put("CENTROCUSTO", ttMov.centroCusto);
				js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
				js.put("NOMEORIGEM", ttMov.nomeOrigem);
				js.put("CPFCNPJ", ttMov.cpfCnpj);
				js.put("SERIE", ttMov.serie);
				js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
				js.put("CHAVE", ttMov.chave  + "-CTB");
				js.put("CLASSIFICACAO", classificacaoFinal);

 
				if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
					ttMov.lote.toUpperCase().contains("_OUD") ||
				    (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					// 2307-010554
					if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
						js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
						js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
						js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
						js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
						js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
					}
				}
					
  				 

				js.put("COMPLEMENTO01", ttMov.complemento01);
				js.put("COMPLEMENTO02", ttMov.complemento02);
				js.put("COMPLEMENTO03", ttMov.complemento03);
				js.put("COMPLEMENTO04", ttMov.complemento04);
				js.put("COMPLEMENTO05", ttMov.complemento05);
				js.put("COMPLEMENTO06", ttMov.complemento06);
				js.put("COMPLEMENTO07", ttMov.complemento07);
				js.put("COMPLEMENTO08", ttMov.complemento08);
				js.put("COMPLEMENTO09", ttMov.complemento09);
				js.put("COMPLEMENTO10", ttMov.complemento10);
				js.put("NOMEARQUIVO", ttMov.nomeArquivo);
				
				if(tipoLancamento.contains("PAGAR")){
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) {
						if (roteiroCRMPrincipal.optString("erpContabilidade").equals("LEDWARE") 
							|| roteiroCRMPrincipal.optString("erpContabilidade").equals("ALTERDATA")
							|| roteiroCRMPrincipal.optString("erpContabilidade").equals("CONTMATIC")) {
							if (ttMov.complemento05.equals("JUROS") && !ttMov.contaJuros.equals("")) {
								js.put("CONTADEBITO", ttMov.contaJuros);
								//#2303-000922
								//js.put("CONTACREDITO", ttMov.contaDebito);
								js.put("CONTACREDITO", ttMov.contaCredito);
							}
							if (ttMov.complemento05.equals("MULTA") && !ttMov.contaMulta.equals("")) {
								js.put("CONTADEBITO", ttMov.contaMulta);
								//#2303-000922
								//js.put("CONTACREDITO", ttMov.contaDebito);
								js.put("CONTACREDITO", ttMov.contaCredito);
							}
							if (ttMov.complemento05.equals("DESCONTO") && !ttMov.contaDesconto.equals("")) {
								js.put("CONTADEBITO", ttMov.contaDebito);
								js.put("CONTACREDITO", ttMov.contaDesconto);
							}
						}
					
					}
				}
				if(tipoLancamento.contains("RECEBER")){
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) {
						if (roteiroCRMPrincipal.optString("erpContabilidade").equals("LEDWARE") 
							|| roteiroCRMPrincipal.optString("erpContabilidade").equals("ALTERDATA")
							|| roteiroCRMPrincipal.optString("erpContabilidade").equals("CONTMATIC")) {
							if (ttMov.complemento05.equals("JUROS") && !ttMov.contaJuros.equals("")) {
								js.put("CONTADEBITO", ttMov.contaDebito);
								js.put("CONTACREDITO", ttMov.contaJuros);
							}
							if (ttMov.complemento05.equals("MULTA") && !ttMov.contaMulta.equals("")) {
								js.put("CONTADEBITO", ttMov.contaDebito);
								js.put("CONTACREDITO", ttMov.contaMulta);
							}
							if (ttMov.complemento05.equals("DESCONTO") && !ttMov.contaDesconto.equals("")) {
								js.put("CONTADEBITO", ttMov.contaDesconto);
								//#2303-000922
								//js.put("CONTACREDITO", ttMov.contaCredito);
								js.put("CONTACREDITO", ttMov.contaDebito);
							}
						}
					}
				}
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");
				
				if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);
 				

				//records.put(js);
				if (!ttMov.centroCusto.equals("")) {
					
					JSONObject rec3 = new JSONObject(js.toString());
					rec3.put("CONTADEBITO", ttMov.contaDebito);
					rec3.put("CONTACREDITO", ttMov.contaCredito);
					rec3.put("TIPOMOVIMENTO", "CTBCC");
					rec3.put("CHAVE", ttMov.chave + "-CTBCC");
					rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);

					//records.put(rec3);
				}
				continue;
			}

			String classJur = "";
			String classDes = "";
			String classMul = "";

			if(tipoLancamento.contains("PAGAR")){
				if(roteiroCRMPrincipal.optString("erpContabilidade").equals("DYAD")){
					if(classificacao.startsWith("C") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "03";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("D")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}
				}else{
					if(classificacao.startsWith("C") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("D")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}
				}
			}
			
			
			if(tipoLancamento.contains("RECEBER")){
				if(roteiroCRMPrincipal.optString("erpContabilidade").equals("DYAD")){
					if(classificacao.startsWith("D") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "03";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("C")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}
				}else{
					if(classificacao.startsWith("D") || classificacao.startsWith("V")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
						classDes = classificacao + ttMov.classificacao + "02";
						classJur = classificacao + ttMov.classificacao + "04";
						classMul = classificacao + ttMov.classificacao + "05";
					}
					if(classificacao.startsWith("C")){
						if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
						if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
						classDes = classificacao + ttMov.classificacao + "05";
						classJur = classificacao + ttMov.classificacao + "02";
						classMul = classificacao + ttMov.classificacao + "03";
					}

				}
			}
			  


			if (ttMov.tipoMovimento.equals("CTBPORT")) {
				JSONObject js = new JSONObject();
				js.put("LOTE", ttMov.lote);
				js.put("CNPJEMPRESA", cnpjEmpresa);
				js.put("DOCUMENTO", ttMov.documento);
				js.put("CODEMPRESA", ttMov.codEmpresa);
				js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
				js.put("DATAMOVIMENTO", ttMov.dataMovimento);
				js.put("TIPOMOVIMENTO", "CTBPORT");
				js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
				js.put("HISTORICO", ttMov.historico);
				js.put("VALORDOCUMENTO", ttMov.valorDocumento);
				js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
				js.put("VALORDESCONTO", ttMov.valorDesconto);
				js.put("VALORJUROS", ttMov.valorJuros);
				js.put("VALORMULTA", ttMov.valorMulta);
				js.put("NOMEPORTADOR", ttMov.nomePortador);
				js.put("CENTROCUSTO", ttMov.centroCusto);
				js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
				js.put("NOMEORIGEM", ttMov.nomeOrigem);
				js.put("CPFCNPJ", ttMov.cpfCnpj);
				js.put("SERIE", ttMov.serie);
				js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
				js.put("CHAVE", ttMov.chave + "-CTBPORT");
				js.put("CLASSIFICACAO", classificacaoFinal);

				if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
					ttMov.lote.toUpperCase().contains("_OUD") ||
				    (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					// 2307-010554
					if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
						js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
						js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
						js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
						js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
						js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
					}
				}

				js.put("COMPLEMENTO01", ttMov.complemento01);
				js.put("COMPLEMENTO02", ttMov.complemento02);
				js.put("COMPLEMENTO03", ttMov.complemento03);
				js.put("COMPLEMENTO04", ttMov.complemento04);
				js.put("COMPLEMENTO05", ttMov.complemento05);
				js.put("COMPLEMENTO06", ttMov.complemento06);
				js.put("COMPLEMENTO07", ttMov.complemento07);
				js.put("COMPLEMENTO08", ttMov.complemento08);
				js.put("COMPLEMENTO09", ttMov.complemento09);
				js.put("COMPLEMENTO10", ttMov.complemento10);
				js.put("NOMEARQUIVO", ttMov.nomeArquivo);

				if(tipoLancamento.contains("PAGAR")){
					js.put("CONTADEBITO", "");
					js.put("CONTACREDITO", ttMov.contaCredito);
				}
				if(tipoLancamento.contains("RECEBER")){
					js.put("CONTADEBITO", ttMov.contaDebito);
					js.put("CONTACREDITO", "");
				}
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBPORT");				
				if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");				
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBPORT", js);
			 
				//records.put(js);
			}
			if (ttMov.tipoMovimento.equals("CTB")) {
				JSONObject js = new JSONObject();
				js.put("LOTE", ttMov.lote);
				js.put("CNPJEMPRESA", cnpjEmpresa);
				js.put("DOCUMENTO", ttMov.documento);
				js.put("CODEMPRESA", ttMov.codEmpresa);
				js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
				js.put("DATAMOVIMENTO", ttMov.dataMovimento);
				js.put("TIPOMOVIMENTO", "CTB");
				js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
				js.put("HISTORICO", ttMov.historico);
				js.put("VALORDOCUMENTO", ttMov.valorDocumento);
				js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
				js.put("VALORDESCONTO", ttMov.valorDesconto);
				js.put("VALORJUROS", ttMov.valorJuros);
				js.put("VALORMULTA", ttMov.valorMulta);
				js.put("NOMEPORTADOR", ttMov.nomePortador);
				js.put("CENTROCUSTO", ttMov.centroCusto);
				js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
				js.put("NOMEORIGEM", ttMov.nomeOrigem);
				js.put("CPFCNPJ", ttMov.cpfCnpj);
				js.put("SERIE", ttMov.serie);
				js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
				js.put("CHAVE", ttMov.chave + "-CTB");
				js.put("CLASSIFICACAO", classificacaoFinal);

				if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
					ttMov.lote.toUpperCase().contains("_OUD") ||
				    (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
					js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
					js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
					js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
					js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
					// 2307-010554
					if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
						js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
						js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
						js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
						js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
						js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
					}
				}

				js.put("COMPLEMENTO01", ttMov.complemento01);
				js.put("COMPLEMENTO02", ttMov.complemento02);
				js.put("COMPLEMENTO03", ttMov.complemento03);
				js.put("COMPLEMENTO04", ttMov.complemento04);
				js.put("COMPLEMENTO05", ttMov.complemento05);
				js.put("COMPLEMENTO06", ttMov.complemento06);
				js.put("COMPLEMENTO07", ttMov.complemento07);
				js.put("COMPLEMENTO08", ttMov.complemento08);
				js.put("COMPLEMENTO09", ttMov.complemento09);
				js.put("COMPLEMENTO10", ttMov.complemento10);
				js.put("NOMEARQUIVO", ttMov.nomeArquivo);

				if(tipoLancamento.contains("PAGAR")){
					js.put("CONTADEBITO", ttMov.contaDebito);
					js.put("CONTACREDITO", "");
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTACREDITO", ttMov.contaCredito);
				}
				if(tipoLancamento.contains("RECEBER")){
					js.put("CONTADEBITO", "");
					js.put("CONTACREDITO", ttMov.contaCredito);
					if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTADEBITO", ttMov.contaDebito);
				}
				
				recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");				
				if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
				if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");				
				criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);
				
				//records.put(js);
				if (!ttMov.centroCusto.equals("")) {
					JSONObject rec3 = new JSONObject(js.toString());
					rec3.put("CONTADEBITO", ttMov.contaDebito);
					rec3.put("CONTACREDITO", ttMov.contaCredito);
					rec3.put("TIPOMOVIMENTO", "CTBCC");
					rec3.put("CHAVE", ttMov.chave + "-CTBCC");
					rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);
					//records.put(rec3);
				}

				 
				if (ttMov.valorJuros > 0)  {
					classificacaoFinal = classJur;
					JSONObject jsJUR = new JSONObject(js.toString());
					jsJUR.put("LOTE", ttMov.lote);
					jsJUR.put("CNPJEMPRESA", cnpjEmpresa);
					jsJUR.put("DOCUMENTO", ttMov.documento);
					jsJUR.put("CODEMPRESA", ttMov.codEmpresa);
					jsJUR.put("NOMEEMPRESA", ttMov.nomeEmpresa);
					jsJUR.put("DATAMOVIMENTO", ttMov.dataMovimento);
					jsJUR.put("TIPOMOVIMENTO", "CTBJUR");
					jsJUR.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
					jsJUR.put("HISTORICO", ttMov.historicoJuros);
					jsJUR.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jsJUR.put("VALORLIQUIDACAO", ttMov.valorDocumento);
					jsJUR.put("VALORDESCONTO", ttMov.valorDesconto);
					jsJUR.put("VALORJUROS", ttMov.valorJuros);
					jsJUR.put("VALORMULTA", ttMov.valorMulta);
					jsJUR.put("NOMEPORTADOR", ttMov.nomePortador);
					jsJUR.put("CENTROCUSTO", ttMov.centroCusto);
					jsJUR.put("NATUREZACONTABIL", "D");
					jsJUR.put("NOMEORIGEM", ttMov.nomeOrigem);
					jsJUR.put("CPFCNPJ", ttMov.cpfCnpj);
					jsJUR.put("SERIE", ttMov.serie);
					jsJUR.put("STATUSMOVIMENTO", ttMov.statusMovimento);
					jsJUR.put("CHAVE", ttMov.chave + "-CTBJUR");
					jsJUR.put("CLASSIFICACAO", classificacaoFinal);

					jsJUR.put("COMPLEMENTO01", ttMov.complemento01);
					jsJUR.put("COMPLEMENTO02", ttMov.complemento02);
					jsJUR.put("COMPLEMENTO03", ttMov.complemento03);
					jsJUR.put("COMPLEMENTO04", ttMov.complemento04);
					jsJUR.put("COMPLEMENTO05", ttMov.complemento05);
					jsJUR.put("COMPLEMENTO06", ttMov.complemento06);
					jsJUR.put("COMPLEMENTO07", ttMov.complemento07);
					jsJUR.put("COMPLEMENTO08", ttMov.complemento08);
					jsJUR.put("COMPLEMENTO09", ttMov.complemento09);
					jsJUR.put("COMPLEMENTO10", ttMov.complemento10);
					jsJUR.put("NOMEARQUIVO", ttMov.nomeArquivo);

					if(tipoLancamento.contains("PAGAR")){
						jsJUR.put("CONTADEBITO",  ttMov.contaJuros);
						jsJUR.put("CONTACREDITO", "");
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTACREDITO", ttMov.contaCredito);

					}
					if(tipoLancamento.contains("RECEBER")){
						jsJUR.put("CONTADEBITO",  "");
						jsJUR.put("CONTACREDITO", ttMov.contaJuros);
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTADEBITO", ttMov.contaDebito);

					}
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJUR");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJUR", jsJUR);
				
				
					//records.put(jsJUR);
					if (!ttMov.centroCusto.equals("")) {
						JSONObject rec3 = new JSONObject(jsJUR.toString());
						 rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBJURCC");
						rec3.put("CHAVE", ttMov.chave + "-CTBJURCC");
						rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBJURCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJURCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJURCC", rec3);
					   // records.put(rec3);
					}
				}
				if (ttMov.valorDesconto > 0)  {
					classificacaoFinal = classDes;
					JSONObject jsDES = new JSONObject(js.toString());
					jsDES.put("LOTE", ttMov.lote);
					jsDES.put("CNPJEMPRESA", cnpjEmpresa);
					jsDES.put("DOCUMENTO", ttMov.documento);
					jsDES.put("CODEMPRESA", ttMov.codEmpresa);
					jsDES.put("NOMEEMPRESA", ttMov.nomeEmpresa);
					jsDES.put("DATAMOVIMENTO", ttMov.dataMovimento);
					jsDES.put("TIPOMOVIMENTO", "CTBDES");
					jsDES.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
					jsDES.put("HISTORICO", ttMov.historicoDesconto);
					jsDES.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jsDES.put("VALORLIQUIDACAO", ttMov.valorDocumento);
					jsDES.put("VALORDESCONTO", ttMov.valorDesconto);
					jsDES.put("VALORJUROS", ttMov.valorJuros);
					jsDES.put("VALORMULTA", ttMov.valorMulta);
					jsDES.put("NOMEPORTADOR", ttMov.nomePortador);
					jsDES.put("CENTROCUSTO", ttMov.centroCusto);
					jsDES.put("NATUREZACONTABIL", "C");
					jsDES.put("NOMEORIGEM", ttMov.nomeOrigem);
					jsDES.put("CPFCNPJ", ttMov.cpfCnpj);
					jsDES.put("SERIE", ttMov.serie);
					jsDES.put("STATUSMOVIMENTO", ttMov.statusMovimento);
					jsDES.put("CHAVE", ttMov.chave + "-CTBDES");
					jsDES.put("CLASSIFICACAO", classificacaoFinal);

					jsDES.put("COMPLEMENTO01", ttMov.complemento01);
					jsDES.put("COMPLEMENTO02", ttMov.complemento02);
					jsDES.put("COMPLEMENTO03", ttMov.complemento03);
					jsDES.put("COMPLEMENTO04", ttMov.complemento04);
					jsDES.put("COMPLEMENTO05", ttMov.complemento05);
					jsDES.put("COMPLEMENTO06", ttMov.complemento06);
					jsDES.put("COMPLEMENTO07", ttMov.complemento07);
					jsDES.put("COMPLEMENTO08", ttMov.complemento08);
					jsDES.put("COMPLEMENTO09", ttMov.complemento09);
					jsDES.put("COMPLEMENTO10", ttMov.complemento10);
					jsDES.put("NOMEARQUIVO", ttMov.nomeArquivo);

					if(tipoLancamento.contains("PAGAR")){
						jsDES.put("CONTADEBITO", "");
						jsDES.put("CONTACREDITO", ttMov.contaDesconto);
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTADEBITO", ttMov.contaCredito);

					}
					if(tipoLancamento.contains("RECEBER")){
						jsDES.put("CONTADEBITO",  ttMov.contaDesconto);
						jsDES.put("CONTACREDITO", "");
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTACREDITO", ttMov.contaDebito);

					}
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDES");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDES", jsDES);
				 
					//records.put(jsDES);
					if (!ttMov.centroCusto.equals("")) {
						JSONObject rec3 = new JSONObject(jsDES.toString());
						rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBDESCC");
						rec3.put("CHAVE", ttMov.chave + "-CTBDESCC");
						rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBDESCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDESCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDESCC", rec3);
					   // records.put(rec3);
					}
				}
				if (ttMov.valorMulta > 0)  {
					classificacaoFinal = classMul;
					JSONObject jsMUL = new JSONObject(js.toString());
					jsMUL.put("LOTE", ttMov.lote);
					jsMUL.put("CNPJEMPRESA", cnpjEmpresa);
					jsMUL.put("DOCUMENTO", ttMov.documento);
					jsMUL.put("CODEMPRESA", ttMov.codEmpresa);
					jsMUL.put("NOMEEMPRESA", ttMov.nomeEmpresa);
					jsMUL.put("DATAMOVIMENTO", ttMov.dataMovimento);
					jsMUL.put("TIPOMOVIMENTO", "CTBMUL");
					jsMUL.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
					jsMUL.put("HISTORICO", ttMov.historicoMulta);
					jsMUL.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jsMUL.put("VALORLIQUIDACAO", ttMov.valorDocumento);
					jsMUL.put("VALORDESCONTO", ttMov.valorDesconto);
					jsMUL.put("VALORJUROS", ttMov.valorJuros);
					jsMUL.put("VALORMULTA", ttMov.valorMulta);
					jsMUL.put("NOMEPORTADOR", ttMov.nomePortador);
					jsMUL.put("CENTROCUSTO", ttMov.centroCusto);
					jsMUL.put("NATUREZACONTABIL", "D");
					jsMUL.put("NOMEORIGEM", ttMov.nomeOrigem);
					jsMUL.put("CPFCNPJ", ttMov.cpfCnpj);
					jsMUL.put("SERIE", ttMov.serie);
					jsMUL.put("STATUSMOVIMENTO", ttMov.statusMovimento);
					jsMUL.put("CHAVE", ttMov.chave + "-CTBMUL");
					jsMUL.put("CLASSIFICACAO", classificacaoFinal);

					jsMUL.put("COMPLEMENTO01", ttMov.complemento01);
					jsMUL.put("COMPLEMENTO02", ttMov.complemento02);
					jsMUL.put("COMPLEMENTO03", ttMov.complemento03);
					jsMUL.put("COMPLEMENTO04", ttMov.complemento04);
					jsMUL.put("COMPLEMENTO05", ttMov.complemento05);
					jsMUL.put("COMPLEMENTO06", ttMov.complemento06);
					jsMUL.put("COMPLEMENTO07", ttMov.complemento07);
					jsMUL.put("COMPLEMENTO08", ttMov.complemento08);
					jsMUL.put("COMPLEMENTO09", ttMov.complemento09);
					jsMUL.put("COMPLEMENTO10", ttMov.complemento10);
					jsMUL.put("NOMEARQUIVO", ttMov.nomeArquivo);

					if(tipoLancamento.contains("PAGAR")){
						jsMUL.put("CONTADEBITO",  ttMov.contaMulta);
						jsMUL.put("CONTACREDITO", "");
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTACREDITO", ttMov.contaCredito);

					}
					if(tipoLancamento.contains("RECEBER")){
						jsMUL.put("CONTADEBITO",  "");
						jsMUL.put("CONTACREDITO", ttMov.contaMulta);
						if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTADEBITO", ttMov.contaDebito);

					}
					
					
					recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMUL");				
					criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMUL", jsMUL);				 
					
					//records.put(jsMUL);
					if (!ttMov.centroCusto.equals("")) {
						JSONObject rec3 = new JSONObject(jsMUL.toString());
						rec3.put("CONTADEBITO", ttMov.contaDebito);
						rec3.put("CONTACREDITO", ttMov.contaCredito);
						rec3.put("TIPOMOVIMENTO", "CTBMULCC");
						rec3.put("CHAVE", ttMov.chave + "-CTBMULCC");
						rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBMULCC");
						recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMULCC");
						criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMULCC", rec3);
					   //records.put(rec3);
					}
				}
			}
		}
		// JWR adicionamos essa parte para mandar uma mensagem personalizada para o cliente, no caso de apenas nao conseguir ler os movimentos e nao um erro de layout
		// vamos descomentar depois de adicionar todas as validacoes sobre fiscal e afins
		// logger.logDebug("contRegra -> " + contRegra + " | temFiltro -> " + temFiltro);
		
		/*if (roteiroCRMPrincipal.optString("contabilidade").toUpperCase().contains("MICALI")) */
 		
		/*if (contRegra > 0 && nomeArquivo.toUpperCase().contains("_ID") && nomeArquivo.toUpperCase().contains(".PDF")) {
			// logger.logDebug("ENTROU 34");
			putStatus(dirName, "03--Etapa 3 de 4 LEUCONVERSORANTIGO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
		}*/
		
		//#2304-002843. Melhorias no feedback
		if (contRegra < 0 && nomeArquivo.toUpperCase().contains("_ID") && !nomeArquivo.toUpperCase().startsWith("OK_DEPARACONTA") && ((roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && !temFiscal && !mantemArquivo.equals("SIM")) || !roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE"))) {
			if (temFiltro) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUFILTRO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUFILTRO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			} else if (temIgnorar) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUIGNORAR- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUIGNORAR- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
			 	}
			} else if (temLinhas) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEULINHAS- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEULINHAS- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			} else if (temOFX || retornaPadroes.equals("break")) {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEU- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEU- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			} else {
				if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUMOVIMENTO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
				if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
					putStatus(dirName, "03--Etapa 3 de 4 NAOLEUMOVIMENTO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
				}
			}
			
		}
		
		if (apagaExtrato) {
			try {
			
				if (dbIOCont != null) {
					dbIOCont.closeConnection();
					dbIOCont = null;
				}
				if (dbIOCont == null) {
					dbIOCont = connectIOContabil(props, logger);
				}
				dbIOCont.delete("IO_EXTRATO")
				.where("CODEMPRESA=?")
				.param(codEmpresa)
				.execute();
			} catch (Exception e) {
				logger.logDebug("PROBLEMA APAGAR EXTRATO " + e.getMessage());
			}
		}
		
		// Apaga as Contas T quando sao informadas pelos contadore no Conf. REfras 
		if (apagaContaT) {
			try {
			
				if (dbIOCont != null) {
					dbIOCont.closeConnection();
					dbIOCont = null;
				}
				if (dbIOCont == null) {
					dbIOCont = connectIOContabil(props, logger);
				}
				
				if (tipoLancamento.contains("PAGAR")) {
					dbIOCont.delete("IO_PESSOA")
					.where("CODEMPRESA = ? 	AND CONTACTBFOR LIKE '%T%'")
					.param(codEmpresa)
					.execute();
					}
				else {
					dbIOCont.delete("IO_PESSOA")
					.where("CODEMPRESA = ? 	AND CONTACTBCLI LIKE '%T%'")
					.param(codEmpresa)
					.execute();
					}
			} catch (Exception e) {
				logger.logDebug("PROBLEMA APAGAR IO_PESSOA  " + e.getMessage());
			}
		}
		// resumo comparativo com razao
		String idLoteResumo = "";
		if (comparaRazao) {
			if(loteEtapaTres.toUpperCase().contains("_ID") && fornecedorUnico.contains("EXIBE_RESUMO")){
				idLoteResumo = "_ID"+cutString(loteEtapaTres.toUpperCase(), "_ID", "_")+"_";
			}
			String filenameRazao = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_APOS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +idLoteResumo+".csv";
			FileWriter writerRazao = new FileWriter(filenameRazao);
			// writerRazao.writeNewFile(ResumoTxt.toString());
			writerRazao.writeNewFile(ResumoTxt.toString());
		}
		
		if(logs){
			String filenameLogs = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_LOGS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +idLoteResumo+".csv";
			FileWriter writerLogs = new FileWriter(filenameLogs);
			// writerRazao.writeNewFile(ResumoTxt.toString());
			writerLogs.writeNewFile(logsTxt.toString());
		}

		//-------------------------------------------------------------------------------------
		// GERA ARQUIVO COM CONTAS NAO ENCONTRADAS
		//-------------------------------------------------------------------------------------
		String filename = backupDirName + "/ARQUIVO_APOIO_" + tipoLancamento + ".csv";
		// Cria o arquivo de DE-PARA FORNECEDOR
		FileWriter writer = new FileWriter(filename);
		writer.writeNewFile(txtDePara.toString());

		Iterator ite = mapaLote.keySet().iterator();
		while (ite.hasNext()) {
			String key = (String)ite.next();
			ttLote ttLot = (ttLote)mapaLote.get(key);
			// =======================================================================================
			// * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base *
			// =======================================================================================
			lote = ttLot.lote;     

  			
			ultimoJS = new JSONObject();
			ultimoJS.put("LOTE", lote);
			ultimoJS.put("DOCUMENTO", "");
			ultimoJS.put("CODEMPRESA", codEmpresa);
			ultimoJS.put("NOMEEMPRESA", nomeEmpresa);
			ultimoJS.put("DATAMOVIMENTO", "");
			ultimoJS.put("TIPOMOVIMENTO", "");
			ultimoJS.put("TIPOLANCAMENTO", "");
			ultimoJS.put("CONTADEBITO", "LOTE_ENCERRADO");
			ultimoJS.put("CONTACREDITO", "LOTE_ENCERRADO");
			ultimoJS.put("HISTORICO", ttLot.tipoPlanilha);
			ultimoJS.put("VALORLIQUIDACAO", 0);
			ultimoJS.put("VALORDOCUMENTO", 0);
			ultimoJS.put("VALORDESCONTO", 0);
			ultimoJS.put("VALORJUROS", 0);
			ultimoJS.put("VALORMULTA", 0);
			ultimoJS.put("NOMEPORTADOR", "");
			ultimoJS.put("CENTROCUSTO", "");
			ultimoJS.put("NATUREZACONTABIL", "");
			ultimoJS.put("NOMEORIGEM", "");
			ultimoJS.put("CPFCNPJ", "");
			ultimoJS.put("SERIE", "");
			ultimoJS.put("STATUSMOVIMENTO", 0);
			ultimoJS.put("CHAVE","LOTE_ENCERRADO " + lote );
			ultimoJS.put("CLASSIFICACAO", "LOTE_ENCERRADO");
			ultimoJS.put("STATUSMOVIMENTO", 1);
			records.put(ultimoJS);
			// Resumo Planilha
			try {
				String dirName1 = dirName.substring(0, dirName.lastIndexOf("/"))+"/DePara/";
				File file = new File(dirName1);
				try {
					String diretorio = dirName1;
					File file2 = new File(diretorio);
					File[] files = file2.listFiles();
					if (FileUtil.dirHasFiles(diretorio)) {
						for (File fl: files) {
							if (fl.isFile()){
								if(fl.getName().contains(lote) && fl.getName().toLowerCase().endsWith(".csv") && !fl.getName().startsWith("OK_") ){
									// ELIMINA ARQUIVO IMPORTADO
									file = new File(dirName1);
									if (file.exists()){
										FileUtil.deleteFile(dirName1+fl.getName());
									}
								}
							}
						}
					}
				} catch (Exception ee) {
					logger.logError(ee);
				}
			}catch (Exception e) {
				logger.logError(e);
			}
		}
	} catch (Exception ee) {
		logger.logError("EndpointA: ", ee);
	} finally {
	
		try {
			if (dbIOCont != null) {
				dbIOCont.closeConnection();
			}
			if (dbIODepara != null) {
				dbIODepara.closeConnection();
			}
		} catch (Exception ee) {}
	}
	return records;
}

class ttLote {
	public String lote;
	public String tipoPlanilha;
	public ttLote(){}
	public ttLote(ttLote tt){
		lote=tt.lote;
		tipoPlanilha=tt.tipoPlanilha;		
	}
}

class ttArquivo {
	public String arquivo;
	public String abas;
	public ttArquivo(){}
	public ttArquivo(ttArquivo tt){
		arquivo=tt.arquivo;
		abas=tt.abas;
	}
}

class ttDocumento {
    public String documento;
	public double valorDocumento;
     public ttDocumento(){}
    public ttDocumento(ttDocumento ttD){
        documento = ttD.documento;
 		valorDocumento  = ttD.valorDocumento;
    }
}
class ttJuros {
	public String documento;
	public double valorJur;
	public int valorLido;
	public ttJuros(){}
	public ttJuros(ttJuros ttJ){
		documento = ttJ.documento;
		valorLido = ttJ.valorLido;
		valorJur  = ttJ.valorJur;
	}
}

class ttDesconto {
	public String documento;
	public double valorDesc;
	public int valorLido;
	public ttDesconto(){}
	public ttDesconto(ttDesconto ttD){
		documento  = ttD.documento;
		valorDesc  = ttD.valorDesc;
		valorLido  = ttD.valorLido;
	}
}

class ttPlano {
	public String contaContabil;
	public String descricaoPlano;
	public String contaAnalitica;
	public ttPlano(){}
	public ttPlano(ttPlano ttP){
		contaContabil = ttP.contaContabil;
		descricaoPlano = ttP.descricaoPlano;
		contaAnalitica = ttP.contaAnalitica;
	}
}

class ttFornecedor {
	public String nomeOrigem;
	public String contaMovimento;
	public ttFornecedor(){}
	public ttFornecedor(ttFornecedor ttF){
		nomeOrigem 	 = ttF.nomeOrigem;
		contaMovimento = ttF.contaMovimento;
	}
}



public String verificaSeparador(String separadorCsv, String dirName, String extensao, SysProperties props, InoutLogger logger) {

	try {
		if(extensao.contains("CSV")) {

			FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
			fileLoader2.loadFiles();
			for (MemoryFile memFile: fileLoader2.getMemFiles()) {
				if(memFile.getFilename().startsWith("OK_DeParaConta__")) importaDePara(memFile, dirName, extensao, logger, props);
				if (memFile.getFilename().toUpperCase().contains("CSV")) {
					while (memFile.hasNextLine()) {
						try {
							String line = memFile.nextLine();
							line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
							if (line.length() < 10) return separadorCsv;
							String [] fields1 = line.split(";");
							String [] fields2 = line.split(",");
							if(fields1.length > 0 && fields2.length > 0){
								if(fields1.length < fields2.length) { separadorCsv = ","; break; }
								if(fields1.length > fields2.length) { separadorCsv = ";"; break; }
							}
						}
						catch(Exception xx) {}
					}
					return separadorCsv;
				}
			}
		}
		
		
		
		if(extensao.contains("TXT")) {
			FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
			fileLoader2.loadFiles();
			for (MemoryFile memFile: fileLoader2.getMemFiles()) {
				if (memFile.getFilename().toUpperCase().endsWith(".TXT")) {
					while (memFile.hasNextLine()) {
						try {
							String line = memFile.nextLine();
							line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
							if (line.length() < 10) return separadorCsv;
							String [] fields1 = line.split(";");
							String [] fields2 = line.split(",");
							String [] fields3 = line.split("\t");
							if(fields1.length > 0 && fields2.length > 0){
								if(fields1.length > fields2.length && fields1.length > fields3.length) { separadorCsv = ";"; break; }
								if(fields2.length > fields1.length && fields2.length > fields3.length) { separadorCsv = ","; break; }
								if(fields3.length > fields1.length && fields3.length > fields2.length) { separadorCsv = "\t"; break; }
							}
						}
						catch(Exception xx) {}
					}
					return separadorCsv;
				}
			}
		}
	
	}
	 catch(Exception xx) {}
	
	return separadorCsv;


}

public void criaMovimento(DataBase dbIO, JSONObject recordRec, String chave, JSONObject js) {
	if (recordRec != null)  {
		try {
			updateMovimento(dbIO, js);
			/*if (js.has("idRoteiro")) {
				try {
					updateArquivo(dbIO, js);
				} catch(Exception ex){}
			}*/
		} catch (Exception eUpdateMovimento) {						 
			logger.logError("EndpointB: Erro ao Atualizar Movimento", eUpdateMovimento);
		}
	} else {
		try {
			insertMovimento(dbIO, js); 
			/*if (js.has("idRoteiro")) {
				try {
					insertArquivo(dbIO, js);
				} catch(Exception ex) {}
			}*/
				
		} catch (Exception eInsertMovimento) { 						 
			logger.logError("EndpointB: Erro ao fazer insert no Movimento", eInsertMovimento);
		}
	}
}

public int getIndiceRoteiro(String nomeCampo, JSONObject roteiroIndice) {
	int validaCampo = -1;
	try {
		if (!roteiroIndice.optString(nomeCampo).equals("")) {
			try {
				validaCampo = Integer.parseInt(roteiroIndice.optString(nomeCampo).replaceAll("@","").trim());
			}
			catch (Exception xx) { validaCampo = -1;}
		}
	}
	catch (Exception xx) {validaCampo = -1;}
	return  validaCampo;
}


public HashMap geralancamentoExtraInterno(HashMap mapaVariavel, ttMovimentoPadrao ttMov2, String chave,boolean gerarApenasValorDocumento, int complemento , String textoComplemento, String classificacao){
	ttMovimentoPadrao ttMov4      = (ttMovimentoPadrao)mapaVariavel.get(chave);
	if (ttMov4 == null) {
		ttMov4 = new ttMovimentoPadrao(ttMov2);
		ttMov4.chave                    = chave;
		if(gerarApenasValorDocumento){
			ttMov4.valorDesconto            = 0;
			ttMov4.valorMulta               = 0;
			ttMov4.valorJuros               = 0;
		}
		ttMov4.classificacao            = classificacao;
		switch(complemento){
			case 1: ttMov4.complemento01 = textoComplemento; break;
			case 2: ttMov4.complemento02 = textoComplemento; break;
			case 3: ttMov4.complemento03 = textoComplemento; break;
			case 4: ttMov4.complemento04 = textoComplemento; break;
			case 5: ttMov4.complemento05 = textoComplemento; break;
			case 6: ttMov4.complemento06 = textoComplemento; break;
		}
		mapaVariavel.put(chave, ttMov4);
	}
	return mapaVariavel;
}


public JSONObject getAlternativeDataInt (JSONObject objIn, MemoryFile memFile) throws Exception {
	JSONObject response	= new JSONObject();
	String validar		= objIn.optString("validar");
	String [] validaArr	= validar.split(";");
	String changeIt		= "";
	String changeText	= "nomeOrigem;documento;complemento01;complemento02;complemento03;complemento04;complemento05;complemento06;complemento07;complemento08;complemento09;complemento10;nomePortador";
	String changeDate	= "dataMovimento";
	String changeValue	= "valorDocumento;valorPagamento;valorJuros;valorDesconto;valorMulta";

	for (String parameter : validaArr) {
		response.put(parameter,	"");

		// String indiceAux = "";
		String indiceAux = getColunaAlternativa(parameter,	objIn);
		if (!indiceAux.equals("")) {
			if (changeDate.contains(parameter)) {
				if(!indiceAux.contains(";")) {
					try { 
						int iAux = Integer.parseInt(indiceAux);
						String dataStrAux = memFile.getStringFieldRemoveEspCharsUpper(iAux);
						if (!dataStrAux.equals("")) {
							String dataMovAux = getCampoDate(dataStrAux);
							if (dataMovAux.contains("/")) {
								String dataAlternativa = getCampoDate(dataStrAux);
								response.put(parameter,	dataAlternativa);
								response.put("dataLote", dataAlternativa);
								changeIt = changeIt+";"+parameter;
								
								//feito pra que as proximas iteracoes ja tenham o dado atualizado
								objIn.put(parameter, dataAlternativa);
							}
						}
					} catch (Exception ee) { logger.logDebug("Erro getColunaAlternativa 'Data'! "+ee.getMessage()); }
				}
				
			} else if (changeValue.contains(parameter)) {
				if(!indiceAux.contains(";")) {
					try {
						int iAux  = Integer.parseInt(indiceAux);
						if(iAux >=0){
							double valorAlternativo = memFile.getDoubleField(iAux);
							response.put(parameter, valorAlternativo);
							changeIt = changeIt+";"+parameter;
							
							//feito pra que as proximas iteracoes ja tenham o dado atualizado
							objIn.put(parameter, valorAlternativo);
						}
					} catch (Exception ee) { logger.logDebug("Erro getColunaAlternativa 'Valor'! "+ee.getMessage()); }

				}
				if (indiceAux.contains(";")) {
					double valorAlternativo = 0;
					try {
						String [] izis = indiceAux.split(";");
						for (String k : izis) {
							int iAux = Integer.parseInt(k);
							valorAlternativo = valorAlternativo + memFile.getDoubleField(iAux);
						}
					} catch (Exception ee) {logger.logDebug("Erro getColunaAlternativa 'Valor 02'! "+ee.getMessage());  }
					
					if (valorAlternativo != 0) {
						response.put(parameter, valorAlternativo);
						changeIt = changeIt+";"+parameter;
						
						//feito pra que as proximas iteracoes ja tenham o dado atualizado
						objIn.put(parameter, valorAlternativo);
					}
				}
			} else if (changeText.contains(parameter)) {
				if(!indiceAux.contains(";")) {
					try { 
						int iAux = Integer.parseInt(indiceAux);
						String textoAlternativo = memFile.getStringFieldRemoveEspCharsUpper(iAux);
						response.put(parameter, textoAlternativo);
						changeIt = changeIt+";"+parameter;
						
						//feito pra que as proximas iteracoes ja tenham o dado atualizado
						objIn.put(parameter, textoAlternativo);
					} catch (Exception ee) { logger.logDebug("Erro getColunaAlternativa 'Texto'! "+ee.getMessage()); }
				}
				if (indiceAux.contains(";")) {
					String textoAlternativo = "";
					
					try {
						String [] izis = indiceAux.split(";");
						for (String k : izis) {
							int iAux	 = Integer.parseInt(k);
							textoAlternativo = textoAlternativo+" - "+memFile.getStringFieldRemoveEspCharsUpper(iAux).trim();
							textoAlternativo = textoAlternativo.trim();
						}
						if (textoAlternativo.startsWith("-")) textoAlternativo = cutString(textoAlternativo, 1).trim();
						
					} catch (Exception ee) {logger.logDebug("Erro getColunaAlternativa 'Texto 02'! "+ee.getMessage());  }
					
					if (!textoAlternativo.equals("")) {
						response.put(parameter, textoAlternativo);
						changeIt = changeIt+";"+parameter;
						
						//feito pra que as proximas iteracoes ja tenham o dado atualizado
						objIn.put(parameter, textoAlternativo);
					}
				}
			} else {
				response.put(parameter, "");
				objIn.put(parameter, "");
			}
		}
	}
	
	response.put("changeIt",	changeIt);
	return response;
}




public String getRefatoraCampo(String valorOriginal, String conteudoRoteiro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String line            = objHistorico.optString("line");
    String cabecalhoRegra  = objHistorico.optString("cabecalhoRegra");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
	
	nomeArquivo = StringUtil.removeSpecialCharsToUC(nomeArquivo);


	if (conteudoRoteiro.toUpperCase().contains("#CABECALHO"))      return cabecalhoRegra;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO01"))  return complemento01;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO02"))  return complemento02;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO03"))  return complemento03;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO04"))  return complemento04;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO05"))  return complemento05;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO06"))  return complemento06;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO07"))  return complemento07;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO08"))  return complemento08;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO09"))  return complemento09;
	if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO10"))  return complemento10;
	if (conteudoRoteiro.toUpperCase().contains("#TIPOPLANILHA"))   return tipoPlanilha;
	if (conteudoRoteiro.toUpperCase().contains("#NOMEDOARQUIVO"))   return nomeArquivo;
	if (conteudoRoteiro.toUpperCase().contains("#LINE"))  		   return line;
	if (conteudoRoteiro.toUpperCase().contains("#NUMEROABA"))      return ("ABA:" + String.valueOf(numeroAba));


    return valorOriginal;
}

public boolean buscaProtocoloConversor(String protocolo_id, LancamentosApi apiWeb, String tipoLancamento, String nomeArquivo, InoutLogger logger) throws Exception {
	logger.logDebug("ENTROU PROTOCOLOCONV");
	String diretorio = "C:/Conversor/Pdf";
	File file2 = new File(diretorio);
	
	File [] files = file2.listFiles();
	nomeArquivo = cutString(nomeArquivo, 0, ".pdf");
	
	if (FileUtil.dirHasFiles(diretorio)) {
		
		boolean notificouProtocolo = false;
			for (File fl: files) {
				// logger.logDebug("FL " + fl.getAbsolutePath()+ " | " + nomeArquivo + " | " + tipoLancamento);
				if (fl.getAbsolutePath().contains(tipoLancamento) && fl.getAbsolutePath().contains(nomeArquivo)) {
					// logger.logDebug("AQ FOI " + fl.getAbsolutePath());
					if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().toUpperCase().contains(".CSV") && fl.getAbsolutePath().contains("_ancora_") && fl.length() > 0){
						String diretorioArquivoCsv = "C:/inout/contabil/";
						String testeCsv = "";									
						String contabilidadeCsv = "";
						String empresaCsv = "";
						
						// logger.logDebug("ENTROU NOS PDFFFFFF");
						
						if (fl.getAbsolutePath().contains("pagar_")) {
							try {											
								testeCsv = cutString(fl.getAbsolutePath(), "pagar_");
								contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
								empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
								empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
								diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/APagar";
							} catch (Exception e) {
								logger.logDebug("ERRO AO CORTAR ARQUIVO " + e.getMessage());
							}
						}
						else if (fl.getAbsolutePath().contains("receber_")) {
							try {											
								testeCsv = cutString(fl.getAbsolutePath(), "receber_");
								contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
								empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
								empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
								diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/AReceber";
							} catch (Exception e) {
								logger.logDebug("ERRO AO CORTAR ARQUIVO " + e.getMessage());
							}
						}
						String arquivoDeployStr = "";
						try {
							// mantivemos o ancora no nome do arquivo para saber que foi convertido e usado nos extratos
							arquivoDeployStr = fl.getAbsolutePath().substring(fl.getAbsolutePath().indexOf("_ancora_"));
						} catch (Exception e) {
							logger.logDebug("NAOCRIOURODACONVERSOR " + e.getMessage());
						}
						logger.logDebug("DIRETORIOS " + diretorioArquivoCsv + " | " + arquivoDeployStr);
						if (!arquivoDeployStr.equals("")) {
							File arquivoDeploy  = new File(diretorioArquivoCsv + "/" + arquivoDeployStr);
							//logger.logDebug("COPIOUARQUIVO " + arquivoDeploy.getName());
							FileUtil.copyFolder(fl, arquivoDeploy);
							
							try { 
								FileUtil.deleteFile(fl);
							} catch (Exception XX) {}
						}
						if (!notificouProtocolo) {
							notificouProtocolo = true;
							String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "0", "Estamos convertendo os PDFs.",  logger);
						}
						continue;
					}
				}
			}
		if (notificouProtocolo) return true;
	}
	return false;
}

public String atualizaStatusProtocoloOic(LancamentosApi apiWeb, File fl,  String statusProtocolo, String mensagem, InoutLogger logger) throws Exception {

    try {
		 String protocolo_id = cutString(fl.getName().toUpperCase(), fl.getName().toUpperCase().lastIndexOf("_ID")+3, "_");
		 if (fl.getName().toUpperCase().contains("OUD_ID"))  protocolo_id = cutString(fl.getName().toUpperCase(), "OUD_ID", "_");
		 if (fl.getName().toUpperCase().contains("OUD__ID")) protocolo_id = cutString(fl.getName().toUpperCase(), "OUD__ID", "_");
		// roda requisicao para atualizar o satus do protocolo
		JSONObject bodyProtocolo = new JSONObject();
		bodyProtocolo.put("status", statusProtocolo).put("mensagem", mensagem);
		String atualizaStatus = apiWeb.atualizaStatusProtocolo("https://integrador-contabil.herokuapp.com", protocolo_id, bodyProtocolo);
		return atualizaStatus;
	} catch (Exception xx) {
		logger.logDebug(" Erro ao Atualizar Status " + xx);
		return "";
	}
 
}
















































//## CODIGO GERADO A PARTIR DAS REGRAS NO SALESFORCE ##
//## NAO ALTERAR DAQUI ATE O FINAL DO SCRIPT!!!!     ##
public JSONObject getRoteiro() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0871578");
    js.put("idRoteiro", "a0A6R000018McU2");
    js.put("idEmpresa", "a0q6R000009FVTXQA4");
    js.put("idContabilidade", "a096R00002udpAb");
    js.put("CnpjContabilidade", "15.415.383/0001-36");
    js.put("CnpjEmpresa", "437.710.840-91");
    js.put("fornecedor", "1");
    js.put("dataMovimento", "0");
    js.put("portador", "#NOME DO ARQUIVO");
    js.put("documentoNF", "3");
    js.put("valorDocumento", "5");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "3");
    js.put("complemento02", "4");
    js.put("complemento03", "4");
    js.put("complemento04", "2");
    js.put("complemento05", "");
    js.put("complemento06", "1");
    js.put("centroCusto", "");
    js.put("valorAlternativo", "");
    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("dataFake", "");

    js.put("Abas_Especificas", "0");
    js.put("classificaFornec", "213");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Contabillex");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "TRUE");
    js.put("cruzaExtrato", "FALSE");
    js.put("empresa", "Fazbacury");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "DOMINIO");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "FALSE");
    js.put("ValidaFornecedorFiscal", "0");
    js.put("Integracao_contratos", "false");
    js.put("Usa_Filial_Questor", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "PRINCIPAL");
    js.put("Planilhas_Padroes", "Extrato_Santander_Excel;Extrato_Santander_Excel;Extrato_Santander_Excel;Extrato_BB_TXT;Extrato_BB_TXT;Extrato_BB_TXT;Extrato_CEF_TXT;Extrato_CEF_TXT;Extrato_CEF_TXT;Extrato_Bradesco_TXT;Extrato_Bradesco_TXT;Extrato_Bradesco_TXT;Extrato_Sicredi_TXT;Extrato_Sicredi_TXT;Extrato_Sicredi_TXT;Extrato_Santander_PDF;Extrato_Santander_PDF;Extrato_Santander_PDF;Extrato_BB_PDF;Extrato_BB_PDF;Extrato_BB_PDF;Extrato_Sicredi_PDF;Extrato_Sicredi_PDF;Extrato_Sicredi_PDF;Extrato_CEF_PDF;Extrato_CEF_PDF;Extrato_CEF_PDF;Extrato_Bradesco2_PDF;Extrato_Bradesco2_PDF;Extrato_Bradesco2_PDF;Extrato_Cef_Html");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");

    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("especiaisBaixaFiscal", "");
    js.put("Arredonda", "false");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");
    js.put("Coluna_Valor_Duplicata_Dominio", "9");
    js.put("delimitadorDoArquivo", "");
    js.put("agrupaArquivos", "FALSE");

    js.put("X001_ROB", "");
    js.put("X002_Despesas", "");
    js.put("X003_Despesas_Detalhe", "");
    js.put("X004_Geracao_Caixa_Mes", "");
    js.put("X005_Geracao_Caixa_Acumulado", "");
    js.put("X006_Despesas_sobre_Faturamento", "");
    js.put("X007_Lucro", "");
    js.put("X008_Deducoes_Receitas", "");
    js.put("X009_CMV", "");
    js.put("X010_CPV", "");
    js.put("X011_CSP", "");
    js.put("X012_Indicador", "");
    js.put("X013_Indicador", "");
    js.put("X014_Indicador", "");
    js.put("X015_Indicador", "");
    js.put("X016_Indicador", "");
    js.put("X017_Indicador", "");
    js.put("X018_Indicador", "");
    js.put("X019_Indicador", "");
    js.put("X020_Indicador", "");
    js.put("X021_Indicador", "");

    js.put("X015_Label", "");
    js.put("X016_Label", "");
    js.put("X017_Label", "");
    js.put("X018_Label", "");
    js.put("X019_Label", "");
    js.put("X020_Label", "");
    js.put("Email_Logo", "");
    js.put("BuscaCnpjCRM", "FALSE");
    js.put("Idioma", "PORTUGUES");
    js.put("Ordem_dos_Indicadores", "7, 12, 21, 1, 8, 9, 10, 11, 13, 2, 3, 6, 4, 5, 15, 16, 18, 14, 17, 19, 20");
    js.put("Rotulo_Complemento_01", "HISTORICO");
    js.put("Rotulo_Complemento_02", "NAO UTILIZAR - INTERNO");
    js.put("Rotulo_Complemento_03", "FAZENDA");
    js.put("Rotulo_Complemento_04", "CPF/CNPJ");
    js.put("Rotulo_Complemento_05", "");
    js.put("Gera_LOG", "false");
    js.put("Gera_LOG_PARAMETROS", "");

    return js;
}

public JSONObject getRoteiroZZPADRAOOTTIMIZZAPAG1() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2021-1016997");
    js.put("idRoteiro", "a0A6R000018McU2");
    js.put("idEmpresa", "a0q6R000007KGdjQAG");
    js.put("idContabilidade", "a091500001BVcOf");
    js.put("CnpjContabilidade", "10.000.000/0000-0");
    js.put("CnpjEmpresa", "1");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "2");
    js.put("dataMovimento", "0");
    js.put("portador", "6");
    js.put("documentoNF", "1");
    js.put("valorDocumento", "4");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "5");
    js.put("complemento01", "3");
    js.put("complemento02", "7");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "0");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Contabillex");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Fazbacury");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "OFICIAL PLANILHA PADRAO OTTIMIZZA");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public String getTipoPlanilha(String line, String tipoPlanilha, String nomeArquivo, JSONObject jDadosObj) {
    boolean achouTipo = true;
    String [] campos1 = "DATA PAGAMENTO;DOCUMENTO;FORNECEDOR;DETALHES DO PAGAMENTO".split(";");
    for (int x=0;x<campos1.length;x++) {
        if (!line.contains(campos1[x])) { 
            achouTipo = false; break; }
    }
    if (achouTipo) return "ZZPADRAOOTTIMIZZAPAG1";
    achouTipo = true;
    return tipoPlanilha;
}
public String getConta(String nomeOrigem, String documento, String nomePortador,
                       String complemento01, String complemento02, String complemento03, 
                       String nomeArquivo, String codCentroCusto) {
    String conta = "";
    String complemento04 = "";
    String complemento05 = "";
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getConta09(String contaMovimento, String nomeOrigem, String documento, 
                       String nomePortador, String complemento01, String complemento02, 
                       String complemento03, String nomeArquivo, String codCentroCusto) {
    String conta = contaMovimento;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) { //ROT-2023-1093778
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) { //ROT-2023-1097268
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2023-0140950
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).equals("")) { //ROT-2023-0871578
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (nomeOrigem.contains("CIMENTOS") && nomeOrigem.contains("J") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4636R813";
        contaMovimento = "4636R813";
    }
    if (nomeOrigem.contains("S") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("OI")) {
        conta = "3711R153";
        contaMovimento = "3711R153";
    }
    if (nomeOrigem.contains("CADORE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BIDOIA")) {
        conta = "2131R90";
        contaMovimento = "2131R90";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DANIELLI MONTEIRO")) {
        conta = "3164R571";
        contaMovimento = "3164R571";
    }
    if (nomeOrigem.contains("METALSEL LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4938R1074";
        contaMovimento = "4938R1074";
    }
    if (nomeOrigem.contains("AGRICOLA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("RECH")) {
        conta = "4986R271";
        contaMovimento = "4986R271";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FABIO TEIXEIRA GUIMARAES")) {
        conta = "2280R657";
        contaMovimento = "2280R657";
    }
    if (nomeOrigem.contains("PETROLEO QUERENCIA LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "2167R575";
        contaMovimento = "2167R575";
    }
    if (nomeOrigem.contains("RICA") && nomeOrigem.contains("COSTA") && nomeOrigem.contains("MADEIREIRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3366R24";
        contaMovimento = "3366R24";
    }
    if (nomeOrigem.contains("MOREIRA") && nomeOrigem.contains("OSMAR") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ARAUJO")) {
        conta = "4975R982";
        contaMovimento = "4975R982";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("NOVAIS") && nomeOrigem.contains("VIANA") && nomeOrigem.contains("VILSON")) {
        conta = "4109R818";
        contaMovimento = "4109R818";
    }
    if (nomeOrigem.contains("RONALDO RAMIRES KOCH") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4771R936";
        contaMovimento = "4771R936";
    }
    if (nomeOrigem.contains("J JUNIOR POSSAMAI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4049R793";
        contaMovimento = "4049R793";
    }
    if (nomeOrigem.contains("JOAO BATISTA BARBOSA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "2665R181";
        contaMovimento = "2665R181";
    }
    if (nomeOrigem.contains("JOSE ALCIDES SIMPLICIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "2915R341";
        contaMovimento = "2915R341";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DAMBROS") && nomeOrigem.contains("ALBERTO") && nomeOrigem.contains("MATEUS")) {
        conta = "3089R522";
        contaMovimento = "3089R522";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MELLOS TRANSPORTES LTDA")) {
        conta = "2896R117";
        contaMovimento = "2896R117";
    }
    if (nomeOrigem.contains("NOVO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LAR") && nomeOrigem.contains("COM")) {
        conta = "3193R582";
        contaMovimento = "3193R582";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PNEULANDIA COMERCIAL LTDA")) {
        conta = "2588R293";
        contaMovimento = "2588R293";
    }
    if (nomeOrigem.contains("CIA") && nomeOrigem.contains("BRITZKE") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("E")) {
        conta = "5000R1125";
        contaMovimento = "5000R1125";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TRC RIBEIRO LTDA")) {
        conta = "4118R832";
        contaMovimento = "4118R832";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("AUTOMOTIVOS") && nomeOrigem.contains("UNICAR")) {
        conta = "2236R79";
        contaMovimento = "2236R79";
    }
    if (nomeOrigem.contains("VISION") && nomeOrigem.contains("COMUNICACAO") && nomeOrigem.contains("ART") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "5003R1126";
        contaMovimento = "5003R1126";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VRA COMERCIO LTDA")) {
        conta = "4242R14";
        contaMovimento = "4242R14";
    }
    if (nomeOrigem.contains("WG AGRICULTURE LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4056R797";
        contaMovimento = "4056R797";
    }
    if (nomeOrigem.contains("ROMAGNOLO") && nomeOrigem.contains(",") && nomeOrigem.contains("PIACESKI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "2618R96";
        contaMovimento = "2618R96";
    }
    if (nomeOrigem.contains("BANCO DO BRASIL S/A") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "8R146";
        contaMovimento = "8R146";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CASA DO LED LTDA")) {
        conta = "4914R1068";
        contaMovimento = "4914R1068";
    }
    if (nomeOrigem.contains("CRISTALCOLOR TINTAS E REVESTIMENTOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4913R1070";
        contaMovimento = "4913R1070";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("TRANSFERENCIA") && nomeOrigem.contains("NELSON ALCIDES LOTTERMANN")) {
        conta = "167R98";
        contaMovimento = "167R98";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("COORD") && nomeOrigem.contains("PONTO") && complemento01.contains("RENOVACAO") && nomeOrigem.contains("NUCLEO")) {
        conta = "2259";
        contaMovimento = "2259";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SATIRIO TEIXEIRA PABLOS 32055592823")) {
        conta = "4890R1044";
        contaMovimento = "4890R1044";
    }
    if (nomeOrigem.contains("STARLINK") && nomeOrigem.contains("BRAZIL") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("INTERNET") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4962R1094";
        contaMovimento = "4962R1094";
    }
    if (nomeOrigem.contains("ACO") && nomeOrigem.contains("FERRO") && nomeOrigem.contains("RICA") && nomeOrigem.contains("COSTA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4489R355";
        contaMovimento = "4489R355";
    }
    if (nomeOrigem.contains("FABIO RODRIGUES DA SILVA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4669R917";
        contaMovimento = "4669R917";
    }
    if (nomeOrigem.contains("ROGERIO TEIXEIRA DE SOUSA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4974R1025";
        contaMovimento = "4974R1025";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ATIVA MATERIAIS ELETRICOS LTDA")) {
        conta = "4951R1080";
        contaMovimento = "4951R1080";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BALTAZAR FRIZZO") && complemento01.contains("PGTO") && complemento01.contains("ADTO")) {
        conta = "536R1";
        contaMovimento = "536R1";
    }
    if (nomeOrigem.contains("GRACIELE TOSTA SILVA ME") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "2156R263";
        contaMovimento = "2156R263";
    }
    if (nomeOrigem.contains("HEBBERTH") && nomeOrigem.contains("MOREIRA") && nomeOrigem.contains("DA") && nomeOrigem.contains("SILVA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "2181R78";
        contaMovimento = "2181R78";
    }
    if (nomeOrigem.contains("DE") && nomeOrigem.contains("HIDRAUPECAS") && nomeOrigem.contains("COMERCIO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PECAS")) {
        conta = "3171R337";
        contaMovimento = "3171R337";
    }
    if (nomeOrigem.contains("MARIA LIZIE ROMAO PEREIRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4928R1073";
        contaMovimento = "4928R1073";
    }
    if (nomeOrigem.contains("DE") && nomeOrigem.contains("L") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MENDONCA") && nomeOrigem.contains("S")) {
        conta = "2724R95";
        contaMovimento = "2724R95";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MADEIRA") && nomeOrigem.contains("DE") && nomeOrigem.contains("ARTEFATOS") && nomeOrigem.contains("MM")) {
        conta = "2157R83";
        contaMovimento = "2157R83";
    }
    if (nomeOrigem.contains("O") && nomeOrigem.contains("SANTA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("P") && nomeOrigem.contains("DE")) {
        conta = "4999R1124";
        contaMovimento = "4999R1124";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LTDA") && nomeOrigem.contains("LEX") && nomeOrigem.contains("CONTABIL") && nomeOrigem.contains("ORGANIZACAO")) {
        conta = "3414R4";
        contaMovimento = "3414R4";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("RISTOF AUTO ELETRICA LTDA")) {
        conta = "4004R746";
        contaMovimento = "4004R746";
    }
    if (nomeOrigem.contains("LOCACAO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("RODOBENS") && nomeOrigem.contains("COMERCIO") && nomeOrigem.contains("E")) {
        conta = "4171R152";
        contaMovimento = "4171R152";
    }
    if (nomeOrigem.contains("SANTA") && nomeOrigem.contains("SERVICOS") && nomeOrigem.contains("MEDICOS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LUZIA")) {
        conta = "4055R767";
        contaMovimento = "4055R767";
    }
    if (nomeOrigem.contains("BARBOSA") && nomeOrigem.contains("SILVA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("S") && nomeOrigem.contains("DA")) {
        conta = "3000R427";
        contaMovimento = "3000R427";
    }
    if (nomeOrigem.contains("DIST") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SOLIDA") && nomeOrigem.contains("DE") && nomeOrigem.contains("EQUIP")) {
        conta = "4811R954";
        contaMovimento = "4811R954";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SOY AGRI COMMODITIES LTDA")) {
        conta = "2901R329";
        contaMovimento = "2901R329";
    }
    if (nomeOrigem.contains("PARA") && nomeOrigem.contains("TODIMO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSTRUCAO") && nomeOrigem.contains("MATERIAIS")) {
        conta = "3008R444";
        contaMovimento = "3008R444";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ADM DO BRASIL LTDA")) {
        conta = "2804";
        contaMovimento = "2804";
    }
    if (nomeOrigem.contains("VARGAS") && nomeOrigem.contains("ARAUJO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LTDA") && nomeOrigem.contains("&")) {
        conta = "5035R1128";
        contaMovimento = "5035R1128";
    }
    if (nomeOrigem.contains("SCHMITZ") && nomeOrigem.contains("&") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TRANSPORTES") && nomeOrigem.contains("HERDT")) {
        conta = "5001R1130";
        contaMovimento = "5001R1130";
    }
    if (nomeOrigem.contains("ELETRICA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("L") && nomeOrigem.contains(".") && nomeOrigem.contains("M")) {
        conta = "5004R1131";
        contaMovimento = "5004R1131";
    }
    if (nomeOrigem.contains("CESAR PEREIRA DE OLIVEIRA 03927694177") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4972R1105";
        contaMovimento = "4972R1105";
    }
    if (nomeOrigem.contains("EDIFICA ARQUITETURA E CONSTRUCAO LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4977R875";
        contaMovimento = "4977R875";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JAIR AUGUSTO DA SILVA 78346592191")) {
        conta = "4946R1078";
        contaMovimento = "4946R1078";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("E & L VIDRACARIA LTDA")) {
        conta = "4655R374";
        contaMovimento = "4655R374";
    }
    if (nomeOrigem.contains("AFFA RETIFICA DE MOTORES EIRELI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4050R769";
        contaMovimento = "4050R769";
    }
    if (nomeOrigem.contains("BIGOLIN ROLAMENTOS E RETENTORES LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4083R804";
        contaMovimento = "4083R804";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DELLFER BOMBAS INJETORAS LTDA ME")) {
        conta = "2163R234";
        contaMovimento = "2163R234";
    }
    if (nomeOrigem.contains("VITORIA COMERCIO DE TINTAS LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "1911R1064";
        contaMovimento = "1911R1064";
    }
    if (nomeOrigem.contains("CARLOS EDUARDO SILVERIO SANTANA - ME") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4659R891";
        contaMovimento = "4659R891";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CLEYTON FERNANDO AQUINO DA SILVA 04996077166")) {
        conta = "4899R1047";
        contaMovimento = "4899R1047";
    }
    if (nomeOrigem.contains("ELIZABETE COSTA RICA TINTAS LTDA EPP") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3797R285";
        contaMovimento = "3797R285";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MARINA APARECIDA MORENO DA SILVA PEREIRA")) {
        conta = "824R1";
        contaMovimento = "824R1";
    }
    if (complemento01.contains("INSS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "167R1";
        contaMovimento = "167R1";
    }
    if (complemento01.contains("GPS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "167R1";
        contaMovimento = "167R1";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PRIMAVERA MAQUINAS E IMPLEMENTOS AGRICOLAS LTDA")) {
        conta = "2142R85";
        contaMovimento = "2142R85";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SECRETARIA DA RECEITA FEDERAL DO BRASIL")) {
        conta = "167R1";
        contaMovimento = "167R1";
    }
    if (complemento01.contains("FOLHA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "167";
        contaMovimento = "167";
    }
    if (nomeOrigem.contains("SEM PARAR INSTITUICAO DE PAGAMENTO LTDA.") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "3947R703";
        contaMovimento = "3947R703";
    }
    if (nomeOrigem.contains("STARLINK BRAZIL SERVICO DE INTERNET LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4962R1094";
        contaMovimento = "4962R1094";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSTRUFORT MATERIAIS DE CONSTRUCAO LTDA ME")) {
        conta = "4776R938";
        contaMovimento = "4776R938";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALLIANZ") && nomeOrigem.contains("SEGUROS")) {
        conta = "4848R975";
        contaMovimento = "4848R975";
    }
    if (nomeOrigem.contains("LIBERTY") && nomeOrigem.contains("SEGUROS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "2762R610";
        contaMovimento = "2762R610";
    }
    if (complemento01.contains("LICENCIAMENTO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DETRAN")) {
        conta = "2398R1";
        contaMovimento = "2398R1";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("A R S MATERIAIS PARA CONSTRUCAO LTDA")) {
        conta = "4593R694";
        contaMovimento = "4593R694";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ICATU SEGUROS")) {
        conta = "2458R145";
        contaMovimento = "2458R145";
    }
    if (nomeOrigem.contains("SEGUROS") && nomeOrigem.contains("SOMPO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "978R312";
        contaMovimento = "978R312";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CONSELHO REGIONAL DE ENGENHARIA E AGRONOMIA DE MAT")) {
        conta = "2454R1";
        contaMovimento = "2454R1";
    }
    if (nomeOrigem.contains("ROSIMEIRE RAMIRES KOCH BOCALAN CIA LTDA - EPP") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4482R318";
        contaMovimento = "4482R318";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("GMAD CAMPO GRANDE SUPRIMENTOS PARA MOVEIS LTDA EPP")) {
        conta = "4895R1045";
        contaMovimento = "4895R1045";
    }
    if (nomeOrigem.contains("CARTORIO") && nomeOrigem.contains("REGISTRO") && nomeOrigem.contains("E") && nomeOrigem.contains("TABELIONATO")) {
        conta = "2375R161";
        contaMovimento = "2375R161";
    }
    if (nomeOrigem.contains("DO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CARTORIO") && nomeOrigem.contains("1")) {
        conta = "2375R161";
        contaMovimento = "2375R161";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("FOLHA") && nomeOrigem.contains("GABRIEL FELIPE LOTTERMANN")) {
        conta = "824R1";
        contaMovimento = "824R1";
    }
    if (documento.contains("FOLHA") && nomeOrigem.contains("NELSON ALCIDES LOTTERMANN") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "167R98";
        contaMovimento = "167R98";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PISO") && nomeOrigem.contains("COMERCIO") && nomeOrigem.contains("LIMPEZA") && nomeOrigem.contains("LIMPO")) {
        conta = "4973R1106";
        contaMovimento = "4973R1106";
    }
    if (nomeOrigem.contains("BRADESCO AUTO/RE COMPANHIA DE SEGUROS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4680R597";
        contaMovimento = "4680R597";
    }
    if (complemento01.contains("CARTORIO") && nomeOrigem.contains("VALMIR DAL DEGRAN ME") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "2375R188";
        contaMovimento = "2375R188";
    }
    if (nomeOrigem.contains("CLAUDIO AUTO PECAS DO VALE LTDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "4673R264";
        contaMovimento = "4673R264";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PORTO SEGURO E CIA DE SEGUROS GERAIS")) {
        conta = "986R678";
        contaMovimento = "986R678";
    }
    if (complemento01.contains("ICMS") && nomeOrigem.contains("SEFAZ-SECRETARIA DE ESTADO DE FAZENDA MS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "167R1";
        contaMovimento = "167R1";
    }
    if (complemento01.contains("BAIXA") && tipoPlanilha.contains("MOVIMENTO") && complemento01.contains("TAXA") && nomeOrigem.contains("SEFAZ-SECRETARIA DE ESTADO DE FAZENDA MS")) {
        conta = "167R1";
        contaMovimento = "167R1";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) { //ROT-2020-058689
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) { //ROT-2021-0311455
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) { //ROT-2021-0512280
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) { //ROT-2021-0612672
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) { //ROT-2020-079383
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) { //ROT-2021-0612733
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) { //ROT-2022-0421802
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) { //ROT-2022-1033321
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) { //ROT-2024-03128218
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_INFINITE_PDF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DENIED")) { //ROT-2024-02121693
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) { //ROT-2023-1093746
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) { //ROT-2023-1093778
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) { //ROT-2023-1097268
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) { //ROT-2023-11102111
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) { //ROT-2023-0140950
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).equals("")) { //ROT-2023-0871578
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) { //ROT-2021-0612707
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) { //ROT-2020-058689
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) { //ROT-2021-0311455
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) { //ROT-2021-0311491
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) { //ROT-2021-0211301
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) { //ROT-2021-0411996
        conta = "IGNORARINVERTE";
        contaMovimento = "IGNORARINVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) { //ROT-2021-0512225
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) { //ROT-2021-0512280
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) { //ROT-2021-0612672
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) { //ROT-2020-079383
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) { //ROT-2021-0612733
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) { //ROT-2021-0612669
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0220368
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) { //ROT-2022-0421802
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-0421940
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) { //ROT-2022-1033321
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) { //ROT-2022-1239716
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) { //ROT-2024-03128218
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_INFINITE_PDF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DENIED")) { //ROT-2024-02121693
        conta = "IGNORAR";
        contaMovimento = "IGNORAR";
        return conta;
    }
    return conta;
}
public String getContaMovimento2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getRegraContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_TRUDATA1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX ENVIADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_TRUDATA1', Fornecedor/Cliente contem 'PIX ENVIADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGARME2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGARME2', Complemento (06) nao contem 'PAGA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PUNTO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("PAGO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PUNTO2', Complemento (06) nao contem 'PAGO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALOR") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIQUIDADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'VALOR', Fornecedor/Cliente contem 'LIQUIDADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_GETNET5") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SALDO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_GETNET5', Fornecedor/Cliente contem 'SALDO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AME1") &&
        StringUtil.removeSpecialCharsToUC(complemento04).equals("")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AME1', Complemento (04) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
        StringUtil.removeSpecialCharsToUC(complemento06).equals("")) {
        conta = "Quando Tipo Planilha contem 'MOVIMENTO', Complemento (06) contem 'EM BRANCO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("PAGAMENTO") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ASSINATURA") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("SAQUE") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (04) nao contem 'PAGAMENTO', Complemento (04) nao contem 'ASSINATURA', Complemento (04) nao contem 'SAQUE', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_PAGSEGURO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_PAGSEGURO1")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_PAGSEGURO1', Complemento (03) nao contem 'APROVAD', Complemento (01) contem 'CARTAO_PAGSEGURO1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("CONFIRMED")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO1', Complemento (04) nao contem 'CONFIRMED', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_ALELO2") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_ALELO2', Complemento (04) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DETODOS") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("APROVAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_DETODOS', Complemento (03) nao contem 'APROVAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("COMPLETO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (04) nao contem 'COMPLETO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("USD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFA', Complemento (03) contem 'USD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("VENDAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'VENDAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_HOTMART1") &&
        StringUtil.removeSpecialCharsToUC(complemento02).equals("TARIFAINTERNACIONAL") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("BRL")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_HOTMART1', Complemento (02) igual a 'TARIFAINTERNACIONAL', Complemento (03) contem 'BRL', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTAO_MOIP1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REEMBOLSO")) {
        conta = "Quando Complemento (01) contem 'CARTAO_MOIP1', Fornecedor/Cliente contem 'REEMBOLSO', CONTA MOVIMENTO SERA = 'IGNORAR'INVERTE";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("DINHEIRO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'DINHEIRO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento03).contains("VIA LOJA") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (03) contem 'VIA LOJA', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (!StringUtil.removeSpecialCharsToUC(complemento04).equals("") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (04) nao contem 'EM BRANCO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(complemento05).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1")) {
        conta = "Quando Complemento (05) contem 'NAO', Tipo Planilha contem 'CARTAO_IFOOD_EXCEL1', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("PRATO") &&
        StringUtil.removeSpecialCharsToUC(complemento01).contains("PRATO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CART")) {
        conta = "Quando Tipo Planilha contem 'PRATO', Complemento (01) contem 'PRATO', Complemento (03) nao contem 'CART', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_POLICARD") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("TRANSFERENCIA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_POLICARD', Complemento (03) contem 'TRANSFERENCIA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("2")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '2', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("3")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '3', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("4")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '4', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("5")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '5', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("6")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '6', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("7")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '7', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("8")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '8', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("9")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '9', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_AIQFOME1") &&
        StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANCELADO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_AIQFOME1', Fornecedor/Cliente contem 'CANCELADO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STONE2") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("CANCELAD")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_STONE2', Complemento (04) contem 'CANCELAD', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("10")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '10', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("11")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '11', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("12")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '12', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("13")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '13', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("14")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '14', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("15")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '15', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("16")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '16', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("17")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '17', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SIPAG2") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("18")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_SIPAG2', Complemento (03) contem '18', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO6") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO6', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_BMGCARD") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("NAO") &&
        StringUtil.removeSpecialCharsToUC(complemento04).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_BMGCARD', Complemento (04) contem 'NAO', Complemento (04) contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO8") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO8', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_REDECARD3") &&
        !StringUtil.removeSpecialCharsToUC(complemento06).contains("APROVADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_REDECARD3', Complemento (06) nao contem 'APROVADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'EM BRANCO', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'TARIFA', Complemento (03) contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_CIELO9") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("DEBITOCESSAO") &&
        !StringUtil.removeSpecialCharsToUC(complemento03).contains("CESSAO")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_CIELO9', Complemento (05) contem 'DEBITOCESSAO', Complemento (03) nao contem 'CESSAO', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_DOM1") &&
        !StringUtil.removeSpecialCharsToUC(complemento04).contains("ENTRADA")) {
        conta = "Quando Tipo Planilha contem 'CARTAO_DOM1', Complemento (04) nao contem 'ENTRADA', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("AAACARTAO_INFINITE_PDF") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("DENIED")) {
        conta = "Quando Tipo Planilha contem 'AAACARTAO_INFINITE_PDF', Complemento (03) contem 'DENIED', CONTA MOVIMENTO SERA = 'IGNORAR'";
        return conta;
    }
    return conta;
}
public String getContaPortador(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (nomePortador.contains("NELSON") && nomePortador.contains("3427")) {
        conta = "8";
        contaMovimento = "8";
    }
    if (nomePortador.contains("OTT_OUD__ID989483_PLANILHA BANCO 34276-9")) {
        conta = "8";
        contaMovimento = "8";
    }
    if (nomePortador.contains("EXTRATO CEF NELSON")) {
        conta = "4682";
        contaMovimento = "4682";
    }
    if (nomePortador.contains("EXTRATO CEF NELSON")) {
        conta = "4682";
        contaMovimento = "4682";
    }
    if (nomePortador.contains("OTT_OUD__ID1240631_EXTRATO 16058-0 02-2024")) {
        conta = "9";
        contaMovimento = "9";
    }
    if (nomePortador.contains("OTT_OUD__ID1248086_OTTIMIZZA EXTRATO 16058-0 02-2024")) {
        conta = "9";
        contaMovimento = "9";
    }
    if (nomePortador.contains("OTT_OUD__ID1251307_EXTRATO 16058-0 02-2024")) {
        conta = "9";
        contaMovimento = "9";
    }
    if (nomePortador.contains("OTT_OUD__ID1252313_EXTRATO 34276-9 02-2024")) {
        conta = "8";
        contaMovimento = "8";
    }
    if (nomePortador.contains("OTT_OUD__ID1253500_EXTRATO 34276-9 02-2024")) {
        conta = "8";
        contaMovimento = "8";
    }
    return conta;
}
public String getContaPortador2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros2(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros3(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros4(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros5(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros6(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaDesconto(String contaDesconto, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaDesconto;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMulta(String contaMulta, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("cntaJuros");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMulta;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public boolean getTratarComoExtrato(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoExtrato = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoExtrato;
}
public boolean getTratarComoDesconto(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoDesconto = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoDesconto;
}
public boolean getTratarComoJuros(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoJuros = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoJuros;
}
public boolean getTratarLinhaIgnorar(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarIgnoraLinha = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarIgnoraLinha;
}
public String getTratarValorAlternativo(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoAlternativo  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoAlternativo;
}
public String getTratarComoDiv(String documento, String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoDiv  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoDiv;
}
public String getCodigoClassificacao(String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String documento   = objHistorico.optString("documento");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoClassificacao  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoClassificacao;
}
public String getModificaData(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoData  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoData;
}
public String getCampoFiscal(String parametro, JSONObject objHistorico) {
    String especie         = objHistorico.optString("especie");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String returnaCodigo  = "";

    return returnaCodigo.trim();
}
public int getContadorCabecalho(int contador, String line) {
    return contador;
}
public double getValorPrincipal(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorPrincipal = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return valorPrincipal;
}
public String getHistorico(String conta, String histParam, String tipoLancamento, String nomeOrigem, String documento, 
                           String nomePortador, String complemento01, String complemento02, String complemento03, 
                           String nomeArquivo, String codCentroCusto) {
    String historico = "";
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getRegraHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("9R145-INATIVO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 9R145-INATIVO, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HISTORICOPADRAO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente nao contem HISTORICOPADRAO, HISTORICO = CFE Nro. Documento/NF FORNEC. Fornecedor/Cliente";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELIZABETE COSTA RICA TINTAS LTDA EPP"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ELIZABETE COSTA RICA TINTAS LTDA EPP, HISTORICO = Fornecedor/Cliente Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTALCOLOR TINTAS E REVESTIMENTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CRISTALCOLOR TINTAS E REVESTIMENTOS, HISTORICO = Fornecedor/Cliente Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PORTO SEGURO E CIA DE SEGUROS GERAIS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem PORTO SEGURO E CIA DE SEGUROS GERAIS, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANCO DO BRASIL S/A"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem BANCO DO BRASIL S/A, HISTORICO = FORNEC. Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANCO SICREDI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem BANCO SICREDI, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADESCO AUTO/RE COMPANHIA DE SEGUROS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem BRADESCO AUTO/RE COMPANHIA DE SEGUROS, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CESAR PEREIRA DE OLIVEIRA 03927694177"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CESAR PEREIRA DE OLIVEIRA 03927694177, HISTORICO = Fornecedor/Cliente Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLOS EDUARDO SILVERIO SANTANA - ME"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CARLOS EDUARDO SILVERIO SANTANA - ME, HISTORICO = Fornecedor/Cliente Documento/NF Complemento (03)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA DO LED LTDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CASA DO LED LTDA, HISTORICO = Fornecedor/Cliente Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSELHO REGIONAL DE ENGENHARIA E AGRONOMIA DE MAT"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CONSELHO REGIONAL DE ENGENHARIA E AGRONOMIA DE MAT, HISTORICO = Fornecedor/Cliente Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLEYTON FERNANDO AQUINO DA SILVA 04996077166"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CLEYTON FERNANDO AQUINO DA SILVA 04996077166, HISTORICO = Fornecedor/Cliente Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDIFICA ARQUITETURA E CONSTRUCAO LTDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem EDIFICA ARQUITETURA E CONSTRUCAO LTDA, HISTORICO = Fornecedor/Cliente Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FABIO TEIXEIRA GUIMARAES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem FABIO TEIXEIRA GUIMARAES, HISTORICO = Fornecedor/Cliente Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("INSS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem INSS, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARINA APARECIDA MORENO DA SILVA PEREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MARINA APARECIDA MORENO DA SILVA PEREIRA, HISTORICO = Fornecedor/Cliente Complemento (03)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("GPS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem GPS, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRIMAVERA MAQUINAS E IMPLEMENTOS AGRICOLAS LTDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem PRIMAVERA MAQUINAS E IMPLEMENTOS AGRICOLAS LTDA, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSIMEIRE RAMIRES KOCH BOCALAN CIA LTDA - EPP"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ROSIMEIRE RAMIRES KOCH BOCALAN CIA LTDA - EPP, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SATIRIO TEIXEIRA PABLOS 32055592823"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem SATIRIO TEIXEIRA PABLOS 32055592823, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JAIR AUGUSTO DA SILVA 78346592191"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem JAIR AUGUSTO DA SILVA 78346592191, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SECRETARIA DA RECEITA FEDERAL DO BRASIL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem SECRETARIA DA RECEITA FEDERAL DO BRASIL, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (01) contem FOLHA, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NELSON ALCIDES LOTTERMANN") && StringUtil.removeSpecialCharsToUC(documento).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem NELSON ALCIDES LOTTERMANN, Documento/NF contem FOLHA, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NELSON ALCIDES LOTTERMANN") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TRANSFERENCIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem NELSON ALCIDES LOTTERMANN, Complemento (01) contem TRANSFERENCIA, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALMIR DAL DEGRAN ME") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTORIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem VALMIR DAL DEGRAN ME, Complemento (01) contem CARTORIO, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GABRIEL FELIPE LOTTERMANN") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem GABRIEL FELIPE LOTTERMANN, Complemento (01) contem FOLHA, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEFAZ-SECRETARIA DE ESTADO DE FAZENDA MS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem SEFAZ-SECRETARIA DE ESTADO DE FAZENDA MS, Complemento (01) contem ICMS, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALLIANZ") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGUROS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALLIANZ, Fornecedor/Cliente contem SEGUROS, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem OI, Fornecedor/Cliente contem S, HISTORICO = Fornecedor/Cliente Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIBERTY") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGUROS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LIBERTY, Fornecedor/Cliente contem SEGUROS, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CIMENTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem J, Fornecedor/Cliente contem CIMENTOS, HISTORICO = Fornecedor/Cliente Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEFAZ-SECRETARIA DE ESTADO DE FAZENDA MS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("BAIXA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem SEFAZ-SECRETARIA DE ESTADO DE FAZENDA MS, Complemento (01) contem TAXA, Complemento (01) contem BAIXA, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MADEIREIRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RICA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MADEIREIRA, Fornecedor/Cliente contem COSTA, Fornecedor/Cliente contem RICA, HISTORICO = Fornecedor/Cliente Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VILSON") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VIANA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOVAIS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem VILSON, Fornecedor/Cliente contem VIANA, Fornecedor/Cliente contem NOVAIS, HISTORICO = Fornecedor/Cliente Documento/NF";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OSMAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOREIRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARAUJO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem OSMAR, Fornecedor/Cliente contem MOREIRA, Fornecedor/Cliente contem ARAUJO, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PISO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMPO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMPEZA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem PISO, Fornecedor/Cliente contem LIMPO, Fornecedor/Cliente contem COMERCIO, Fornecedor/Cliente contem LIMPEZA, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NUCLEO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COORD") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PONTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RENOVACAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem NUCLEO, Fornecedor/Cliente contem COORD, Fornecedor/Cliente contem PONTO, Complemento (01) contem RENOVACAO, HISTORICO = Fornecedor/Cliente Complemento (01)";
    
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RICA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ACO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem COSTA, Fornecedor/Cliente contem RICA, Fornecedor/Cliente contem FERRO, Fornecedor/Cliente contem ACO, HISTORICO = Fornecedor/Cliente Documento/NF";
    

    return historico.replaceAll("  "," ").trim();
}
public int getParcelaBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public int getTotalParcelas(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public String getMesAnoBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String mesAnoBase = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return mesAnoBase;
}
public double getTaxaTarifa(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorTaxaTarifa = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("VISTA")) {
        valorTaxaTarifa = 0.0319;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
        StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
        StringUtil.removeSpecialCharsToUC(complemento03).contains("PARC")) {
        valorTaxaTarifa = 0.0379;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_VRALIMENTACAO1")) {
        valorTaxaTarifa = 0.063;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SENFF")) {
        valorTaxaTarifa = 0.04;
    }
    return valorTaxaTarifa;
}
public String getHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("Historico Padrao"))    historico = "CFENro. " + documento + " FORNEC." + nomeOrigem + "CodigoHistorico:77";  //id -> 1727332.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANCO DO BRASIL S/A"))    historico = "FORNEC." + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1728675.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRADESCO AUTO/RE COMPANHIA DE SEGUROS"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1728936.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CESAR PEREIRA DE OLIVEIRA 03927694177"))    historico = "" + nomeOrigem + "" + documento + "CodigoHistorico:77";  //id -> 1728980.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLOS EDUARDO SILVERIO SANTANA - ME"))    historico = "" + nomeOrigem + "" + documento + "" + complemento03 + "CodigoHistorico:77";  //id -> 1728961.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CASA DO LED LTDA"))    historico = "" + nomeOrigem + "" + documento + "CodigoHistorico:77";  //id -> 1728973.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLEYTON FERNANDO AQUINO DA SILVA 04996077166"))    historico = "" + nomeOrigem + "" + documento + "CodigoHistorico:77";  //id -> 1728987.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELIZABETE COSTA RICA TINTAS LTDA EPP"))    historico = "" + nomeOrigem + "" + documento + "CodigoHistorico:77";  //id -> 1729024.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTALCOLOR TINTAS E REVESTIMENTOS"))    historico = "" + nomeOrigem + "" + documento + "CodigoHistorico:77";  //id -> 1729006.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDIFICA ARQUITETURA E CONSTRUCAO LTDA"))    historico = "" + nomeOrigem + "" + documento + "CodigoHistorico:77";  //id -> 1729016.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FABIO TEIXEIRA GUIMARAES"))    historico = "" + nomeOrigem + "" + documento + "";  //id -> 1729044.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("INSS"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729138.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARINA APARECIDA MORENO DA SILVA PEREIRA"))    historico = "" + nomeOrigem + "" + complemento03 + "CodigoHistorico:77";  //id -> 1729133.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("GPS"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729143.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NELSON ALCIDES LOTTERMANN") && StringUtil.removeSpecialCharsToUC(documento).contains("FOLHA"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729148.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NELSON ALCIDES LOTTERMANN") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TRANSFERENCIA"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729151.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GABRIEL FELIPE LOTTERMANN") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729113.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RICA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERRO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ACO"))    historico = "" + nomeOrigem + "" + documento + "CodigoHistorico:77";  //id -> 1799216.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALLIANZ") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGUROS"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1799252.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIBERTY") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGUROS"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1800081.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("FOLHA"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1800149.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VILSON") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VIANA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOVAIS"))    historico = "" + nomeOrigem + "" + documento + "CodigoHistorico:77";  //id -> 1800113.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEFAZ-SECRETARIA DE ESTADO DE FAZENDA MS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ICMS"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729232.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("LICENCIAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DETRAN"))    historico = "CodigoHistorico:77";  //id -> 2817475.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JAIR AUGUSTO DA SILVA 78346592191"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729124.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DANIELLI MONTEIRO"))    historico = "CodigoHistorico:77";  //id -> 2856174.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RISTOF AUTO ELETRICA LTDA"))    historico = "CodigoHistorico:77";  //id -> 2858434.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ORGANIZACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTABIL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA"))    historico = "CodigoHistorico:77";  //id -> 2858347.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RECH") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AGRICOLA"))    historico = "CodigoHistorico:77";  //id -> 2858390.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BARBOSA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA"))    historico = "CodigoHistorico:77";  //id -> 2858540.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODOBENS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOCACAO"))    historico = "CodigoHistorico:77";  //id -> 2858462.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANTA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUZIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MEDICOS"))    historico = "CodigoHistorico:77";  //id -> 2858514.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOY AGRI COMMODITIES LTDA"))    historico = "CodigoHistorico:77";  //id -> 2858701.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOMPO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGUROS"))    historico = "" + complemento01 + "";  //id -> 2858671.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRITZKE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CIA"))    historico = "CodigoHistorico:77";  //id -> 2858888.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRC RIBEIRO LTDA"))    historico = "CodigoHistorico:77";  //id -> 2859001.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ICATU SEGUROS"))    historico = "" + nomeOrigem + "";  //id -> 2856487.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OSMAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOREIRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARAUJO"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1800106.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("L") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("M") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELETRICA"))    historico = "CodigoHistorico:77";  //id -> 2871229.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("1"))    historico = "CodigoHistorico:77";  //id -> 2869457.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SCHMITZ") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("&") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HERDT") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTES"))    historico = "CodigoHistorico:77";  //id -> 2869813.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROMAGNOLO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(",") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIACESKI"))    historico = "CodigoHistorico:77";  //id -> 2871235.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AFFA RETIFICA DE MOTORES EIRELI"))    historico = "CodigoHistorico:77";  //id -> 2844606.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("A R S MATERIAIS PARA CONSTRUCAO LTDA"))    historico = "CodigoHistorico:77";  //id -> 2844669.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLAUDIO AUTO PECAS DO VALE LTDA"))    historico = "CodigoHistorico:77";  //id -> 2856100.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSTRUFORT MATERIAIS DE CONSTRUCAO LTDA ME"))    historico = "CodigoHistorico:77";  //id -> 2856123.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DELLFER BOMBAS INJETORAS LTDA ME"))    historico = "CodigoHistorico:77";  //id -> 2856189.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRACIELE TOSTA SILVA ME"))    historico = "CodigoHistorico:77";  //id -> 2856371.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HIDRAUPECAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS"))    historico = "CodigoHistorico:77";  //id -> 2856448.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J JUNIOR POSSAMAI"))    historico = "CodigoHistorico:77";  //id -> 2856503.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HEBBERTH") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOREIRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA"))    historico = "CodigoHistorico:77";  //id -> 2856428.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOAO BATISTA BARBOSA"))    historico = "CodigoHistorico:77";  //id -> 2856513.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NOVO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COM"))    historico = "CodigoHistorico:77";  //id -> 2858216.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("O") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("P") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANTA"))    historico = "CodigoHistorico:77";  //id -> 2858327.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PNEULANDIA COMERCIAL LTDA"))    historico = "CodigoHistorico:77";  //id -> 2858356.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOLIDA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIST") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EQUIP"))    historico = "CodigoHistorico:77";  //id -> 2858625.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TODIMO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATERIAIS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PARA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSTRUCAO"))    historico = "CodigoHistorico:77";  //id -> 2858912.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WG AGRICULTURE LTDA"))    historico = "CodigoHistorico:77";  //id -> 2859785.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PETROLEO QUERENCIA LTDA"))    historico = "" + complemento01 + "CodigoHistorico:77";  //id -> 1729176.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRIMAVERA MAQUINAS E IMPLEMENTOS AGRICOLAS LTDA"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729198.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PISO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMPO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMPEZA"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729184.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSIMEIRE RAMIRES KOCH BOCALAN CIA LTDA - EPP"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729216.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SATIRIO TEIXEIRA PABLOS 32055592823"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729225.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALMIR DAL DEGRAN ME") && StringUtil.removeSpecialCharsToUC(complemento01).contains("CARTORIO"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729253.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("STARLINK") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRAZIL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERNET"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729248.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SECRETARIA DA RECEITA FEDERAL DO BRASIL"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729230.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FABIO RODRIGUES DA SILVA"))    historico = "CodigoHistorico:77";  //id -> 2417132.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROGERIO TEIXEIRA DE SOUSA"))    historico = "" + documento + "CodigoHistorico:77";  //id -> 2417160.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSELHO REGIONAL DE ENGENHARIA E AGRONOMIA DE MAT"))    historico = "" + nomeOrigem + "" + documento + "";  //id -> 1728996.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GMAD CAMPO GRANDE SUPRIMENTOS PARA MOVEIS LTDA EPP"))    historico = "" + documento + "CodigoHistorico:77";  //id -> 2417143.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E & L VIDRACARIA LTDA"))    historico = "" + documento + "CodigoHistorico:77";  //id -> 2417120.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEM PARAR INSTITUICAO DE PAGAMENTO LTDA."))    historico = "" + documento + "CodigoHistorico:77";  //id -> 2417180.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RONALDO RAMIRES KOCH"))    historico = "" + documento + "CodigoHistorico:77";  //id -> 2417170.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("STARLINK BRAZIL SERVICO DE INTERNET LTDA"))    historico = "CodigoHistorico:77";  //id -> 2417190.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NUCLEO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COORD") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PONTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("RENOVACAO"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729166.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEFAZ-SECRETARIA DE ESTADO DE FAZENDA MS") && StringUtil.removeSpecialCharsToUC(complemento01).contains("TAXA") && StringUtil.removeSpecialCharsToUC(complemento01).contains("BAIXA"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729238.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ATIVA MATERIAIS ELETRICOS LTDA"))    historico = "CodigoHistorico:77";  //id -> 2844847.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BALTAZAR FRIZZO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("PGTO") && StringUtil.removeSpecialCharsToUC(complemento01).contains("ADTO"))    historico = "CodigoHistorico:77";  //id -> 2844872.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIGOLIN ROLAMENTOS E RETENTORES LTDA"))    historico = "CodigoHistorico:77";  //id -> 2856044.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CADORE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BIDOIA"))    historico = "CodigoHistorico:77";  //id -> 2856057.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MATEUS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALBERTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAMBROS"))    historico = "CodigoHistorico:77";  //id -> 2856668.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA LIZIE ROMAO PEREIRA"))    historico = "CodigoHistorico:77";  //id -> 2856639.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSE ALCIDES SIMPLICIO"))    historico = "" + complemento01 + "";  //id -> 2856562.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MELLOS TRANSPORTES LTDA"))    historico = "CodigoHistorico:77";  //id -> 2856894.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("L") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MENDONCA"))    historico = "CodigoHistorico:77";  //id -> 2856856.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("METALSEL LTDA"))    historico = "CodigoHistorico:77";  //id -> 2857318.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNICAR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERVICOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTOMOTIVOS"))    historico = "CodigoHistorico:77";  //id -> 2859513.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MADEIREIRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RICA"))    historico = "" + nomeOrigem + "" + documento + "CodigoHistorico:77";  //id -> 1800052.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CIMENTOS"))    historico = "" + nomeOrigem + "" + documento + "CodigoHistorico:77";  //id -> 1800041.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("S"))    historico = "" + nomeOrigem + "" + documento + "CodigoHistorico:77";  //id -> 1800091.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VRA COMERCIO LTDA"))    historico = "CodigoHistorico:77";  //id -> 2859776.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VISION") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ART") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMUNICACAO"))    historico = "CodigoHistorico:77";  //id -> 2859760.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VITORIA COMERCIO DE TINTAS LTDA"))    historico = "CodigoHistorico:77";  //id -> 2859770.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PORTO SEGURO E CIA DE SEGUROS GERAIS"))    historico = "" + nomeOrigem + "" + complemento01 + "CodigoHistorico:77";  //id -> 1729191.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MM") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARTEFATOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MADEIRA"))    historico = "CodigoHistorico:77";  //id -> 2858194.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ARAUJO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("&") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VARGAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA"))    historico = "CodigoHistorico:77";  //id -> 2869405.00
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADM DO BRASIL LTDA"))    historico = "" + nomeOrigem + "";  //id -> 2869379.00
    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TABELIONATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGISTRO"))    historico = "CodigoHistorico:77";  //id -> 2869447.00

    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra3(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra4(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra5(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra6(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoPortador2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getCentroCusto(String CentroCusto, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto) {
          String retornaCentroCusto = CentroCusto;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaCentroCusto;
}
public String getTabelaContabil(String TabelaContabil, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaTabelaContabil = TabelaContabil;
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaTabelaContabil;
}
public String getParticipante(String participante, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, String complemento04, String complemento05, 
                             String nomeArquivo) {
          String retornaParticipantePai = participante;
    complemento04 = "";
    complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaParticipantePai;
}
public String getFilial(String codFilial, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03, 
                             String nomeArquivo, String codCentroCusto, String filial) {
          String retornaFilial = codFilial;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaFilial;
}
public String getRegrasParaAcumular(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String getRegrasParaAcumularPortador(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String  getReplaceTermos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = "";
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return parametro2.trim();
}
public String  getReplaceTermosAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double numeroAba  		= objHistorico.optDouble("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("GERENCIAL") && parametro.equals("complemento02")) lote = lote.replace("GERENCIAL","808");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && parametro.equals("complemento02")) lote = lote.replace("FAZ BACURY","808");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MORADA NOVA") && parametro.equals("complemento02")) lote = lote.replace("FAZENDA MORADA NOVA","809");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PARANA E IMBIRUSSU") && parametro.equals("complemento02")) lote = lote.replace("FAZENDA PARANA E IMBIRUSSU","812");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ZANG") && parametro.equals("complemento02")) lote = lote.replace("FAZENDA ZANG","811");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MORADA DO SONHO XINGU") && parametro.equals("complemento02")) lote = lote.replace("FAZENDA MORADA DO SONHO XINGU","810");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MARALITA") && parametro.equals("complemento02")) lote = lote.replace("FAZENDA MARALITA","810");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && parametro.equals("complemento02")) lote = lote.replace("FAZENDA BACURY","808");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MORADA NOVA") && parametro.equals("complemento02")) lote = lote.replace("FAZ MORADA NOVA","809");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PARANA E IMBIRUSSU") && parametro.equals("complemento02")) lote = lote.replace("FAZ PARANA E IMBIRUSSU","812");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PARANA E IMBIRUSSU") && parametro.equals("complemento02")) lote = lote.replace("FAZ PARANA","812");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("PARANA E IMBIRUSSU") && parametro.equals("complemento02")) lote = lote.replace("FAZENDA PARANA","812");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("ZANG") && parametro.equals("complemento02")) lote = lote.replace("FAZ ZANG","811");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento03).contains("MORADA DO SONHO XINGU") && parametro.equals("complemento02")) lote = lote.replace("FAZ MORADA DO SONHO XINGU","810");

    return lote.trim();
}
public String  getLimpaCampos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");

    return lote.trim();
}
public String  getLimpaCamposAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && parametro.equals("nomePortador")) lote = cutString(lote,0,".XLSX"); //ROT-2023-0871578
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && !StringUtil.removeSpecialCharsToUC(complemento01).contains("NF") && parametro.equals("documento")) lote = ""; //ROT-2023-0871578
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && parametro.equals("documento")) lote = cutString(lote,"NF","-"); //ROT-2023-0871578

    return lote.trim();
}
public String getTipoGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String graph = "";

    //feito para manter o legado sem problemas, sera sobreposto por regras! ;-)
    //tipos esperados: Column, Multiple_Column_Stacked, Multiple_Columns, Line, Multiple_Lines, Pie, Donut
    //Card refere-se ao Lucro/Prejuizo
    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    if (complemento01.startsWith("07") || complemento01.startsWith("12")) graph = "CardChart";

    if (complemento01.startsWith("01") || complemento01.startsWith("02") || complemento01.startsWith("04") || 
    	complemento01.startsWith("08") || complemento01.startsWith("09") || complemento01.startsWith("10") || 
    	complemento01.startsWith("11") || complemento01.startsWith("21"))  graph = "ColumnChart";

    if (complemento01.startsWith("15") || complemento01.startsWith("16") || complemento01.startsWith("17")) 
    	graph = "ColumnChartStacked";

    if (complemento01.startsWith("05") || complemento01.startsWith("06")) graph = "LineChart";

    if (complemento01.startsWith("18") || complemento01.startsWith("19") || complemento01.startsWith("20")) 
    	graph = "LineChartMultiple";

    if (complemento01.startsWith("03") || complemento01.startsWith("13") || complemento01.startsWith("14")) 
    	graph = "DonutChart";

    return graph;
}
public String getSimboloValor(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String simboloValor = "R$";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return simboloValor.replaceAll("Nenhum","");
}
public String getSeriesGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String series = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return series;
}
public String getTituloGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String Titulo_Grafico = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return Titulo_Grafico;
}
public String getColunaAlternativa(String parametro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String retornaColunas  = "";

    return retornaColunas.replace(",",";").trim();
}
//FINALPARAMETRIZACAOREGRAS


/*#############################################@ EXTRATO-SANTANDER-EXCEL @##############################################*/
public boolean readExtratoSantanderDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	boolean hasNewChave = false; 
    if(jDados.has("HASNEWCHAVE"))  hasNewChave  = jDados.optBoolean("HASNEWCHAVE"); 
    String tipoLancamento    = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String tipoLayout        = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
	
	int ivalorDocumento    = 4;
    int idataMovimento   = 0;
    int inomeOrigem    = 2;
    int idocumento    = 3;
    String linha = "";

    if(jDados.has("LINE"))         linha        = jDados.optString("LINE");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLAYOUT"))  tipoLayout  = jDados.optString("TIPOLAYOUT");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

	if(!tipoLayout.contains("002")){

        if(!linha.equals("")){
            // logger.logDebug("LINHAZINHA " + linha);
            String [] head = linha.toUpperCase().split("\\|");
            
            if (!linha.contains("\\|") && linha.contains(";"))
                head = linha.toUpperCase().split(";");
            
            for(int h = 0; h < head.length;h++){
                if(head[h].contains("DATA")) idataMovimento = h;
                if(head[h].contains("HIST")) inomeOrigem = h;
                if(head[h].contains("DOCUMENTO")) idocumento = h;
                if(head[h].contains("VALOR")) ivalorDocumento = h;
            }
        }
        
        while (memFile.hasNextLine()) {

            try {
                String line = memFile.nextLine();
                line = StringUtil.removeSpecialCharsToUC(line);

                complemento01   = nomePortador;
                complemento02   = "";
                complemento03   = "";
                complemento04   = "";
                complemento05   = "";

                complemento06   = "";
                complemento07   = "";
                complemento08   = "";
                complemento09   = "";
                complemento10   = "";

                cpfCnpj         = "";

                nomeOrigem      = "";
                documento       = "";
                historico       = "";

                valorDocumento  = 0;
                valorJuros      = 0;
                valorDesconto   = 0;
                valorMulta      = 0;
                valorPagamento  = 0;

                if (memFile.getStringField(idataMovimento).equals("")) continue;
                String dataString = memFile.getStringField(idataMovimento);
                if (!dataString.equals("")) {
                    String dataMovimentoAux	  = getCampoDate(dataString);
                    if (dataMovimentoAux.contains("/")) {
                        dataMovimento     = getCampoDate(dataString);
                        dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                        
                    }
                    if (!dataString.equals("") && dataMovimento.equals("")) {
                        if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
                            // logger.logDebug("pattern");
                            String pattern = "";
                            if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
                                if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
                                    pattern = "yyyy-MM-dd hh:mm:ss";
                                } else {
                                    pattern = "yyyy-MM-dd";
                                }
                                dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
                            } else {
                                try {
                                    // logger.logDebug("pattern ddddd");
                                    pattern = "ddddd";
                                    dataString = cutString(dataString, 0, 5);
                                    Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
                                    int datanum = Integer.parseInt(dataString);
                                    Calendar calSerial = Calendar.getInstance();
                                    calSerial.setTime(dt);
                                    calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
                                    dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
                                } catch (Exception dt2) {dataMovimento = "";}
                            }
                            // if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                        }
                    }
                }
                
                try {
                    valorDocumento = memFile.getDoubleField(ivalorDocumento);
                } catch (Exception valorException01) {
                    valorDocumento = 0;
                }
                
                // logger.logDebug("VEDEEE E " + ivalorDocumento + " | " + valorDocumento + " | " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
                
                if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
                if (valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                if (valorDocumento == 0) continue;

                valorDocumento = Math.abs(valorDocumento);
                documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
                complemento02 = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
                if (nomeOrigem.contains("INTERNET")) nomeOrigem = nomeOrigem.substring(nomeOrigem.indexOf("INTERNET")+8).trim();

                extrato = new ExtratoModel();
						
				extrato.setCodEmpresa(codEmpresa);
				//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
				extrato.setDataMovimento(dataMovimento);
				//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
				extrato.setDocumento(documento);
				//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
				extrato.setNomePortador(nomePortador);
				//logger.logInfo("GET NP = "+extrato.getNomePortador());
				extrato.setNomeOrigem(nomeOrigem);
				//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
				extrato.setLote(nomeArquivo.toUpperCase());
				//logger.logInfo("GET LOTE = "+extrato.getLote());
				extrato.setComplemento02(complemento02);
				//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
				extrato.setValorDocumento(valorDocumento);
				//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
				extrato.setDebitoCredito(debitoCredito);
				//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
				extrato.setTipoLancamento(tipoLancamento);
				//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
				extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
				logger.logDebug("GET CHAVE = "+extrato.getChave());
				
				try{
					jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
				}catch(Exception e){
					logger.logError("Erro extrato abc" + e.getMessage());
				}
            } catch (Exception readExtratoException) {
                logger.logError("Erro de leitura de Extrato Padr㯠Santander", readExtratoException);
            }
        }

    }

    if(tipoLayout.contains("002")){

        ivalorDocumento       = 5;
        idataMovimento        = 4;
        inomeOrigem           = 1;
		int inomePortador     = 0;
        int icomplemento01    = 6;

        while (memFile.hasNextLine()) {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
            
            
            try {
                
                try{
                    String dia = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).substring(0,2).trim();
                    String mes = getMonth(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).substring(3,6).trim());
                    String ano = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).substring(7,11).trim();
                    String dataAux = dia + "/" + mes + "/" + ano;
                    dataMovimento     = getCampoDate(dataAux, "", "dd/MM/yyyy");
                    dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                }catch(Exception e){
                    continue;
                }
                
                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

                debitoCredito = "";
                try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                catch (Exception vlrd) { valorDocumento = 0; }
                if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
                valorDocumento = Math.abs(valorDocumento);

                if (valorDocumento == 0) continue;
				
				nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador);
				complemento01 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento01);

                extrato = new ExtratoModel();
						
				extrato.setCodEmpresa(codEmpresa);
				//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
				extrato.setDataMovimento(dataMovimento);
				//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
				extrato.setDocumento(documento);
				//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
				extrato.setNomePortador(nomePortador);
				//logger.logInfo("GET NP = "+extrato.getNomePortador());
				extrato.setNomeOrigem(nomeOrigem);
				//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
				extrato.setLote(nomeArquivo.toUpperCase());
				//logger.logInfo("GET LOTE = "+extrato.getLote());
				extrato.setComplemento02(complemento02);
				//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
				extrato.setValorDocumento(valorDocumento);
				//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
				extrato.setDebitoCredito(debitoCredito);
				//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
				extrato.setTipoLancamento(tipoLancamento);
				//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
				extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
				logger.logDebug("GET CHAVE = "+extrato.getChave());
				
				try{
					jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
				}catch(Exception e){
					logger.logError("Erro extrato abc" + e.getMessage());
				}
            } catch (Exception ex) {
            }
        
        
    }

        

    }
    return true;
}


/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    //USADO -> Vipcontabilidade.MiequipamentosContas_Pagas
    JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;
	
	logger.logDebug("METODO 1");
    //Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	boolean hasNewChave = false; 
    if(jDados.has("HASNEWCHAVE"))  hasNewChave  = jDados.optBoolean("HASNEWCHAVE"); 
    String tipoLancamento    = "";
  
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
  
    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String qualPadrao        = "";
  
    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
	boolean f = false;
    boolean naoLeMais = false;
  
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
  
    while (memFile.hasNextLine()) {
  
        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
			if (line.contains("S A L D O")){ f = true; continue;}
			if (line.contains("DT") && line.contains("MOVIMENTO") && line.contains("BALANCETE")){ f = false; }
			if(f) continue;
            if ((line.startsWith("AGENCIA") || line.startsWith("AGINCIA") ) || (line.startsWith("CONTA") && line.contains("CORRENTE"))) {
                String nomePortadorAuxiliar = line.substring(line.indexOf("  ")).trim();
                if (nomePortadorAuxiliar.contains(" ")) {
                    nomePortadorAuxiliar = nomePortadorAuxiliar.substring(0, nomePortadorAuxiliar.indexOf(" "));
                }
				if ((line.startsWith("AGENCIA") || line.startsWith("AGINCIA") ) && line.contains("CONTA")) {
					// nomePortadorAuxiliar = line.substring(line.indexOf("CONTA:")).trim();
					nomePortadorAuxiliar = cutString(line, "CONTA:", line.length());
					
				}
				
                nomePortador = String.format(
                    "%s %s",
                    nomePortador,
                    nomePortadorAuxiliar
                );
  
                continue;
            }
  
  
            complemento01   = nomePortador;
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";
  
            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";
  
            cpfCnpj         = "";
  
            historico       = "";
  
            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;
  
            if (line.startsWith("DT. MOVIMENTO") && line.contains("LOTE")){
              qualPadrao = "PADRAO 1";
			  continue;
            }
            if (line.startsWith("DT. MOVIMENTO") && !line.contains("LOTE")){
              qualPadrao = "PADRAO 2";
			  continue;
            }
			
			if(line.contains("DATA") && line.contains("SALDO PREVISTO") && line.contains("HISTORICO") && line.contains("DOCUMENTO") && line.contains("VALOR")){
				// logger.logInfo("Valida PADRAO 03");
				qualPadrao = "PADRAO 3";
				continue;
			}
  
            if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
				
                if (qualPadrao.equals("PADRAO 1") && line.length() < 128){
					continue;
				}
                if (qualPadrao.equals("PADRAO 2") && line.length() > 128){
					continue;
				}
                
                //Data Movimento.
                if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
                    try {
                        dataMovimento = line.substring( 0, 10 );
                        Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
                        dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
                        dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );

                    } catch (Exception dte) { continue; }
                }
                if (dataMovimento.equals("")) continue;
                if (qualPadrao.equals("PADRAO 1")){
                    debitoCredito = StringUtil.removeSpecialCharsToUC(line.substring( 127, 128 )).trim();
  
                    nomeOrigem    = StringUtil.removeSpecialChars(line.substring( 57, 90 )).trim().toUpperCase();
  
                    try{
						documento = StringUtil.removeSpecialChars(line.substring( 92, 112 )).trim().toUpperCase();
					}catch(Exception e){
						logger.logDebug("ERRO: "+e.getMessage()+" - "+line);
					}
                    complemento02 = "Documento:" + documento;
  
                    strValorDocumento = "0";
                    try{
                        strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 111, 127 )).trim().toUpperCase();
                        strValorDocumento    = strValorDocumento.replaceAll("\\.","").replaceAll("-","");
  
                        valorDocumento = DecimalUtil.toDecimal(strValorDocumento);
                    } catch (Exception vlrx) {
                        valorDocumento = 0;
                    }
                }
                if (qualPadrao.equals("PADRAO 2")){
                    try{
						debitoCredito = StringUtil.removeSpecialChars(line.substring( 87, 90 )).trim().toUpperCase();
					}catch(Exception e){
						try{
							debitoCredito = StringUtil.removeSpecialCharsToUC(line.substring( line.trim().length() - 1, line.trim().length() )).trim();
						}catch(Exception e){
							logger.logDebug("ERRO: "+e.getMessage()+" - "+line);
						}
					}
                    nomeOrigem    = StringUtil.removeSpecialChars(line.substring( 28, 52 )).trim().toUpperCase();
					
					try{
						documento = StringUtil.removeSpecialChars(line.substring( 52, 71 )).trim().toUpperCase();						
					}catch(Exception e){
						logger.logDebug("ERRO: "+e.getMessage()+" - "+line);
					}
  
                    complemento02 = "Documento:" + documento;
  
                    strValorDocumento = "0";
                    try{
                        strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 72, 86 )).trim().toUpperCase();
                        strValorDocumento    = strValorDocumento.replaceAll("\\.","").replaceAll("-","");
  
                        valorDocumento = DecimalUtil.toDecimal(strValorDocumento);
                    } catch (Exception vlrx) {
                        valorDocumento = 0;
                    }
                }
				
				if (qualPadrao.equals("PADRAO 3")){
					// logger.logInfo("ENTROU PADRAO 3");
                    try{
						debitoCredito = StringUtil.removeSpecialChars(line.substring( 81, 84 )).trim().toUpperCase();
					}catch(Exception e){
						try{
							debitoCredito = StringUtil.removeSpecialCharsToUC(line.substring( line.trim().length() - 1, line.trim().length() )).trim();
						}catch(Exception e){
							logger.logDebug("ERRO: "+e.getMessage()+" - "+line);
						}
					}
                    nomeOrigem    = StringUtil.removeSpecialChars(line.substring( 11, 46 )).trim().toUpperCase();
					
					try{
						documento = StringUtil.removeSpecialChars(line.substring( 45, 69 )).trim().toUpperCase();						
					}catch(Exception e){
						logger.logDebug("ERRO: "+e.getMessage()+" - "+line);
					}
  
                    complemento02 = "Documento:" + documento;
  
                    strValorDocumento = "0";
                    try{
                        strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 67, 81 )).trim().toUpperCase();
                        strValorDocumento    = strValorDocumento.replaceAll("\\.","").replaceAll("-","");
  
                        valorDocumento = DecimalUtil.toDecimal(strValorDocumento);
                    } catch (Exception vlrx) {
                        valorDocumento = 0;
                    }
					
					// logger.logInfo("DT -> " + dataMovimento + " |np -> " + nomePortador + " |DC _> " + debitoCredito + " |nO -> " + nomeOrigem + " |cpl02 -> " + complemento02 + " |vd -> " + valorDocumento + " |strValorDocumento -> " + strValorDocumento);
                } 
  
				if(valorDocumento == 0) dataMovimento = "";
				if(valorDocumento == 0) continue;
  
				if (debitoCredito.contains("C")) {
					debitoCredito = "EXTRATO-CREDITO";
				}else{
                    if (debitoCredito.contains("D")) {
                      debitoCredito = "EXTRATO-DEBITO";
                    } else {
                      continue;
                    }
				}
  
  
            }else{
				// gui -> 12/07/2024 - 2406-043720
                // Atualizar o nomeOrigem na linha que ele quebra, a validacao antiga duplicava os lançamentos.
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("HISTORICO")
                            .where("CHAVE = ? ")
                            .param(nomeOrigem + line.trim())
                            .param(extrato.getChave())
                            .execute();
                    continue;
                } catch (Exception sqlUpdateException) {
                }
				/*complemento02 = line.trim();
                nomeOrigem += " " + complemento02.trim();
                complemento02 = String.format("%s Documento:%s", complemento02, documento);*/
            }
  
            if (dataMovimento.trim().equals("")) continue;
  
            if(naoLeMais) continue;
            if(nomeOrigem.length() > 200)  nomeOrigem = nomeOrigem.substring(0, 199);
            
			extrato = new ExtratoModel();
						
			extrato.setCodEmpresa(codEmpresa);
			//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
			extrato.setDataMovimento(dataMovimento);
			//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
			extrato.setDocumento(documento);
			//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
			extrato.setNomePortador(nomePortador);
			//logger.logInfo("GET NP = "+extrato.getNomePortador());
			extrato.setNomeOrigem(nomeOrigem);
			//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
			extrato.setLote(nomeArquivo.toUpperCase());
			//logger.logInfo("GET LOTE = "+extrato.getLote());
			extrato.setComplemento02(complemento02);
			//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
			extrato.setValorDocumento(valorDocumento);
			//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
			extrato.setDebitoCredito(debitoCredito);
			//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
			extrato.setTipoLancamento(tipoLancamento);
			//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
			extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
			logger.logDebug("GET CHAVE = "+extrato.getChave());
			
			try{
				jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
			}catch(Exception e){
				logger.logError("Erro extrato abc" + e.getMessage());
			}
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }
  
    return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

  //USADO -> Vipcontabilidade.MiequipamentosContas_Pagas
  JSONObject extratoEmpresa = new JSONObject();
  
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;
	
  //Inicializacao de Variaveis
  String codEmpresa        = "";
  String nomeArquivo       = "";
  String chaveExtrato      = "";
  boolean hasNewChave = false; 
    if(jDados.has("HASNEWCHAVE"))  hasNewChave  = jDados.optBoolean("HASNEWCHAVE"); 
    String tipoLancamento    = "";

  String documento         = "";
  String nomeOrigem        = "";
  String dataMovimento     = "";
  String dataLote          = "";
  String complemento01     = "";
  String complemento02     = "";
  String complemento03     = "";
  String complemento04     = "";
  String complemento05     = "";
  String complemento06     = "";
  String complemento07     = "";
  String complemento08     = "";
  String complemento09     = "";
  String complemento10     = "";
  String debitoCredito     = "";
  String cpfCnpj           = "";
  String historico         = "";

  String strValorDocumento = "";
  String contLinhaExtrato  = "";
  String qualPadrao        = "";

  double valorDocumento    = 0.0;
  double valorJuros        = 0.0;
  double valorDesconto     = 0.0;
  double valorMulta        = 0.0;
  double valorPagamento    = 0.0;

  boolean naoLeMais = false;

  if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
  if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
  if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

  while (memFile.hasNextLine()) {

      try {
          String line = memFile.nextLine();
          line = StringUtil.removeSpecialCharsToUC(line);

          if (line.startsWith("AGENCIA") || (line.startsWith("CONTA") && line.contains("CORRENTE"))) {
              String nomePortadorAuxiliar = line.substring(line.indexOf("  ")).trim();
              if (nomePortadorAuxiliar.contains(" ")) {
                  nomePortadorAuxiliar = nomePortadorAuxiliar.substring(0, nomePortadorAuxiliar.indexOf(" "));
              }
              nomePortador = String.format(
                  "%s %s",
                  nomePortador,
                  nomePortadorAuxiliar
              );

              continue;
          }


          complemento01   = nomePortador;
          complemento02   = "";
          complemento03   = "";
          complemento04   = "";
          complemento05   = "";

          complemento06   = "";
          complemento07   = "";
          complemento08   = "";
          complemento09   = "";
          complemento10   = "";

          cpfCnpj         = "";

          historico       = "";

          valorJuros      = 0;
          valorDesconto   = 0;
          valorMulta      = 0;
          valorPagamento  = 0;

          if (line.startsWith("DT. MOVIMENTO") && line.contains("LOTE")){
            qualPadrao = "PADRAO 1";
          }
          if (line.startsWith("DT. MOVIMENTO") && !line.contains("LOTE")){
            qualPadrao = "PADRAO 2";
          }

          if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
              if (qualPadrao.equals("PADRAO 1") && line.length() < 128) continue;
              if (qualPadrao.equals("PADRAO 2") && line.length() > 128) continue;
              if (line.contains("S A L D O")) continue;

              //Data Movimento.
              if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
                  try {
                      dataMovimento = line.substring( 0, 10 );
                      Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
                      dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
                      dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
                  } catch (Exception dte) { continue; }
              }
              if (dataMovimento.equals("")) continue;
              if (qualPadrao.equals("PADRAO 1")){
                  debitoCredito = StringUtil.removeSpecialCharsToUC(line.substring( 127, 128 )).trim();

                  nomeOrigem    = StringUtil.removeSpecialChars(line.substring( 57, 90 )).trim().toUpperCase();

                  documento = StringUtil.removeSpecialChars(line.substring( 92, 112 )).trim().toUpperCase();

                  complemento02 = "Documento:" + documento;

                  strValorDocumento = "0";
                  try{
                      strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 111, 127 )).trim().toUpperCase();
                      strValorDocumento    = strValorDocumento.replaceAll("\\.","").replaceAll("-","");

                      valorDocumento = DecimalUtil.toDecimal(strValorDocumento);
                  } catch (Exception vlrx) {
                      valorDocumento = 0;
                  }
                }
                if (qualPadrao.equals("PADRAO 2")){
					debitoCredito = StringUtil.removeSpecialChars(line.substring( 87, 90 )).trim().toUpperCase();
					//debitoCredito = StringUtil.removeSpecialCharsToUC(line.substring( line.trim().length() - 1, line.trim().length() )).trim();

                  nomeOrigem    = StringUtil.removeSpecialChars(line.substring( 28, 52 )).trim().toUpperCase();

                  documento = StringUtil.removeSpecialChars(line.substring( 53, 71 )).trim().toUpperCase();

                  complemento02 = "Documento:" + documento;

                  strValorDocumento = "0";
                  try{
                      strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 72, 86 )).trim().toUpperCase();
                      strValorDocumento    = strValorDocumento.replaceAll("\\.","").replaceAll("-","");

                      valorDocumento = DecimalUtil.toDecimal(strValorDocumento);
                  } catch (Exception vlrx) {
                      valorDocumento = 0;
                  }
                }

                if(valorDocumento == 0) dataMovimento = "";
                if(valorDocumento == 0) continue;

                if (debitoCredito.contains("C")) {
                  debitoCredito = "EXTRATO-CREDITO";
                } else {
                  if (debitoCredito.contains("D")) {
                    debitoCredito = "EXTRATO-DEBITO";
                  } else {
                    continue;
                  }
                }


			} else {
				complemento02 = line.trim();

				complemento02 = String.format("%s Documento:%s", complemento02, documento);
			}

			if (dataMovimento.trim().equals("")) continue;

			if(naoLeMais) continue;

			extrato = new ExtratoModel();
						
			extrato.setCodEmpresa(codEmpresa);
			//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
			extrato.setDataMovimento(dataMovimento);
			//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
			extrato.setDocumento(documento);
			//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
			extrato.setNomePortador(nomePortador);
			//logger.logInfo("GET NP = "+extrato.getNomePortador());
			extrato.setNomeOrigem(nomeOrigem);
			//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
			extrato.setLote(nomeArquivo.toUpperCase());
			//logger.logInfo("GET LOTE = "+extrato.getLote());
			extrato.setComplemento02(complemento02);
			//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
			extrato.setValorDocumento(valorDocumento);
			//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
			extrato.setDebitoCredito(debitoCredito);
			//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
			extrato.setTipoLancamento(tipoLancamento);
			//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
			extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
			logger.logDebug("GET CHAVE = "+extrato.getChave());
			
			try{
				jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
			}catch(Exception e){
				logger.logError("Erro extrato abc" + e.getMessage());
			}
      } catch(Exception e) {
          logger.logError("ERRO: ", e);
      }
  }

  return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;
	
	logger.logDebug("METODO 3");

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	boolean hasNewChave = false; 
    if(jDados.has("HASNEWCHAVE"))  hasNewChave  = jDados.optBoolean("HASNEWCHAVE"); 
    String tipoLancamento    = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if (line.startsWith("AGENCIA") || (line.startsWith("CONTA") && line.contains("CORRENTE"))) {
                String nomePortadorAuxiliar = line.substring(line.indexOf("  ")).trim();
                if (nomePortadorAuxiliar.contains(" ")) {
                    nomePortadorAuxiliar = nomePortadorAuxiliar.substring(0, nomePortadorAuxiliar.indexOf(" "));
                }
                nomePortador = String.format(
                    "%s %s",
                    nomePortador,
                    nomePortadorAuxiliar
                );

                continue;
            }

            complemento01   = nomePortador;
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            documento       = "";
            historico       = "";

            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;


            if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {

                if (line.length() < 128) continue;
                if (line.contains("S A L D O")) continue;

                // Data Movimento.
                if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
                    try {
                        dataMovimento = line.substring( 0, 10 );
                        Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
                        dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
                        dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
                    } catch (Exception dte) { continue; }
                }
                if (dataMovimento.equals("")) continue;

                debitoCredito = StringUtil.removeSpecialCharsToUC(line.substring( 127, 128 )).trim();

                nomeOrigem    = StringUtil.removeSpecialChars(line.substring( 57, 90 )).trim().toUpperCase();
				
				documento = StringUtil.removeSpecialChars(line.substring( 92, 112 )).trim().toUpperCase();

                strValorDocumento = "0";
                try{
                    strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 111, 127 )).trim().toUpperCase();
                    strValorDocumento    = strValorDocumento.replaceAll("\\.","").replaceAll("-","");

                    valorDocumento = DecimalUtil.toDecimal(strValorDocumento);
                } catch (Exception vlrx) {
                    valorDocumento = 0;
                }

                if(valorDocumento == 0) dataMovimento = "";
                if(valorDocumento == 0) continue;

                if (debitoCredito.contains("C")) debitoCredito = "EXTRATO-CREDITO";
                else if (debitoCredito.contains("D")) debitoCredito = "EXTRATO-DEBITO";

            } else {
                complemento02 = line.trim();
            }

            if (dataMovimento.trim().equals("")) continue;

            if(naoLeMais) continue;

            extrato = new ExtratoModel();
						
			extrato.setCodEmpresa(codEmpresa);
			//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
			extrato.setDataMovimento(dataMovimento);
			//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
			extrato.setDocumento(documento);
			//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
			extrato.setNomePortador(nomePortador);
			//logger.logInfo("GET NP = "+extrato.getNomePortador());
			extrato.setNomeOrigem(nomeOrigem);
			//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
			extrato.setLote(nomeArquivo.toUpperCase());
			//logger.logInfo("GET LOTE = "+extrato.getLote());
			extrato.setComplemento02(complemento02);
			//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
			extrato.setValorDocumento(valorDocumento);
			//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
			extrato.setDebitoCredito(debitoCredito);
			//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
			extrato.setTipoLancamento(tipoLancamento);
			//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
			extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
			logger.logDebug("GET CHAVE = "+extrato.getChave());
			
			try{
				jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
			}catch(Exception e){
				logger.logError("Erro extrato abc" + e.getMessage());
			}
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }

    return true;
}


/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	boolean hasNewChave = false; 
    if(jDados.has("HASNEWCHAVE"))  hasNewChave  = jDados.optBoolean("HASNEWCHAVE"); 
    String tipoLancamento    = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 1;
	int idocumento		= 2;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;
	int icomplemento02	= 5;
	int icomplemento03	= 0;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

	memFile.setFieldSeparator(";");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").length() != 8) continue;

            try {
				String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
				Date dt  = DateUtil.stringToDate(dataString, "yyyyMMdd");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dateException01) {
				continue;
			}


            valorDocumento  = 0;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
            if (valorDocumento == 0) continue;

			nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
			complemento01   = nomePortador;
            complemento02	= "";
            complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
			complemento03	= "";
            complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).replaceAll("\"","");
			documento		= "";
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");

            if (complemento02.equals("C")) debitoCredito = "EXTRATO-CREDITO";
            if (complemento02.equals("D")) debitoCredito = "EXTRATO-DEBITO";

            extrato = new ExtratoModel();
						
			extrato.setCodEmpresa(codEmpresa);
			//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
			extrato.setDataMovimento(dataMovimento);
			//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
			extrato.setDocumento(documento);
			//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
			extrato.setNomePortador(nomePortador);
			//logger.logInfo("GET NP = "+extrato.getNomePortador());
			extrato.setNomeOrigem(nomeOrigem);
			//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
			extrato.setLote(nomeArquivo.toUpperCase());
			//logger.logInfo("GET LOTE = "+extrato.getLote());
			extrato.setComplemento02(complemento02);
			//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
			extrato.setValorDocumento(valorDocumento);
			//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
			extrato.setDebitoCredito(debitoCredito);
			//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
			extrato.setTipoLancamento(tipoLancamento);
			//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
			extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
			logger.logDebug("GET CHAVE = "+extrato.getChave());
			
			try{
				jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
			}catch(Exception e){
				logger.logError("Erro extrato abc" + e.getMessage());
			}
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Padrão Santander", readExtratoException);
        }
    }
    return true;
}

/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	boolean hasNewChave = false; 
    if(jDados.has("HASNEWCHAVE"))  hasNewChave  = jDados.optBoolean("HASNEWCHAVE"); 
    String tipoLancamento    = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	int idataMovimento	= 1;
	int idocumento		= 2;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;
	int icomplemento02	= 2;
	int icomplemento03	= 0;
	int icomplemento04	= 5;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

	memFile.setFieldSeparator(";");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) continue;
			if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").length() != 8) continue;

            try {
				String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
				Date dt  = DateUtil.stringToDate(dataString, "yyyyMMdd");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dateException01) {
				continue;
			}


            valorDocumento  = 0;
			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }
            if (valorDocumento == 0) continue;

			nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
			complemento01   = nomePortador;
            complemento02	= "";
            complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
			complemento03	= "";
            complemento03	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento03).replaceAll("\"","");
			documento		= "";
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");

            if (memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).contains("C")) debitoCredito = "EXTRATO-CREDITO";
            if (memFile.getStringFieldRemoveEspCharsUpper(icomplemento04).contains("D")) debitoCredito = "EXTRATO-DEBITO";

            extrato = new ExtratoModel();
						
			extrato.setCodEmpresa(codEmpresa);
			//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
			extrato.setDataMovimento(dataMovimento);
			//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
			extrato.setDocumento(documento);
			//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
			extrato.setNomePortador(nomePortador);
			//logger.logInfo("GET NP = "+extrato.getNomePortador());
			extrato.setNomeOrigem(nomeOrigem);
			//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
			extrato.setLote(nomeArquivo.toUpperCase());
			//logger.logInfo("GET LOTE = "+extrato.getLote());
			extrato.setComplemento02(complemento02);
			//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
			extrato.setValorDocumento(valorDocumento);
			//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
			extrato.setDebitoCredito(debitoCredito);
			//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
			extrato.setTipoLancamento(tipoLancamento);
			//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
			extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
			logger.logDebug("GET CHAVE = "+extrato.getChave());
			
			try{
				jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
			}catch(Exception e){
				logger.logError("Erro extrato abc" + e.getMessage());
			}
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Padrão Santander", readExtratoException);
        }
    }
    return true;
}


/*#############################################@ EXTRATO-BRADESCO-TXT @##############################################*/
public boolean readExtratoBradescoTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    //USADO -> Vipcontabilidade.MiequipamentosContas_Pagas
    JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;
    
    //Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	boolean hasNewChave = false; 
    if(jDados.has("HASNEWCHAVE"))  hasNewChave  = jDados.optBoolean("HASNEWCHAVE"); 
    String tipoLancamento    = "";
    
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String qualPadrao        = "";
    String auxDataMovimento  = "";
    
    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais        = false;
    
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("qualpadrao"))  qualPadrao  = jDados.optString("qualpadrao");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    
    while (memFile.hasNextLine()) {
        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
			
			// logger.logInfo("LINE -> " + line);
			// logger.logInfo("qualPadrao -> " + qualPadrao);
		
			if(qualPadrao.equals("") && line.contains("DATA") && (line.contains("HISTORICO") || line.contains("HISTARICO"))  && line.contains("DOCTO") && (line.contains("CREDITO") || line.contains("CRADITO")) && (line.contains("DEBITO") || line.contains("DABITO")) && line.contains("SALDO")){
				qualPadrao = "002";
			
				continue;
			}
			// logger.logInfo("LINHAZINHA BDTXT " + qualPadrao);
			if(!qualPadrao.equals("003") && !qualPadrao.equals("002")){
				if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
					complemento01   = nomePortador;
					complemento02   = "";
					complemento03   = "";
					complemento04   = "";
					complemento05   = "";
		
					complemento06   = "";
					complemento07   = "";
					complemento08   = "";
					complemento09   = "";
					complemento10   = "";
		
					cpfCnpj         = "";
		
					historico       = "";
		
					valorJuros      = 0;
					valorDesconto   = 0;
					valorMulta      = 0;
					valorPagamento  = 0;
				}
				if (line.contains("SALDO ANTERIOR") || line.equals("") || (line.contains("DCTO.") && line.contains("DATA") && line.contains("SALDO"))) {
					continue;
				}
				if (line.startsWith("TOTAL")) {
					naoLeMais = true;
					continue;
				}
				
				if (line.contains("LTIMOS") && line.contains("AMENTOS")){
					naoLeMais = false;
					continue;
				}
					
				if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
					//Data Movimento.
					if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
						try {
							dataMovimento = line.substring(0, 11);
							Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
							dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
							dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
						} catch (Exception dte) { }
					}
					if (dataMovimento.equals("")) {
						continue;
					}
						nomeOrigem = StringUtil.removeSpecialChars(line.substring( 11, 38 )).trim().toUpperCase();

						documento = StringUtil.removeSpecialChars(line.substring( 41, 50 )).trim().toUpperCase();
		
						complemento02 = "Documento: " + documento;
		
					strValorDocumento = "0";
					try{
						strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 53, 69 )).trim().toUpperCase().replaceAll("\\.","").trim();
						strValorDocumento    = strValorDocumento.replaceAll("\\,","").replaceAll("-","");
						debitoCredito = "EXTRATO-CREDITO";
						valorDocumento = (Math.abs(DecimalUtil.toDecimal(strValorDocumento)))/100;
					} catch (Exception vlrx) {
						valorDocumento = 0;
					}
					if (valorDocumento == 0){
						strValorDocumento = "0";
						try{
							strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 70, 85 )).trim().toUpperCase().replaceAll("\\.","").trim();
							strValorDocumento    = strValorDocumento.replaceAll("\\,","").replaceAll("-","");
							debitoCredito = "EXTRATO-DEBITO";
							valorDocumento = (Math.abs(DecimalUtil.toDecimal(strValorDocumento)))/100;
						} catch (Exception vlrx) {
							valorDocumento = 0;
						}
					}
					
					if(valorDocumento == 0) dataMovimento = "";
					if(valorDocumento == 0) continue;

					
				}
				// } else {
					// logger.logDebug("NO " + nomeOrigem + " | " + line);
					// nomeOrigem = String.format("%s %s", nomeOrigem, line.trim());
				// }
			}
			if (memFile.getFieldsSize() == 1) {
				nomeOrigem += " " + line;
				
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("HISTORICO")
					.where("CHAVE = ? ")
					.param(nomeOrigem)
					.param(extrato.getChave())
					.execute();
				} catch (Exception sqlUpdateException) {}
				continue;
			} else {
				if(qualPadrao.equals("002")){
					complemento01   = nomePortador;
					complemento02   = "";
					complemento03   = "";
					complemento04   = "";
					complemento05   = "";
		
					complemento06   = "";
					complemento07   = "";
					complemento08   = "";
					complemento09   = "";
					complemento10   = "";
		
					cpfCnpj         = "";
		
					historico       = "";
		
					valorJuros      = 0;
					valorDesconto   = 0;
					valorMulta      = 0;
					valorPagamento  = 0;
					
					if (line.contains("SALDO ANTERIOR")) continue;

					if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
						try {
							dataMovimento = cutString(line, 0, 5) + "/20"+ cutString(line, 5, 8);
							
							Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
							dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
							auxDataMovimento = dataMovimento;
							dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
							
						} catch (Exception dte) { }
					}
					if (!line.substring(2,3).equals("/") && !line.substring(5,6).equals("/")) {
						try {
							dataMovimento = auxDataMovimento;
							Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
							dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
							dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
							
						} catch (Exception dte) { }
					}
					// if (dataMovimento.equals("")) {
						// continue;
					// }
					// logger.logInfo("line.substring( 0, 27 ) -> " + line.substring( 0, 27 ) + "line.substring( 9, 34 ) -> " + line.substring( 9, 34 ));
					if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")){
						nomeOrigem = StringUtil.removeSpecialChars(cutString(line, 9, 34 )).trim().toUpperCase();
						documento = StringUtil.removeSpecialChars(cutString(line, 36, 43 )).trim().toUpperCase();
					}
					
					if (!line.substring(2,3).equals("/") && !line.substring(5,6).equals("/")){
						nomeOrigem = StringUtil.removeSpecialChars(cutString(line, 0, 27 )).trim().toUpperCase();
						documento = StringUtil.removeSpecialChars(cutString(line, 27, 34 )).trim().toUpperCase();
					}
					
					complemento02 = "Documento: " + documento;
				
					strValorDocumento = "0";
					try{
						strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 41, 52)).trim().toUpperCase().replaceAll("\\.","").trim();
						
						if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")){
							strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 51, 61 )).trim().toUpperCase().replaceAll("\\.","").trim();
							if(strValorDocumento.equals(""))
								strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 68, 78 )).trim().toUpperCase().replaceAll("\\.","").trim();
						}

                        if (!strValorDocumento.contains(",")) strValorDocumento = "";
						
						strValorDocumento    = strValorDocumento.replaceAll("\\,","").replaceAll("-","");
						debitoCredito = "EXTRATO-CREDITO";
						valorDocumento = (Math.abs(DecimalUtil.toDecimal(strValorDocumento)))/100;
					} catch (Exception vlrx) {
						valorDocumento = 0;
					}
					if (valorDocumento == 0){
						strValorDocumento = "0";
						try{
							strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 58, 69 )).trim().toUpperCase().replaceAll("\\.","").trim();
							if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/"))
								strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 65, 76 )).trim().toUpperCase().replaceAll("\\.","").trim();
							
							// logger.logInfo("strValorDocumento2 -> " + strValorDocumento);

                            if (!strValorDocumento.contains(",")) strValorDocumento = "";

							strValorDocumento    = strValorDocumento.replaceAll("\\,","").replaceAll("-","");
							debitoCredito = "EXTRATO-DEBITO";
							valorDocumento = (Math.abs(DecimalUtil.toDecimal(strValorDocumento)))/100;
						} catch (Exception vlrx) {
							valorDocumento = 0;
						}
					}
					
					logger.logInfo("VALOR DOC -> "+ valorDocumento +" | DC -> "+ debitoCredito);

					if(valorDocumento == 0) dataMovimento = "";
					if(valorDocumento == 0) continue;

					// contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
				}
				else if (qualPadrao.equals("003")){
					complemento01   = nomePortador;
					complemento02   = "";
					complemento03   = "";
					complemento04   = "";
					complemento05   = "";
		
					complemento06   = "";
					complemento07   = "";
					complemento08   = "";
					complemento09   = "";
					complemento10   = "";
		
					cpfCnpj         = "";
		
					historico       = "";
		
					valorJuros      = 0;
					valorDesconto   = 0;
					valorMulta      = 0;
					valorPagamento  = 0;
					
					boolean linhaContemData = false;
					line = StringUtil.rightPad(line, 100, " ") + ";";
					
					
					if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
						linhaContemData = true;
					}
					
					if (linhaContemData) {
						try {
							dataMovimento = cutString(line, 0, 5) + "/20"+ cutString(line, 5, 8);
							Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
							auxDataMovimento = dataMovimento;
							dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
							
						} catch (Exception dte) { }
						
						nomeOrigem = StringUtil.removeSpecialChars(cutString(line, 9, 34 )).trim().toUpperCase();
						documento = StringUtil.removeSpecialChars(cutString(line, 36, 45 )).trim().toUpperCase();
					}
					else {
						try {
							dataMovimento = auxDataMovimento;
							Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
							dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
						} catch (Exception dte) { }
						
						nomeOrigem = StringUtil.removeSpecialChars(cutString(line, 0, 27 )).trim().toUpperCase();
						documento = StringUtil.removeSpecialChars(cutString(line, 26, 38 )).trim().toUpperCase();
					}
					// if (dataMovimento.equals("")) {
						// continue;
					// }
					// logger.logInfo("line.substring( 0, 27 ) -> " + line.substring( 0, 27 ) + "line.substring( 9, 34 ) -> " + line.substring( 9, 34 ));
					
					logger.logInfo("DT -> " + dataMovimento);
					
					complemento02 = "Documento: " + documento;
				
					strValorDocumento = "0";
					try{
						if (linhaContemData) {
							strValorDocumento    = StringUtil.removeSpecialChars(line.substring(50, 62)).trim().toUpperCase();
							logger.logInfo("strVd 1 -> " + strValorDocumento);
							debitoCredito = "EXTRATO-CREDITO";
							if(strValorDocumento.equals("")) {
								strValorDocumento    = StringUtil.removeSpecialChars(line.substring(68, 78)).trim().toUpperCase();
								logger.logInfo("strVd 2 -> " + strValorDocumento);
								debitoCredito = "EXTRATO-DEBITO";
							}
						}
						else {
							strValorDocumento    = StringUtil.removeSpecialChars(line.substring(60, 70)).trim().toUpperCase();
							logger.logInfo("strVd 3 -> " + strValorDocumento);
							debitoCredito = "EXTRATO-DEBITO";
						}
						
						valorDocumento = capturaValor(strValorDocumento);
					} catch (Exception vlrx) {
						valorDocumento = 0;
					}
					
					logger.logInfo("VD -> " + valorDocumento);
					
					/*
					try{
						strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 59, 69 )).trim().toUpperCase().replaceAll("\\.","").trim();
						
						if (linhaContemData) {
							strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 51, 61 )).trim().toUpperCase().replaceAll("\\.","").trim();
							if(strValorDocumento.equals(""))
								strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 68, 78 )).trim().toUpperCase().replaceAll("\\.","").trim();
						}
						
						strValorDocumento    = strValorDocumento.replaceAll("\\,","").replaceAll("-","");
						debitoCredito = "EXTRATO-CREDITO";
						valorDocumento = (Math.abs(DecimalUtil.toDecimal(strValorDocumento)))/100;
					} catch (Exception vlrx) {
						valorDocumento = 0;
					}
					if (valorDocumento == 0){
						strValorDocumento = "0";
						try{
							strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 76, 87 )).trim().toUpperCase().replaceAll("\\.","").trim();
							if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/"))
								strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 85, 98 )).trim().toUpperCase().replaceAll("\\.","").trim();
							
							// logger.logInfo("strValorDocumento2 -> " + strValorDocumento);
							strValorDocumento    = strValorDocumento.replaceAll("\\,","").replaceAll("-","");
							debitoCredito = "EXTRATO-DEBITO";
							valorDocumento = (Math.abs(DecimalUtil.toDecimal(strValorDocumento)))/100;
						} catch (Exception vlrx) {
							valorDocumento = 0;
						}
					}
					*/
					
					if(valorDocumento == 0) dataMovimento = "";
					if(valorDocumento == 0) continue;

					// contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
				}
				/*else {
					// logger.logDebug("NO " + nomeOrigem + " | " + line);
					nomeOrigem = String.format("%s %s", nomeOrigem, line.trim());
				}*/
				if(line.contains("TOTAL") && line.contains("MOVIMENT")) continue;
				if(line.contains("EXTRATO") && line.contains("SIMPLES") && line.contains("CONFERANCIA")) naoLeMais = true;
			}
            if (dataMovimento.trim().equals("")) continue;
    
            if(naoLeMais) continue;
                        
            extrato = new ExtratoModel();
						
			extrato.setCodEmpresa(codEmpresa);
			//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
			extrato.setDataMovimento(dataMovimento);
			//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
			extrato.setDocumento(documento);
			//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
			extrato.setNomePortador(nomePortador);
			//logger.logInfo("GET NP = "+extrato.getNomePortador());
			extrato.setNomeOrigem(nomeOrigem);
			//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
			extrato.setLote(nomeArquivo.toUpperCase());
			//logger.logInfo("GET LOTE = "+extrato.getLote());
			extrato.setComplemento02(complemento02);
			//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
			extrato.setValorDocumento(valorDocumento);
			//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
			extrato.setDebitoCredito(debitoCredito);
			//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
			extrato.setTipoLancamento(tipoLancamento);
			//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
			extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
			logger.logDebug("GET CHAVE = "+extrato.getChave());
			
			try{
				jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
			}catch(Exception e){
				logger.logError("Erro extrato abc" + e.getMessage());
			}
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }
    return true;
}


/*#############################################@ EXTRATO-SICREDI-TXT @##############################################*/
public boolean readExtratoSicrediTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeEmpresa        = "";
    boolean hasNewChave = false; 
    if(jDados.has("HASNEWCHAVE"))  hasNewChave  = jDados.optBoolean("HASNEWCHAVE"); 
    String tipoLancamento        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String tipoPlanilha      = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;
	String isCCPI = "false";
	int MutableIsCCPI = 0; // 2403-030898 - Nicholas - 12/03/2024

    String cont = "";

    if(jDados.has("CODEMPRESA"))      codEmpresa      = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEEMPRESA"))     nomeEmpresa     = jDados.optString("NOMEEMPRESA");
    if(jDados.has("NOMEARQUIVO"))     nomeArquivo     = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO"))  tipoLancamento  = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    if(jDados.has("MutableIsCCPI"))   MutableIsCCPI   = jDados.optInt("MutableIsCCPI"); // 2403-030898 - Nicholas - 12/03/2024
	boolean f = true;
	
	while (memFile.hasNextLine()) {        
		try {
            
			String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line).trim();
			
            if(line.contains("EXTRATO DE CONTA CORRENTE)")) f = true;
            if (line.contains("==============")) continue;
            if (line.contains("PAG.:")) continue;
            if (line.contains("PERIODO: DE")) continue;
            if (line.contains("DATA") && line.contains("DOCUMENTO") && 
                line.contains("HISTORICO") && line.contains("DEBITO")) continue;
            if (line.contains("**/**/****")) continue;
            if (line.contains("CONTINUA") && line.contains("PAGINA")) continue;
            if (line.toUpperCase().startsWith("COOP.CRED")) continue;

            if (nomePortador.equals("") && line.contains("-")) {
                nomePortador = cutString(line, line.trim().length() - 12, line.trim().length());
                continue;
            }
            complemento01   = "";
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            documento       = "";
            historico       = "";

            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;

                // Data Movimento.
            try {
                dataMovimento = cutString(line,  0, 10 );
                Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
                dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
                dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
            } catch (Exception dte) { }
			
			if(line.length() > 130){
				line = cutString(line, 0, line.length() - 14).trim();
			}
            
            if (dataMovimento.equals("") || line.length() < 72) continue;
            nomeOrigem    = StringUtil.removeSpecialChars(cutString(line,  (23+(MutableIsCCPI*2)), 72-MutableIsCCPI )).trim().toUpperCase();
            complemento01 = StringUtil.removeSpecialChars(cutString(line,  (12+(MutableIsCCPI)), (23+(MutableIsCCPI*3)) )).trim().toUpperCase();
            if(!line.substring(12, 23).trim().equals("")){
				documento     = StringUtil.removeSpecialChars(cutString(line,  (12+(MutableIsCCPI)), (23+(MutableIsCCPI*3)) )).trim().toUpperCase();				
			}else{
				documento = "EM BRANCO";
			}

            strValorDocumento = "0";

            if(tipoLancamento.equals("PAGAR") && line.length() <= 93 ){
                strValorDocumento    =  StringUtil.removeSpecialChars(cutString(line, line.length() - 12, line.length())).toUpperCase();
				debitoCredito = "EXTRATO-DEBITO";
            }
            if(tipoLancamento.equals("RECEBER") && line.length() > 93){
                strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, line.length() - 12, line.length())).toUpperCase();
                debitoCredito = "EXTRATO-CREDITO";
            }
			if(strValorDocumento.contains(".")){
				strValorDocumento = strValorDocumento.replaceAll("\\.","");
			}
			strValorDocumento = strValorDocumento.replaceAll(",",".");
            valorDocumento = Math.abs(DecimalUtil.toDecimal(strValorDocumento));
            
            if (dataMovimento.trim().equals("")) continue;
            if (valorDocumento <= 0) continue;

            if(naoLeMais) continue;

            extrato = new ExtratoModel();
						
			extrato.setCodEmpresa(codEmpresa);
			//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
			extrato.setDataMovimento(dataMovimento);
			//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
			extrato.setDocumento(documento);
			//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
			extrato.setNomePortador(nomePortador);
			//logger.logInfo("GET NP = "+extrato.getNomePortador());
			extrato.setNomeOrigem(nomeOrigem);
			//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
			extrato.setLote(nomeArquivo.toUpperCase());
			//logger.logInfo("GET LOTE = "+extrato.getLote());
			extrato.setComplemento02(complemento02);
			//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
			extrato.setValorDocumento(valorDocumento);
			//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
			extrato.setDebitoCredito(debitoCredito);
			//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
			extrato.setTipoLancamento(tipoLancamento);
			//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
			extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
			logger.logDebug("GET CHAVE = "+extrato.getChave());
			
			try{
				jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
			}catch(Exception e){
				logger.logError("Erro extrato abc" + e.getMessage());
			}
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }

    return true;
}


public boolean readExtratSantanderPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    Extrato jdbcExtrato = new Extrato();
    ExtratoModel extrato = null;

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento    = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String dia				 = "";
    String mes				 = "";
    String ano				 = "";
    String dataAux			 = "";
    String nomeOrigemAnterior = "";

    String nomeOrigemAuxMF0 = "";
    String proximaLinha = "";
    String dpsDaProximaLinha = "";
    List arquivoCompleto = memFile.getLines();
    boolean noConcatenadoPadraoOttimizza = false;
    boolean noMF0guardado = false;

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String anoData			 = "";
    String tipoLayout		 = "";
    String restoAux          = "";

    boolean naoLeMais = false;
    boolean somaIndex = false;
    boolean tagLcto = false;
    boolean primeiroAux = false;
    boolean eValor = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
    int idataMovimento	= 0;
    int idocumento      = 2;
    int inomePortador	=-1;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 3;
    int icomplemento02	= -1;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO"))  tipoLancamento  = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOLAYOUT"))	tipoLayout = jDados.optString("TIPOLAYOUT"); //2308-013230 adicionado para pegar o tipo do layout pelo runextratosecartoes
    // jDados.put("TIPOLANCAMENTO", tipoLancamento);

    // logger.logInfo("LOG TIPO LAYOUT - " + tipoLayout);

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();

        // logger.logInfo("LINHA SUJA " + line);
        line = StringUtil.removeSpecialCharsToUC(line);

	if(line.contains("BANCO SANTANDER PESSOA JURIDICA")) tipoLayout = "002";

        if(nomePortador.contains("SANTANDER-PDF")) nomePortador	= cutString(nomePortador, nomePortador.lastIndexOf("AGENCIA")-1);
        if(tipoLayout.equals("001")){ //Padrao 1

            if(!memFile.getStringFieldRemoveEspCharsUpper(0).trim().matches("\\d{2}/\\d{2}/\\d{4}")) continue; //2310-019538
            int colunaShrink = 0;
            int contador = colunaShrink;
            for (int j=colunaShrink; j<20; j++) {
                String colunaAtual = memFile.getStringField(j).replaceAll("\"","").trim();

                if (!colunaAtual.toUpperCase().equals("A") && !colunaAtual.toUpperCase().equals("B") && !colunaAtual.toUpperCase().equals("P")) {
                    memFile.setField(contador, memFile.getStringField(j).trim());
                    if (j > contador) memFile.setField(j,"");
                    contador++;
                }
            }

            if (line.toUpperCase().contains("A = BLOQUEIO DIA / ADM")) naoLeMais = true;
            if(naoLeMais) continue;
            if (line.toUpperCase().contains("CONTA CORRENTE") && line.toUpperCase().contains("EXTRATOS")) continue;
            if (line.startsWith("CONSULTAR")) continue;
            if (line.startsWith("SALDO")) continue;
            if (line.toUpperCase().contains("OPCAO DE PESQUISA:")) continue;
            if (line.toUpperCase().contains("PERIODOS:")) continue;
            if (line.toUpperCase().contains("SALDO ANTERIOR")) continue;
            if (line.toUpperCase().contains("BLOQUEIO DIA")) continue;
            if (line.toUpperCase().contains("B = BLOQUEADO")) continue;
            if (line.toUpperCase().contains("LANCAMENTO PROVISIONADO")) continue;
            if (line.toUpperCase().contains("POSICAO EM")) continue;
            if (line.toUpperCase().contains("SALDO DE CONTA CORRENTE")) continue;
            if (line.toUpperCase().contains("SALDO BLOQUEADO")) continue;
            if (line.toUpperCase().contains("SALDO DISPONIVEL")) continue;
            if (line.toUpperCase().contains("DESBLOQUEIO") && line.toUpperCase().contains("DIA")) continue;
            if (line.toUpperCase().contains("SALDO") && line.toUpperCase().contains("EM")) continue;
            if (line.toUpperCase().contains("SANTANDERNETIBE")) continue;
            if (line.toUpperCase().contains("CENTRAL DE ATENDIMENTO")) continue;
            if (line.toUpperCase().contains("INTERNET BANKING")) continue;
            if (line.toUpperCase().contains("0800 7")) continue;
            // if (memFile.getStringFieldRemoveEspCharsUpper(1).equals("A")) continue;
            // if (memFile.getStringFieldRemoveEspCharsUpper(1).equals("B")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(1).equals("P")) continue;

            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("PROVISAO DE ENCARGOS")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("JUROS ACUMULADOS ATE")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("IOF ACUMULADO ATE")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("CPMF ACUMULADA")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("CPMF PROVISIONADA")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("LIMITE SANTANDER")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("VENCIMENTO")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("TAXA DE JUROS")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("LIMITE")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("ULTIMA UTILIZACAO")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("VALOR UTILIZADO")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("DISPONIVEL")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("CENTRAL DE ATENDIMENTO")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("EXCETO FERIADOS")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("PESSOAS COM DEFICIENCIA")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("DEMAIS LOCALIDADES")) continue;

            if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOCUMENTO") && line.contains("VALOR")) {
                idataMovimento	= -1;
                idocumento      = -1;
                inomePortador	= -1;
                inomeOrigem		= -1;
                ivalorDocumento	= -1;
                for (int i = 0; i < memFile.getFieldsSize(); i++) {
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA")) idataMovimento = i;
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCUMENTO")) idocumento = i;
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR")) ivalorDocumento = i;
                }
                logger.logDebug("LEITURA AUTOMATIZADA " + idataMovimento +"|"+idocumento+"|"+inomeOrigem+"|"+ivalorDocumento);
                continue;
            }
            logger.logDebug("MF.NO -> " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem) + " | " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).length());
            // if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).toUpperCase().equals("A")){
            // inomeOrigem = inomeOrigem + 1;
            // ivalorDocumento = ivalorDocumento + 1;
            // }

            logger.logDebug("LIN " + line);
            if (memFile.getFieldsSize() == 1) {

                nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("HISTORICO")
                            .where("CHAVE = ? ")
                            .param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
                            .param(extrato.getChave())
                            .execute();
                } catch (Exception sqlUpdateException) {
                }
            } else {
                logger.logDebug("MF 1 -> " + memFile.getStringFieldRemoveEspCharsUpper(1));
                if ((memFile.getStringFieldRemoveEspCharsUpper(1).equals("A") || memFile.getStringFieldRemoveEspCharsUpper(1).equals("B")) && somaIndex == false) {
                    // idataMovimento	+=1;
                    // continue;
                    // idocumento      +=1;
                    // inomePortador	+=1;
                    inomeOrigem		+=1;
                    ivalorDocumento	+=1;
                    somaIndex = true;
                }

                if (!memFile.getStringFieldRemoveEspCharsUpper(1).equals("A") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("B") && somaIndex) {
                    somaIndex = false;
                    // idataMovimento	-=1;
                    // idocumento      -=1;
                    // inomePortador	-=1;
                    inomeOrigem		-=1;
                    ivalorDocumento	-=1;
                }

                nomeOrigem = "";
                dataMovimento = "";
                valorDocumento = 0;
                try {
                    try {
                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","")+"/"+anoData;
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt1) {
                        try {
                            Date dt = memFile.getDateField(idataMovimento);
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) {
                            try {
                                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                            } catch (Exception dt2) { }
                        }
                    }

                    valorDocumento  = 0;
                    debitoCredito = "";

                    try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                    catch (Exception vlrd) { valorDocumento = 0; }

                    //#2305-004548. Tem casos que na coluna vem dois valores. O movimento e saldo.
                    if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains(" ") && valorDocumento == 0){
                        try{
                            valorDocumento = Double.parseDouble(cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento), 0, " ").replaceAll("\\.", "").replaceAll(",", "\\."));
                        }
                        catch (Exception vlrd) { valorDocumento = 0; }
                    }

                    logger.logDebug("IVD " + ivalorDocumento + " | " + valorDocumento);

                    if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                    if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
                    if(tipoLancamento.contains("PAG") && debitoCredito.contains("CREDITO")) continue;
                    if(tipoLancamento.contains("REC") && debitoCredito.contains("DEBITO")) continue;
                    valorDocumento = Math.abs(valorDocumento);

                    if (valorDocumento == 0) continue;

                    nomeOrigem      = "";
                    nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();

                    //#2305-004548. Limpa caractere inválido
                    if(cutString(nomeOrigem, 0, " ").length() == 1){
                        nomeOrigem = cutString(nomeOrigem, 1);
                    }

                    documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
                    complemento02 = documento;

                    if(tipoLayout.equals("001")){
                        if(!nomePortador.contains("CONTA: ") && !nomePortador.contains("PE")){
                            nomePortador = cutString(nomePortador, "CONTA ", " ").trim();
                        }else{
                            nomePortador = cutString(nomePortador, "CONTA: ", "PE").trim();
                        }
                    }

                    extrato = new ExtratoModel();

                    extrato.setCodEmpresa(codEmpresa);
                    //logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
                    extrato.setDataMovimento(dataMovimento);
                    //logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
                    extrato.setDocumento(documento);
                    //logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
                    extrato.setNomePortador(nomePortador);
                    //logger.logInfo("GET NP = "+extrato.getNomePortador());
                    extrato.setNomeOrigem(nomeOrigem);
                    //logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
                    extrato.setLote(nomeArquivo.toUpperCase());
                    //logger.logInfo("GET LOTE = "+extrato.getLote());
                    extrato.setComplemento02(complemento02);
                    //logger.logInfo("GET CP02 = "+extrato.getComplemento02());
                    extrato.setComplemento03(complemento02);
                    //logger.logInfo("GET CP03 = "+extrato.getComplemento03());
                    extrato.setValorDocumento(valorDocumento);
                    //logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
                    extrato.setDebitoCredito(debitoCredito);
                    //logger.logInfo("GET DC = "+extrato.getDebitoCredito());
                    extrato.setTipoLancamento(tipoLancamento);
                    //logger.logInfo("GET TL = "+extrato.getTipoLancamento());
                    extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
                    logger.logInfo("GET CHAVE = "+extrato.getChave());

                    try{
                        jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);
                    }catch(Exception e){
                        logger.logError("Erro extrato abc" + e.getMessage());
                    }
                } catch (Exception ex) {
                }
            }
        }


        // Douglas Feito para o novo padrão chamado #2305-005228
        if(tipoLayout.equals("002")){
            if (line.toUpperCase().contains("0800 7")) continue;
            if (line.toUpperCase().contains("4004-2125")) continue;
            if (line.toUpperCase().contains("CENTRAL DE ATENDIMENTO")) continue;
            if (line.toUpperCase().contains("EXIBINDO RESULTADOS PARA 01/02/2023 A 28/02/2023")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).equals("?") && memFile.getStringFieldRemoveEspCharsUpper(1).equals("1") && memFile.getStringFieldRemoveEspCharsUpper(2).equals("?")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).equals("?") && memFile.getStringFieldRemoveEspCharsUpper(1).equals("EXPORTAR")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(1).equals("-") && memFile.getStringFieldRemoveEspCharsUpper(3).equals("?")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).equals("QUARTA, 08 DE FEVEREIRO DE 2023") && memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) continue;

            idataMovimento	= 1;
            idocumento      = -1;
            icomplemento02	= 1;
            inomeOrigem		= 0;
            ivalorDocumento	= 2;
            nomePortador = nomePortador.replaceAll("\\?","");
            complemento01 = nomePortador.replaceAll("\\?","");

            try {
                if(memFile.getStringFieldRemoveEspCharsUpper(0).equals("?") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("")){
                    dia	= cutString(memFile.getStringFieldRemoveEspCharsUpper(1), ",", "DE");
                    try {
                        mes	= getMonth(cutString(memFile.getStringFieldRemoveEspCharsUpper(1), "DE", memFile.getStringFieldRemoveEspCharsUpper(1).lastIndexOf("DE")));
                    }catch(Exception e) {
                        mes = "";
                    }
                    try {
                        ano	= cutString(memFile.getStringFieldRemoveEspCharsUpper(1), memFile.getStringFieldRemoveEspCharsUpper(1).lastIndexOf(" ")+1);
                    }catch(Exception e) {
                        logger.logInfo("CATCH"+e);
                    }
                    dataAux = dia+"/"+mes+"/"+ano;
                    continue;
                }
                try {
                    if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) dataMovimento = dataAux;
                    else dataMovimento = "";
                }catch(Exception e) {
                    logger.logInfo("CATCH1"+e);
                }
                if (dataMovimento.equals("")) continue;
                if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

                valorDocumento  = 0;
                debitoCreditoAux = "";
                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
                if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
                if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }
                if (valorDocumento == 0) continue;

                nomeOrigem      = "";
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
                complemento01	= nomePortador;
                complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);
                complemento04	= nomeOrigem;

                extrato = new ExtratoModel();

                extrato.setCodEmpresa(codEmpresa);
                //logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
                extrato.setDataMovimento(dataMovimento);
                //logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
                extrato.setDocumento(documento);
                //logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
                extrato.setNomePortador(nomePortador);
                //logger.logInfo("GET NP = "+extrato.getNomePortador());
                extrato.setNomeOrigem(nomeOrigem);
                //logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
                extrato.setLote(nomeArquivo.toUpperCase());
                //logger.logInfo("GET LOTE = "+extrato.getLote());
                extrato.setComplemento02(complemento02);
                //logger.logInfo("GET CP02 = "+extrato.getComplemento02());
                extrato.setValorDocumento(valorDocumento);
                //logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
                extrato.setDebitoCredito(debitoCredito);
                //logger.logInfo("GET DC = "+extrato.getDebitoCredito());
                extrato.setTipoLancamento(tipoLancamento);
                //logger.logInfo("GET TL = "+extrato.getTipoLancamento());
                extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
                logger.logDebug("GET CHAVE = "+extrato.getChave());

                try{
                    jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);
                }catch(Exception e){
                    logger.logError("Erro extrato abc" + e.getMessage());
                }
            } catch (Exception ex) {
            }
        }


        if(tipoLayout.equals("003")){ //Esse e o padrao 2.2

            idataMovimento	= 1;
            idocumento      = -1;
            icomplemento02	= 1;
            inomeOrigem		= 1;
            ivalorDocumento	= memFile.getFieldsSize() - 1;
            nomePortador = nomePortador.replaceAll("\\?","");
            complemento01 = nomePortador.replaceAll("\\?","");
            boolean fieldAux = false;


            //Continue para nao cair nas validacoes abaixo
            if(line.contains("SALDO DO DIA")) continue;

            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("ABOUT") && memFile.getStringFieldRemoveEspCharsUpper(0).contains("BLANK")) continue;
            if(memFile.getStringFieldRemoveEspCharsUpper(1).trim().equals("IBPJ")) continue;
            //if(line.contains("H - LIMITE CHEQUE EMPRESAS")) continue;

            if(memFile.getStringField(2).contains("R$")) fieldAux = true;

            else{fieldAux = false;}

            //2401-027236 - Para quando aparece valor sozinho em 2 linhas em seguida - Feito pq o valor de "A - SALDO DE CONTA CORRENTE" era
            //jogado para cima que criava um lancamento com esse valor e o resto das informacoes do lancamento anterior
            if((!memFile.getStringFieldRemoveEspCharsUpper(0).contains("R$") && !memFile.getStringFieldRemoveEspCharsUpper(1).contains("R$")) || memFile.getFieldsSize() > 2) eValor = false;
            if(((memFile.getStringFieldRemoveEspCharsUpper(0).contains("R$") && memFile.getFieldsSize() == 1) || (memFile.getStringFieldRemoveEspCharsUpper(1).contains("R$")) && memFile.getFieldsSize() == 2) && eValor) continue;
            if(((memFile.getStringFieldRemoveEspCharsUpper(0).contains("R$") && memFile.getFieldsSize() == 1) || (memFile.getStringFieldRemoveEspCharsUpper(1).contains("R$")) && memFile.getFieldsSize() == 2)) eValor = true;

            //Condicao para nao ler final do arquivo
            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("A - SALDO DE CONTA CORRENTE")) naoLeMais = true;

            if(memFile.getStringFieldRemoveEspCharsUpper(1).contains("VALORES DEDUZIDOS DO SALDO DISPONIVEL")) naoLeMais = true;

            if(naoLeMais == true) continue;

            String nomeOrigemAux = memFile.getStringFieldRemoveEspCharsUpper(0);

            //Captura de nomeOrigem que quebrou sem o valor
            if(memFile.getFieldsSize() == 2 && memFile.getStringFieldRemoveEspCharsUpper(0).contains("?") && !line.contains(" DE 20")){
                nomeOrigemAnterior = memFile.getStringFieldRemoveEspCharsUpper(1);
            }

            //Captura de nomeOrigem que quebrou junto com o valor
            if(memFile.getFieldsSize() == 2 && memFile.getStringField(1).contains("R$")){
                nomeOrigemAux = memFile.getStringFieldRemoveEspCharsUpper(0);
            }

            // gui -> 02/07/2024 - 	2406-043513
            try{
                proximaLinha = (String) arquivoCompleto.get(memFile.getCurrentIndex() + 1);
                dpsDaProximaLinha = (String) arquivoCompleto.get(memFile.getCurrentIndex() + 2);
            }catch(Exception e){}
            
            if(memFile.getFieldsSize() == 1){
                if(proximaLinha.split("\\|")[0].trim().equals("?") || proximaLinha.split("\\|")[0].trim().contains("ABOUT:BLANK") &&
                        (!dpsDaProximaLinha.split("\\|")[0].trim().equals("?") && !dpsDaProximaLinha.split("\\|")[0].trim().equals("R$"))) {
                    logger.logInfo("lineTrue: " + line);
                    nomeOrigemAuxMF0 = memFile.getStringFieldRemoveEspCharsUpper(0).trim();
                    noMF0guardado = true;
                    continue;
                }
            }

            //Captura de nomeOrigem que vem com valor normalmente
            if(memFile.getFieldsSize() == 3 && !noMF0guardado){
                nomeOrigemAnterior = memFile.getStringFieldRemoveEspCharsUpper(1);
                logger.logInfo("noAnterior1: " + nomeOrigemAnterior);
                /*if(noMF0guardado){
                    nomeOrigem = nomeOrigemAux + " " + memFile.getStringFieldRemoveEspCharsUpper(1);
                    noMF0guardado = false;
                    logger.logInfo("no: " + nomeOrigem);
                }*/
            }

            if(((memFile.getFieldsSize() == 1 && memFile.getStringField(0).contains("R$")) || memFile.getStringField(0).contains("SALDO DO DIA")) && !fieldAux && !primeiroAux){
                primeiroAux = true;
            }

            //2401-027236 - Para quando nao aparece ? na primeira coluna e o valor quebra para baixo
            if(memFile.getFieldsSize() < 3 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO") &&
                    !memFile.getStringField(0).contains("R$") && !fieldAux && primeiroAux && !line.contains(" DE 20")){
                if(memFile.getFieldsSize() ==1) nomeOrigemAnterior = memFile.getStringFieldRemoveEspCharsUpper(0).trim();
                if(memFile.getFieldsSize() ==2) nomeOrigemAnterior = memFile.getStringFieldRemoveEspCharsUpper(1).trim();
                logger.logDebug("noAnterior2: " + nomeOrigemAnterior);
                noConcatenadoPadraoOttimizza = true;
                primeiroAux = false;
                continue;
            }

            if(memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO") &&
                    !memFile.getStringField(0).contains("R$") && !fieldAux && !primeiroAux && !noMF0guardado){
                nomeOrigemAnterior += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
                nomeOrigemAnterior = nomeOrigemAnterior.trim();
                noConcatenadoPadraoOttimizza = true;
                //logger.logInfo("line: " + line);
                //logger.logInfo("noAnterior3: " + nomeOrigemAnterior);
            }

            //Update para atualizar o nomeOrigem com a quebra
            if(memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO") &&
                    !memFile.getStringField(0).contains("R$") && fieldAux == true){
                //logger.logInfo("inserindo");
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("HISTORICO")
                            .where("CHAVE = ? ")
                            .param(StringUtil.removeSpecialCharsToUC(nomeOrigemAnterior + " " + nomeOrigemAux))
                            .param(extrato.getChave())
                            .execute();
                } catch (Exception sqlUpdateException) {
                }
            }

            //Tratamento de data
            if((memFile.getStringFieldRemoveEspCharsUpper(0).contains("?") || memFile.getStringFieldRemoveEspCharsUpper(0).equals("")) && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("")){
                //2401-027290 - Os "DE" foram mudados para "DE " pq estava pegando errado no mes dezembro

                if(memFile.getStringFieldRemoveEspCharsUpper(1).contains("HOJE")){
                    dia	= cutString(memFile.getStringFieldRemoveEspCharsUpper(1), ",", "DE ");
                }

                else{
                    dia = memFile.getStringFieldRemoveEspCharsUpper(1).substring(0,2);
                }

                try {
                    mes	= getMonth(cutString(memFile.getStringFieldRemoveEspCharsUpper(1), "DE ", memFile.getStringFieldRemoveEspCharsUpper(1).lastIndexOf("DE ")));

                }catch(Exception e) {
                    mes = "";

                    logger.logInfo("LOG CATCH MES");
                }

                try {
                    ano	= cutString(memFile.getStringFieldRemoveEspCharsUpper(1),"DE ", ",");

                    ano = cutString(ano, "DE ", ano.length());

                    //logger.logInfo("ano - " + ano);

                }catch(Exception e) {
                    logger.logInfo("CATCH"+e);
                }

                if((dia + "/" + mes + "/" + ano).matches("\\b\\d{2}/\\d{2}/\\d{4}\\b")){
                    dataAux = dia+"/"+mes+"/"+ano;
                    continue;
                }
                //logger.logInfo("LOG DATA - " + dataAux);


            }

            dataMovimento = dataAux;

            try {
                if (dataMovimento.equals("")) continue;
                if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

                valorDocumento  = 0;
                debitoCreditoAux = "";
                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
                if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
                if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

                try{
                    if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("R$")){
                        valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));
                    } else { valorDocumento = 0; }
                }
                catch (Exception vlrd) { valorDocumento = 0; }
                if (valorDocumento == 0) continue;

		nomeOrigem      = "";
		nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
		complemento01	= nomePortador;

                //Caso haja quebra do valor, mas sem quebra de nomeOrigem || nao tiver ? na primeira coluna e quebra valor e pode ou nao ter quebra no nomeOrigem
                if(memFile.getFieldsSize() == 1 && memFile.getStringField(0).contains("R$")){
                    nomeOrigem = nomeOrigemAnterior;
                    //logger.logInfo("noaqui1: " + nomeOrigem);
                }


                // gui -> 02/07/2024 - 	2406-043513
                // caso quando há quebra de nomeOrigem junto do valor com mfFieldsSize() == 2 e == 3, + captura do nomeOrigem em quebra de página
                if(noMF0guardado && !noConcatenadoPadraoOttimizza){
                    if(memFile.getStringFieldRemoveEspCharsUpper(0).trim().equals("?") && memFile.getStringFieldRemoveEspCharsUpper(2).contains("R$")) {
                        nomeOrigem = nomeOrigemAuxMF0 + " " + memFile.getStringFieldRemoveEspCharsUpper(1);
                        //logger.logInfo("nofinal1: " + nomeOrigem);
                    }else{
                        if(memFile.getStringFieldRemoveEspCharsUpper(1).contains("R$") && !memFile.getStringFieldRemoveEspCharsUpper(0).trim().equals("?")){
                            nomeOrigem = nomeOrigemAuxMF0 + " " + memFile.getStringFieldRemoveEspCharsUpper(0);
                            //logger.logInfo("nofinal2: " + nomeOrigem);
                        }
                        if(memFile.getStringFieldRemoveEspCharsUpper(0).trim().equals("?") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("R$")){
                            nomeOrigem = nomeOrigemAuxMF0;
                            //logger.logInfo("nofinal3: " + nomeOrigem);
                        }
                    }
                    //logger.logInfo("lineFalse: " + line);
                    //noMF0guardado = false;
                }

                //Caso haja quebra de valor, junto de quebra de nomeOrigem
                logger.logInfo("boolean: " + noMF0guardado);
                if(memFile.getFieldsSize() == 2 && memFile.getStringField(1).contains("R$") && !noMF0guardado){
                    nomeOrigem = nomeOrigemAnterior + " " + nomeOrigemAux;
                    logger.logInfo("noaqui2: " + nomeOrigem);
                }

                // caso haja




                complemento02	= nomeOrigem;
                complemento04	= nomeOrigem;

                extrato = new ExtratoModel();

                extrato.setCodEmpresa(codEmpresa);
                //logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
                extrato.setDataMovimento(dataMovimento);
                //logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
                extrato.setDocumento(documento);
                //logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
                extrato.setNomePortador(nomePortador);
                //logger.logInfo("GET NP = "+extrato.getNomePortador());
                extrato.setNomeOrigem(nomeOrigem.replaceAll("[^a-z A-Z0-9]", ""));
                //logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
                extrato.setLote(nomeArquivo.toUpperCase());
                //logger.logInfo("GET LOTE = "+extrato.getLote());
                extrato.setComplemento02(complemento02.replaceAll("[^a-z A-Z0-9]", ""));
                //logger.logInfo("GET CP02 = "+extrato.getComplemento02());
                extrato.setComplemento03(complemento02.replaceAll("[^a-z A-Z0-9]", ""));
                //logger.logInfo("GET CP03 = "+extrato.getComplemento03());
                extrato.setValorDocumento(valorDocumento);
                //logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
                extrato.setDebitoCredito(debitoCredito);
                //logger.logInfo("GET DC = "+extrato.getDebitoCredito());
                extrato.setTipoLancamento(tipoLancamento);
                //logger.logInfo("GET TL = "+extrato.getTipoLancamento());
                extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato

                try{
                    jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);
                }catch(Exception e){
                    logger.logError("Erro extrato abc" + e.getMessage());
                }
            } catch (Exception ex) {
            }

        }

        if(tipoLayout.equals("004")){
            // logger.logInfo("ENTROU TIPO 4");
            idataMovimento	= 3;
            idocumento      = -1;
            icomplemento02	= 1;
            inomeOrigem		= 0;
            ivalorDocumento	= 4;
            nomePortador = nomePortador.replaceAll("\\?","").replaceAll(";","");
            complemento01 = nomePortador.replaceAll("\\?","");
            String dataString = "";



            //Condicao para ler apenas o bloco de movimento
            if(tagLcto == false) naoLeMais = true;
            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("01 - ADVISORY - USD")) {
                tagLcto = true;
            }
            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("MOVIMENTO") && tagLcto) naoLeMais = false;
            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("POR FAVOR LEIA ATENTAMENTE A SEGUINTE INFORMACAO")) naoLeMais = true;
            if(naoLeMais == true) continue;
            // logger.logInfo("LIN ->> " + line + " || nLemais -> " + naoLeMais + " ||tagLcto -> " + tagLcto);
            //DETALHAMENTO	 MOEDA	DATA VALOR	DATA LANCAMENTO	CREDITOS	RETIROS	SALDO


            if(line.contains("DETALHAMENTO") && line.contains("MOEDA") && line.contains("DATA VALOR") && line.contains("DATA LANCAMENTO")
                    && line.contains("CREDITOS") &&  line.contains("RETIROS") && line.contains("SALDO")){
                // logger.logInfo("ENTROU FOR");
                for(int i =0; i < memFile.getFieldsSize(); i++){
                    if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("MOEDA")) icomplemento02 = i;
                    if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DETALHAMENTO")) inomeOrigem = i;
                    if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("CREDITOS")) ivalorDocumento = i;
                    if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA") &&
                            memFile.getStringFieldRemoveEspCharsUpper(i).contains("LANCAMENTO")) idataMovimento = i;
                }

                if(ivalorDocumento == -1 || idataMovimento == -1 || inomeOrigem == -1 || icomplemento02 == -1){
                    idataMovimento	= 3;
                    icomplemento02	= 1;
                    inomeOrigem		= 0;
                    ivalorDocumento	= 4;
                }
                continue;
            }

            // logger.logInfo("ivalorDocumento -> " + ivalorDocumento + " |idataMovimento -> " + idataMovimento + " |inomeOrigem -> " + inomeOrigem + " |icomplemento02 -> " + icomplemento02);

            try {

                try {
                    dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                    dataString = cutString(dataString, 0, 2) + "/" + getMonth(cutString(dataString, 3, 6)) + "/20" + cutString(dataString, dataString.length()-2, dataString.length());
                    // logger.logInfo("dataString -> " + dataString +  " cuts - " + cutString(dataString, 0, 2) + " | " + cutString(dataString, 3, 5) + " | " +  cutString(dataString, dataString.length()-2, dataString.length()));
                    if (!dataString.equals("")) {
                        String dataMovimentoAux	  = getCampoDate(dataString);
                        if (dataMovimentoAux.contains("/")) {
                            dataMovimento     = getCampoDate(dataString);
                            dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                        }
                    }
                } catch (Exception dt1) {}

                // logger.logInfo(" dataMov -> " + dataMovimento + "\n");
                if(dataMovimento.equals("")) continue;
                valorDocumento  = 0;
                debitoCreditoAux = "";
                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
                if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
                if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }
                // logger.logInfo(" valorDocumento -> " + valorDocumento + "\n");
                if (valorDocumento == 0) continue;

                nomeOrigem      = "";
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
                complemento01	= nomePortador;
                complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);


                extrato = new ExtratoModel();

                extrato.setCodEmpresa(codEmpresa);
                //logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
                extrato.setDataMovimento(dataMovimento);
                //logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
                extrato.setDocumento(documento);
                //logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
                extrato.setNomePortador(nomePortador);
                //logger.logInfo("GET NP = "+extrato.getNomePortador());
                extrato.setNomeOrigem(nomeOrigem);
                //logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
                extrato.setLote(nomeArquivo.toUpperCase());
                //logger.logInfo("GET LOTE = "+extrato.getLote());
                extrato.setComplemento02(complemento02);
                //logger.logInfo("GET CP02 = "+extrato.getComplemento02());
                extrato.setComplemento03(complemento02);
                //logger.logInfo("GET CP03 = "+extrato.getComplemento03());
                extrato.setValorDocumento(valorDocumento);
                //logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
                extrato.setDebitoCredito(debitoCredito);
                //logger.logInfo("GET DC = "+extrato.getDebitoCredito());
                extrato.setTipoLancamento(tipoLancamento);
                //logger.logInfo("GET TL = "+extrato.getTipoLancamento());
                extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato

                try{
                    jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);
                }catch(Exception e){
                    logger.logError("Erro extrato abc" + e.getMessage());
                }
            } catch (Exception ex) {
            }
        }

        if(tipoLayout.equals("005")){ //Padrao 6
            idataMovimento	= 0;
            idocumento      = 2;
            inomeOrigem		= 1;
            ivalorDocumento	= memFile.getFieldsSize() - 2;
            nomePortador = nomePortador.replaceAll("\\?","").replaceAll(";","");

            //if(line.contains("SALDO") && line.contains("CONTA") && line.contains("CORRENTE") ) naoLeMais = true;
            if(line.contains("EXTRATO") && line.contains("CONTA") && line.contains("CORRENTE") ) naoLeMais = true;

            if(naoLeMais) continue;

            try {

                //Pega o resto do nomeOrigem quando tem quebra de linha, fiz tratamento para nao pegar o numero da pagina. Ex: 1/6
                if (memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO") && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("ANTERIOR")) {
                    if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("/")){
                        restoAux = memFile.getStringFieldRemoveEspCharsUpper(0);
                        continue;
                    } else {
                        nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
                        try {
                            dbIOCont.update("IO_EXTRATO")
                                    .fields("HISTORICO")
                                    .where("CHAVE = ? ")
                                    .param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
                                    .param(extrato.getChave())
                                    .execute();
                        } catch (Exception sqlUpdateException) {
                        }
                        continue;
                    }
                }

                //Para quando o resto do nomeOrigem possui /
                if(!line.contains("DATA") && !line.contains("SALDO") && !line.contains("DESCRI") && !restoAux.equals("")){
                    nomeOrigem += " " + restoAux;
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("HISTORICO")
                                .where("CHAVE = ? ")
                                .param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
                                .param(extrato.getChave())
                                .execute();
                    } catch (Exception sqlUpdateException) {
                    }
                }

                restoAux = "";

                if (memFile.getFieldsSize() < 4 ) continue;

                try {
                    dataMovimento  = getDate(dataMovimento, idataMovimento, line, false,"", memFile, logger);
                    dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
                } catch (Exception dt1) {
                    dataMovimento = "";
                }

                if(dataMovimento.equals("")) continue;

                valorDocumento  = 0;
                debitoCredito = "";

                try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                catch (Exception vlrd) { valorDocumento = 0; }

                if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";

                valorDocumento = Math.abs(valorDocumento);

                if (valorDocumento == 0) continue;

                nomeOrigem      = "";
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();

                documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();

                extrato = new ExtratoModel();

                extrato.setCodEmpresa(codEmpresa);
                //logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
                extrato.setDataMovimento(dataMovimento);
                //logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
                extrato.setDocumento(documento);
                //logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
                extrato.setNomePortador(nomePortador);
                //logger.logInfo("GET NP = "+extrato.getNomePortador());
                extrato.setNomeOrigem(nomeOrigem);
                //logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
                extrato.setLote(nomeArquivo.toUpperCase());
                //logger.logInfo("GET LOTE = "+extrato.getLote());
                extrato.setComplemento02(complemento02);
                //logger.logInfo("GET CP02 = "+extrato.getComplemento02());
                extrato.setValorDocumento(valorDocumento);
                //logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
                extrato.setDebitoCredito(debitoCredito);
                //logger.logInfo("GET DC = "+extrato.getDebitoCredito());
                extrato.setTipoLancamento(tipoLancamento);
                //logger.logInfo("GET TL = "+extrato.getTipoLancamento());
                extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
                logger.logDebug("GET CHAVE = "+extrato.getChave());

                try{
                    jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);
                }catch(Exception e){
                    logger.logError("Erro extrato abc" + e.getMessage());
                }
            } catch (Exception ex) {
            }
        }

    }
    return true;
}


public boolean readExtratoBancoDoBrasilPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	logger.logDebug("BBPDF");
	
	JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
	String valorDocumentoAux = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= 0;
	int idocumento      = 4;
	int inomePortador	=-1;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 5;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		// logger.logInfo("NA = "+nomeArquivo.toUpperCase());
		// naoLeMais = false; //Nao era dado false antes da condicao para true do naoLeMais, fazendo o codigo nao ler o resto que era necessario
        // if (line.replaceAll(" ", "").contains("999") && line.replaceAll(" ", "").contains("SALDO") && !line.contains("ANTERIOR")) naoLeMais = true;
        if (line.replaceAll(" ", "").contains("999") && line.replaceAll(" ", "").contains("SALDO") && !line.contains("ANTERIOR")) continue;
		if (line.startsWith("TRANSACAO") && memFile.getFieldsSize() == 1) continue;
		if (line.contains("SALDO") && line.contains("ANTERIOR")) continue;
		if (line.startsWith("SERVICO DE ATENDIMENTO") && memFile.getFieldsSize() == 1) continue;
		if (line.startsWith("PARA DEFICIENTES") && memFile.getFieldsSize() == 1) continue;
		if (line.startsWith("---------------") && memFile.getFieldsSize() == 1) continue;
		if (memFile.getFieldsSize() == 1 && memFile.getStringFieldRemoveEspCharsUpper(0).contains("DESPESAS VINCULADAS")) naoLeMais = true; 
		if (naoLeMais) continue;
		
		//logger.logInfo("Line -> "+line);
	
		if(memFile.getStringFieldRemoveEspCharsUpper(1).contains("/")){
			// logger.logInfo("TP1");
			idataMovimento	= 0;
			idocumento      = 5;
			inomePortador	=-1;
			inomeOrigem		= 4;
			ivalorDocumento	= 6;
			nomePortador = nomePortador.replaceAll("\\?","");
			complemento01 = nomePortador.replaceAll("\\?","");
			
			//Douglas feito para o chamado #2305-005743
			try {
				if (cutString(memFile.getStringFieldRemoveEspCharsUpper(1), " ").matches("[0-9]{4}")){
					idataMovimento	= 0;
					idocumento      = 4;
					inomePortador	=-1;
					inomeOrigem		= 3;
					ivalorDocumento	= 5;
				}
			}catch(Exception e) {
				logger.logInfo("ERRO - "+e);
			}
		}else{
			// logger.logInfo("TP2");
			idataMovimento	= 0;
			idocumento      = 4;
			inomePortador	=-1;
			inomeOrigem		= 3;
			ivalorDocumento	= 5;
			//#2306-007500 Quando não há NF (Documento) o pdf faz um deslocamento de colunas
			if(memFile.getStringFieldRemoveEspCharsUpper(5).equals("") || (memFile.getStringFieldRemoveEspCharsUpper(4).contains("C") || memFile.getStringFieldRemoveEspCharsUpper(4).contains("D"))){
				ivalorDocumento	= 4;
				idocumento      = -1;
			}
			nomePortador = nomePortador.replaceAll("\\?","");
			complemento01 = nomePortador.replaceAll("\\?","");
		}
		
		debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("[^A-Za-z]", "").trim();
		
		//2401-027930 - Em casos que o valor está na casa do milhão, o D ou C descola para a proxima coluna 
		if(!debitoCreditoAux.contains("C") && !debitoCreditoAux.contains("D")) debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento+1).replaceAll("[^A-Za-z]", "").trim();
			
		if (debitoCreditoAux.contains("C")) debitoCredito = "EXTRATO-CREDITO";
        if (debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-DEBITO";
		
		// comentado por xavier em20-04-2021
		//if(tipoLancamento.contains("PAG") && debitoCreditoAux.contains("C"))continue;
		//if(tipoLancamento.contains("REC") && debitoCreditoAux.contains("D"))continue;

        if (memFile.getFieldsSize() == 1) {
			// logger.logDebug("NOEEEEE " + chaveExtrato + " | " + nomeOrigem + " | " + valorDocumento);
			nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
			try {
				dbIOCont.update("IO_EXTRATO")
				.fields("HISTORICO")
				.where("CHAVE = ? ")
				.param(nomeOrigem)
				.param(extrato.getChave())
				.execute();
			} catch (Exception sqlUpdateException) {
			}
        } else {
            try {
                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { }
                    }
                }
				

                valorDocumento  = 0;
				debitoCreditoAux = "";
				
				//logger.logInfo("LOG VALOR TESTE - " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
                
				if (memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("*")) continue; 
                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }
				
				//#2309-016021 - Tratamento de valores que nao vem no formato correto ex: 5.000.00 em vez de 5.000,00
				if(valorDocumento == 0 && !memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains(",") &&
				!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")){
					try{
						valorDocumentoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("[.CD]", "").trim();
						// logger.logInfo("LOG VALOR AUX - " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
						valorDocumento = Double.parseDouble(valorDocumentoAux) / 100;
						// logger.logInfo("LOG VALOR - " + valorDocumento);
					} catch (Exception ex) {logger.logInfo("Erro ao capturar valor -> " + ex.getMessage());}
					
				}
				
                if (valorDocumento == 0) continue;

				//logger.logInfo("DM -> "+dataMovimento+" - VD -> "+valorDocumento);
       
				nomeOrigem      = "";
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
                if(idocumento>=0) {//#2306-007500
					documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
					complemento02 = documento;
					
				}

                extrato = new ExtratoModel();
						
				extrato.setCodEmpresa(codEmpresa);
				//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
				extrato.setDataMovimento(dataMovimento);
				//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
				extrato.setDocumento(documento);
				//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
				extrato.setNomePortador(nomePortador);
				//logger.logInfo("GET NP = "+extrato.getNomePortador());
				extrato.setNomeOrigem(nomeOrigem);
				//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
				extrato.setLote(nomeArquivo.toUpperCase());
				//logger.logInfo("GET LOTE = "+extrato.getLote());
				extrato.setComplemento02(complemento02);
				//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
				extrato.setValorDocumento(valorDocumento);
				//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
				extrato.setDebitoCredito(debitoCredito);
				//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
				extrato.setTipoLancamento(tipoLancamento);
				//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
				extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
				logger.logDebug("GET CHAVE = "+extrato.getChave());
				
				try{
					jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
				}catch(Exception e){
					logger.logError("Erro extrato abc" + e.getMessage());
				}
            } catch (Exception ex) {
            }
        }
    }
    return true;
}

public boolean readExtratoBancoDoBrasil2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {	
	
	JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     =	 "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String lineAux           = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

	int idataMovimento	=  0;
	int idocumento      = -1;
	int inomePortador	= -1;
	int inomeOrigem		=  1;
	int ivalorDocumento	=  2;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
		lineAux = line;
        line = StringUtil.removeSpecialCharsToUC(line);
		

        // logger.logInfo("coluna Valor -> " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
        //if (memFile.getStringFieldRemoveEspCharsUpper(1).replace(" ", "").startsWith("SALDO")) {continue;}
		
		if(line.startsWith("EXTRATO")) naoLeMais = true;
		
		if(line.startsWith("DIA")){ 
			naoLeMais = false;
			continue;
		}

        if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("CONTA:")) {
			nomePortador = cutString(memFile.getStringFieldRemoveEspCharsUpper(0), "CONTA:");
		}

		if (memFile.getStringFieldRemoveEspCharsUpper(1).replace(" ", "").startsWith("SALDO")) {continue;}
        // if (line.startsWith("EXTRATO DE")) {
        //     chaveExtrato = "";
        //     continue;
        // }
        if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("INFORMACOES ADICIONAIS") || 
            memFile.getStringFieldRemoveEspCharsUpper(0).contains("TOTAL APLICACOES FINANCEIRAS")) {naoLeMais = true;}
        
        if (naoLeMais) continue;
		
		if (memFile.getFieldsSize() == 1) {
			
			try {
				dbIOCont.update("IO_EXTRATO")
				.fields("HISTORICO")
				.where("CHAVE = ? ")
				.param(nomeOrigem + " " + memFile.getStringFieldRemoveEspCharsUpper(0))
				.param(extrato.getChave())
				.execute();
			} catch (Exception sqlUpdateException) {
			}
		}
		

		
        try {
            
            // logger.logInfo("SHR LINE = " + line + " | FS -> " + memFile.getFieldsSize());
            
            // if(memFile.getFieldsSize() != 2){
            if(memFile.getFieldsSize() == 2){
				//logger.logInfo("LOG LINE - " + line);
                if(memFile.getStringFieldRemoveEspCharsUpper(0).matches("\\d{2}/\\d{2}/\\d{4}")){
					
                    try{
                        dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
						
						//logger.logInfo("ENTROU IF INTERNO - " + dataMovimento);

                        dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");

                        nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
						
						//logger.logInfo("FIELD SIZE 2 DATA - " + " NO COMPLETO -> " + nomeOrigem + "Data - " + dataMovimento);
                        

                        continue;
                    }

                    catch(Exception e){}
                }
				
				
            }

            nomeOrigem = nomeOrigem + " " + memFile.getStringFieldRemoveEspCharsUpper(0);

            if(memFile.getFieldsSize() == 3){
                try{
                        dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));

                        dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
                    }

                    catch(Exception e){}

                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

                logger.logInfo("LOG NOME ORIGEM > " + nomeOrigem + " | DATA > " + dataMovimento);
            }

            // }
            
            
            // logger.logInfo(" is -> " + ivalorDocumento + " | " + inomeOrigem);
            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1);
            if (debitoCreditoAux.contains("C") || debitoCreditoAux.contains("+")) {
                debitoCredito = "EXTRATO-CREDITO";
				// logger.logInfo("LOG EXTRATO CREDITO");
            }
            if (debitoCreditoAux.contains("D") || debitoCreditoAux.contains("-")) {
				// logger.logInfo("LOG EXTRATO DEBITO");
                debitoCredito = "EXTRATO-DEBITO";
            }

            valorDocumento  = 0;
            try{

                String valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).replace("(-)", "").replace("(+)", "").trim();
                
                valorDocAux = valorDocAux.replace(".", "").replace(",", ".");
                //logger.logInfo("LOG VALOR DOC AUX - " + valorDocAux);
                valorDocumento = Math.abs(Double.parseDouble(valorDocAux));
                //logger.logInfo("LOG VALOR DOC Convertido- " + Double.toString(valorDocumento));
                
                //logger.logInfo("LOG CONTEUDO - " + valorDocAux);

            }catch (Exception vlrd) { 
                valorDocumento = 0; 
                //logger.logInfo("LOG CATCH- " + stringTeste);
            }

            // logger.logInfo("LOG VALOR - " + valorDocumento);
            if (valorDocumento == 0) continue;
            // if(memFile.getFieldsSize() == 2)
                // nomeOrigem		= complemento08 + " " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
            
            extrato = new ExtratoModel();
						
			extrato.setCodEmpresa(codEmpresa);
			//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
			extrato.setDataMovimento(dataMovimento);
			//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
			extrato.setDocumento(documento);
			//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
			extrato.setNomePortador(nomePortador);
			//logger.logInfo("GET NP = "+extrato.getNomePortador());
			extrato.setNomeOrigem(nomeOrigem);
			//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
			extrato.setLote(nomeArquivo.toUpperCase());
			//logger.logInfo("GET LOTE = "+extrato.getLote());
			extrato.setComplemento02(complemento02);
			//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
			extrato.setValorDocumento(valorDocumento);
			//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
			extrato.setDebitoCredito(debitoCredito);
			//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
			extrato.setTipoLancamento(tipoLancamento);
			//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
			extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
			logger.logDebug("GET CHAVE = "+extrato.getChave());
			
			try{
				jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
			}catch(Exception e){
				logger.logError("Erro extrato abc" + e.getMessage());
			}
        } catch (Exception ex) {
        }
        
    }
    return true;
}

public boolean readExtratoBancoDoBrasil3PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

	int idataMovimento	=  0;
	int idocumento      =  2;
	int inomeOrigem		=  1;
	int ivalorDocumento	=  3;

    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

		if (memFile.getStringFieldRemoveEspCharsUpper(1).replace(" ", "").startsWith("SALDO")) {continue;}

        if (naoLeMais) continue;

        try {

			try{
				dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
				dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
			} catch(Exception e){}

			if(dataMovimento.equals("")) continue;

			nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

			documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);

            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (debitoCreditoAux.contains("C")) {
                debitoCredito = "EXTRATO-CREDITO";
            }
            if (debitoCreditoAux.contains("D")) {
                debitoCredito = "EXTRATO-DEBITO";
            }

            try{
                String valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replace("D", "").replace("C", "").trim();
                valorDocAux = valorDocAux.replace(".", "").replace(",", ".");
                valorDocumento = Math.abs(Double.parseDouble(valorDocAux));
            } catch (Exception vlrd) {valorDocumento = 0;}

            if (valorDocumento == 0) continue;

			extrato = new ExtratoModel();
						
			extrato.setCodEmpresa(codEmpresa);
			//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
			extrato.setDataMovimento(dataMovimento);
			//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
			extrato.setDocumento(documento);
			//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
			extrato.setNomePortador(nomePortador);
			//logger.logInfo("GET NP = "+extrato.getNomePortador());
			extrato.setNomeOrigem(nomeOrigem);
			//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
			extrato.setLote(nomeArquivo.toUpperCase());
			//logger.logInfo("GET LOTE = "+extrato.getLote());
			extrato.setComplemento02(complemento02);
			//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
			extrato.setValorDocumento(valorDocumento);
			//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
			extrato.setDebitoCredito(debitoCredito);
			//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
			extrato.setTipoLancamento(tipoLancamento);
			//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
			extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
			logger.logDebug("GET CHAVE = "+extrato.getChave());
			
			try{
				jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
			}catch(Exception e){
				logger.logError("Erro extrato abc" + e.getMessage());
			}
        } catch (Exception ex) {
        }

    }
    return true;
}

public boolean readExtratoSISBBPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

	JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPlanilhaAux   = "";
	String nomePortador		 = "BANCO DO BRASIL";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int idataMovimento	= 0;
	int inomeOrigem		= 2;
    int idocumento      = 3;
	int ivalorDocumento	= 4;

    String nomeOrigemAux1 = "";
	String dataMovimentoAux1 = "";
    
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHAAUX")) tipoPlanilhaAux = jDados.optString("TIPOPLANILHAAUX");
	if (nomeArquivo.toUpperCase().contains("CSV")) {
		memFile.setFieldSeparator(";");
	}

    while (memFile.hasNextLine()) {
		
		idataMovimento	= 0;
		inomeOrigem		= 2;
    	idocumento      = 3;
		ivalorDocumento	= 4;
		nomeOrigemAux1 = "";
		dataMovimentoAux1 = "";
        
		String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		
        dataMovimentoAux1 = getCampoDate( memFile.getStringFieldRemoveEspCharsUpper(idataMovimento) );
        if( dataMovimentoAux1.equals("") ){
			nomeOrigemAux1 = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem-2); 
			if( memFile.getFieldsSize() < 2 && !nomeOrigemAux1.equals("") && !nomeOrigemAux1.contains("INFORMACOES ADICIONAIS") ){
				nomeOrigem = nomeOrigem + nomeOrigemAux1;
			}
		}

		///////salva aqui pos loop as variaveis e inicia a busca dos argumentos novamente
			if( !dataMovimento.equals("") && !nomeOrigem.equals("") ){
				
				logger.logInfo(/*debitoCredito + */" | nomePortador:" + nomePortador + " | dataMovimento:" + dataMovimento + " | nomeOrigem:" + nomeOrigem + " | documento:" + documento + " | valorDocumento:" +  valorDocumento);	

			try {
				// Buscar Extrato por Chave na Tabela IO_EXTRATO.
				try{
					jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
				}catch(Exception e){
					logger.logError("Erro extrato abc" + e.getMessage());
				}
			} catch (Exception ex) { }
		}


		dataMovimento = getCampoDate( memFile.getStringFieldRemoveEspCharsUpper(idataMovimento) );
        if( dataMovimento.equals("") ) continue;

		if( memFile.getFieldsSize() <= 4 && !(memFile.getStringFieldRemoveEspCharsUpper(1).length() < 8) ){
			inomeOrigem -= 1;
			idocumento -= 1;
			ivalorDocumento -= 1;
		}

		if( memFile.getFieldsSize() == 5 &&
			!(memFile.getStringFieldRemoveEspCharsUpper(1).trim().length() < 8) && 
			((memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("C") || memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("D")) &&
			(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento-1).contains("C") || memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento-1).contains("D"))) ){
			inomeOrigem -= 1;
			idocumento -= 1;
			ivalorDocumento -= 1;
		}

		if( memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim().equals("SALDO ANTERIOR") || memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim().equals("S A L D O") ) continue;

		documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento).trim();

		nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

		try{
            valorDocumento = memFile.getDoubleField(ivalorDocumento);
        }catch(Exception e){ }

        debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
        if (debitoCreditoAux.contains("D")) {
            debitoCredito = "EXTRATO-DEBITO";
        } else {
            debitoCredito = "EXTRATO-CREDITO";
        }

		if( valorDocumento == 0 ) continue;
		valorDocumento = Math.abs(valorDocumento);
		
		extrato = new ExtratoModel();
						
			extrato.setCodEmpresa(codEmpresa);
			//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
			extrato.setDataMovimento(dataMovimento);
			//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
			extrato.setDocumento(documento);
			//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
			extrato.setNomePortador(nomePortador);
			//logger.logInfo("GET NP = "+extrato.getNomePortador());
			extrato.setNomeOrigem(nomeOrigem);
			//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
			extrato.setLote(nomeArquivo.toUpperCase());
			//logger.logInfo("GET LOTE = "+extrato.getLote());
			extrato.setComplemento02(complemento02);
			//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
			extrato.setValorDocumento(valorDocumento);
			//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
			extrato.setDebitoCredito(debitoCredito);
			//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
			extrato.setTipoLancamento(tipoLancamento);
			//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
			extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
			logger.logDebug("GET CHAVE = "+extrato.getChave());
			
	}
    return true;
}


public boolean readExtratoSicrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	boolean hasNewChave = false; 
    if(jDados.has("HASNEWCHAVE"))  hasNewChave  = jDados.optBoolean("HASNEWCHAVE"); 
    String tipoLancamento    = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= 0;
	int idocumento      = 2;
	int inomePortador	=-1;
	int inomeOrigem		= 1;
	int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","").replaceAll("\\|", "");
    complemento01 = nomePortador.replaceAll("\\?","").replaceAll("\\|", "");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
	
	boolean naoLeMais = false;

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		// logger.logInfo("LINHAAAAAA " + line);
		if (line.startsWith("SICREDI FONE")) continue;
		if (line.startsWith("0800")) continue;
		if (line.startsWith("SAC")) continue;
		if (line.startsWith("OUVIDORIA")) continue;
		if (line.startsWith("VENCIMENTO DO CHEQUE")) {
			naoLeMais = true;
			continue;
		}
		if (naoLeMais) continue;
        if (memFile.getFieldsSize() == 2) continue;
		//if (memFile.getFieldsSize() == 1) {
		
        if (memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO")) { //2310-019873
			// logger.logInfo("MFSC " + memFile.getStringFieldRemoveEspCharsUpper(0));
			nomeOrigem += " " + StringUtil.removeSpecialCharsToUC(memFile.getStringFieldRemoveEspCharsUpper(0)).replace("\u0000", "E");
			
			try {
				dbIOCont.update("IO_EXTRATO")
				.fields("HISTORICO")
				.where("CHAVE = ? ")
				.param(nomeOrigem)
				.param(chaveExtrato)
				.execute();
			} catch (Exception sqlUpdateException) {
			}
        } else {
            try {
                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { }
                    }
                }
                documento = "";
                // logger.logInfo("BTL -> 5737|  -> " + line  + "|  -> " + memFile.getFieldsSize()  );
                if (memFile.getFieldsSize() == 4) {
                    nomeOrigem      = "";
                    nomeOrigem		= StringUtil.removeSpecialCharsToUC(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replace("\u0000", "E").replaceAll("\"","").replaceAll("\\?","")).trim();

                    valorDocumento  = 0;
                    try{valorDocumento = memFile.getDoubleField(ivalorDocumento - 1);}
                    catch (Exception vlrd) { valorDocumento = 0; }
                } else {
                    nomeOrigem      = "";
                    nomeOrigem		= StringUtil.removeSpecialCharsToUC(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replace("\u0000", "E").replaceAll("\"","").replaceAll("\\?","")).trim();
                    
                    documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();

                    valorDocumento  = 0;
                    try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                    catch (Exception vlrd) { valorDocumento = 0; }

                }
				// logger.logInfo("SIVALOR " + valorDocumento + " | " + dataMovimento);
				
                if (valorDocumento == 0) continue;
                if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
                if (valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                valorDocumento = Math.abs(valorDocumento);

                complemento02 = documento;

                extrato = new ExtratoModel();
						
				extrato.setCodEmpresa(codEmpresa);
				//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
				extrato.setDataMovimento(dataMovimento);
				//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
				extrato.setDocumento(documento);
				//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
				extrato.setNomePortador(nomePortador);
				//logger.logInfo("GET NP = "+extrato.getNomePortador());
				extrato.setNomeOrigem(nomeOrigem);
				//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
				extrato.setLote(nomeArquivo.toUpperCase());
				//logger.logInfo("GET LOTE = "+extrato.getLote());
				extrato.setComplemento02(complemento02);
				//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
				extrato.setValorDocumento(valorDocumento);
				//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
				extrato.setDebitoCredito(debitoCredito);
				//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
				extrato.setTipoLancamento(tipoLancamento);
				//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
				extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
				logger.logDebug("GET CHAVE = "+extrato.getChave());
				
				try{
					jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
				}catch(Exception e){
					logger.logError("Erro extrato abc" + e.getMessage());
				}
            } catch (Exception ex) {
            }
        }
    }
    return true;
}


public boolean readExtratoCaixaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	
	JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;
	//logger.logInfo("PADRAO CAIXA PDF123");


    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
	boolean hasNewChave = false; 
    if(jDados.has("HASNEWCHAVE"))  hasNewChave  = jDados.optBoolean("HASNEWCHAVE"); 
    String tipoLancamento    = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPadrao  = "";

	String valorDocAux = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= 0;
	int idocumento      = 1;
	int inomePortador	=-1;
	int inomeOrigem		= 2;
	int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

	boolean tipoUmSemSaldo = false;
	String linhaRun = "";

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOPADRAO"))   tipoPadrao   = jDados.optString("TIPOPADRAO");
    if(jDados.has("LINHA"))   	   linhaRun     = jDados.optString("LINHA");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

	if(tipoPadrao.equals("001") && linhaRun.contains("DATA") && !linhaRun.contains("SALDO")) tipoUmSemSaldo = true;

	//logger.logInfo("Tipo: "+tipoPadrao);

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

		if (line.contains("SALDO") && line.contains("ANTERIOR")) continue;
		if (line.contains("SALDO") && line.contains("DIA")) continue;
		if (line.contains("SAC") && line.contains("CAIXA")) continue;
		if (line.contains("PESSOAS") && line.contains("DEFICIENCIA")) continue;
		if (line.contains("OUVIDORIA") && line.contains("0800")) continue;
		if (line.contains("ALO CAIXA") && line.contains("0800")) continue;
		if (line.contains("HELP") && line.contains("DESK")) continue;
		if (line.startsWith("PAGINA") && memFile.getFieldsSize() == 1) continue;
		if (line.startsWith("SUJEITO") && memFile.getFieldsSize() == 1) continue;
		if (line.contains("INTERNETBANKING") && line.contains("IMPRIME")) continue;
		if (line.contains("CAIXA.GOV.BR")) continue;


		if(line.toUpperCase().contains("CONTA:") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && memFile.getStringFieldRemoveEspCharsUpper(3).equals("")){
			nomePortador = "CEF - " + cutString(line,line.lastIndexOf("|"),line.length()).replaceAll(";", " ");
		}
		//Douglas. Feito para o Chamado #2304-003957 para leitura das colunas 1 2 e 3
		if(line.toUpperCase().contains("CONTA:") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(3).equals("")){
			nomePortador = "CEF - " + memFile.getStringFieldRemoveEspCharsUpper(1) + " / " + memFile.getStringFieldRemoveEspCharsUpper(2) + " / " + memFile.getStringFieldRemoveEspCharsUpper(3);
		}
		
		if(tipoPadrao.equals("010")){
			String linhaLimpa = line.replaceAll("  ", " ");
			if(linhaLimpa.contains("  ")){
				boolean limpouu = true;
				while(limpouu){
					if(linhaLimpa.contains("  ")){
						linhaLimpa = linhaLimpa.replaceAll("  ", " ");
					}else{
						limpouu = false;
					}
				}
			}
			String[] linhaArray = linhaLimpa.split(" ");

			dataMovimento = getCampoDate(linhaArray[0]);

			documento = linhaArray[1];

			nomeOrigem = "";
			for(int i = 2; i < (linhaArray.length-4); i++){
				nomeOrigem += " " + linhaArray[i];
			}
			try{
				valorDocumento = Double.parseDouble(linhaArray[linhaArray.length-4].replaceAll("\\.", "").replaceAll(",", ""))/100;
			}catch(Exception e){
				valorDocumento = 0;
			}
			debitoCreditoAux = linhaArray[linhaArray.length-3];
		}

		// logger.logInfo("DENTRO DO EXTRAto tipoPadrao -> " + tipoPadrao);
		//logger.logInfo("linelength " + line.length());
		if(tipoPadrao.contains("002")){
			if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOC") && line.contains("VALOR")) {
				// logger.logInfo("ENTROU IDX");
				idataMovimento	= -1;
				idocumento      = -1;
				inomePortador	= -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA"))      idataMovimento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR"))     ivalorDocumento = i;
				}
				// logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento);
				continue;
			}
		}
		if(tipoPadrao.contains("001")){
			if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOC") && line.contains("VALOR")) {
				 logger.logInfo("ENTROU IDX");
				idataMovimento	= -1;
				idocumento      = -1;
				inomePortador	= -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					// if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i+1;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i; //Correção do chamado BUG CAIXA -> 2401-027811
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA"))      idataMovimento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR"))     ivalorDocumento = i;
				}
				// logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento);
				continue;
			}

			if(line.startsWith("SALDO")) continue;
		}
		if(tipoPadrao.contains("003")){
			if (line.contains("MOVIMENTO") && line.contains("HISTORICO") && line.contains("DOCUMENTO")) {
				idataMovimento	= -1;
				idocumento      = -1;
				inomeOrigem		= -1;
				ivalorDocumento	= -1;
				for (int i = 0; i < memFile.getFieldsSize(); i++) {
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCUMENTO"))       idocumento = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
					if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("MOVIMENTO"))      idataMovimento = i;
					ivalorDocumento = 4;
				}
				// logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento + " | LIN == "+line);
				continue;
			}
			if(ivalorDocumento > 0){
				if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;
			}
		}
		if(tipoPadrao.contains("004")){
			idataMovimento = 0;

			if (memFile.getStringFieldRemoveEspCharsUpper(1).trim().equals("C") || memFile.getStringFieldRemoveEspCharsUpper(1).trim().equals("D")) {
				inomeOrigem = 2;
				idocumento = 2;
				ivalorDocumento = 5;

				complemento03 = memFile.getStringFieldRemoveEspCharsUpper(3);
			}
			else {
				inomeOrigem = 1;
				idocumento = 1;
				ivalorDocumento = 4;

				complemento03 = memFile.getStringFieldRemoveEspCharsUpper(2);
			}

			if(ivalorDocumento > 0){
				if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;
			}
		}

        if (memFile.getFieldsSize() == 1 && !tipoPadrao.equals("010")) {
			if(tipoPadrao.equals("001") && memFile.getStringFieldRemoveEspCharsUpper(0).trim().startsWith("EXTRATO")) {
				continue;
			} else {
				nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
				try {
					dbIOCont.update("IO_EXTRATO")
					.fields("HISTORICO")
					.where("CHAVE = ? ")
					.param(nomeOrigem)
					.param(extrato.getChave())
					.execute();
				} catch (Exception sqlUpdateException) {
				}
			}
        } else {
				// logger.logInfo("DTS " + dataString);
            try {
				
				if(!tipoPadrao.equals("010")){

					String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");


					if (dataString.equals("000000")) continue;
					try {
						Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt1) {
						try {
							Date dt = memFile.getDateField(idataMovimento);
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) {
							try {
								dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
								Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
								dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
								dataLote = DateUtil.dateToString(dt, "yyyy-MM");
							} catch (Exception dt2) { continue; }
						}
					}



					if (dataMovimento.equals("")) continue;

					valorDocumento  = 0;
					debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("[^A-Za-z]", "").trim();
					try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
					catch (Exception vlrd) { valorDocumento = 0; }

					//2401-026791
					if(tipoPadrao.equals("001") && memFile.getFieldsSize() > 4 && tipoUmSemSaldo) valorDocumento = 1;

					if (valorDocumento == 0) continue;


					nomeOrigem      = "";
					nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
					if (nomeOrigem.contains("SALDO C/C")) continue;
					documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
					complemento02 = documento;
				
				}

				//2401-026791
				if(tipoPadrao.equals("001") && memFile.getFieldsSize() > 4 && tipoUmSemSaldo){
					if(memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim().equals("D") ||
						memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim().equals("C")){
						ivalorDocumento = memFile.getFieldsSize()-2;
					} else {
						ivalorDocumento = memFile.getFieldsSize()-1;
					}
					valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replace("+", "").replace("-", "").replace(".", "").replace(",", ".").replace("R$", "").replace("D", "").replace("C", "").trim();
					valorDocumento  = 0;
					try{valorDocumento = Double.parseDouble(valorDocAux);}
					catch (Exception vlrd) { valorDocumento = 0; }

					debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1);

					documento = memFile.getStringFieldRemoveEspCharsUpper(1);

					for(int i = 2; i < ivalorDocumento; i++){
						if(i == 2) nomeOrigem = "";
						nomeOrigem+=" "+memFile.getStringFieldRemoveEspCharsUpper(i);
					}
				}


				if(tipoPadrao.equals("003")){
					if( memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("D") ||
						memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")){ 
						debitoCredito = "EXTRATO-DEBITO";
					}else{ 
						debitoCredito = "EXTRATO-CREDITO";
					}
				}
				else if (tipoPadrao.equals("004")) {
					if (complemento03.contains("D")) debitoCredito = "EXTRATO-DEBITO";
					if (complemento03.contains("C")) debitoCredito = "EXTRATO-CREDITO";
				}
				else{
                if (!debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-CREDITO";
                if ( debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-DEBITO";
				}
                // logger.logInfo("BTL -> 5565|  -> " + dataMovimento  + "|  -> " + valorDocumento  + "|  -> " + debitoCredito  );



                extrato = new ExtratoModel();
						
				extrato.setCodEmpresa(codEmpresa);
				//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
				extrato.setDataMovimento(dataMovimento);
				//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
				extrato.setDocumento(documento);
				//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
				extrato.setNomePortador(nomePortador);
				//logger.logInfo("GET NP = "+extrato.getNomePortador());
				extrato.setNomeOrigem(nomeOrigem);
				//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
				extrato.setLote(nomeArquivo.toUpperCase());
				//logger.logInfo("GET LOTE = "+extrato.getLote());
				extrato.setComplemento02(complemento02);
				//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
				extrato.setValorDocumento(valorDocumento);
				//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
				extrato.setDebitoCredito(debitoCredito);
				//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
				extrato.setTipoLancamento(tipoLancamento);
				//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
				extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
				logger.logDebug("GET CHAVE = "+extrato.getChave());
				
				try{
					jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
				}catch(Exception e){
					logger.logError("Erro extrato abc" + e.getMessage());
				}
            } catch (Exception ex) {
            }
        }
    }
    return true;
}

public boolean readExtratoCefPDF4(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	boolean hasNewChave = false; 
    if(jDados.has("HASNEWCHAVE"))  hasNewChave  = jDados.optBoolean("HASNEWCHAVE"); 
    String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPlanilhaAux   = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;


    int idataMovimento	= 1;
	int idocumento      = 2;
	int inomePortador	= 0;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHAAUX")) tipoPlanilhaAux = jDados.optString("TIPOPLANILHAAUX"); //#2311-021318 - Leal
	if (nomeArquivo.toUpperCase().contains("CSV")) {
		memFile.setFieldSeparator(";");
	}

    //#2311-021318 - Leal
    if(tipoPlanilhaAux.contains("005")) idataMovimento = 0;

	//logger.logInfo("LOG IDATAMOVIMENTO - " + idataMovimento);

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        //if (memFile.getStringFieldRemoveEspCharsUpper(1).replace(" ", "").startsWith("SALDO")) {continue;}
        if (memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("AGENCIA:")) {
            nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador);
        }
		if (line.startsWith("FILE:")) {naoLeMais = true;}
        if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("EXTRATO POR PERIODO")) {naoLeMais = true;}
        if (line.startsWith("DATA DE")) {
            naoLeMais = false;
            continue;
        }
        if (memFile.getStringFieldRemoveEspCharsUpper(3).contains("SALDO DIA")) {continue;}
        if (memFile.getStringFieldRemoveEspCharsUpper(3).contains("BLOQ.SALDO")) {continue;}
        if (naoLeMais) continue;
        try {
            try {
                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try {
                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) { }
                }
            }
            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (debitoCreditoAux.contains("-")) {
                debitoCredito = "EXTRATO-DEBITO";
            } else {
                debitoCredito = "EXTRATO-CREDITO";
            }
            valorDocumento  = 0;
            try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
            catch (Exception vlrd) { valorDocumento = 0; }
            //Tenta capturar o valor caso o memFile.getDoubleField tenha falhado
            if (valorDocumento == 0 && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).matches("[\\d\\.\\)\\-,\\s\\(]*")) {
                try {
                    valorDocumento = capturaValor(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
                } catch (Exception ex) {logger.logInfo("Erro ao capturar valor -> " + ex.getMessage());}
            }
            if (valorDocumento == 0) continue;
            nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
			documento       = "";
			documento       = memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").replaceAll("\\?","").trim();
			
			extrato = new ExtratoModel();
						
			extrato.setCodEmpresa(codEmpresa);
			//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
			extrato.setDataMovimento(dataMovimento);
			//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
			extrato.setDocumento(documento);
			//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
			extrato.setNomePortador(nomePortador);
			//logger.logInfo("GET NP = "+extrato.getNomePortador());
			extrato.setNomeOrigem(nomeOrigem);
			//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
			extrato.setLote(nomeArquivo.toUpperCase());
			//logger.logInfo("GET LOTE = "+extrato.getLote());
			extrato.setComplemento02(complemento02);
			//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
			extrato.setValorDocumento(valorDocumento);
			//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
			extrato.setDebitoCredito(debitoCredito);
			//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
			extrato.setTipoLancamento(tipoLancamento);
			//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
			extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
			logger.logDebug("GET CHAVE = "+extrato.getChave());
			
			try{
				jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
			}catch(Exception e){
				logger.logError("Erro extrato abc" + e.getMessage());
			}
        } catch (Exception ex) {
        }
    }
    return true;
}

//2312-024906
public boolean readExtratoCefPDF6(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;
	
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	boolean hasNewChave = false; 
    if(jDados.has("HASNEWCHAVE"))  hasNewChave  = jDados.optBoolean("HASNEWCHAVE"); 
    String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;

	int colunaVerificado = 0;
    int idataMovimento	= 1;
	int idocumento      = 2;
	int inomePortador	= 0;
	int inomeOrigem		= 3;
	int ivalorDocumento	= 4;

    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
	//if (nomeArquivo.toUpperCase().contains("CSV")) {
	//	memFile.setFieldSeparator(";");
	//}

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

		logger.logInfo("Linha: "+line);

		colunaVerificado = 0;

        if (naoLeMais) continue;
        try {

			for(int i = 0; i < 2; i++){

				idataMovimento = -1;
				idocumento = -1;
				inomeOrigem = -1;
				ivalorDocumento = -1;

				//Tratamento para pegar as colunas de cada lancamento a partir da coluna com a data
				for(int col = colunaVerificado; col < memFile.getFieldsSize(); col++){
					if(memFile.getStringFieldRemoveEspCharsUpper(col).trim().length() == 10 && !memFile.getStringFieldRemoveEspCharsUpper(col).contains(",") &&
					memFile.getStringFieldRemoveEspCharsUpper(col).contains("/")){
						idataMovimento = col;
						idocumento = col + 1;
						inomeOrigem = col + 2;
						ivalorDocumento = col + 3;

						colunaVerificado = col + 4;
						break;
					}
				}

				if(idataMovimento == -1 && ivalorDocumento == -1) continue;

				try {
					Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
					dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
					dataLote = DateUtil.dateToString(dt, "yyyy-MM");
				} catch (Exception dt1) {
					try {
						Date dt = memFile.getDateField(idataMovimento);
						dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
						dataLote = DateUtil.dateToString(dt, "yyyy-MM");
					} catch (Exception dt2) {
						try {
							String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
							Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
							dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
							dataLote = DateUtil.dateToString(dt, "yyyy-MM");
						} catch (Exception dt2) { }
					}
				}

				logger.logInfo("Data: "+dataMovimento);

				if(dataMovimento.equals("")) continue;

				debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);

				if (debitoCreditoAux.contains("D")) {
					debitoCredito = "EXTRATO-DEBITO";
				} else if(debitoCreditoAux.contains("C")) {
					debitoCredito = "EXTRATO-CREDITO";
				}

				valorDocumento  = 0;

				try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
				catch (Exception vlrd) { valorDocumento = 0; }

				logger.logInfo("Valor: "+valorDocumento);

				if (valorDocumento == 0) continue;

				nomeOrigem      = "";
				nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim();

				documento       = "";
				documento       = memFile.getStringFieldRemoveEspCharsUpper(idocumento).trim();

				extrato = new ExtratoModel();
						
				extrato.setCodEmpresa(codEmpresa);
				//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
				extrato.setDataMovimento(dataMovimento);
				//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
				extrato.setDocumento(documento);
				//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
				extrato.setNomePortador(nomePortador);
				//logger.logInfo("GET NP = "+extrato.getNomePortador());
				extrato.setNomeOrigem(nomeOrigem);
				//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
				extrato.setLote(nomeArquivo.toUpperCase());
				//logger.logInfo("GET LOTE = "+extrato.getLote());
				extrato.setComplemento02(complemento02);
				//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
				extrato.setValorDocumento(valorDocumento);
				//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
				extrato.setDebitoCredito(debitoCredito);
				//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
				extrato.setTipoLancamento(tipoLancamento);
				//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
				extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
				logger.logDebug("GET CHAVE = "+extrato.getChave());
				
				try{
					jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
				}catch(Exception e){
					logger.logError("Erro extrato abc" + e.getMessage());
				}
			}
        } catch (Exception ex) {
        }
    }
    return true;
}

//2405-040179
public boolean readExtratoCefPDF7(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;
	
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
	String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;

    int idataMovimento	= 0;
	int idocumento      = 1;
	int inomeOrigem		= 2;
	int ivalorDocumento	= 3;

	String dataAux = "";

    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		
        try {

			if(line.contains("SALDO") && (line.contains("ANTERIOR") || line.contains("DIA"))) continue;
			dataMovimento = "";

			try{
				dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim());
				dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
			} catch (Exception e) {
				dataMovimento = "";
				dataLote = "";
			}

			if(dataMovimento.equals("")) continue;

			if(dataMovimento.contains("/20") && memFile.getFieldsSize() == 1){
				dataAux = dataMovimento;
				continue;
			}

			if(!dataAux.equals("")){
				idocumento = 0;
				inomeOrigem = 1;
				ivalorDocumento = 2;
				dataMovimento = dataAux;
			} else {
				idocumento = 1;
				inomeOrigem = 2;
				ivalorDocumento = 3;
			}

			debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);

			if (debitoCreditoAux.contains("D")) {
				debitoCredito = "EXTRATO-DEBITO";
			} else if(debitoCreditoAux.contains("C")) {
				debitoCredito = "EXTRATO-CREDITO";
			}

			valorDocumento  = 0;

			try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
			catch (Exception vlrd) { valorDocumento = 0; }

			if (valorDocumento == 0) continue;

			nomeOrigem      = "";
			nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim();

			documento       = "";
			documento       = memFile.getStringFieldRemoveEspCharsUpper(idocumento).trim();

			dataAux = "";
			
			extrato = new ExtratoModel();
						
			extrato.setCodEmpresa(codEmpresa);
			//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
			extrato.setDataMovimento(dataMovimento);
			//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
			extrato.setDocumento(documento);
			//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
			extrato.setNomePortador(nomePortador);
			//logger.logInfo("GET NP = "+extrato.getNomePortador());
			extrato.setNomeOrigem(nomeOrigem);
			//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
			extrato.setLote(nomeArquivo.toUpperCase());
			//logger.logInfo("GET LOTE = "+extrato.getLote());
			extrato.setComplemento02(complemento02);
			//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
			extrato.setValorDocumento(valorDocumento);
			//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
			extrato.setDebitoCredito(debitoCredito);
			//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
			extrato.setTipoLancamento(tipoLancamento);
			//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
			extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
			logger.logDebug("GET CHAVE = "+extrato.getChave());
			
			try{
				jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
			}catch(Exception e){
				logger.logError("Erro extrato abc" + e.getMessage());
			}

			
        } catch (Exception ex) {
        }
    }
    return true;
}



public boolean readExtratBradesco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();
	// logger.logInfo("ENTROU ARRRRR BRAD");
	logger.logInfo("ENTROU BRADESCO");
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = new ExtratoModel();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
	String documentoAux      = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
	String nomeContabilidade = "";
	String nomeEmpresa       = "";
    String tipoLancamento    = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String anoData			 = "";
    String tipoExtrato		 = "";
    String colunaB   		 = "";
	String camposBanco       = "";

    boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorAlternativo  = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    int idataMovimento	= 0;
    int idocumento      = 2;
    int inomePortador	=-1;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 3;
    String nomeOrigemAnterior = "";
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOEXTRATO"))  tipoExtrato  = jDados.optString("TIPOEXTRATO");
	if(jDados.has("NOMECONTABILIDADE")) nomeContabilidade = jDados.optString("NOMECONTABILIDADE");
	if(jDados.has("NOMEEMPRESA")) nomeEmpresa = jDados.optString("NOMEEMPRESA");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
	
	int cont = 0;
	int contAuxiliar = 0;
	int contadorAuxiliar = 0;
	
	
	boolean valorColB = false;
	boolean linhaPrincipal = false;
	boolean umCampo = true;
	boolean quebraFolha = false;
	boolean quebraFolha2 = false;
	
	boolean achouData = false;
	boolean lerPortador = false;
	String tipoPadrao = "";
	
	// logger.logInfo("TE " + tipoExtrato);
	
    while (memFile.hasNextLine()) {

        try {

			extrato = new ExtratoModel(extrato);
			
			

            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
			
			// logger.logInfo("TIPO EXTRATO BRADESCO 2 == "+nomeArquivo.toUpperCase());
 			
			if(line.contains("DATA") && (line.contains("HISTORICO") || line.contains("LANCAMENTO")) && (line.contains("DOCTO") || line.contains("DCTO")) && line.contains("CREDITO") && line.contains("DEBITO") && tipoExtrato.contains("002")){
				tipoPadrao = "002";
				// logger.logInfo("ENTROU 002 bradesco pdf");
				// continue;
			}	
			
			
			// logger.logInfo("tipoPdrao -> " + tipoPadrao);
			
			if(!tipoPadrao.equals("002")){
				
				//Alguns arquivos vem separados por "  "
				if (!line.contains(";") && line.contains("  ")) {
					// logger.logInfo("Entrou SEPARATOR");
					memFile.setFieldSeparator("  ");
				}
				
				if(line.startsWith("ULTIMOS LANCAMENTOS")) naoLeMais = true;
				
				//if (line.startsWith("SALDOS INVEST")) naoLeMais = true; - #2307-010918
				//if (line.startsWith("OS DADOS ACIMA")) naoLeMais = true; - #2307-010918
				if (line.startsWith("HTTPS")) continue;
				if (line.startsWith("NOME DO")) continue;
				if (line.startsWith("EXTRATO MENSAL")) continue;
				if (line.startsWith("DATA DA OPERACAO")) continue;
				if (line.contains("CNPJ:") && line.contains("/") && line.contains(".") && line.contains("-")) continue;
					
				// logger.logInfo("UC " + line);
				
				if (umCampo && memFile.getFieldsSize() > 1) {
					quebraFolha = false;
					quebraFolha2 = false;
					// logger.logInfo("ENTROU IF1| "+line+" | "+memFile.getFieldsSize()+" | "+umCampo); Douglas
				}
				
				if (quebraFolha && memFile.getFieldsSize() == 1) {
					quebraFolha = false;
					quebraFolha2 = false;
				}
				
				if (!umCampo && quebraFolha2 && memFile.getFieldsSize() == 1) {
					// logger.logInfo("DEU CERTO FOLHA " + nomeOrigem + " | " + line);
					// logger.logInfo("QF2 " + line);
					
					String nomeOrigemAux = nomeOrigem/*.replaceAll("TESTEJOTA", "") + " "*/ + " " + memFile.getStringFieldRemoveEspCharsUpper(0);
					try {
						dbIOCont.update("IO_EXTRATO")
						.fields("HISTORICO")
						.where("CHAVE = ? ")
						.param(nomeOrigemAux)
						.param(extrato.getChave())
						.execute();
					} catch (Exception sqlUpdateException) {
					}
					quebraFolha2 = false;
					continue;
				}
				if (quebraFolha2 && memFile.getFieldsSize() == 1) {
					// logger.logInfo("QF3 " + line);
					quebraFolha2 = false;
				}
				/*if (quebraFolha && memFile.getFieldsSize() == 1) {
					logger.logInfo("QF4 " + line);
					quebraFolha = false;
				}*/
				if  (quebraFolha && memFile.getFieldsSize() > 1) {
					// logger.logInfo("QF5 " + line);
					quebraFolha2 = true;
					quebraFolha = false;
				}
				
				if (memFile.getFieldsSize() > 1 && !line.startsWith("FOLHA")) umCampo = false;
				if (memFile.getFieldsSize() == 1 && !line.startsWith("FOLHA")) umCampo = true;
				
				/*if (quebraFolha2 && memFile.getFieldsSize() == 1) {
					
					logger.logInfo("DEU CERTO FOLHA " + nomeOrigem + " | " + memFile.getStringFieldRemoveEspCharsUpper(0) + " | " + chaveExtrato);
					
					String nomeOrigemAux = nomeOrigem.replaceAll("TESTEJOTA", "") + " " + memFile.getStringFieldRemoveEspCharsUpper(0);
					
					try {
						dbIOCont.update("IO_EXTRATO")
						.fields("HISTORICO")
						.where("CHAVE = ? ")
						.param(nomeOrigemAux)
						.param(chaveExtrato)
						.execute();
					} catch (Exception sqlUpdateException) {
					}
					quebraFolha2 = false;
					continue;
				}
				
				if (quebraFolha && memFile.getFieldsSize() > 1) {
					quebraFolha = false;
					quebraFolha2 = true;
				}*/
				
				// if (quebraFolha && memFile.getFieldsSize() > 1) quebraFolha = false; 
				if (line.startsWith("FOLHA")&& memFile.getFieldsSize() == 1) {
					// nomeOrigem = "";
					// complemento02 = "";
					// nomeOrigemAnterior = "";
					quebraFolha = true;
					// logger.logInfo("NOFOLHA " + nomeOrigem);
					continue;
				}
				if (naoLeMais) continue;
				

				 
				if ((achouData &&  
					memFile.getStringFieldRemoveEspCharsUpper(0).equals("BRADESCO VIDA E PREVIDENCIA SA") && 
					memFile.getStringFieldRemoveEspCharsUpper(1).equals("") &&
					memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) || (achouData && tipoExtrato.equals("003") && //#2306-006655
					colunaB.matches("[0-9]+") && //#2306-006655
					memFile.getFieldsSize() == 1)) { //#2306-006655
					 
					achouData = false; 				 
					
					extratoEmpresa = dbIOCont.sql("SELECT CHAVE,HISTORICO,COMPLEMENTO FROM IO_EXTRATO WHERE CHAVE = ?")
						.fields("CHAVE,HISTORICO,COMPLEMENTO")
						.param(extrato.getChave())
						.queryUnique();
						
					if (extratoEmpresa != null && extratoEmpresa.has("CHAVE")) {
						try {
							
							dbIOCont.update("IO_EXTRATO")
							.fields("HISTORICO,COMPLEMENTO")
							.where("CHAVE = ? ")
							.param(extratoEmpresa.optString("HISTORICO")    + " - " + memFile.getStringFieldRemoveEspCharsUpper(0))
							.param(extratoEmpresa.optString("COMPLEMENTO") + " - " + memFile.getStringFieldRemoveEspCharsUpper(0))
							.param(extrato.getChave())
							.execute();
						} catch (Exception sqlUpdateException) {
							logger.logDebug("Erro no update: " + sqlUpdateException);
						}
					}
					continue;
				}  
				 
				if (memFile.getStringFieldRemoveEspCharsUpper(0).equals("VALOR DISPONIVEL") && memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) continue;
				
				achouData = false;
				
				colunaB = memFile.getStringFieldRemoveEspCharsUpper(1); //#2306-006655
				
				String dataExtrato = "";
				try{
					// logger.logInfo("ENTROU TRY");Douglas
					//if (!memFile.getStringFieldRemoveEspCharsUpper(4).equals("")) dataExtrato     = getDate(dataExtrato, 0, line, false, "", memFile, logger);
					//else if (cutString(line, 0, "\\|").contains("/") && !memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) dataExtrato     = getDate(dataExtrato, 0, line, false, "", memFile, logger);
					if (!memFile.getStringFieldRemoveEspCharsUpper(4).equals("") && memFile.getStringFieldRemoveEspCharsUpper(0).trim().length() <= 10) dataExtrato = getDate(dataExtrato, 0, line, false, "", memFile, logger);
					else if (cutString(line, 0, "\\|").contains("/") && 
							 !memFile.getStringFieldRemoveEspCharsUpper(3).equals("") && 
							 memFile.getStringFieldRemoveEspCharsUpper(0).trim().length() <= 10) dataExtrato = getDate(dataExtrato, 0, line, false, "", memFile, logger);
				}catch(Exception e){
					// dataMovimento   = "";
					// dataLote        = "";
					// logger.logInfo("ENTROU CATCH");Douglas
				}
				if (dataExtrato.equals("")) {
					nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(0);
					complemento02  = memFile.getStringFieldRemoveEspCharsUpper(1);
				}
				else {
					if(!memFile.getStringFieldRemoveEspCharsUpper(1).matches("[0-9]+") && tipoExtrato.equals("003")){
						nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(1); //#2306-006655						
					}
					if(!tipoExtrato.equals("003")){
						nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(1); //#2306-006655
					}
					complemento02  = memFile.getStringFieldRemoveEspCharsUpper(2);
					// logger.logInfo("ENTROU ELSE1| "+tipoExtrato);Douglas
				}
				if (!dataExtrato.equals("")) {
					achouData = true;
					dataMovimento = dataExtrato;
					dataLote	  = getCampoDate(dataMovimento, "", "yyyy-MM");
					// logger.logInfo("ENTROU IF2| "+dataMovimento+" | "+line);Douglas
				} 

				// if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("EXTRATO DE:")) {
				// 	nomePortador = memFile.getStringFieldRemoveEspCharsUpper(1);
				// 	continue;
				// }
				

				//O portador eh lido na linha que sucede a linha que contem 'AGENCIA' e 'CONTA'
				//Felipe - 18/04/23
				if (lerPortador && nomePortador.equals("")) {
					nomePortador = memFile.getStringFieldRemoveEspCharsUpper(1);
					lerPortador = false;
				}
				else if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("AGENCIA") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("CONTA")) {
					lerPortador = true;
					// logger.logInfo("ENTROU ELSE2");Douglas
				}
				//----------------------------------------------------------------------------------------------
				
				// logger.logDebug("LINHA " + line);
				if (!memFile.getStringFieldRemoveEspCharsUpper(4).equals("")) {
					// logger.logInfo("ENTROU IF3| "+memFile.getStringFieldRemoveEspCharsUpper(4));Douglas
				   try { valorDocumento = memFile.getDoubleField(3); 
					// logger.logInfo("ENTROU TRY1| "+memFile.getDoubleField(3));Douglas
				   } catch (Exception e) { valorDocumento = 0;} 
				} else if (!memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) {
					 try { valorDocumento = memFile.getDoubleField(2);
						// logger.logInfo("ENTROU TRY2| "+memFile.getDoubleField(2));Douglas
					  } catch (Exception e) { valorDocumento = 0;} 
				} else {
					try { valorDocumento = memFile.getDoubleField(1);
					} catch (Exception e) { valorDocumento = 0;}

					valorColB = true;
				}
				if(tipoExtrato.contains("003")){
					// logger.logInfo("TIPO == "+tipoPadrao+" | LINE == "+line);
					if(!achouData){
						if (!memFile.getStringFieldRemoveEspCharsUpper(4).equals("")) {
						   try { valorDocumento = memFile.getDoubleField(4); 
							// logger.logInfo("ENTROU TRY3| ");Douglas
						   } catch (Exception e) { valorDocumento = 0;} 
						} else if (!memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) {
							 try { valorDocumento = memFile.getDoubleField(3);
								// logger.logInfo("ENTROU TRY3| ");
							  } catch (Exception e) { valorDocumento = 0;}
						} else {
							
							if(!memFile.getStringFieldRemoveEspCharsUpper(2).equals("")){
								if(memFile.getStringFieldRemoveEspCharsUpper(0).matches("[0-9]+")){//#2306-006655
									// logger.logInfo("ENTROU IF9");
									try { valorDocumento = memFile.getDoubleField(1);
										// logger.logInfo("ENTROU TRY4| ");
									} catch (Exception e) { valorDocumento = 0;}
								}else{
									try { valorDocumento = memFile.getDoubleField(2);
										// logger.logInfo("ENTROU TRY5| ");
									} catch (Exception e) { valorDocumento = 0;}									
								}
							}
							valorColB = true;
						}
						if(memFile.getFieldsSize() > 3){
							try { valorDocumento = memFile.getDoubleField(memFile.getFieldsSize()-2);
							} catch (Exception e) { valorDocumento = 0;}
						}
					}
					// if(achouData){
						// logger.logInfo("LINE EXT BRDSC 2 == "+line);
						// extratoEmpresa = dbIOCont.sql("SELECT CHAVE,HISTORICO,COMPLEMENTO FROM IO_EXTRATO WHERE CHAVE = ?")
							// .fields("CHAVE,HISTORICO,COMPLEMENTO")
							// .param(chaveExtrato)
							// .queryUnique();
							
						// if (extratoEmpresa != null && extratoEmpresa.has("CHAVE")) {
							// try {
								
								// dbIOCont.update("IO_EXTRATO")
								// .fields("VALORDOCUMENTO")
								// .where("CHAVE = ? ")
								// .param(valorAlternativo)
								// .param(chaveExtrato)
								// .execute();
							// } catch (Exception sqlUpdateException) {
								// logger.logDebug("Erro no update: " + sqlUpdateException);
							// }
						// }
						// logger.logInfo("data === "+dataMovimento+" | valorA == "+valorAlternativo + " | CHAVE == "+chaveExtrato);
					// }
				}

			   
				if (valorDocumento > 0)  debitoCredito = "EXTRATO-CREDITO";
				if (valorDocumento < 0)  debitoCredito = "EXTRATO-DEBITO";

				valorDocumento = Math.abs(valorDocumento);
				// logger.logInfo("dataMOvimento - > " + dataMovimento + " |valorDocumento -> " + valorDocumento);

				cont++;
				//contLinhaExtrato = String.valueOf(cont);
				//contLinhaExtrato = StringUtil.leftPad(contLinhaExtrato, 05, "0");
				// logger.logInfo("NO == "+nomeOrigem+" | LINE == "+line);
				if (nomeOrigem.startsWith("TRANSF CC PARA") || 
					nomeOrigem.startsWith("TRANSF.AUT. C/C") || //#2306-006655
					nomeOrigem.startsWith("DEB DESCONTO") ||
					nomeOrigem.startsWith("TED-T ELET DISP") || //#2306-006655
					nomeOrigem.startsWith("TED D") ||
					nomeOrigem.startsWith("TRANSF.POUP") ||
					nomeOrigem.startsWith("TED-TRANSF") || 
					nomeOrigem.startsWith("TRANSFE PIX") || //#2306-006655
					nomeOrigem.startsWith("TRANSF CONTAS") || //#2306-006655
					nomeOrigem.startsWith("TRANSF.MM") || //#2306-006655
					nomeOrigem.startsWith("TRANSF AUTORIZ") || 
					nomeOrigem.startsWith("DEP.DINHEIRO") || 
					nomeOrigem.startsWith("DEP DINH") || 
					nomeOrigem.startsWith("SAQUE C") || 
					nomeOrigem.startsWith("TRANSFERENCIA PIX") ||	
					nomeOrigem.startsWith("ENCARGOS") || 
					nomeOrigem.startsWith("TARIFA") || 
					nomeOrigem.startsWith("PAGTO ELETRO") || 
					nomeOrigem.startsWith("PGTO ELET TRIB") || //#2306-006655
					nomeOrigem.startsWith("PAGTO COBRANCA") || //#2306-006655
					nomeOrigem.startsWith("TEDQ DIF") || 
					nomeOrigem.startsWith("DEP CH") || 
					nomeOrigem.startsWith("DEVOL.CHEQUE") || 
					nomeOrigem.startsWith("DOC/TED") || 
					nomeOrigem.startsWith("CONTA DE") || 
					nomeOrigem.startsWith("RECEBIMENTO FORNECEDOR") || 
					nomeOrigem.startsWith("RECEB PAGFOR") || //#2306-006655
					nomeOrigem.startsWith("DEBITO AUTOMATICO") || 
					nomeOrigem.startsWith("CIELO VDA") || 
					// nomeOrigem.startsWith("CARTAO") ||	202302-0025621
					nomeOrigem.startsWith("CARTAO ALIMENTACAO") ||	//alterada essa validacao pois estava atrapalhando um caso de cartao refeicao 202302-0025621
					nomeOrigem.startsWith("DEPOSITO CHEQUE") ||	
					nomeOrigem.startsWith("ANTECIPACAO DE") ||	
					nomeOrigem.startsWith("CHO PAGO OUTRA AGENCIA") ||
					nomeOrigem.startsWith("DEP. IDENT.") ||
					nomeOrigem.startsWith("SISPAG FORNECEDORES") ||
					nomeOrigem.startsWith("BRADESCO NET EMPRESA") ||
					nomeOrigem.startsWith("TRANSF FDOS DOC-E H BANK") ||
					nomeOrigem.startsWith("DOC CREDITO AUTOMATICO") ||
					nomeOrigem.startsWith("GETNET VISA CREDITO") ||
					nomeOrigem.startsWith("CIELO VDA CREDITO") ||
					nomeOrigem.startsWith("CIELO AMEX") ||
					nomeOrigem.startsWith("AMEX ANTECIPACAO") ||
					nomeOrigem.startsWith("ELO ANTECIPACAO") ||
					nomeOrigem.startsWith("VISA ANTECIPACAO") ||
					nomeOrigem.startsWith("MASTER ANTECIPACAO") ||
					nomeOrigem.startsWith("ESTORNO DE DEPOSITO") ||
					nomeOrigem.startsWith("CHQ.PAGO OUTRA AGENCIA") ||
					nomeOrigem.startsWith("TRANSF.AUTORIZ") || 
					nomeOrigem.startsWith("DEPOSIT TRANSFER") || 
					nomeOrigem.startsWith("TARIFA CHEQUE") || 
					nomeOrigem.startsWith("VIDA E PREVIDEN") || 			
					nomeOrigem.startsWith("PARCELA OPER") || 
					nomeOrigem.startsWith("LIQUIDACAO DE COBRANCA") || 
					nomeOrigem.startsWith("DEPOSITO C/CORRENTE") || 
					nomeOrigem.startsWith("MASTER DEBITO") || 
					nomeOrigem.startsWith("REDE ELO DEBITO") ||
					nomeOrigem.startsWith("MASTER DEBITO") ||
					nomeOrigem.startsWith("DESCONTO DE CHEQUES") || 
					nomeOrigem.startsWith("DEBITO DESCONTO") || 
					nomeOrigem.startsWith("TAR COMANDADA") || 
					nomeOrigem.startsWith("TARIFA BANCARIA") || 
					nomeOrigem.startsWith("DEPOSITO EM DINHEIRO") || 
					nomeOrigem.startsWith("BX.ANT.FINANC/EMP") || 
					nomeOrigem.startsWith("DESCONTO ESCRITURAL") || 
					nomeOrigem.startsWith("LIQUIDACAO COBRANCA DESC") || 
					nomeOrigem.startsWith("CARGA CARTAO TRANSPORTES") || 
					nomeOrigem.startsWith("RECIBO DE RETIRADA") || //#2304-003842
					nomeOrigem.startsWith("OPERACAO CAPITAL GIRO") || //#2304-003842
					nomeOrigem.startsWith("DEVOLUCAO PIX") || //#2304-003842
					nomeOrigem.startsWith("DEBITO ANTECIPE CARTOES") || //#2304-003842
					nomeOrigem.startsWith("PEND EM MORA") || //#2306-006148
					nomeOrigem.startsWith("TRANSF/DEP") || //#2306-006148
					nomeOrigem.startsWith("CARTAO VISA E") || //#2306-006148
					nomeOrigem.startsWith("CIELO HIPER C") || //#2306-006148
					nomeOrigem.startsWith("CIELO ANTECIPACAO O") || //#2306-006148
					nomeOrigem.startsWith("CIELO VISA ANT") || //#2306-006148
					nomeOrigem.startsWith("CIELO MASTER ANT") || //#2306-006148
					nomeOrigem.startsWith("REDE VISA DEBITO") || //#2306-006148
					nomeOrigem.startsWith("REDE MASTER DEBITO") || //#2306-006148
					nomeOrigem.startsWith("REDE MASTER CREDITO") || //#2306-006148
					nomeOrigem.startsWith("MASTER CREDITO") || //#2306-006148
					nomeOrigem.equals("VISA CREDITO") || //#2306-006148
					nomeOrigem.equals("ELO CREDITO") || //#2306-006148
					nomeOrigem.equals("CABAL DEBITO") || //#2306-006148
					nomeOrigem.equals("RECEBIMENTO FORNECEDOR") || //#2306-006148
					nomeOrigem.startsWith("ANTECIPACAO DE CARTAO") || //#2306-006148
					nomeOrigem.startsWith("ENCARGO ANTECIP") || //#2306-006148
					nomeOrigem.startsWith("ESTORNO TARIFAS") || //#2306-006148
					nomeOrigem.startsWith("BANESCARD CREDITO") || //#2306-006148
					nomeOrigem.startsWith("PIX QR CODE DINAMICO") || //#2401-026567
					nomeOrigem.startsWith("PIX QR CODE ESTATICO") || //#2401-026567
					nomeOrigem.startsWith("BAIXA OPERACAO DESCONTO") || //#2405-038124
					(nomeOrigem.startsWith("ADI") && nomeOrigem.contains("MENTO") && nomeOrigem.contains("OPER D")) || //#2306-006148
					// nomeOrigem.startsWith("CARGA CRT") || 
					(nomeOrigem.startsWith("CHEQUE") && !nomeOrigemAnterior.startsWith("TARIFA")) ) nomeOrigemAnterior = nomeOrigem; 

				//2303-001843 - Necessário verificar a linha principal para gravar o contador, a fim de utilizá-lo na hora de manipular o nomeOrigem.
				if(memFile.getStringFieldRemoveEspCharsUpper(0).matches("[0-9]+(BRADESCO)?") && !memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && valorColB){
					contAuxiliar = cont;
					valorColB = false;
				}
				// logger.logInfo("MF FS -> " + memFile.getFieldsSize() + " |MF 0 ->> " + memFile.getStringFieldRemoveEspCharsUpper(0) + " |cont ->> " + cont + " |contAuxiliar -> " + contAuxiliar + " |NOA -> " + nomeOrigemAnterior);
				if(memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && (cont == contAuxiliar + 1) && contAuxiliar > 0 && nomeOrigemAnterior.equals("")){
					
					// logger.logInfo("ENTROU UPDATE 456 == "+line);
					
					extratoEmpresa = dbIOCont.sql("SELECT CHAVE,HISTORICO,COMPLEMENTO FROM IO_EXTRATO WHERE CHAVE = ?")
						.fields("CHAVE,HISTORICO,COMPLEMENTO")
						.param(extrato.getChave())
						.queryUnique();
						
					if (extratoEmpresa != null && extratoEmpresa.has("CHAVE")) {
						try {
							
							dbIOCont.update("IO_EXTRATO")
							.fields("HISTORICO")
							.where("CHAVE = ? ")
							.param(extratoEmpresa.optString("HISTORICO").replaceAll("[0-9]", "")    + " - " + memFile.getStringFieldRemoveEspCharsUpper(0))
							.param(extrato.getChave())
							.execute();
						} catch (Exception sqlUpdateException) {
							logger.logDebug("Erro no update: " + sqlUpdateException);
						}
					}
					continue;
				}
				
				if(memFile.getFieldsSize() > 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && valorColB){
					contadorAuxiliar = cont;
					valorColB = false;
					linhaPrincipal = true;
				}

				if(memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && (cont == contadorAuxiliar + 1) && contadorAuxiliar > 0 && nomeOrigemAnterior.equals("") && linhaPrincipal){
					
					//logger.logInfo("LINE EXT BRDSC 2 == "+line);
					// logger.logInfo("ENTROU UPDATE sergio == "+line);
					
					extratoEmpresa = dbIOCont.sql("SELECT CHAVE,HISTORICO,COMPLEMENTO FROM IO_EXTRATO WHERE CHAVE = ?")
						.fields("CHAVE,HISTORICO,COMPLEMENTO")
						.param(extrato.getChave())
						.queryUnique();
						
					if (extratoEmpresa != null && extratoEmpresa.has("CHAVE")) {
						try {
							
							dbIOCont.update("IO_EXTRATO")
							.fields("HISTORICO")
							.where("CHAVE = ? ")
							.param(extratoEmpresa.optString("HISTORICO").replaceAll("[0-9]", "")    + " " + memFile.getStringFieldRemoveEspCharsUpper(0))
							.param(extrato.getChave())
							.execute();
						} catch (Exception sqlUpdateException) {
							logger.logDebug("Erro no update: " + sqlUpdateException);
						}
					}
					linhaPrincipal = false;
					continue;
				}
				
				// logger.logInfo("LINE EXT BRDSC 2 == "+line+" NP -> "+nomePortador);
				
				//chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
				
				extrato.setCodEmpresa(codEmpresa);
				// logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
				extrato.setDataMovimento(dataMovimento);
				// logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
				extrato.setNomePortador(nomePortador);
				// logger.logInfo("GET NP = "+extrato.getNomePortador());
				extrato.setValorDocumento(valorDocumento);
				// logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
				extrato.setDebitoCredito(debitoCredito);
				// logger.logInfo("GET DC = "+extrato.getDebitoCredito());
				extrato.setTipoLancamento(tipoLancamento);
				// logger.logInfo("GET TL = "+extrato.getTipoLancamento());
				extrato.setChave(cont);
				
				// logger.logInfo("DMVV " + nomeOrigem + " | " + nomeOrigemAnterior + " | " + dataMovimento + " | " + valorDocumento + " | " + line);
				// logger.logInfo("DEE " + dataExtrato);
				// logger.logInfo("LINHAZINHA " + line);
			  
				if (dataMovimento.equals("")) continue;
				if (valorDocumento == 0) continue;
				
				if (nomeOrigem.equals("TOTAL") && nomeOrigemAnterior.equals("")) continue;
				if (nomeOrigem.startsWith("SALDO") && !nomeOrigem.startsWith("SALDO DEV")) continue;
				if (complemento02.startsWith("SALDO") && !complemento02.startsWith("SALDO DEV")) continue;
				
				if (!nomeOrigemAnterior.equals("")) {
					complemento02      = nomeOrigem;
					if (!nomeOrigemAnterior.contains(complemento02) || nomeOrigemAnterior.contains("TED INTERNET")) nomeOrigem = nomeOrigemAnterior + " " + complemento02;
					else if (nomeOrigemAnterior.contains(complemento02)) nomeOrigem = nomeOrigemAnterior;
					nomeOrigemAnterior = "";
				}

				
				//Chamado #2311-022674 Leal
				idocumento = memFile.getFieldsSize() - 3;
				//Chamado #2311-022674 Leal
				if(memFile.getStringFieldRemoveEspCharsUpper(idocumento).matches("[0-9]+")){
					documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
					documentoAux = documento;
				}
				nomeOrigem    = nomeOrigem.replaceAll("RECEBIMENTO FORNECEDOR","RECEBIMENTO FORNECEDOR ");
				complemento02 = complemento02.replaceAll("RECEBIMENTO FORNECEDOR","RECEBIMENTO FORNECEDOR ");
				
				if(nomeOrigem.contains("CHEQUE") && nomeOrigem.contains("COMPENSADO")){
					if (dataExtrato.equals("")) {
						complemento02  = memFile.getStringFieldRemoveEspCharsUpper(1);
					}
					else {
						complemento02  = memFile.getStringFieldRemoveEspCharsUpper(2);
					}
				}
			}
			
			if(tipoPadrao.equals("002")){
			
				
				achouData = false;
				
				String dataExtrato = "";
				
				if(memFile.getStringFieldRemoveEspCharsUpper(0).length() <= 10 && quantityOf(memFile.getStringFieldRemoveEspCharsUpper(0), "/") == 2) achouData = true;
				if(!memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && achouData == false && memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) nomeOrigemAnterior = memFile.getStringFieldRemoveEspCharsUpper(0);
				
				try{
					if (!memFile.getStringFieldRemoveEspCharsUpper(4).equals("")) dataExtrato     = getDate(dataExtrato, 0, line, false, "", memFile, logger);
					else if (cutString(line, 0, "\\|").contains("/") && !memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) dataExtrato     = getDate(dataExtrato, 0, line, false, "", memFile, logger);
				}catch(Exception e){
					// dataMovimento   = "";
					// dataLote        = "";
				}
				if (achouData == false) {
					nomeOrigem = nomeOrigemAnterior + " " +memFile.getStringFieldRemoveEspCharsUpper(0);
					complemento02  = memFile.getStringFieldRemoveEspCharsUpper(1);
					// Douglas # 202301-0024144
					if(!memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && achouData == false && !memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) nomeOrigemAnterior = "";
					try { valorDocumento = memFile.getDoubleField(2); 
					} catch (Exception e) { valorDocumento = 0;} 
				}
				else {
					nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(1);
					complemento02  = memFile.getStringFieldRemoveEspCharsUpper(2);
					try { valorDocumento = memFile.getDoubleField(3); 
					} catch (Exception e) { valorDocumento = 0;} 
				}
				if (achouData == true) {
					dataMovimento = dataExtrato;
					dataLote	  = getCampoDate(dataMovimento, "", "yyyy-MM");
				} 
			
				// if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("EXTRATO DE:")) {
					// nomePortador = memFile.getStringFieldRemoveEspCharsUpper(1);
					// continue;
				// }
				
			
			   
				if (valorDocumento > 0)  debitoCredito = "EXTRATO-CREDITO";
				if (valorDocumento < 0)  debitoCredito = "EXTRATO-DEBITO";
			
				valorDocumento = Math.abs(valorDocumento);
				// logger.logInfo("dataMOvimento - > " + dataMovimento + " |valorDocumento -> " + valorDocumento + " |achouData -> " + achouData + " |no -> " + nomeOrigem);
			
				cont++;
				
				extrato.setCodEmpresa(codEmpresa);
				// logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
				extrato.setDataMovimento(dataMovimento);
				// logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
				extrato.setNomePortador(nomePortador);
				// logger.logInfo("GET NP = "+extrato.getNomePortador());
				extrato.setValorDocumento(valorDocumento);
				// logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
				extrato.setDebitoCredito(debitoCredito);
				// logger.logInfo("GET DC = "+extrato.getDebitoCredito());
				extrato.setTipoLancamento(tipoLancamento);
				// logger.logInfo("GET TL = "+extrato.getTipoLancamento());
				
				extrato.setChave(cont);
			  
				if (dataMovimento.equals("")) continue;
				if (valorDocumento == 0) continue;
				
				// if (nomeOrigem.equals("TOTAL") && nomeOrigemAnterior.equals("")) continue;
				
				
				
				if (nomeOrigem.startsWith("SALDO") && !nomeOrigem.startsWith("SALDO DEV")) continue;
				if (complemento02.startsWith("SALDO") && !complemento02.startsWith("SALDO DEV")) continue;
				
				// if (!nomeOrigemAnterior.equals("")) {
					// complemento02      = nomeOrigem;
					// if (!nomeOrigemAnterior.contains(complemento02) || nomeOrigemAnterior.contains("TED INTERNET")) nomeOrigem = nomeOrigemAnterior + " " + complemento02;
					// else if (nomeOrigemAnterior.contains(complemento02)) nomeOrigem = nomeOrigemAnterior;
					// nomeOrigemAnterior = "";
				// }
				 
				// nomeOrigem    = nomeOrigem.replaceAll("RECEBIMENTO FORNECEDOR","RECEBIMENTO FORNECEDOR ");
				// complemento02 = complemento02.replaceAll("RECEBIMENTO FORNECEDOR","RECEBIMENTO FORNECEDOR ");
				
				// if(nomeOrigem.contains("CHEQUE") && nomeOrigem.contains("COMPENSADO")){
					// if (dataExtrato.equals("")) {
						// complemento02  = memFile.getStringFieldRemoveEspCharsUpper(1);
					// }
					// else {
						// complemento02  = memFile.getStringFieldRemoveEspCharsUpper(2);
					// }
				// }
			}
			
			if(nomeOrigem.trim().matches("^\\d{7}-\\d{1}$")) continue; // gui -> ignorar lançamento na linha do portador;
			  // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            
			
			// logger.logInfo("NORG " + nomeOrigem + " | " + complemento02 + " | " + quebraFolha + " | " + quebraFolha2 + " | " + umCampo);
			// logger.logInfo("TipoPadrao " + tipoPadrao + " |cp02 " + complemento02 + " |nP " + nomePortador+ " |LIN "+line);
			// logger.logInfo("LINHA AQ " + valorDocumento + " | " + line);

            // Inserir caso Chave nao encontrada.
			
 			// logger.logInfo("LOG CAMPOS - NOME ORIGEM - " + nomeOrigem);
			// logger.logInfo("LOG CAMPOS - VALOR - " + valorDocumento);
			// logger.logInfo("LOG CAMPOS - DATA - " + dataMovimento);
			
			//#2312-024394 - Leal - Validacao feita dentro do read pois era preciso enviar o documento apenas para essa empresa
			// O documento era enviado atraves do complemento02, com essa alteracao agora e enviado no campo DOCUMENTO do banco
			
			if(!nomeContabilidade.toUpperCase().contains("SYSTEMA") && !nomeEmpresa.toUpperCase().contains("CAMFPRESTACAO")){
				documentoAux = null;
			}
			
			extrato.setDocumento(documento);
			// logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
			extrato.setNomeOrigem(nomeOrigem);
			// logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
			extrato.setLote(nomeArquivo.toUpperCase());
			// logger.logInfo("GET LOTE = "+extrato.getLote());
			extrato.setComplemento02(complemento02);
			// logger.logInfo("GET CP02 = "+extrato.getComplemento02());
			
			try{
				jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
			}catch(Exception e){
				logger.logError("Erro extrato abc" + e.getMessage());
			}
			

			
        } catch (Exception ex) {
        }
    }
    return true;
}
			
//JOGAR METODO AQ

public boolean readExtratoBradesco3PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
	JSONObject extratoEmpresa = new JSONObject();

	//logger.logInfo("ENTROU READ BRADESCO 3");
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String tipoLancamento    = "";
    String tipoPlanilha      = "";
    String nomeEmpresa	     = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
	int idataMovimento	= 0;
	int inomeOrigem		= 1;
	int idocumento      = 2;
	int ivalorDocumento	= 3;

    if(jDados.has("CODEMPRESA"))   codEmpresa   	  = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  	  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO"))  tipoLancamento  = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("NOMEEMPRESA"))  nomeEmpresa		  = jDados.optString("NOMEEMPRESA");
    if(jDados.has("TIPOPLANILHA"))  tipoPlanilha	  = jDados.optString("TIPOPLANILHA");
	
	boolean naoLeMais = false;

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
		// logger.logInfo("LINHAAAAAA " + line);
		
		ivalorDocumento = memFile.getFieldsSize()-2;
		inomeOrigem = memFile.getFieldsSize()-3;
		
            try {

				try{
					dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
				}catch(Exception e){
					logger.logInfo("ERRO AO CAPTURAR DATA");
				}

				if(dataMovimento.equals("")) continue;

				try{
					valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));
				}catch(Exception e){
					valorDocumento = 0;
					logger.logInfo("ERRO AO CAPTURAR VALOR");
				}

				if(valorDocumento == 0) continue;

				nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(1);
				documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);

				debitoCredito = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-") ? "EXTRATO-DEBITO" : "EXTRATO-CREDITO";

				// logger.logInfo("DOCUMENTO -> " + documento);
				// logger.logInfo("NOME ORIGEM -> " + nomeOrigem);
				// logger.logInfo("VALOR -> " + valorDocumento);
				// logger.logInfo("DEB/CRED -> " + debitoCredito);
				// logger.logInfo("DATA -> " + dataMovimento);
				
				extrato = new ExtratoModel();
			
				// logger.logInfo("CHEGOU = "+extrato.getChave());
							
				extrato.setCodEmpresa(codEmpresa);
				// logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
				extrato.setDataMovimento(dataMovimento);
				// logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
				extrato.setDocumento(documento);
				// logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
				extrato.setNomePortador(nomePortador);
				// logger.logInfo("GET NP = "+extrato.getNomePortador());
				extrato.setNomeOrigem(nomeOrigem);
				// logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
				extrato.setLote(nomeArquivo.toUpperCase());
				// logger.logInfo("GET LOTE = "+extrato.getLote());
				extrato.setComplemento02(complemento02);
				// logger.logInfo("GET CP02 = "+extrato.getComplemento02());
				extrato.setValorDocumento(valorDocumento);
				// logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
				extrato.setDebitoCredito(debitoCredito);
				// logger.logInfo("GET DC = "+extrato.getDebitoCredito());
				extrato.setTipoLancamento(tipoLancamento);
				// logger.logInfo("GET TL = "+extrato.getTipoLancamento());
				extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
				// logger.logDebug("GET CHAVE = "+extrato.getChave());
				
				try{
					jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
				}catch(Exception e){
					logger.logError("Erro extrato abc" + e.getMessage());
				}
				
				
            } catch (Exception ex) {
				logger.logInfo("ERRO AO TENTAR LER BRADESCO 3");
            }
        
    }
    return true;
}


/*#############################################@ EXTRATO-CEF-HTML @##############################################*/
public boolean readExtratoCEFHtml(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

	//logger.logInfo("Caixa HTML");

    JSONObject extratoEmpresa = new JSONObject();
	
	Extrato jdbcExtrato = new Extrato();
	ExtratoModel extrato = null;

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataString        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	boolean hasNewChave = false; 
    if(jDados.has("HASNEWCHAVE"))  hasNewChave  = jDados.optBoolean("HASNEWCHAVE"); 
    String tipoLancamento    = "";

	String tipoExtrato	 	 = "001";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais        = true;
	int cont	= 0; //Contador para definir os campos do extrato.

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
	if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

			if(line.contains("VIA INTERNET")) {
				tipoExtrato = "002";
			}

			if(tipoExtrato.equals("001")){

				//logger.logInfo("Line i caixa -> "+line);
				if(line.contains("<TD>") && line.contains("CONTA:")){//termo usado para validar a linha anterior a captura do nomePortador
					naoLeMais = false;
					continue;
				}
				//Sempre que encontrar este termo na class CSS, será inicado a leitura de um lançamento e portando o contador é zerado
				if(line.contains("IMPRESSAO_SALVAR") && line.contains("<TR")){
					naoLeMais = false;
					cont = 0;
					continue;
				}

				if(naoLeMais) continue;

				if(nomePortador.equals("")){
					nomePortador = cutString(line, line.lastIndexOf("|")-1, "</TD>");
					naoLeMais = true;
					continue;
				}
				if(line.contains("<TD")) cont++;

				if(cont == 1){//contador 1 é para ler a Data.
					dataString = cutString(line, line.indexOf(">"), "</TD>");
					if (!dataString.equals("")) {
						String dataMovimentoAux	  = getCampoDate(dataString);
						if (dataMovimentoAux.contains("/")) {
							dataMovimento     = getCampoDate(dataString);
							dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");

						}
						if (!dataString.equals("") && dataMovimento.equals("")) {
							if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
								String pattern = "";
								if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
									if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
										pattern = "yyyy-MM-dd hh:mm:ss";
									} else {
										pattern = "yyyy-MM-dd";
									}
									dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
								} else {
									try {
										pattern = "ddddd";
										dataString = cutString(dataString, 0, 5);
										Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
										int datanum = Integer.parseInt(dataString);
										Calendar calSerial = Calendar.getInstance();
										calSerial.setTime(dt);
										calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
										dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
									} catch (Exception dt2) {dataMovimento = "";}
								}
								if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
							}
						}
					}

					if(dataMovimento.equals("")){
						naoLeMais = true;
						continue;
					}
				}

				if(cont == 2){//contador 2 é para ler o documento NF
					documento = cutString(line, line.indexOf(">"), "</TD>");
					complemento02 = documento;
				}

				if(cont == 3){//contador 3 é para ler o histórico
					nomeOrigem = cutString(line, line.indexOf(">"), "</TD>");
				}

				valorDocumento  = 0;

				if(cont == 4){//contador 4 é para ler o valor
					strValorDocumento = cutString(line, line.indexOf(">"), "</TD>");
					if(strValorDocumento.contains("D")) debitoCredito = "EXTRATO-DEBITO";
					if(strValorDocumento.contains("C")) debitoCredito = "EXTRATO-CREDITO";
					strValorDocumento = strValorDocumento.replace("C", "").replace("D", "").replace(".", "").replace(",", ".").trim();
					try{
						valorDocumento = Double.parseDouble(strValorDocumento);
					}catch(Exception vlrd){
						valorDocumento = 0;
					}
				}

			}

            //2312-025426
			if(tipoExtrato.contains("002")){

				if(line.contains("AGANCIA:") || line.contains("AGENCIA:")) nomePortador = line.replaceAll("AGANCIA", "AGENCIA");
				if(line.contains("PRODUTO:")) nomePortador += " "+line;
				if(line.contains("CONTA:")) nomePortador += " "+line;

				if(line.contains("<TR")){
					naoLeMais = false;
					cont = 0;
					continue;
				}

                if(naoLeMais) continue;

				if(line.contains("<TD")) cont++;

				if(cont == 2){
					dataString = cutString(line, line.indexOf(">"), "</TD>");

                    dataMovimento = getCampoDate(dataString);
                    dataLote = getCampoDate(dataMovimento,"","yyyy-MM");

					if (!dataString.equals("") && dataMovimento.equals("")) {
                        if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
                            String pattern = "";
                            if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
                                if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
                                    pattern = "yyyy-MM-dd hh:mm:ss";
                                } else {
                                    pattern = "yyyy-MM-dd";
                                }
                                dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
                            } else {
                                try {
                                    pattern = "ddddd";
                                    dataString = cutString(dataString, 0, 5);
                                    Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
                                    int datanum = Integer.parseInt(dataString);
                                    Calendar calSerial = Calendar.getInstance();
                                    calSerial.setTime(dt);
                                    calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
                                    dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
                                } catch (Exception dt2) {dataMovimento = "";}
                            }
                            if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                        }
                    }

                       if(dataMovimento.equals("")){
                           naoLeMais = true;
                           continue;
                       }
				}

				if(cont == 3){
					documento = cutString(line, line.indexOf(">"), "</TD>");
				}

				if(cont == 4){
					nomeOrigem = cutString(line, line.indexOf(">"), "</TD>");
				}

				if(cont > 5) continue;

				valorDocumento  = 0;

				if(cont == 5){
					strValorDocumento = cutString(line, line.indexOf(">"), "</TD>");

					if(strValorDocumento.contains("-")) debitoCredito = "EXTRATO-DEBITO";
					if(!strValorDocumento.contains("-")) debitoCredito = "EXTRATO-CREDITO";

                    //Feito dessa maneira pq algumas vezes o cutString corta o - junto, dai os pagamentos apareciam como recebimentos
					if(line.replaceAll(" ", "").contains("-0") || line.replaceAll(" ", "").contains("-1") || line.replaceAll(" ", "").contains("-2") ||
				    line.replaceAll(" ", "").contains("-3") || line.replaceAll(" ", "").contains("-4") || line.replaceAll(" ", "").contains("-5") || line.replaceAll(" ", "").contains("-6") ||
					line.replaceAll(" ", "").contains("-7") || line.replaceAll(" ", "").contains("-8") || line.replaceAll(" ", "").contains("-9")) {
					    debitoCredito = "EXTRATO-DEBITO";
				    }

					try{
						valorDocumento = Double.parseDouble(strValorDocumento);
					}catch(Exception vlrd){
						valorDocumento = 0;
					}
				}

				if(nomeOrigem.contains("SALDO DIA")) continue;
			}

            if (valorDocumento == 0) continue;

            extrato = new ExtratoModel();
						
			extrato.setCodEmpresa(codEmpresa);
			//logger.logInfo("GET COD EMPRESA = "+extrato.getCodEmpresa());
			extrato.setDataMovimento(dataMovimento);
			//logger.logInfo("GET DATA EMPRESA = "+extrato.getDataMovimento());
			extrato.setDocumento(documento);
			//logger.logInfo("GET DOC EMPRESA = "+extrato.getDocumento());
			extrato.setNomePortador(nomePortador);
			//logger.logInfo("GET NP = "+extrato.getNomePortador());
			extrato.setNomeOrigem(nomeOrigem);
			//logger.logInfo("GET NOME ORIGEM = "+extrato.getNomeOrigem());
			extrato.setLote(nomeArquivo.toUpperCase());
			//logger.logInfo("GET LOTE = "+extrato.getLote());
			extrato.setComplemento02(complemento02);
			//logger.logInfo("GET CP02 = "+extrato.getComplemento02());
			extrato.setValorDocumento(valorDocumento);
			//logger.logInfo("GET VALOR = "+extrato.getValorDocumento());
			extrato.setDebitoCredito(debitoCredito);
			//logger.logInfo("GET DC = "+extrato.getDebitoCredito());
			extrato.setTipoLancamento(tipoLancamento);
			//logger.logInfo("GET TL = "+extrato.getTipoLancamento());
			extrato.setChave(memFile.getCurrentIndex());//ContLinhaExtrato
			logger.logDebug("GET CHAVE = "+extrato.getChave());
			
			try{
				jdbcExtrato.insereIOExtrato(extrato, dbIOCont, logger);				
			}catch(Exception e){
				logger.logError("Erro extrato abc" + e.getMessage());
			}
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato CEF Excel", readExtratoException);
        }
    }
    return true;
}

